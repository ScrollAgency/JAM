name: Test & Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          if [ -d "./tests" ]; then
            cd tests
            npm ci
          else
            echo "Le répertoire 'tests' n'existe pas."
            exit 1
          fi

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Create archive of node_modules
        run: |
          tar -czf node_modules.tar.gz ./tests/node_modules

      - name: Upload node_modules as artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-modules
          path: node_modules.tar.gz

  jest-tests:
    name: Jest Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore node_modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Extract node_modules
        run: |
          tar -xzf node_modules.tar.gz -C ./tests

      - name: Run Jest tests
        run: |
          cd tests
          npm test

      - name: Generate Jest Report
        run: |
          cd tests
          npm test -- --coverage --outputFile=jest-report.json

      - name: Upload Jest Report
        uses: actions/upload-artifact@v4
        with:
          name: jest-report
          path: tests/jest-report.json

  playwright-tests:
    name: Playwright Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore node_modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Extract node_modules
        run: |
          tar -xzf node_modules.tar.gz -C ./tests

      - name: Install Playwright Browsers
        run: |
          cd tests
          npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          cd tests
          npx playwright test

      - name: Generate Playwright Report
        run: |
          cd tests
          npx playwright test --reporter=json

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: tests/playwright-report.json

  deploy:
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: [jest-tests, playwright-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure npm for private package
        run: echo -e "@ScrollAgency:registry=https://npm.pkg.github.com/\n//npm.pkg.github.com/:_authToken=${{ secrets.PLASMICLIBRARY_TOKEN }}" > ~/.npmrc

      - name: Install dependencies
        run: npm install --legacy-peer-deps
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PLASMICLIBRARY_TOKEN }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts || { echo "SSH keyscan failed (Vérifier les secrets github)"; exit 1; }

      - name: Get current date and set app name
        run: |
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "myapp=jam" >> $GITHUB_ENV
          echo "environnement=staging" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          context: ./
          file: ./${{ env.environnement }}/Dockerfile
          build-args: |
            NODE_AUTH_TOKEN=${{ secrets.PLASMICLIBRARY_TOKEN }}
            PLASMIC_PROJECT_ID=${{ secrets.PLASMIC_PROJECT_ID }}
            PLASMIC_TOKEN=${{ secrets.PLASMIC_TOKEN }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=${{ secrets.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}:${{ env.environnement }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}:${{ github.sha }}
          labels: |
            maintainer=${{ secrets.DOCKERHUB_USERNAME }}
            version=${{ github.sha }}
            build-date=${{ env.date }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.myapp }}:cache
          cache-to: type=inline

      - name: Login to Docker Hub on Staging Server
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
          "
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to Staging
        run: |
          ssh -o StrictHostKeyChecking=no -T ubuntu@${{ secrets.SERVER_IP }} "
            cd ${{ env.myapp }}/${{ env.environnement }} &&
            docker compose -f docker-compose.${{ env.environnement }}.yml pull &&
            docker compose -f docker-compose.${{ env.environnement }}.yml up -d
          "

      - name: Clean up Docker on staging Server
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "
            echo 'Starting Docker cleanup...' &&
            echo 'Before cleanup:' &&
            df -h &&
            docker system prune -a --force &&
            docker image prune -a --force &&
            docker volume prune --force &&
            docker network prune --force &&
            echo 'After cleanup:' &&
            df -h &&
            echo 'Docker cleanup completed successfully.'
          "

    concurrency:
      group: docker-build-${{ github.ref }}
      cancel-in-progress: true
