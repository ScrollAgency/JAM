// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: ZGZ6sFcj1aLn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { TextInput } from "../../TextInput"; // plasmic-import: vyWUomJMQins/codeComponent
import Checkbox from "../../Checkbox"; // plasmic-import: _vJ0pkaxrL1M/component
import { CheckBox } from "../../CheckBox"; // plasmic-import: 6TZuO3lDLJXU/codeComponent
import { Button } from "../../Button"; // plasmic-import: NvY5LE-Ew6FA/codeComponent
import { TextLink } from "../../TextLink"; // plasmic-import: uTXJO5H_7wRR/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicConnexion.module.css"; // plasmic-import: ZGZ6sFcj1aLn/css

import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import DividerLineIcon from "./icons/PlasmicIcon__DividerLine"; // plasmic-import: VvHpOw2n2MiA/icon

createPlasmicElementProxy;

export type PlasmicConnexion__VariantMembers = {};
export type PlasmicConnexion__VariantsArgs = {};
type VariantPropType = keyof PlasmicConnexion__VariantsArgs;
export const PlasmicConnexion__VariantProps = new Array<VariantPropType>();

export type PlasmicConnexion__ArgsType = {};
type ArgPropType = keyof PlasmicConnexion__ArgsType;
export const PlasmicConnexion__ArgProps = new Array<ArgPropType>();

export type PlasmicConnexion__OverridesType = {
  connexion?: Flex__<"div">;
  signIn?: Flex__<"div">;
  imageWrapper?: Flex__<"div">;
  logoWrapper?: Flex__<"div">;
  baseline?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  formWrapper?: Flex__<"div">;
  title?: Flex__<"div">;
  heading?: Flex__<"div">;
  form?: Flex__<"div">;
  inputWrapper?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
  textInput5?: Flex__<typeof TextInput>;
  text?: Flex__<"div">;
  tableCell?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  checkBox?: Flex__<typeof CheckBox>;
  buttonWrapper?: Flex__<"div">;
  dividerWrapper?: Flex__<"div">;
  text3?: Flex__<"div">;
  buttonWrapper2?: Flex__<"div">;
  linkWrapper?: Flex__<"div">;
  text4?: Flex__<"div">;
  textLink2?: Flex__<typeof TextLink>;
};

export interface DefaultConnexionProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConnexion__RenderFunc(props: {
  variants: PlasmicConnexion__VariantsArgs;
  args: PlasmicConnexion__ArgsType;
  overrides: PlasmicConnexion__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicConnexion.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicConnexion.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicConnexion.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"connexion"}
          data-plasmic-override={overrides.connexion}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.connexion
          )}
        >
          <div
            data-plasmic-name={"signIn"}
            data-plasmic-override={overrides.signIn}
            className={classNames(projectcss.all, sty.signIn)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"imageWrapper"}
              data-plasmic-override={overrides.imageWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.imageWrapper)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"logoWrapper"}
                data-plasmic-override={overrides.logoWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.logoWrapper)}
              >
                <PictogramIcon
                  className={classNames(projectcss.all, sty.svg__hs2Bq)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"baseline"}
                  data-plasmic-override={overrides.baseline}
                  className={classNames(projectcss.all, sty.baseline)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lTs63
                      )}
                    >
                      {"JOB"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame2"}
                    data-plasmic-override={overrides.frame2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cv3QR
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame3"}
                    data-plasmic-override={overrides.frame3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rOwCs
                      )}
                    >
                      {"ME"}
                    </div>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"formWrapper"}
              data-plasmic-override={overrides.formWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.formWrapper)}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div
                  data-plasmic-name={"heading"}
                  data-plasmic-override={overrides.heading}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.heading
                  )}
                >
                  {"Connexion"}
                </div>
              </div>
              {(() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.form)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"inputWrapper"}
                    data-plasmic-override={overrides.inputWrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.inputWrapper)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput3"}
                      data-plasmic-override={overrides.textInput3}
                      className={classNames("__wab_instance", sty.textInput3)}
                      prefixedText={``}
                      type={"default"}
                    />

                    <TextInput
                      data-plasmic-name={"textInput5"}
                      data-plasmic-override={overrides.textInput5}
                      className={classNames("__wab_instance", sty.textInput5)}
                      prefixedText={``}
                      type={"default"}
                    />

                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Mot de passe oubli\u00e9?"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"tableCell"}
                    data-plasmic-override={overrides.tableCell}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.tableCell)}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      className={classNames("__wab_instance", sty.checkbox)}
                      label={
                        <React.Fragment>
                          <CheckBox
                            data-plasmic-name={"checkBox"}
                            data-plasmic-override={overrides.checkBox}
                            className={classNames(
                              "__wab_instance",
                              sty.checkBox
                            )}
                            type={"Checkbox"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rCvV
                            )}
                          >
                            {"Se souvenir de moi"}
                          </div>
                        </React.Fragment>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "checkbox",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    />
                  </Stack__>
                  <Button
                    className={classNames("__wab_instance", sty.button__hYc9O)}
                    icon={"none"}
                    iconImage={
                      "/plasmic/jam_v_jean_loader/images/iconSocialsGoogle.svg"
                    }
                    label={"CONNEXION"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"buttonWrapper"}
                    data-plasmic-override={overrides.buttonWrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttonWrapper)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"dividerWrapper"}
                      data-plasmic-override={overrides.dividerWrapper}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.dividerWrapper)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tS3Wq
                        )}
                      >
                        <DividerLineIcon
                          className={classNames(projectcss.all, sty.svg___0RuW)}
                          role={"img"}
                        />
                      </div>
                      <div
                        data-plasmic-name={"text3"}
                        data-plasmic-override={overrides.text3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text3
                        )}
                      >
                        {"OU"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6HbP2
                        )}
                      >
                        <DividerLineIcon
                          className={classNames(projectcss.all, sty.svg__pExzs)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"buttonWrapper2"}
                      data-plasmic-override={overrides.buttonWrapper2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.buttonWrapper2)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__aQcta
                        )}
                        icon={"start"}
                        iconImage={
                          "/plasmic/jam_v_jean_loader/images/iconSocialsGoogle.svg"
                        }
                        label={"GOOGLE"}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__j2XQ
                        )}
                        icon={"start"}
                        iconImage={
                          "/plasmic/jam_v_jean_loader/images/iconSocialsApple.svg"
                        }
                        label={"APPLE"}
                      />
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"linkWrapper"}
                    data-plasmic-override={overrides.linkWrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.linkWrapper)}
                  >
                    <div
                      data-plasmic-name={"text4"}
                      data-plasmic-override={overrides.text4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text4
                      )}
                    >
                      {"Pas encore de compte ?"}
                    </div>
                    <TextLink
                      data-plasmic-name={"textLink2"}
                      data-plasmic-override={overrides.textLink2}
                      className={classNames("__wab_instance", sty.textLink2)}
                      icon={"None"}
                      label={"inscription"}
                      redirect={"/register"}
                      size={"Small"}
                      uppercase={true}
                    />
                  </Stack__>
                </Stack__>
              ) : null}
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  connexion: [
    "connexion",
    "signIn",
    "imageWrapper",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "title",
    "heading",
    "form",
    "inputWrapper",
    "textInput3",
    "textInput5",
    "text",
    "tableCell",
    "checkbox",
    "checkBox",
    "buttonWrapper",
    "dividerWrapper",
    "text3",
    "buttonWrapper2",
    "linkWrapper",
    "text4",
    "textLink2"
  ],
  signIn: [
    "signIn",
    "imageWrapper",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "title",
    "heading",
    "form",
    "inputWrapper",
    "textInput3",
    "textInput5",
    "text",
    "tableCell",
    "checkbox",
    "checkBox",
    "buttonWrapper",
    "dividerWrapper",
    "text3",
    "buttonWrapper2",
    "linkWrapper",
    "text4",
    "textLink2"
  ],
  imageWrapper: [
    "imageWrapper",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3"
  ],
  logoWrapper: ["logoWrapper", "baseline", "frame", "frame2", "frame3"],
  baseline: ["baseline", "frame", "frame2", "frame3"],
  frame: ["frame"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  formWrapper: [
    "formWrapper",
    "title",
    "heading",
    "form",
    "inputWrapper",
    "textInput3",
    "textInput5",
    "text",
    "tableCell",
    "checkbox",
    "checkBox",
    "buttonWrapper",
    "dividerWrapper",
    "text3",
    "buttonWrapper2",
    "linkWrapper",
    "text4",
    "textLink2"
  ],
  title: ["title", "heading"],
  heading: ["heading"],
  form: [
    "form",
    "inputWrapper",
    "textInput3",
    "textInput5",
    "text",
    "tableCell",
    "checkbox",
    "checkBox",
    "buttonWrapper",
    "dividerWrapper",
    "text3",
    "buttonWrapper2",
    "linkWrapper",
    "text4",
    "textLink2"
  ],
  inputWrapper: ["inputWrapper", "textInput3", "textInput5", "text"],
  textInput3: ["textInput3"],
  textInput5: ["textInput5"],
  text: ["text"],
  tableCell: ["tableCell", "checkbox", "checkBox"],
  checkbox: ["checkbox", "checkBox"],
  checkBox: ["checkBox"],
  buttonWrapper: ["buttonWrapper", "dividerWrapper", "text3", "buttonWrapper2"],
  dividerWrapper: ["dividerWrapper", "text3"],
  text3: ["text3"],
  buttonWrapper2: ["buttonWrapper2"],
  linkWrapper: ["linkWrapper", "text4", "textLink2"],
  text4: ["text4"],
  textLink2: ["textLink2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  connexion: "div";
  signIn: "div";
  imageWrapper: "div";
  logoWrapper: "div";
  baseline: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  formWrapper: "div";
  title: "div";
  heading: "div";
  form: "div";
  inputWrapper: "div";
  textInput3: typeof TextInput;
  textInput5: typeof TextInput;
  text: "div";
  tableCell: "div";
  checkbox: typeof Checkbox;
  checkBox: typeof CheckBox;
  buttonWrapper: "div";
  dividerWrapper: "div";
  text3: "div";
  buttonWrapper2: "div";
  linkWrapper: "div";
  text4: "div";
  textLink2: typeof TextLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConnexion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConnexion__VariantsArgs;
    args?: PlasmicConnexion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConnexion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicConnexion__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConnexion__ArgProps,
          internalVariantPropNames: PlasmicConnexion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConnexion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "connexion") {
    func.displayName = "PlasmicConnexion";
  } else {
    func.displayName = `PlasmicConnexion.${nodeName}`;
  }
  return func;
}

export const PlasmicConnexion = Object.assign(
  // Top-level PlasmicConnexion renders the root element
  makeNodeComponent("connexion"),
  {
    // Helper components rendering sub-elements
    signIn: makeNodeComponent("signIn"),
    imageWrapper: makeNodeComponent("imageWrapper"),
    logoWrapper: makeNodeComponent("logoWrapper"),
    baseline: makeNodeComponent("baseline"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    formWrapper: makeNodeComponent("formWrapper"),
    title: makeNodeComponent("title"),
    heading: makeNodeComponent("heading"),
    form: makeNodeComponent("form"),
    inputWrapper: makeNodeComponent("inputWrapper"),
    textInput3: makeNodeComponent("textInput3"),
    textInput5: makeNodeComponent("textInput5"),
    text: makeNodeComponent("text"),
    tableCell: makeNodeComponent("tableCell"),
    checkbox: makeNodeComponent("checkbox"),
    checkBox: makeNodeComponent("checkBox"),
    buttonWrapper: makeNodeComponent("buttonWrapper"),
    dividerWrapper: makeNodeComponent("dividerWrapper"),
    text3: makeNodeComponent("text3"),
    buttonWrapper2: makeNodeComponent("buttonWrapper2"),
    linkWrapper: makeNodeComponent("linkWrapper"),
    text4: makeNodeComponent("text4"),
    textLink2: makeNodeComponent("textLink2"),

    // Metadata about props expected for PlasmicConnexion
    internalVariantProps: PlasmicConnexion__VariantProps,
    internalArgProps: PlasmicConnexion__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Connexion",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConnexion;
/* prettier-ignore-end */
