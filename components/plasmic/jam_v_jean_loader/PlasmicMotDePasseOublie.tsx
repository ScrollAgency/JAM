// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: nZQjprv2Kf2z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { TextInput } from "../../TextInput"; // plasmic-import: vyWUomJMQins/codeComponent
import { Button } from "../../Button"; // plasmic-import: NvY5LE-Ew6FA/codeComponent

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicMotDePasseOublie.module.css"; // plasmic-import: nZQjprv2Kf2z/css

import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicMotDePasseOublie__VariantMembers = {};
export type PlasmicMotDePasseOublie__VariantsArgs = {};
type VariantPropType = keyof PlasmicMotDePasseOublie__VariantsArgs;
export const PlasmicMotDePasseOublie__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMotDePasseOublie__ArgsType = {};
type ArgPropType = keyof PlasmicMotDePasseOublie__ArgsType;
export const PlasmicMotDePasseOublie__ArgProps = new Array<ArgPropType>();

export type PlasmicMotDePasseOublie__OverridesType = {
  root?: Flex__<"div">;
  passwordForgotten?: Flex__<"div">;
  imageWrapper?: Flex__<"div">;
  logoWrapper?: Flex__<"div">;
  svg?: Flex__<"svg">;
  baseline?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  formWrapper?: Flex__<"div">;
  title?: Flex__<"div">;
  heading?: Flex__<"div">;
  text?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
  form?: Flex__<"div">;
  buttonWrapper?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  linkWrapper?: Flex__<"div">;
  textLink?: Flex__<"div">;
  textLinkBase?: Flex__<"div">;
  text2?: Flex__<"div">;
};

export interface DefaultMotDePasseOublieProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMotDePasseOublie__RenderFunc(props: {
  variants: PlasmicMotDePasseOublie__VariantsArgs;
  args: PlasmicMotDePasseOublie__ArgsType;
  overrides: PlasmicMotDePasseOublie__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMotDePasseOublie.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMotDePasseOublie.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMotDePasseOublie.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"passwordForgotten"}
            data-plasmic-override={overrides.passwordForgotten}
            className={classNames(projectcss.all, sty.passwordForgotten)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"imageWrapper"}
              data-plasmic-override={overrides.imageWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.imageWrapper)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"logoWrapper"}
                data-plasmic-override={overrides.logoWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.logoWrapper)}
              >
                <PictogramIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"baseline"}
                  data-plasmic-override={overrides.baseline}
                  className={classNames(projectcss.all, sty.baseline)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pkAk1
                      )}
                    >
                      {"JOB"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame2"}
                    data-plasmic-override={overrides.frame2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rLkNu
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame3"}
                    data-plasmic-override={overrides.frame3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__k78Wz
                      )}
                    >
                      {"ME"}
                    </div>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"formWrapper"}
              data-plasmic-override={overrides.formWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.formWrapper)}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div
                  data-plasmic-name={"heading"}
                  data-plasmic-override={overrides.heading}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.heading
                  )}
                >
                  {"Mot de passe oubli\u00e9 ?"}
                </div>
              </div>
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {
                  "Pas de panique, nous allons vous envoyer un e-mail pour vous aider \u00e0 r\u00e9initialiser votre mot de passe."
                }
              </div>
              <TextInput
                data-plasmic-name={"textInput3"}
                data-plasmic-override={overrides.textInput3}
                className={classNames("__wab_instance", sty.textInput3)}
                prefixedText={``}
                type={"default"}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                hasGap={true}
                className={classNames(projectcss.all, sty.form)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"buttonWrapper"}
                  data-plasmic-override={overrides.buttonWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.buttonWrapper)}
                >
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    icon={"none"}
                    label={"R\u00c9INITIALISER"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"linkWrapper"}
                    data-plasmic-override={overrides.linkWrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.linkWrapper)}
                  >
                    <div
                      data-plasmic-name={"textLink"}
                      data-plasmic-override={overrides.textLink}
                      className={classNames(projectcss.all, sty.textLink)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"textLinkBase"}
                        data-plasmic-override={overrides.textLinkBase}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.textLinkBase)}
                      >
                        <div
                          data-plasmic-name={"text2"}
                          data-plasmic-override={overrides.text2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text2
                          )}
                        >
                          {"Retour"}
                        </div>
                      </Stack__>
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "passwordForgotten",
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "title",
    "heading",
    "text",
    "textInput3",
    "form",
    "buttonWrapper",
    "button",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  passwordForgotten: [
    "passwordForgotten",
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "title",
    "heading",
    "text",
    "textInput3",
    "form",
    "buttonWrapper",
    "button",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  imageWrapper: [
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3"
  ],
  logoWrapper: ["logoWrapper", "svg", "baseline", "frame", "frame2", "frame3"],
  svg: ["svg"],
  baseline: ["baseline", "frame", "frame2", "frame3"],
  frame: ["frame"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  formWrapper: [
    "formWrapper",
    "title",
    "heading",
    "text",
    "textInput3",
    "form",
    "buttonWrapper",
    "button",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  title: ["title", "heading"],
  heading: ["heading"],
  text: ["text"],
  textInput3: ["textInput3"],
  form: [
    "form",
    "buttonWrapper",
    "button",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  buttonWrapper: [
    "buttonWrapper",
    "button",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  button: ["button"],
  linkWrapper: ["linkWrapper", "textLink", "textLinkBase", "text2"],
  textLink: ["textLink", "textLinkBase", "text2"],
  textLinkBase: ["textLinkBase", "text2"],
  text2: ["text2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  passwordForgotten: "div";
  imageWrapper: "div";
  logoWrapper: "div";
  svg: "svg";
  baseline: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  formWrapper: "div";
  title: "div";
  heading: "div";
  text: "div";
  textInput3: typeof TextInput;
  form: "div";
  buttonWrapper: "div";
  button: typeof Button;
  linkWrapper: "div";
  textLink: "div";
  textLinkBase: "div";
  text2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMotDePasseOublie__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMotDePasseOublie__VariantsArgs;
    args?: PlasmicMotDePasseOublie__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMotDePasseOublie__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMotDePasseOublie__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMotDePasseOublie__ArgProps,
          internalVariantPropNames: PlasmicMotDePasseOublie__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMotDePasseOublie__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMotDePasseOublie";
  } else {
    func.displayName = `PlasmicMotDePasseOublie.${nodeName}`;
  }
  return func;
}

export const PlasmicMotDePasseOublie = Object.assign(
  // Top-level PlasmicMotDePasseOublie renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    passwordForgotten: makeNodeComponent("passwordForgotten"),
    imageWrapper: makeNodeComponent("imageWrapper"),
    logoWrapper: makeNodeComponent("logoWrapper"),
    svg: makeNodeComponent("svg"),
    baseline: makeNodeComponent("baseline"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    formWrapper: makeNodeComponent("formWrapper"),
    title: makeNodeComponent("title"),
    heading: makeNodeComponent("heading"),
    text: makeNodeComponent("text"),
    textInput3: makeNodeComponent("textInput3"),
    form: makeNodeComponent("form"),
    buttonWrapper: makeNodeComponent("buttonWrapper"),
    button: makeNodeComponent("button"),
    linkWrapper: makeNodeComponent("linkWrapper"),
    textLink: makeNodeComponent("textLink"),
    textLinkBase: makeNodeComponent("textLinkBase"),
    text2: makeNodeComponent("text2"),

    // Metadata about props expected for PlasmicMotDePasseOublie
    internalVariantProps: PlasmicMotDePasseOublie__VariantProps,
    internalArgProps: PlasmicMotDePasseOublie__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Mot de passe oublié",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMotDePasseOublie;
/* prettier-ignore-end */
