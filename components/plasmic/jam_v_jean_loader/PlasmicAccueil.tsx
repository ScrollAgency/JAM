// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: x8mEiwhu6Vco

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Button } from "../../Button"; // plasmic-import: NvY5LE-Ew6FA/codeComponent
import { JobCard } from "../../jobCard/JobCard"; // plasmic-import: epi6kICoBl8S/codeComponent
import { TextInput } from "../../TextInput"; // plasmic-import: vyWUomJMQins/codeComponent
import { Dropdown } from "../../DropDown"; // plasmic-import: nH3JopN08-ry/codeComponent
import { Option } from "../../Option"; // plasmic-import: MjV_affoGMMz/codeComponent
import { Map } from "../../Map"; // plasmic-import: 0X49CVAH3as3/codeComponent
import { Footerlink } from "../../Footerlink"; // plasmic-import: AsZg43QQ7RIK/codeComponent

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicAccueil.module.css"; // plasmic-import: x8mEiwhu6Vco/css

import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: EDrRfJFrGIzr/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: LqBLaSJNIw1R/icon
import PhCrossIcon from "./icons/PlasmicIcon__PhCross"; // plasmic-import: ZcuvSYn7hPwX/icon
import PhClockCountdownFillIcon from "./icons/PlasmicIcon__PhClockCountdownFill"; // plasmic-import: GhtgoozaYTSb/icon
import PhMapPinIcon from "./icons/PlasmicIcon__PhMapPin"; // plasmic-import: qK09a5jkZTuj/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: jLPpM-B7M1lJ/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: 1yz4nrcZZVJQ/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: YAEd8oE8Xk0Q/icon
import IconPhBriefcase2Icon from "./icons/PlasmicIcon__IconPhBriefcase2"; // plasmic-import: QT5tozis-7ZJ/icon
import IconPhFileText2Icon from "./icons/PlasmicIcon__IconPhFileText2"; // plasmic-import: 4u827eTIHJiM/icon
import IconPhClockCountdown2Icon from "./icons/PlasmicIcon__IconPhClockCountdown2"; // plasmic-import: MRdlkEBhDPlJ/icon
import IconPhClock2Icon from "./icons/PlasmicIcon__IconPhClock2"; // plasmic-import: 69zPnb8kkdBe/icon
import IconPhCoinsLight2Icon from "./icons/PlasmicIcon__IconPhCoinsLight2"; // plasmic-import: CXP7GcEs2WIt/icon
import LikeIconIcon from "./icons/PlasmicIcon__LikeIcon"; // plasmic-import: _YvBX6QjT3en/icon
import PhCaretDoubleLeftIcon from "./icons/PlasmicIcon__PhCaretDoubleLeft"; // plasmic-import: qQ7NvuNc52xX/icon
import Mail2Icon from "./icons/PlasmicIcon__Mail2"; // plasmic-import: rZP3MS1dOHIL/icon
import ZapIcon from "./icons/PlasmicIcon__Zap"; // plasmic-import: c9TD4NnDdoCa/icon
import BarChart2Icon from "./icons/PlasmicIcon__BarChart2"; // plasmic-import: 9Oxczg72Yias/icon
import SocialIcon2Icon from "./icons/PlasmicIcon__SocialIcon2"; // plasmic-import: 85_PHFbzbYbc/icon
import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: uW8IxWz2drGt/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: jg2ejGQewG0B/icon

createPlasmicElementProxy;

export type PlasmicAccueil__VariantMembers = {};
export type PlasmicAccueil__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccueil__VariantsArgs;
export const PlasmicAccueil__VariantProps = new Array<VariantPropType>();

export type PlasmicAccueil__ArgsType = {};
type ArgPropType = keyof PlasmicAccueil__ArgsType;
export const PlasmicAccueil__ArgProps = new Array<ArgPropType>();

export type PlasmicAccueil__OverridesType = {
  root?: Flex__<"div">;
  structureLp?: Flex__<"div">;
  nav?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame5?: Flex__<"div">;
  menuItems?: Flex__<"div">;
  frame1437254391?: Flex__<"div">;
  frame15?: Flex__<"div">;
  searchBar?: Flex__<"div">;
  frame12?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  inputLieu?: Flex__<typeof TextInput>;
  dropdown?: Flex__<typeof Dropdown>;
  dropdown3?: Flex__<typeof Dropdown>;
  frame14?: Flex__<"div">;
  frame13?: Flex__<"div">;
  dropdown4?: Flex__<typeof Dropdown>;
  dropdown5?: Flex__<typeof Dropdown>;
  dropdown8?: Flex__<typeof Dropdown>;
  dropdown9?: Flex__<typeof Dropdown>;
  dropdown6?: Flex__<typeof Dropdown>;
  frame7?: Flex__<"div">;
  loginMobile?: Flex__<"div">;
  frame8?: Flex__<"div">;
  frame10?: Flex__<"div">;
  scrollBar?: Flex__<"div">;
  mapPin?: Flex__<"div">;
  frame11?: Flex__<"div">;
  iconSize?: Flex__<"div">;
  mapPin2?: Flex__<"div">;
  frame16?: Flex__<"div">;
  iconSize2?: Flex__<"div">;
  phClockCountdownFill?: Flex__<"div">;
  mapPin3?: Flex__<"div">;
  frame17?: Flex__<"div">;
  iconSize3?: Flex__<"div">;
  phClockCountdownFill2?: Flex__<"div">;
  mapPin4?: Flex__<"div">;
  frame18?: Flex__<"div">;
  iconSize4?: Flex__<"div">;
  mapPin5?: Flex__<"div">;
  frame19?: Flex__<"div">;
  iconSize5?: Flex__<"div">;
  phClockCountdownFill3?: Flex__<"div">;
  map?: Flex__<typeof Map>;
  mapPin6?: Flex__<"div">;
  frame20?: Flex__<"div">;
  iconSize6?: Flex__<"div">;
  phClockCountdownFill4?: Flex__<"div">;
  mapPin7?: Flex__<"div">;
  frame21?: Flex__<"div">;
  iconSize7?: Flex__<"div">;
  buttonLastMin?: Flex__<"div">;
  text2?: Flex__<"div">;
  jobCard?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  companyLogo?: Flex__<"div">;
  rectangle183?: Flex__<"div">;
  frame1437254219?: Flex__<"div">;
  frame24?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame26?: Flex__<"div">;
  paris75?: Flex__<"div">;
  frame27?: Flex__<"div">;
  transportationTimeLine?: Flex__<"div">;
  transportationTime?: Flex__<"div">;
  transportationTime2?: Flex__<"div">;
  transportationTime3?: Flex__<"div">;
  transportationTime4?: Flex__<"div">;
  frame1437254218?: Flex__<"div">;
  badgeBase?: Flex__<"div">;
  text3?: Flex__<"div">;
  badgeBase2?: Flex__<"div">;
  text4?: Flex__<"div">;
  badgeBase3?: Flex__<"div">;
  text5?: Flex__<"div">;
  badgeBase4?: Flex__<"div">;
  text6?: Flex__<"div">;
  badgeBase5?: Flex__<"div">;
  text7?: Flex__<"div">;
  badgeBase6?: Flex__<"div">;
  text8?: Flex__<"div">;
  frame28?: Flex__<"div">;
  frame29?: Flex__<"div">;
  content?: Flex__<"div">;
  badgeGroup?: Flex__<"div">;
  message?: Flex__<"div">;
  trouvezUnJobNaJamaisEteAussiSimple?: Flex__<"div">;
  frame6?: Flex__<"div">;
  hero?: Flex__<"div">;
  benefices?: Flex__<"div">;
  container?: Flex__<"div">;
  content4?: Flex__<"div">;
  headingAndSupportingText?: Flex__<"div">;
  headingAndBadge?: Flex__<"div">;
  badgeGroup2?: Flex__<"div">;
  content2?: Flex__<"div">;
  message2?: Flex__<"div">;
  heading?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  container2?: Flex__<"div">;
  content3?: Flex__<"div">;
  featureText?: Flex__<"div">;
  featuredIcon?: Flex__<"div">;
  textAndSupportingText?: Flex__<"div">;
  text9?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  featureText2?: Flex__<"div">;
  featuredIcon2?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  text10?: Flex__<"div">;
  supportingText3?: Flex__<"div">;
  featureText3?: Flex__<"div">;
  featuredIcon3?: Flex__<"div">;
  textAndSupportingText3?: Flex__<"div">;
  text11?: Flex__<"div">;
  supportingText4?: Flex__<"div">;
  footer?: Flex__<"div">;
  container3?: Flex__<"div">;
  content5?: Flex__<"div">;
  column?: Flex__<"div">;
  logo?: Flex__<"div">;
  companyLogo2?: Flex__<"div">;
  brand?: Flex__<"div">;
  socials?: Flex__<"div">;
  socialIcon?: Flex__<"div">;
  socialIcon2?: Flex__<"div">;
  footerLinksContainer2?: Flex__<"div">;
  footerLinksColumn3?: Flex__<"div">;
  heading4?: Flex__<"div">;
  footerLinks3?: Flex__<"div">;
  footerLink9?: Flex__<typeof Footerlink>;
  footerLink10?: Flex__<typeof Footerlink>;
  footerLink11?: Flex__<typeof Footerlink>;
  footerLink12?: Flex__<typeof Footerlink>;
  footerLink13?: Flex__<typeof Footerlink>;
  footerLinksColumn4?: Flex__<"div">;
  heading5?: Flex__<"div">;
  footerLinks4?: Flex__<"div">;
  footerLink14?: Flex__<typeof Footerlink>;
  footerLink15?: Flex__<typeof Footerlink>;
  footerLink16?: Flex__<typeof Footerlink>;
  container4?: Flex__<"div">;
  divider?: Flex__<"div">;
  content6?: Flex__<"div">;
  footerText?: Flex__<"div">;
  textbox?: Flex__<typeof TextInput>;
};

export interface DefaultAccueilProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccueil__RenderFunc(props: {
  variants: PlasmicAccueil__VariantsArgs;
  args: PlasmicAccueil__ArgsType;
  overrides: PlasmicAccueil__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "lieu",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"structureLp"}
            data-plasmic-override={overrides.structureLp}
            className={classNames(projectcss.all, sty.structureLp)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              hasGap={true}
              className={classNames(projectcss.all, sty.nav)}
            >
              <div
                data-plasmic-name={"frame"}
                data-plasmic-override={overrides.frame}
                className={classNames(projectcss.all, sty.frame)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__bpAp5)}>
                  <Group2Icon
                    className={classNames(projectcss.all, sty.svg__gIPn5)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"frame2"}
                  data-plasmic-override={overrides.frame2}
                  className={classNames(projectcss.all, sty.frame2)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame3"}
                    data-plasmic-override={overrides.frame3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ubshi
                      )}
                    >
                      {"JOB"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame4"}
                    data-plasmic-override={overrides.frame4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zQb3U
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame5"}
                    data-plasmic-override={overrides.frame5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___56AkE
                      )}
                    >
                      {"ME"}
                    </div>
                  </Stack__>
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"menuItems"}
                data-plasmic-override={overrides.menuItems}
                hasGap={true}
                className={classNames(projectcss.all, sty.menuItems)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vnokG
                  )}
                >
                  {"Services"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k0Yf5
                  )}
                >
                  {"Offres"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mfuuY
                  )}
                >
                  {"Avis clients"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cAgp9
                  )}
                >
                  {"FAQ"}
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__zjQXn)}>
                <Button
                  className={classNames("__wab_instance", sty.button__aaMjQ)}
                  icon={"none"}
                  iconImage={"/plasmic/jam_v_jean_loader/images/image11.svg"}
                  label={"Me connecter"}
                />
              </div>
            </Stack__>
            <div
              data-plasmic-name={"frame1437254391"}
              data-plasmic-override={overrides.frame1437254391}
              className={classNames(projectcss.all, sty.frame1437254391)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yxfh5)}>
                <JobCard
                  className={classNames("__wab_instance", sty.jobCard___1Z8B)}
                  customIcons={{}}
                  state={"default"}
                  tags={[]}
                  title={"Vietnamese Interpreter"}
                />
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__luYmr)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/jam_v_jean_loader/images/image9.svg",
                  fullWidth: 1408,
                  fullHeight: 1365,
                  aspectRatio: 1.031502
                }}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"frame15"}
                data-plasmic-override={overrides.frame15}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame15)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"searchBar"}
                  data-plasmic-override={overrides.searchBar}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.searchBar)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame12"}
                    data-plasmic-override={overrides.frame12}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame12)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      iconUrl={"/plasmic/jam_v_jean_loader/images/image10.svg"}
                      type={"default"}
                    />

                    <TextInput
                      data-plasmic-name={"inputLieu"}
                      data-plasmic-override={overrides.inputLieu}
                      className={classNames("__wab_instance", sty.inputLieu)}
                      iconUrl={
                        "/plasmic/jam_v_jean_loader/images/phMapPinPng.png"
                      }
                      onTextChange={async Lieu => {
                        const $steps = {};

                        $steps["updateLieu"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["lieu"]
                                },
                                operation: 0,
                                value: Lieu
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLieu"] != null &&
                          typeof $steps["updateLieu"] === "object" &&
                          typeof $steps["updateLieu"].then === "function"
                        ) {
                          $steps["updateLieu"] = await $steps["updateLieu"];
                        }
                      }}
                      type={"default"}
                    />

                    <Dropdown
                      data-plasmic-name={"dropdown"}
                      data-plasmic-override={overrides.dropdown}
                      className={classNames("__wab_instance", sty.dropdown)}
                      iconeUrl={"/plasmic/jam_v_jean_loader/images/image2.svg"}
                      label={``}
                      options={[
                        { key: "1", value: "Secteur d\u2019activit\u00e9" },
                        { key: "2", value: "Option 2" },
                        { key: "3", value: "Option 3" }
                      ]}
                    >
                      <Option
                        className={classNames(
                          "__wab_instance",
                          sty.option__ifCfd
                        )}
                        value={"Option 1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7SXKy
                          )}
                        >
                          {"Option 1"}
                        </div>
                      </Option>
                      <Option
                        className={classNames(
                          "__wab_instance",
                          sty.option__lkCyl
                        )}
                        value={"Option 2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qs1Ay
                          )}
                        >
                          {"Option 2"}
                        </div>
                      </Option>
                    </Dropdown>
                    <Dropdown
                      data-plasmic-name={"dropdown3"}
                      data-plasmic-override={overrides.dropdown3}
                      className={classNames("__wab_instance", sty.dropdown3)}
                      iconeUrl={"/plasmic/jam_v_jean_loader/images/image3.svg"}
                      label={``}
                      options={[
                        { key: "1", value: "Disponibilit\u00e9" },
                        { key: "2", value: "Option 2" },
                        { key: "3", value: "Option 3" }
                      ]}
                    >
                      <Option
                        className={classNames(
                          "__wab_instance",
                          sty.option__ocncd
                        )}
                        value={"Option 1"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__chf8W
                          )}
                        >
                          {"Option 1"}
                        </div>
                      </Option>
                      <Option
                        className={classNames(
                          "__wab_instance",
                          sty.option__aDuVf
                        )}
                        value={"Option 2"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zHx0Z
                          )}
                        >
                          {"Option 2"}
                        </div>
                      </Option>
                    </Dropdown>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame14"}
                    data-plasmic-override={overrides.frame14}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame14)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame13"}
                      data-plasmic-override={overrides.frame13}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame13)}
                    >
                      <Dropdown
                        data-plasmic-name={"dropdown4"}
                        data-plasmic-override={overrides.dropdown4}
                        className={classNames("__wab_instance", sty.dropdown4)}
                        iconeUrl={
                          "/plasmic/jam_v_jean_loader/images/image7.svg"
                        }
                        label={``}
                        options={[
                          { key: "1", value: "Type de contrat" },
                          { key: "2", value: "Option 2" },
                          { key: "3", value: "Option 3" }
                        ]}
                      >
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__tW8Cl
                          )}
                          value={"Option 1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wBoK3
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Option>
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__f6F6Y
                          )}
                          value={"Option 2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__g3Tr9
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Option>
                      </Dropdown>
                      <Dropdown
                        data-plasmic-name={"dropdown5"}
                        data-plasmic-override={overrides.dropdown5}
                        className={classNames("__wab_instance", sty.dropdown5)}
                        iconeUrl={
                          "/plasmic/jam_v_jean_loader/images/image3.svg"
                        }
                        label={``}
                        options={[
                          { key: "1", value: "Temps de travail" },
                          { key: "2", value: "Option 2" },
                          { key: "3", value: "Option 3" }
                        ]}
                      >
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option___0AHoh
                          )}
                          value={"Option 1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4QWH
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Option>
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__lkz9F
                          )}
                          value={"Option 2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4Pi5E
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Option>
                      </Dropdown>
                      <Dropdown
                        data-plasmic-name={"dropdown8"}
                        data-plasmic-override={overrides.dropdown8}
                        className={classNames("__wab_instance", sty.dropdown8)}
                        iconeUrl={
                          "/plasmic/jam_v_jean_loader/images/iconPhOfficeChair2.svg"
                        }
                        label={``}
                        options={[
                          { key: "1", value: "Mode de travail" },
                          { key: "2", value: "Option 2" },
                          { key: "3", value: "Option 3" }
                        ]}
                      >
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__je1U8
                          )}
                          value={"Option 1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ewckh
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Option>
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__eAHx
                          )}
                          value={"Option 2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0AlgX
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Option>
                      </Dropdown>
                      <Dropdown
                        data-plasmic-name={"dropdown9"}
                        data-plasmic-override={overrides.dropdown9}
                        className={classNames("__wab_instance", sty.dropdown9)}
                        iconeUrl={
                          "/plasmic/jam_v_jean_loader/images/image5.svg"
                        }
                        label={``}
                        options={[
                          { key: "1", value: "Salaire" },
                          { key: "2", value: "Option 2" },
                          { key: "3", value: "Option 3" }
                        ]}
                      >
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__hTkAo
                          )}
                          value={"Option 1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3TuK
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Option>
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__qbGib
                          )}
                          value={"Option 2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dxBqN
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Option>
                      </Dropdown>
                      <Dropdown
                        data-plasmic-name={"dropdown6"}
                        data-plasmic-override={overrides.dropdown6}
                        className={classNames("__wab_instance", sty.dropdown6)}
                        iconeUrl={
                          "/plasmic/jam_v_jean_loader/images/image4.svg"
                        }
                        label={``}
                        options={[
                          { key: "1", value: "Taille entreprise" },
                          { key: "2", value: "Option 2" },
                          { key: "3", value: "Option 3" }
                        ]}
                      >
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__nzpbM
                          )}
                          value={"Option 1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ntk8O
                            )}
                          >
                            {"Option 1"}
                          </div>
                        </Option>
                        <Option
                          className={classNames(
                            "__wab_instance",
                            sty.option__jgEyj
                          )}
                          value={"Option 2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zTskh
                            )}
                          >
                            {"Option 2"}
                          </div>
                        </Option>
                      </Dropdown>
                    </Stack__>
                    <Button
                      className={classNames("__wab_instance", sty.button__sEVs)}
                      icon={"end"}
                      iconImage={
                        "/plasmic/jam_v_jean_loader/images/image11.svg"
                      }
                      label={"RECHERCHER"}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame7"}
                  data-plasmic-override={overrides.frame7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame7)}
                >
                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg__lsaTt)}
                    role={"img"}
                  />

                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg__z33Q)}
                    role={"img"}
                  />

                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg__r7P19)}
                    role={"img"}
                  />

                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg__uEh7L)}
                    role={"img"}
                  />

                  <VectorIcon
                    className={classNames(projectcss.all, sty.svg__erVO)}
                    role={"img"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"loginMobile"}
                    data-plasmic-override={overrides.loginMobile}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.loginMobile)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLieu"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["lieu"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLieu"] != null &&
                        typeof $steps["updateLieu"] === "object" &&
                        typeof $steps["updateLieu"].then === "function"
                      ) {
                        $steps["updateLieu"] = await $steps["updateLieu"];
                      }
                    }}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame8"}
                      data-plasmic-override={overrides.frame8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame8)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame10"}
                        data-plasmic-override={overrides.frame10}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame10)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qLyJd
                          )}
                        >
                          {"Afficher la liste des r\u00e9sultats"}
                        </div>
                      </Stack__>
                    </Stack__>
                    <div
                      data-plasmic-name={"scrollBar"}
                      data-plasmic-override={overrides.scrollBar}
                      className={classNames(projectcss.all, sty.scrollBar)}
                    />
                  </Stack__>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___8CiQf)}
                    displayHeight={"30.101394653320312px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"23.651330947875977px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/jam_v_jean_loader/images/mapPin3.svg",
                      fullWidth: 23.651330947875977,
                      fullHeight: 30.101394653320312,
                      aspectRatio: 0.857143
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__qoAju)}
                    displayHeight={"30.101394653320312px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"23.651330947875977px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/jam_v_jean_loader/images/mapPin4.svg",
                      fullWidth: 23.651330947875977,
                      fullHeight: 30.101394653320312,
                      aspectRatio: 0.857143
                    }}
                  />

                  <div
                    data-plasmic-name={"mapPin"}
                    data-plasmic-override={overrides.mapPin}
                    className={classNames(projectcss.all, sty.mapPin)}
                  >
                    <div
                      data-plasmic-name={"frame11"}
                      data-plasmic-override={overrides.frame11}
                      className={classNames(projectcss.all, sty.frame11)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ertzr
                        )}
                      >
                        {"1750\u20ac"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"iconSize"}
                          data-plasmic-override={overrides.iconSize}
                          className={classNames(projectcss.all, sty.iconSize)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__blKcC
                            )}
                          >
                            <PhCrossIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qOz3H
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__z8LEk)}
                      displayHeight={"30.101394653320312px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"23.651330947875977px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_v_jean_loader/images/frame4.svg",
                        fullWidth: 23.651330947875977,
                        fullHeight: 30.101394653320312,
                        aspectRatio: 0.857143
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"mapPin2"}
                    data-plasmic-override={overrides.mapPin2}
                    className={classNames(projectcss.all, sty.mapPin2)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame16"}
                      data-plasmic-override={overrides.frame16}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame16)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wWd8C
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={"iconSize2"}
                            data-plasmic-override={overrides.iconSize2}
                            className={classNames(
                              projectcss.all,
                              sty.iconSize2
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gSDw
                              )}
                            >
                              <PhCrossIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0AXZk
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                        ) : null}
                      </div>
                      <div
                        data-plasmic-name={"phClockCountdownFill"}
                        data-plasmic-override={overrides.phClockCountdownFill}
                        className={classNames(
                          projectcss.all,
                          sty.phClockCountdownFill
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qz5Oz
                        )}
                      >
                        {"1750\u20ac"}
                      </div>
                    </Stack__>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__cLaaq)}
                      displayHeight={"31px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"24px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_v_jean_loader/images/subtract3.svg",
                        fullWidth: 24,
                        fullHeight: 31,
                        aspectRatio: 0.774194
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"mapPin3"}
                    data-plasmic-override={overrides.mapPin3}
                    className={classNames(projectcss.all, sty.mapPin3)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame17"}
                      data-plasmic-override={overrides.frame17}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame17)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pQuiQ
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={"iconSize3"}
                            data-plasmic-override={overrides.iconSize3}
                            className={classNames(
                              projectcss.all,
                              sty.iconSize3
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__bqCpo
                              )}
                            >
                              <PhCrossIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__nlNg4
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                        ) : null}
                      </div>
                      <div
                        data-plasmic-name={"phClockCountdownFill2"}
                        data-plasmic-override={overrides.phClockCountdownFill2}
                        className={classNames(
                          projectcss.all,
                          sty.phClockCountdownFill2
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1KnoF
                        )}
                      >
                        {"1750\u20ac"}
                      </div>
                    </Stack__>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___1Dnl6)}
                      displayHeight={"31px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"24px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_v_jean_loader/images/subtract4.svg",
                        fullWidth: 24,
                        fullHeight: 31,
                        aspectRatio: 0.774194
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"mapPin4"}
                    data-plasmic-override={overrides.mapPin4}
                    className={classNames(projectcss.all, sty.mapPin4)}
                  >
                    <div
                      data-plasmic-name={"frame18"}
                      data-plasmic-override={overrides.frame18}
                      className={classNames(projectcss.all, sty.frame18)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bIhDs
                        )}
                      >
                        {"1750\u20ac"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"iconSize4"}
                          data-plasmic-override={overrides.iconSize4}
                          className={classNames(projectcss.all, sty.iconSize4)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dbXyL
                            )}
                          >
                            <PhCrossIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4Xbgu
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__wb9Pj)}
                      displayHeight={"30.101394653320312px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"23.651330947875977px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_v_jean_loader/images/frame5.svg",
                        fullWidth: 23.651330947875977,
                        fullHeight: 30.101394653320312,
                        aspectRatio: 0.857143
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"mapPin5"}
                    data-plasmic-override={overrides.mapPin5}
                    className={classNames(projectcss.all, sty.mapPin5)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame19"}
                      data-plasmic-override={overrides.frame19}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame19)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wh9Nv
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={"iconSize5"}
                            data-plasmic-override={overrides.iconSize5}
                            className={classNames(
                              projectcss.all,
                              sty.iconSize5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tknld
                              )}
                            >
                              <PhCrossIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__bsPp3
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                        ) : null}
                      </div>
                      <div
                        data-plasmic-name={"phClockCountdownFill3"}
                        data-plasmic-override={overrides.phClockCountdownFill3}
                        className={classNames(
                          projectcss.all,
                          sty.phClockCountdownFill3
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s7JAl
                        )}
                      >
                        {"1750\u20ac"}
                      </div>
                    </Stack__>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__esM2)}
                      displayHeight={"31px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"24px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_v_jean_loader/images/vector2.svg",
                        fullWidth: 24,
                        fullHeight: 31,
                        aspectRatio: 0.774194
                      }}
                    />
                  </div>
                  <Map
                    data-plasmic-name={"map"}
                    data-plasmic-override={overrides.map}
                    businesses={[]}
                    className={classNames("__wab_instance", sty.map)}
                    searchAddress={(() => {
                      try {
                        return $state.lieu;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    zoom={9}
                  />

                  <div
                    data-plasmic-name={"mapPin6"}
                    data-plasmic-override={overrides.mapPin6}
                    className={classNames(projectcss.all, sty.mapPin6)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame20"}
                      data-plasmic-override={overrides.frame20}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame20)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__h8NP8
                        )}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={"iconSize6"}
                            data-plasmic-override={overrides.iconSize6}
                            className={classNames(
                              projectcss.all,
                              sty.iconSize6
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___4YyJk
                              )}
                            >
                              <PhCrossIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__imrQy
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                        ) : null}
                      </div>
                      <div
                        data-plasmic-name={"phClockCountdownFill4"}
                        data-plasmic-override={overrides.phClockCountdownFill4}
                        className={classNames(
                          projectcss.all,
                          sty.phClockCountdownFill4
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gAmy
                        )}
                      >
                        {"1750\u20ac"}
                      </div>
                    </Stack__>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ykNaf)}
                      displayHeight={"31px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"24px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_v_jean_loader/images/vector2.svg",
                        fullWidth: 24,
                        fullHeight: 31,
                        aspectRatio: 0.774194
                      }}
                    />
                  </div>
                  <div
                    data-plasmic-name={"mapPin7"}
                    data-plasmic-override={overrides.mapPin7}
                    className={classNames(projectcss.all, sty.mapPin7)}
                  >
                    <div
                      data-plasmic-name={"frame21"}
                      data-plasmic-override={overrides.frame21}
                      className={classNames(projectcss.all, sty.frame21)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pwKgv
                        )}
                      >
                        {"1750\u20ac"}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={"iconSize7"}
                          data-plasmic-override={overrides.iconSize7}
                          className={classNames(projectcss.all, sty.iconSize7)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ipMyu
                            )}
                          >
                            <PhCrossIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qgWff
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                      ) : null}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__uik0B)}
                      displayHeight={"30.101394653320312px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"23.651330947875977px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_v_jean_loader/images/frame6.svg",
                        fullWidth: 23.651330947875977,
                        fullHeight: 30.101394653320312,
                        aspectRatio: 0.857143
                      }}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"buttonLastMin"}
                    data-plasmic-override={overrides.buttonLastMin}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttonLastMin)}
                  >
                    <PhClockCountdownFillIcon
                      className={classNames(projectcss.all, sty.svg__vb13E)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text2
                      )}
                    >
                      {"LAST MINUTE"}
                    </div>
                  </Stack__>
                  <div
                    data-plasmic-name={"jobCard"}
                    data-plasmic-override={overrides.jobCard}
                    className={classNames(projectcss.all, sty.jobCard)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame22"}
                      data-plasmic-override={overrides.frame22}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame22)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame23"}
                        data-plasmic-override={overrides.frame23}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame23)}
                      >
                        <div
                          data-plasmic-name={"companyLogo"}
                          data-plasmic-override={overrides.companyLogo}
                          className={classNames(
                            projectcss.all,
                            sty.companyLogo
                          )}
                        >
                          <div
                            data-plasmic-name={"rectangle183"}
                            data-plasmic-override={overrides.rectangle183}
                            className={classNames(
                              projectcss.all,
                              sty.rectangle183
                            )}
                          />
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame1437254219"}
                        data-plasmic-override={overrides.frame1437254219}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.frame1437254219
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame24"}
                          data-plasmic-override={overrides.frame24}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame24)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wQqvN
                            )}
                          >
                            {"Vietnamese Interpreter"}
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame25"}
                            data-plasmic-override={overrides.frame25}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame25)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame26"}
                              data-plasmic-override={overrides.frame26}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame26
                              )}
                            >
                              <PhMapPinIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0UTsU
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"paris75"}
                                data-plasmic-override={overrides.paris75}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.paris75
                                )}
                              >
                                {"Paris (75), "}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kas9
                                )}
                              >
                                {"Impact.com"}
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame27"}
                              data-plasmic-override={overrides.frame27}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame27
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"transportationTimeLine"}
                                data-plasmic-override={
                                  overrides.transportationTimeLine
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.transportationTimeLine
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"transportationTime"}
                                  data-plasmic-override={
                                    overrides.transportationTime
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.transportationTime
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__wtJ7F)}
                                    displayHeight={"10px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"10px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_v_jean_loader/images/phCarProfile2.svg",
                                      fullWidth: 10,
                                      fullHeight: 10,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__rwZ7
                                    )}
                                  >
                                    {"12\u2019"}
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"transportationTime2"}
                                  data-plasmic-override={
                                    overrides.transportationTime2
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.transportationTime2
                                  )}
                                >
                                  <Vector3Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__mj4IF
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__vsWld
                                    )}
                                  >
                                    {"12\u2019"}
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"transportationTime3"}
                                  data-plasmic-override={
                                    overrides.transportationTime3
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.transportationTime3
                                  )}
                                >
                                  <Vector4Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__pWzYf
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ezE1S
                                    )}
                                  >
                                    {"12\u2019"}
                                  </div>
                                </Stack__>
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"transportationTime4"}
                                  data-plasmic-override={
                                    overrides.transportationTime4
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.transportationTime4
                                  )}
                                >
                                  <Vector5Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__mhZ0M
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wk5Ik
                                    )}
                                  >
                                    {"12\u2019"}
                                  </div>
                                </Stack__>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame1437254218"}
                          data-plasmic-override={overrides.frame1437254218}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.frame1437254218
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"badgeBase"}
                            data-plasmic-override={overrides.badgeBase}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.badgeBase
                            )}
                          >
                            <IconPhBriefcase2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qsb3K
                              )}
                              role={"img"}
                            />

                            <div
                              data-plasmic-name={"text3"}
                              data-plasmic-override={overrides.text3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text3
                              )}
                            >
                              {"Traduction"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"badgeBase2"}
                            data-plasmic-override={overrides.badgeBase2}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.badgeBase2
                            )}
                          >
                            <IconPhFileText2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qyZop
                              )}
                              role={"img"}
                            />

                            <div
                              data-plasmic-name={"text4"}
                              data-plasmic-override={overrides.text4}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text4
                              )}
                            >
                              {"CDI"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"badgeBase3"}
                            data-plasmic-override={overrides.badgeBase3}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.badgeBase3
                            )}
                          >
                            <IconPhClockCountdown2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1F8Vy
                              )}
                              role={"img"}
                            />

                            <div
                              data-plasmic-name={"text5"}
                              data-plasmic-override={overrides.text5}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text5
                              )}
                            >
                              {"Imm\u00e9diat"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"badgeBase4"}
                            data-plasmic-override={overrides.badgeBase4}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.badgeBase4
                            )}
                          >
                            <IconPhClock2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1Vjdb
                              )}
                              role={"img"}
                            />

                            <div
                              data-plasmic-name={"text6"}
                              data-plasmic-override={overrides.text6}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text6
                              )}
                            >
                              {"25h"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"badgeBase5"}
                            data-plasmic-override={overrides.badgeBase5}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.badgeBase5
                            )}
                          >
                            <IconPhCoinsLight2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yaTyh
                              )}
                              role={"img"}
                            />

                            <div
                              data-plasmic-name={"text7"}
                              data-plasmic-override={overrides.text7}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text7
                              )}
                            >
                              {"2000\u20ac"}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"badgeBase6"}
                            data-plasmic-override={overrides.badgeBase6}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.badgeBase6
                            )}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__t4W1Z)}
                              displayHeight={"12px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"12px"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/jam_v_jean_loader/images/iconPhOfficeChair3.svg",
                                fullWidth: 12,
                                fullHeight: 12,
                                aspectRatio: 1
                              }}
                            />

                            <div
                              data-plasmic-name={"text8"}
                              data-plasmic-override={overrides.text8}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text8
                              )}
                            >
                              {"T\u00e9l\u00e9travail 100%"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                    <LikeIconIcon
                      className={classNames(projectcss.all, sty.svg__hr2R)}
                      role={"img"}
                    />

                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame28"}
                      data-plasmic-override={overrides.frame28}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame28)}
                    >
                      <PhClockCountdownFillIcon
                        className={classNames(projectcss.all, sty.svg__yc2Ns)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__prbNd
                        )}
                      >
                        {"LAST MINUTE"}
                      </div>
                    </Stack__>
                  </div>
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__r1MdK)}>
                  <div
                    data-plasmic-name={"frame29"}
                    data-plasmic-override={overrides.frame29}
                    className={classNames(projectcss.all, sty.frame29)}
                  >
                    <PhCaretDoubleLeftIcon
                      className={classNames(projectcss.all, sty.svg___7W4T9)}
                      role={"img"}
                    />
                  </div>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"badgeGroup"}
                  data-plasmic-override={overrides.badgeGroup}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.badgeGroup)}
                >
                  <div
                    data-plasmic-name={"message"}
                    data-plasmic-override={overrides.message}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.message
                    )}
                  >
                    {"Get ready to find a job"}
                  </div>
                </Stack__>
                <div
                  data-plasmic-name={"trouvezUnJobNaJamaisEteAussiSimple"}
                  data-plasmic-override={
                    overrides.trouvezUnJobNaJamaisEteAussiSimple
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.trouvezUnJobNaJamaisEteAussiSimple
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {"Trouvez un job n\u2019a jamais \u00e9t\u00e9 aussi "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#BBFE68" }}
                    >
                      {"simple"}
                    </span>
                    <React.Fragment> </React.Fragment>
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"hero"}
                  data-plasmic-override={overrides.hero}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.hero)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mQghv
                    )}
                  >
                    {
                      "Trouvez facilement un emploi pr\u00e8s de chez vous et connectez-vous aux employeurs locaux."
                    }
                  </div>
                </Stack__>
              </Stack__>
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"benefices"}
            data-plasmic-override={overrides.benefices}
            hasGap={true}
            className={classNames(projectcss.all, sty.benefices)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(projectcss.all, sty.container)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content4"}
                data-plasmic-override={overrides.content4}
                hasGap={true}
                className={classNames(projectcss.all, sty.content4)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"headingAndSupportingText"}
                  data-plasmic-override={overrides.headingAndSupportingText}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.headingAndSupportingText
                  )}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"headingAndBadge"}
                    data-plasmic-override={overrides.headingAndBadge}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.headingAndBadge)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"badgeGroup2"}
                      data-plasmic-override={overrides.badgeGroup2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.badgeGroup2)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content2"}
                        data-plasmic-override={overrides.content2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content2)}
                      >
                        <div
                          data-plasmic-name={"message2"}
                          data-plasmic-override={overrides.message2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.message2
                          )}
                        >
                          {"Notre solution"}
                        </div>
                      </Stack__>
                    </Stack__>
                    <div
                      data-plasmic-name={"heading"}
                      data-plasmic-override={overrides.heading}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.heading
                      )}
                    >
                      {"B\u00e9n\u00e9fices pour vos clients"}
                    </div>
                  </Stack__>
                  <div
                    data-plasmic-name={"supportingText"}
                    data-plasmic-override={overrides.supportingText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.supportingText
                    )}
                  >
                    {
                      "D\u00e9crivez les avantages que vos services apportent \u00e0 vos clients"
                    }
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"container2"}
              data-plasmic-override={overrides.container2}
              hasGap={true}
              className={classNames(projectcss.all, sty.container2)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content3"}
                data-plasmic-override={overrides.content3}
                hasGap={true}
                className={classNames(projectcss.all, sty.content3)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"featureText"}
                  data-plasmic-override={overrides.featureText}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.featureText)}
                >
                  <div
                    data-plasmic-name={"featuredIcon"}
                    data-plasmic-override={overrides.featuredIcon}
                    className={classNames(projectcss.all, sty.featuredIcon)}
                  >
                    <Mail2Icon
                      className={classNames(projectcss.all, sty.svg__i5XF5)}
                      role={"img"}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textAndSupportingText"}
                    data-plasmic-override={overrides.textAndSupportingText}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText
                    )}
                  >
                    <div
                      data-plasmic-name={"text9"}
                      data-plasmic-override={overrides.text9}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text9
                      )}
                    >
                      {"B\u00e9n\u00e9fice 1"}
                    </div>
                    <div
                      data-plasmic-name={"supportingText2"}
                      data-plasmic-override={overrides.supportingText2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText2
                      )}
                    >
                      {
                        "Give one sentence describing who this is for and what it helps them achieve"
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__xhGdy
                      )}
                      icon={"none"}
                      iconImage={
                        "/plasmic/jam_v_jean_loader/images/image11.svg"
                      }
                      label={"En savoir plus ->"}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"featureText2"}
                  data-plasmic-override={overrides.featureText2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.featureText2)}
                >
                  <div
                    data-plasmic-name={"featuredIcon2"}
                    data-plasmic-override={overrides.featuredIcon2}
                    className={classNames(projectcss.all, sty.featuredIcon2)}
                  >
                    <ZapIcon
                      className={classNames(projectcss.all, sty.svg__cb5P7)}
                      role={"img"}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textAndSupportingText2"}
                    data-plasmic-override={overrides.textAndSupportingText2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText2
                    )}
                  >
                    <div
                      data-plasmic-name={"text10"}
                      data-plasmic-override={overrides.text10}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text10
                      )}
                    >
                      {"B\u00e9n\u00e9fice 2"}
                    </div>
                    <div
                      data-plasmic-name={"supportingText3"}
                      data-plasmic-override={overrides.supportingText3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText3
                      )}
                    >
                      {
                        "Give one sentence describing who this is for and what it helps them achieve"
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__nw543
                      )}
                      icon={"none"}
                      iconImage={
                        "/plasmic/jam_v_jean_loader/images/image11.svg"
                      }
                      label={"En savoir plus ->"}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"featureText3"}
                  data-plasmic-override={overrides.featureText3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.featureText3)}
                >
                  <div
                    data-plasmic-name={"featuredIcon3"}
                    data-plasmic-override={overrides.featuredIcon3}
                    className={classNames(projectcss.all, sty.featuredIcon3)}
                  >
                    <BarChart2Icon
                      className={classNames(projectcss.all, sty.svg__hyJvG)}
                      role={"img"}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textAndSupportingText3"}
                    data-plasmic-override={overrides.textAndSupportingText3}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText3
                    )}
                  >
                    <div
                      data-plasmic-name={"text11"}
                      data-plasmic-override={overrides.text11}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text11
                      )}
                    >
                      {"B\u00e9n\u00e9fice 3"}
                    </div>
                    <div
                      data-plasmic-name={"supportingText4"}
                      data-plasmic-override={overrides.supportingText4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText4
                      )}
                    >
                      {
                        "Give one sentence describing who this is for and what it helps them achieve"
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__fYeg1
                      )}
                      icon={"none"}
                      iconImage={
                        "/plasmic/jam_v_jean_loader/images/image11.svg"
                      }
                      label={"En savoir plus ->"}
                    />
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            hasGap={true}
            className={classNames(projectcss.all, sty.footer)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"container3"}
              data-plasmic-override={overrides.container3}
              hasGap={true}
              className={classNames(projectcss.all, sty.container3)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content5"}
                data-plasmic-override={overrides.content5}
                hasGap={true}
                className={classNames(projectcss.all, sty.content5)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"column"}
                  data-plasmic-override={overrides.column}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"logo"}
                    data-plasmic-override={overrides.logo}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.logo)}
                  >
                    <div
                      data-plasmic-name={"companyLogo2"}
                      data-plasmic-override={overrides.companyLogo2}
                      className={classNames(projectcss.all, sty.companyLogo2)}
                    >
                      <div
                        data-plasmic-name={"brand"}
                        data-plasmic-override={overrides.brand}
                        className={classNames(projectcss.all, sty.brand)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vIFa
                          )}
                        >
                          {"Brand"}
                        </div>
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"socials"}
                    data-plasmic-override={overrides.socials}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.socials)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__nxcxM)}
                      displayHeight={"24px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"24px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_v_jean_loader/images/socialIcon3.svg",
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1
                      }}
                    />

                    <SocialIcon2Icon
                      className={classNames(projectcss.all, sty.svg__hysT4)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={"socialIcon"}
                      data-plasmic-override={overrides.socialIcon}
                      className={classNames(projectcss.all, sty.socialIcon)}
                    >
                      <Group3Icon
                        className={classNames(projectcss.all, sty.svg__eMVfe)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"socialIcon2"}
                      data-plasmic-override={overrides.socialIcon2}
                      className={classNames(projectcss.all, sty.socialIcon2)}
                    >
                      <Group4Icon
                        className={classNames(projectcss.all, sty.svg__su3OB)}
                        role={"img"}
                      />
                    </div>
                  </Stack__>
                </Stack__>
                <div
                  data-plasmic-name={"footerLinksContainer2"}
                  data-plasmic-override={overrides.footerLinksContainer2}
                  className={classNames(
                    projectcss.all,
                    sty.footerLinksContainer2
                  )}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"footerLinksColumn3"}
                    data-plasmic-override={overrides.footerLinksColumn3}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.footerLinksColumn3
                    )}
                  >
                    <div
                      data-plasmic-name={"heading4"}
                      data-plasmic-override={overrides.heading4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.heading4
                      )}
                    >
                      {"Info"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"footerLinks3"}
                      data-plasmic-override={overrides.footerLinks3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerLinks3)}
                    >
                      <Footerlink
                        data-plasmic-name={"footerLink9"}
                        data-plasmic-override={overrides.footerLink9}
                        className={classNames(
                          "__wab_instance",
                          sty.footerLink9
                        )}
                        text={"Services"}
                      />

                      <Footerlink
                        data-plasmic-name={"footerLink10"}
                        data-plasmic-override={overrides.footerLink10}
                        className={classNames(
                          "__wab_instance",
                          sty.footerLink10
                        )}
                        text={"Offres"}
                      />

                      <Footerlink
                        data-plasmic-name={"footerLink11"}
                        data-plasmic-override={overrides.footerLink11}
                        className={classNames(
                          "__wab_instance",
                          sty.footerLink11
                        )}
                        text={"Avis Clients"}
                      />

                      <Footerlink
                        data-plasmic-name={"footerLink12"}
                        data-plasmic-override={overrides.footerLink12}
                        className={classNames(
                          "__wab_instance",
                          sty.footerLink12
                        )}
                        text={"FAQ"}
                      />

                      <Footerlink
                        data-plasmic-name={"footerLink13"}
                        data-plasmic-override={overrides.footerLink13}
                        className={classNames(
                          "__wab_instance",
                          sty.footerLink13
                        )}
                        text={"Contact"}
                      />
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"footerLinksColumn4"}
                    data-plasmic-override={overrides.footerLinksColumn4}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.footerLinksColumn4
                    )}
                  >
                    <div
                      data-plasmic-name={"heading5"}
                      data-plasmic-override={overrides.heading5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.heading5
                      )}
                    >
                      {"Legal"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"footerLinks4"}
                      data-plasmic-override={overrides.footerLinks4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.footerLinks4)}
                    >
                      <Footerlink
                        data-plasmic-name={"footerLink14"}
                        data-plasmic-override={overrides.footerLink14}
                        className={classNames(
                          "__wab_instance",
                          sty.footerLink14
                        )}
                        text={"Mentions l\u00e9gales"}
                      />

                      <Footerlink
                        data-plasmic-name={"footerLink15"}
                        data-plasmic-override={overrides.footerLink15}
                        className={classNames(
                          "__wab_instance",
                          sty.footerLink15
                        )}
                        text={"Politique de confidentialit\u00e9"}
                      />

                      <Footerlink
                        data-plasmic-name={"footerLink16"}
                        data-plasmic-override={overrides.footerLink16}
                        className={classNames(
                          "__wab_instance",
                          sty.footerLink16
                        )}
                        text={"CGU/CGV"}
                      />
                    </Stack__>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"container4"}
              data-plasmic-override={overrides.container4}
              hasGap={true}
              className={classNames(projectcss.all, sty.container4)}
            >
              <div
                data-plasmic-name={"divider"}
                data-plasmic-override={overrides.divider}
                className={classNames(projectcss.all, sty.divider)}
              />

              <div
                data-plasmic-name={"content6"}
                data-plasmic-override={overrides.content6}
                className={classNames(projectcss.all, sty.content6)}
              >
                <div
                  data-plasmic-name={"footerText"}
                  data-plasmic-override={overrides.footerText}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.footerText
                  )}
                >
                  {"\u00a9 2024 Job around me. Site designer par Scroll."}
                </div>
              </div>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "structureLp",
    "nav",
    "frame",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "menuItems",
    "frame1437254391",
    "frame15",
    "searchBar",
    "frame12",
    "textInput",
    "textbox",
    "inputLieu",
    "dropdown",
    "dropdown3",
    "frame14",
    "frame13",
    "dropdown4",
    "dropdown5",
    "dropdown8",
    "dropdown9",
    "dropdown6",
    "frame7",
    "loginMobile",
    "frame8",
    "frame10",
    "scrollBar",
    "mapPin",
    "frame11",
    "iconSize",
    "mapPin2",
    "frame16",
    "iconSize2",
    "phClockCountdownFill",
    "mapPin3",
    "frame17",
    "iconSize3",
    "phClockCountdownFill2",
    "mapPin4",
    "frame18",
    "iconSize4",
    "mapPin5",
    "frame19",
    "iconSize5",
    "phClockCountdownFill3",
    "map",
    "mapPin6",
    "frame20",
    "iconSize6",
    "phClockCountdownFill4",
    "mapPin7",
    "frame21",
    "iconSize7",
    "buttonLastMin",
    "text2",
    "jobCard",
    "frame22",
    "frame23",
    "companyLogo",
    "rectangle183",
    "frame1437254219",
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4",
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8",
    "frame28",
    "frame29",
    "content",
    "badgeGroup",
    "message",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "frame6",
    "hero",
    "benefices",
    "container",
    "content4",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content2",
    "message2",
    "heading",
    "supportingText",
    "container2",
    "content3",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text9",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text10",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text11",
    "supportingText4",
    "footer",
    "container3",
    "content5",
    "column",
    "logo",
    "companyLogo2",
    "brand",
    "socials",
    "socialIcon",
    "socialIcon2",
    "footerLinksContainer2",
    "footerLinksColumn3",
    "heading4",
    "footerLinks3",
    "footerLink9",
    "footerLink10",
    "footerLink11",
    "footerLink12",
    "footerLink13",
    "footerLinksColumn4",
    "heading5",
    "footerLinks4",
    "footerLink14",
    "footerLink15",
    "footerLink16",
    "container4",
    "divider",
    "content6",
    "footerText"
  ],
  structureLp: [
    "structureLp",
    "nav",
    "frame",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "menuItems",
    "frame1437254391",
    "frame15",
    "searchBar",
    "frame12",
    "textInput",
    "textbox",
    "inputLieu",
    "dropdown",
    "dropdown3",
    "frame14",
    "frame13",
    "dropdown4",
    "dropdown5",
    "dropdown8",
    "dropdown9",
    "dropdown6",
    "frame7",
    "loginMobile",
    "frame8",
    "frame10",
    "scrollBar",
    "mapPin",
    "frame11",
    "iconSize",
    "mapPin2",
    "frame16",
    "iconSize2",
    "phClockCountdownFill",
    "mapPin3",
    "frame17",
    "iconSize3",
    "phClockCountdownFill2",
    "mapPin4",
    "frame18",
    "iconSize4",
    "mapPin5",
    "frame19",
    "iconSize5",
    "phClockCountdownFill3",
    "map",
    "mapPin6",
    "frame20",
    "iconSize6",
    "phClockCountdownFill4",
    "mapPin7",
    "frame21",
    "iconSize7",
    "buttonLastMin",
    "text2",
    "jobCard",
    "frame22",
    "frame23",
    "companyLogo",
    "rectangle183",
    "frame1437254219",
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4",
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8",
    "frame28",
    "frame29",
    "content",
    "badgeGroup",
    "message",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "frame6",
    "hero"
  ],
  nav: ["nav", "frame", "frame2", "frame3", "frame4", "frame5", "menuItems"],
  frame: ["frame", "frame2", "frame3", "frame4", "frame5"],
  frame2: ["frame2", "frame3", "frame4", "frame5"],
  frame3: ["frame3"],
  frame4: ["frame4"],
  frame5: ["frame5"],
  menuItems: ["menuItems"],
  frame1437254391: [
    "frame1437254391",
    "frame15",
    "searchBar",
    "frame12",
    "textInput",
    "textbox",
    "inputLieu",
    "dropdown",
    "dropdown3",
    "frame14",
    "frame13",
    "dropdown4",
    "dropdown5",
    "dropdown8",
    "dropdown9",
    "dropdown6",
    "frame7",
    "loginMobile",
    "frame8",
    "frame10",
    "scrollBar",
    "mapPin",
    "frame11",
    "iconSize",
    "mapPin2",
    "frame16",
    "iconSize2",
    "phClockCountdownFill",
    "mapPin3",
    "frame17",
    "iconSize3",
    "phClockCountdownFill2",
    "mapPin4",
    "frame18",
    "iconSize4",
    "mapPin5",
    "frame19",
    "iconSize5",
    "phClockCountdownFill3",
    "map",
    "mapPin6",
    "frame20",
    "iconSize6",
    "phClockCountdownFill4",
    "mapPin7",
    "frame21",
    "iconSize7",
    "buttonLastMin",
    "text2",
    "jobCard",
    "frame22",
    "frame23",
    "companyLogo",
    "rectangle183",
    "frame1437254219",
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4",
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8",
    "frame28",
    "frame29",
    "content",
    "badgeGroup",
    "message",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "frame6",
    "hero"
  ],
  frame15: [
    "frame15",
    "searchBar",
    "frame12",
    "textInput",
    "textbox",
    "inputLieu",
    "dropdown",
    "dropdown3",
    "frame14",
    "frame13",
    "dropdown4",
    "dropdown5",
    "dropdown8",
    "dropdown9",
    "dropdown6",
    "frame7",
    "loginMobile",
    "frame8",
    "frame10",
    "scrollBar",
    "mapPin",
    "frame11",
    "iconSize",
    "mapPin2",
    "frame16",
    "iconSize2",
    "phClockCountdownFill",
    "mapPin3",
    "frame17",
    "iconSize3",
    "phClockCountdownFill2",
    "mapPin4",
    "frame18",
    "iconSize4",
    "mapPin5",
    "frame19",
    "iconSize5",
    "phClockCountdownFill3",
    "map",
    "mapPin6",
    "frame20",
    "iconSize6",
    "phClockCountdownFill4",
    "mapPin7",
    "frame21",
    "iconSize7",
    "buttonLastMin",
    "text2",
    "jobCard",
    "frame22",
    "frame23",
    "companyLogo",
    "rectangle183",
    "frame1437254219",
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4",
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8",
    "frame28",
    "frame29"
  ],
  searchBar: [
    "searchBar",
    "frame12",
    "textInput",
    "textbox",
    "inputLieu",
    "dropdown",
    "dropdown3",
    "frame14",
    "frame13",
    "dropdown4",
    "dropdown5",
    "dropdown8",
    "dropdown9",
    "dropdown6"
  ],
  frame12: [
    "frame12",
    "textInput",
    "textbox",
    "inputLieu",
    "dropdown",
    "dropdown3"
  ],
  textInput: ["textInput", "textbox"],
  inputLieu: ["inputLieu"],
  dropdown: ["dropdown"],
  dropdown3: ["dropdown3"],
  frame14: [
    "frame14",
    "frame13",
    "dropdown4",
    "dropdown5",
    "dropdown8",
    "dropdown9",
    "dropdown6"
  ],
  frame13: [
    "frame13",
    "dropdown4",
    "dropdown5",
    "dropdown8",
    "dropdown9",
    "dropdown6"
  ],
  dropdown4: ["dropdown4"],
  dropdown5: ["dropdown5"],
  dropdown8: ["dropdown8"],
  dropdown9: ["dropdown9"],
  dropdown6: ["dropdown6"],
  frame7: [
    "frame7",
    "loginMobile",
    "frame8",
    "frame10",
    "scrollBar",
    "mapPin",
    "frame11",
    "iconSize",
    "mapPin2",
    "frame16",
    "iconSize2",
    "phClockCountdownFill",
    "mapPin3",
    "frame17",
    "iconSize3",
    "phClockCountdownFill2",
    "mapPin4",
    "frame18",
    "iconSize4",
    "mapPin5",
    "frame19",
    "iconSize5",
    "phClockCountdownFill3",
    "map",
    "mapPin6",
    "frame20",
    "iconSize6",
    "phClockCountdownFill4",
    "mapPin7",
    "frame21",
    "iconSize7",
    "buttonLastMin",
    "text2",
    "jobCard",
    "frame22",
    "frame23",
    "companyLogo",
    "rectangle183",
    "frame1437254219",
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4",
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8",
    "frame28"
  ],
  loginMobile: ["loginMobile", "frame8", "frame10", "scrollBar"],
  frame8: ["frame8", "frame10"],
  frame10: ["frame10"],
  scrollBar: ["scrollBar"],
  mapPin: ["mapPin", "frame11", "iconSize"],
  frame11: ["frame11", "iconSize"],
  iconSize: ["iconSize"],
  mapPin2: ["mapPin2", "frame16", "iconSize2", "phClockCountdownFill"],
  frame16: ["frame16", "iconSize2", "phClockCountdownFill"],
  iconSize2: ["iconSize2"],
  phClockCountdownFill: ["phClockCountdownFill"],
  mapPin3: ["mapPin3", "frame17", "iconSize3", "phClockCountdownFill2"],
  frame17: ["frame17", "iconSize3", "phClockCountdownFill2"],
  iconSize3: ["iconSize3"],
  phClockCountdownFill2: ["phClockCountdownFill2"],
  mapPin4: ["mapPin4", "frame18", "iconSize4"],
  frame18: ["frame18", "iconSize4"],
  iconSize4: ["iconSize4"],
  mapPin5: ["mapPin5", "frame19", "iconSize5", "phClockCountdownFill3"],
  frame19: ["frame19", "iconSize5", "phClockCountdownFill3"],
  iconSize5: ["iconSize5"],
  phClockCountdownFill3: ["phClockCountdownFill3"],
  map: ["map"],
  mapPin6: ["mapPin6", "frame20", "iconSize6", "phClockCountdownFill4"],
  frame20: ["frame20", "iconSize6", "phClockCountdownFill4"],
  iconSize6: ["iconSize6"],
  phClockCountdownFill4: ["phClockCountdownFill4"],
  mapPin7: ["mapPin7", "frame21", "iconSize7"],
  frame21: ["frame21", "iconSize7"],
  iconSize7: ["iconSize7"],
  buttonLastMin: ["buttonLastMin", "text2"],
  text2: ["text2"],
  jobCard: [
    "jobCard",
    "frame22",
    "frame23",
    "companyLogo",
    "rectangle183",
    "frame1437254219",
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4",
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8",
    "frame28"
  ],
  frame22: [
    "frame22",
    "frame23",
    "companyLogo",
    "rectangle183",
    "frame1437254219",
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4",
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8"
  ],
  frame23: ["frame23", "companyLogo", "rectangle183"],
  companyLogo: ["companyLogo", "rectangle183"],
  rectangle183: ["rectangle183"],
  frame1437254219: [
    "frame1437254219",
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4",
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8"
  ],
  frame24: [
    "frame24",
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4"
  ],
  frame25: [
    "frame25",
    "frame26",
    "paris75",
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4"
  ],
  frame26: ["frame26", "paris75"],
  paris75: ["paris75"],
  frame27: [
    "frame27",
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4"
  ],
  transportationTimeLine: [
    "transportationTimeLine",
    "transportationTime",
    "transportationTime2",
    "transportationTime3",
    "transportationTime4"
  ],
  transportationTime: ["transportationTime"],
  transportationTime2: ["transportationTime2"],
  transportationTime3: ["transportationTime3"],
  transportationTime4: ["transportationTime4"],
  frame1437254218: [
    "frame1437254218",
    "badgeBase",
    "text3",
    "badgeBase2",
    "text4",
    "badgeBase3",
    "text5",
    "badgeBase4",
    "text6",
    "badgeBase5",
    "text7",
    "badgeBase6",
    "text8"
  ],
  badgeBase: ["badgeBase", "text3"],
  text3: ["text3"],
  badgeBase2: ["badgeBase2", "text4"],
  text4: ["text4"],
  badgeBase3: ["badgeBase3", "text5"],
  text5: ["text5"],
  badgeBase4: ["badgeBase4", "text6"],
  text6: ["text6"],
  badgeBase5: ["badgeBase5", "text7"],
  text7: ["text7"],
  badgeBase6: ["badgeBase6", "text8"],
  text8: ["text8"],
  frame28: ["frame28"],
  frame29: ["frame29"],
  content: [
    "content",
    "badgeGroup",
    "message",
    "trouvezUnJobNaJamaisEteAussiSimple"
  ],
  badgeGroup: ["badgeGroup", "message"],
  message: ["message"],
  trouvezUnJobNaJamaisEteAussiSimple: ["trouvezUnJobNaJamaisEteAussiSimple"],
  frame6: ["frame6", "hero"],
  hero: ["hero"],
  benefices: [
    "benefices",
    "container",
    "content4",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content2",
    "message2",
    "heading",
    "supportingText",
    "container2",
    "content3",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text9",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text10",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text11",
    "supportingText4"
  ],
  container: [
    "container",
    "content4",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content2",
    "message2",
    "heading",
    "supportingText"
  ],
  content4: [
    "content4",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content2",
    "message2",
    "heading",
    "supportingText"
  ],
  headingAndSupportingText: [
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content2",
    "message2",
    "heading",
    "supportingText"
  ],
  headingAndBadge: [
    "headingAndBadge",
    "badgeGroup2",
    "content2",
    "message2",
    "heading"
  ],
  badgeGroup2: ["badgeGroup2", "content2", "message2"],
  content2: ["content2", "message2"],
  message2: ["message2"],
  heading: ["heading"],
  supportingText: ["supportingText"],
  container2: [
    "container2",
    "content3",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text9",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text10",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text11",
    "supportingText4"
  ],
  content3: [
    "content3",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text9",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text10",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text11",
    "supportingText4"
  ],
  featureText: [
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text9",
    "supportingText2"
  ],
  featuredIcon: ["featuredIcon"],
  textAndSupportingText: ["textAndSupportingText", "text9", "supportingText2"],
  text9: ["text9"],
  supportingText2: ["supportingText2"],
  featureText2: [
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text10",
    "supportingText3"
  ],
  featuredIcon2: ["featuredIcon2"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text10",
    "supportingText3"
  ],
  text10: ["text10"],
  supportingText3: ["supportingText3"],
  featureText3: [
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text11",
    "supportingText4"
  ],
  featuredIcon3: ["featuredIcon3"],
  textAndSupportingText3: [
    "textAndSupportingText3",
    "text11",
    "supportingText4"
  ],
  text11: ["text11"],
  supportingText4: ["supportingText4"],
  footer: [
    "footer",
    "container3",
    "content5",
    "column",
    "logo",
    "companyLogo2",
    "brand",
    "socials",
    "socialIcon",
    "socialIcon2",
    "footerLinksContainer2",
    "footerLinksColumn3",
    "heading4",
    "footerLinks3",
    "footerLink9",
    "footerLink10",
    "footerLink11",
    "footerLink12",
    "footerLink13",
    "footerLinksColumn4",
    "heading5",
    "footerLinks4",
    "footerLink14",
    "footerLink15",
    "footerLink16",
    "container4",
    "divider",
    "content6",
    "footerText"
  ],
  container3: [
    "container3",
    "content5",
    "column",
    "logo",
    "companyLogo2",
    "brand",
    "socials",
    "socialIcon",
    "socialIcon2",
    "footerLinksContainer2",
    "footerLinksColumn3",
    "heading4",
    "footerLinks3",
    "footerLink9",
    "footerLink10",
    "footerLink11",
    "footerLink12",
    "footerLink13",
    "footerLinksColumn4",
    "heading5",
    "footerLinks4",
    "footerLink14",
    "footerLink15",
    "footerLink16"
  ],
  content5: [
    "content5",
    "column",
    "logo",
    "companyLogo2",
    "brand",
    "socials",
    "socialIcon",
    "socialIcon2",
    "footerLinksContainer2",
    "footerLinksColumn3",
    "heading4",
    "footerLinks3",
    "footerLink9",
    "footerLink10",
    "footerLink11",
    "footerLink12",
    "footerLink13",
    "footerLinksColumn4",
    "heading5",
    "footerLinks4",
    "footerLink14",
    "footerLink15",
    "footerLink16"
  ],
  column: [
    "column",
    "logo",
    "companyLogo2",
    "brand",
    "socials",
    "socialIcon",
    "socialIcon2"
  ],
  logo: ["logo", "companyLogo2", "brand"],
  companyLogo2: ["companyLogo2", "brand"],
  brand: ["brand"],
  socials: ["socials", "socialIcon", "socialIcon2"],
  socialIcon: ["socialIcon"],
  socialIcon2: ["socialIcon2"],
  footerLinksContainer2: [
    "footerLinksContainer2",
    "footerLinksColumn3",
    "heading4",
    "footerLinks3",
    "footerLink9",
    "footerLink10",
    "footerLink11",
    "footerLink12",
    "footerLink13",
    "footerLinksColumn4",
    "heading5",
    "footerLinks4",
    "footerLink14",
    "footerLink15",
    "footerLink16"
  ],
  footerLinksColumn3: [
    "footerLinksColumn3",
    "heading4",
    "footerLinks3",
    "footerLink9",
    "footerLink10",
    "footerLink11",
    "footerLink12",
    "footerLink13"
  ],
  heading4: ["heading4"],
  footerLinks3: [
    "footerLinks3",
    "footerLink9",
    "footerLink10",
    "footerLink11",
    "footerLink12",
    "footerLink13"
  ],
  footerLink9: ["footerLink9"],
  footerLink10: ["footerLink10"],
  footerLink11: ["footerLink11"],
  footerLink12: ["footerLink12"],
  footerLink13: ["footerLink13"],
  footerLinksColumn4: [
    "footerLinksColumn4",
    "heading5",
    "footerLinks4",
    "footerLink14",
    "footerLink15",
    "footerLink16"
  ],
  heading5: ["heading5"],
  footerLinks4: [
    "footerLinks4",
    "footerLink14",
    "footerLink15",
    "footerLink16"
  ],
  footerLink14: ["footerLink14"],
  footerLink15: ["footerLink15"],
  footerLink16: ["footerLink16"],
  container4: ["container4", "divider", "content6", "footerText"],
  divider: ["divider"],
  content6: ["content6", "footerText"],
  footerText: ["footerText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  structureLp: "div";
  nav: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  frame4: "div";
  frame5: "div";
  menuItems: "div";
  frame1437254391: "div";
  frame15: "div";
  searchBar: "div";
  frame12: "div";
  textInput: typeof TextInput;
  inputLieu: typeof TextInput;
  dropdown: typeof Dropdown;
  dropdown3: typeof Dropdown;
  frame14: "div";
  frame13: "div";
  dropdown4: typeof Dropdown;
  dropdown5: typeof Dropdown;
  dropdown8: typeof Dropdown;
  dropdown9: typeof Dropdown;
  dropdown6: typeof Dropdown;
  frame7: "div";
  loginMobile: "div";
  frame8: "div";
  frame10: "div";
  scrollBar: "div";
  mapPin: "div";
  frame11: "div";
  iconSize: "div";
  mapPin2: "div";
  frame16: "div";
  iconSize2: "div";
  phClockCountdownFill: "div";
  mapPin3: "div";
  frame17: "div";
  iconSize3: "div";
  phClockCountdownFill2: "div";
  mapPin4: "div";
  frame18: "div";
  iconSize4: "div";
  mapPin5: "div";
  frame19: "div";
  iconSize5: "div";
  phClockCountdownFill3: "div";
  map: typeof Map;
  mapPin6: "div";
  frame20: "div";
  iconSize6: "div";
  phClockCountdownFill4: "div";
  mapPin7: "div";
  frame21: "div";
  iconSize7: "div";
  buttonLastMin: "div";
  text2: "div";
  jobCard: "div";
  frame22: "div";
  frame23: "div";
  companyLogo: "div";
  rectangle183: "div";
  frame1437254219: "div";
  frame24: "div";
  frame25: "div";
  frame26: "div";
  paris75: "div";
  frame27: "div";
  transportationTimeLine: "div";
  transportationTime: "div";
  transportationTime2: "div";
  transportationTime3: "div";
  transportationTime4: "div";
  frame1437254218: "div";
  badgeBase: "div";
  text3: "div";
  badgeBase2: "div";
  text4: "div";
  badgeBase3: "div";
  text5: "div";
  badgeBase4: "div";
  text6: "div";
  badgeBase5: "div";
  text7: "div";
  badgeBase6: "div";
  text8: "div";
  frame28: "div";
  frame29: "div";
  content: "div";
  badgeGroup: "div";
  message: "div";
  trouvezUnJobNaJamaisEteAussiSimple: "div";
  frame6: "div";
  hero: "div";
  benefices: "div";
  container: "div";
  content4: "div";
  headingAndSupportingText: "div";
  headingAndBadge: "div";
  badgeGroup2: "div";
  content2: "div";
  message2: "div";
  heading: "div";
  supportingText: "div";
  container2: "div";
  content3: "div";
  featureText: "div";
  featuredIcon: "div";
  textAndSupportingText: "div";
  text9: "div";
  supportingText2: "div";
  featureText2: "div";
  featuredIcon2: "div";
  textAndSupportingText2: "div";
  text10: "div";
  supportingText3: "div";
  featureText3: "div";
  featuredIcon3: "div";
  textAndSupportingText3: "div";
  text11: "div";
  supportingText4: "div";
  footer: "div";
  container3: "div";
  content5: "div";
  column: "div";
  logo: "div";
  companyLogo2: "div";
  brand: "div";
  socials: "div";
  socialIcon: "div";
  socialIcon2: "div";
  footerLinksContainer2: "div";
  footerLinksColumn3: "div";
  heading4: "div";
  footerLinks3: "div";
  footerLink9: typeof Footerlink;
  footerLink10: typeof Footerlink;
  footerLink11: typeof Footerlink;
  footerLink12: typeof Footerlink;
  footerLink13: typeof Footerlink;
  footerLinksColumn4: "div";
  heading5: "div";
  footerLinks4: "div";
  footerLink14: typeof Footerlink;
  footerLink15: typeof Footerlink;
  footerLink16: typeof Footerlink;
  container4: "div";
  divider: "div";
  content6: "div";
  footerText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccueil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccueil__VariantsArgs;
    args?: PlasmicAccueil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccueil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccueil__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccueil__ArgProps,
          internalVariantPropNames: PlasmicAccueil__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccueil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccueil";
  } else {
    func.displayName = `PlasmicAccueil.${nodeName}`;
  }
  return func;
}

export const PlasmicAccueil = Object.assign(
  // Top-level PlasmicAccueil renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    structureLp: makeNodeComponent("structureLp"),
    nav: makeNodeComponent("nav"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    menuItems: makeNodeComponent("menuItems"),
    frame1437254391: makeNodeComponent("frame1437254391"),
    frame15: makeNodeComponent("frame15"),
    searchBar: makeNodeComponent("searchBar"),
    frame12: makeNodeComponent("frame12"),
    textInput: makeNodeComponent("textInput"),
    inputLieu: makeNodeComponent("inputLieu"),
    dropdown: makeNodeComponent("dropdown"),
    dropdown3: makeNodeComponent("dropdown3"),
    frame14: makeNodeComponent("frame14"),
    frame13: makeNodeComponent("frame13"),
    dropdown4: makeNodeComponent("dropdown4"),
    dropdown5: makeNodeComponent("dropdown5"),
    dropdown8: makeNodeComponent("dropdown8"),
    dropdown9: makeNodeComponent("dropdown9"),
    dropdown6: makeNodeComponent("dropdown6"),
    frame7: makeNodeComponent("frame7"),
    loginMobile: makeNodeComponent("loginMobile"),
    frame8: makeNodeComponent("frame8"),
    frame10: makeNodeComponent("frame10"),
    scrollBar: makeNodeComponent("scrollBar"),
    mapPin: makeNodeComponent("mapPin"),
    frame11: makeNodeComponent("frame11"),
    iconSize: makeNodeComponent("iconSize"),
    mapPin2: makeNodeComponent("mapPin2"),
    frame16: makeNodeComponent("frame16"),
    iconSize2: makeNodeComponent("iconSize2"),
    phClockCountdownFill: makeNodeComponent("phClockCountdownFill"),
    mapPin3: makeNodeComponent("mapPin3"),
    frame17: makeNodeComponent("frame17"),
    iconSize3: makeNodeComponent("iconSize3"),
    phClockCountdownFill2: makeNodeComponent("phClockCountdownFill2"),
    mapPin4: makeNodeComponent("mapPin4"),
    frame18: makeNodeComponent("frame18"),
    iconSize4: makeNodeComponent("iconSize4"),
    mapPin5: makeNodeComponent("mapPin5"),
    frame19: makeNodeComponent("frame19"),
    iconSize5: makeNodeComponent("iconSize5"),
    phClockCountdownFill3: makeNodeComponent("phClockCountdownFill3"),
    map: makeNodeComponent("map"),
    mapPin6: makeNodeComponent("mapPin6"),
    frame20: makeNodeComponent("frame20"),
    iconSize6: makeNodeComponent("iconSize6"),
    phClockCountdownFill4: makeNodeComponent("phClockCountdownFill4"),
    mapPin7: makeNodeComponent("mapPin7"),
    frame21: makeNodeComponent("frame21"),
    iconSize7: makeNodeComponent("iconSize7"),
    buttonLastMin: makeNodeComponent("buttonLastMin"),
    text2: makeNodeComponent("text2"),
    jobCard: makeNodeComponent("jobCard"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    companyLogo: makeNodeComponent("companyLogo"),
    rectangle183: makeNodeComponent("rectangle183"),
    frame1437254219: makeNodeComponent("frame1437254219"),
    frame24: makeNodeComponent("frame24"),
    frame25: makeNodeComponent("frame25"),
    frame26: makeNodeComponent("frame26"),
    paris75: makeNodeComponent("paris75"),
    frame27: makeNodeComponent("frame27"),
    transportationTimeLine: makeNodeComponent("transportationTimeLine"),
    transportationTime: makeNodeComponent("transportationTime"),
    transportationTime2: makeNodeComponent("transportationTime2"),
    transportationTime3: makeNodeComponent("transportationTime3"),
    transportationTime4: makeNodeComponent("transportationTime4"),
    frame1437254218: makeNodeComponent("frame1437254218"),
    badgeBase: makeNodeComponent("badgeBase"),
    text3: makeNodeComponent("text3"),
    badgeBase2: makeNodeComponent("badgeBase2"),
    text4: makeNodeComponent("text4"),
    badgeBase3: makeNodeComponent("badgeBase3"),
    text5: makeNodeComponent("text5"),
    badgeBase4: makeNodeComponent("badgeBase4"),
    text6: makeNodeComponent("text6"),
    badgeBase5: makeNodeComponent("badgeBase5"),
    text7: makeNodeComponent("text7"),
    badgeBase6: makeNodeComponent("badgeBase6"),
    text8: makeNodeComponent("text8"),
    frame28: makeNodeComponent("frame28"),
    frame29: makeNodeComponent("frame29"),
    content: makeNodeComponent("content"),
    badgeGroup: makeNodeComponent("badgeGroup"),
    message: makeNodeComponent("message"),
    trouvezUnJobNaJamaisEteAussiSimple: makeNodeComponent(
      "trouvezUnJobNaJamaisEteAussiSimple"
    ),
    frame6: makeNodeComponent("frame6"),
    hero: makeNodeComponent("hero"),
    benefices: makeNodeComponent("benefices"),
    container: makeNodeComponent("container"),
    content4: makeNodeComponent("content4"),
    headingAndSupportingText: makeNodeComponent("headingAndSupportingText"),
    headingAndBadge: makeNodeComponent("headingAndBadge"),
    badgeGroup2: makeNodeComponent("badgeGroup2"),
    content2: makeNodeComponent("content2"),
    message2: makeNodeComponent("message2"),
    heading: makeNodeComponent("heading"),
    supportingText: makeNodeComponent("supportingText"),
    container2: makeNodeComponent("container2"),
    content3: makeNodeComponent("content3"),
    featureText: makeNodeComponent("featureText"),
    featuredIcon: makeNodeComponent("featuredIcon"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text9: makeNodeComponent("text9"),
    supportingText2: makeNodeComponent("supportingText2"),
    featureText2: makeNodeComponent("featureText2"),
    featuredIcon2: makeNodeComponent("featuredIcon2"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text10: makeNodeComponent("text10"),
    supportingText3: makeNodeComponent("supportingText3"),
    featureText3: makeNodeComponent("featureText3"),
    featuredIcon3: makeNodeComponent("featuredIcon3"),
    textAndSupportingText3: makeNodeComponent("textAndSupportingText3"),
    text11: makeNodeComponent("text11"),
    supportingText4: makeNodeComponent("supportingText4"),
    footer: makeNodeComponent("footer"),
    container3: makeNodeComponent("container3"),
    content5: makeNodeComponent("content5"),
    column: makeNodeComponent("column"),
    logo: makeNodeComponent("logo"),
    companyLogo2: makeNodeComponent("companyLogo2"),
    brand: makeNodeComponent("brand"),
    socials: makeNodeComponent("socials"),
    socialIcon: makeNodeComponent("socialIcon"),
    socialIcon2: makeNodeComponent("socialIcon2"),
    footerLinksContainer2: makeNodeComponent("footerLinksContainer2"),
    footerLinksColumn3: makeNodeComponent("footerLinksColumn3"),
    heading4: makeNodeComponent("heading4"),
    footerLinks3: makeNodeComponent("footerLinks3"),
    footerLink9: makeNodeComponent("footerLink9"),
    footerLink10: makeNodeComponent("footerLink10"),
    footerLink11: makeNodeComponent("footerLink11"),
    footerLink12: makeNodeComponent("footerLink12"),
    footerLink13: makeNodeComponent("footerLink13"),
    footerLinksColumn4: makeNodeComponent("footerLinksColumn4"),
    heading5: makeNodeComponent("heading5"),
    footerLinks4: makeNodeComponent("footerLinks4"),
    footerLink14: makeNodeComponent("footerLink14"),
    footerLink15: makeNodeComponent("footerLink15"),
    footerLink16: makeNodeComponent("footerLink16"),
    container4: makeNodeComponent("container4"),
    divider: makeNodeComponent("divider"),
    content6: makeNodeComponent("content6"),
    footerText: makeNodeComponent("footerText"),

    // Metadata about props expected for PlasmicAccueil
    internalVariantProps: PlasmicAccueil__VariantProps,
    internalArgProps: PlasmicAccueil__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccueil;
/* prettier-ignore-end */
