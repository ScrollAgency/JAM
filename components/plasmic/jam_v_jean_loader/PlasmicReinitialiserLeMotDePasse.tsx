// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: CbX4hnpw0QDI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { TextInput } from "../../TextInput"; // plasmic-import: vyWUomJMQins/codeComponent
import { Button } from "../../Button"; // plasmic-import: NvY5LE-Ew6FA/codeComponent

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicReinitialiserLeMotDePasse.module.css"; // plasmic-import: CbX4hnpw0QDI/css

import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicReinitialiserLeMotDePasse__VariantMembers = {};
export type PlasmicReinitialiserLeMotDePasse__VariantsArgs = {};
type VariantPropType = keyof PlasmicReinitialiserLeMotDePasse__VariantsArgs;
export const PlasmicReinitialiserLeMotDePasse__VariantProps =
  new Array<VariantPropType>();

export type PlasmicReinitialiserLeMotDePasse__ArgsType = {};
type ArgPropType = keyof PlasmicReinitialiserLeMotDePasse__ArgsType;
export const PlasmicReinitialiserLeMotDePasse__ArgProps =
  new Array<ArgPropType>();

export type PlasmicReinitialiserLeMotDePasse__OverridesType = {
  reinitialiserLeMotDePasse?: Flex__<"div">;
  passwordReset?: Flex__<"div">;
  imageWrapper?: Flex__<"div">;
  logoWrapper?: Flex__<"div">;
  svg?: Flex__<"svg">;
  baseline?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  formWrapper?: Flex__<"div">;
  title?: Flex__<"div">;
  heading?: Flex__<"div">;
  form?: Flex__<"div">;
  inputWrapper?: Flex__<"div">;
  wrapper?: Flex__<"div">;
  textInput5?: Flex__<typeof TextInput>;
  wrapper2?: Flex__<"div">;
  progressBar?: Flex__<"div">;
  base?: Flex__<"div">;
  base2?: Flex__<"div">;
  base3?: Flex__<"div">;
  base4?: Flex__<"div">;
  signedByBaseProgressBarSteppedMediumLabelNone?: Flex__<"div">;
  progress?: Flex__<"div">;
  inProgress?: Flex__<"div">;
  base5?: Flex__<"div">;
  base6?: Flex__<"div">;
  textInput6?: Flex__<typeof TextInput>;
  text?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  buttonWrapper?: Flex__<"div">;
  linkWrapper?: Flex__<"div">;
  textLink?: Flex__<"div">;
  textLinkBase?: Flex__<"div">;
  text2?: Flex__<"div">;
};

export interface DefaultReinitialiserLeMotDePasseProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReinitialiserLeMotDePasse__RenderFunc(props: {
  variants: PlasmicReinitialiserLeMotDePasse__VariantsArgs;
  args: PlasmicReinitialiserLeMotDePasse__ArgsType;
  overrides: PlasmicReinitialiserLeMotDePasse__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicReinitialiserLeMotDePasse.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicReinitialiserLeMotDePasse.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicReinitialiserLeMotDePasse.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"reinitialiserLeMotDePasse"}
          data-plasmic-override={overrides.reinitialiserLeMotDePasse}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.reinitialiserLeMotDePasse
          )}
        >
          <div
            data-plasmic-name={"passwordReset"}
            data-plasmic-override={overrides.passwordReset}
            className={classNames(projectcss.all, sty.passwordReset)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"imageWrapper"}
              data-plasmic-override={overrides.imageWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.imageWrapper)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"logoWrapper"}
                data-plasmic-override={overrides.logoWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.logoWrapper)}
              >
                <PictogramIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"baseline"}
                  data-plasmic-override={overrides.baseline}
                  className={classNames(projectcss.all, sty.baseline)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2JHdn
                      )}
                    >
                      {"JOB"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame2"}
                    data-plasmic-override={overrides.frame2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xtiYh
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame3"}
                    data-plasmic-override={overrides.frame3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xPtBs
                      )}
                    >
                      {"ME"}
                    </div>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"formWrapper"}
              data-plasmic-override={overrides.formWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.formWrapper)}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div
                  data-plasmic-name={"heading"}
                  data-plasmic-override={overrides.heading}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.heading
                  )}
                >
                  {"R\u00e9initialiser le mot de passe"}
                </div>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                hasGap={true}
                className={classNames(projectcss.all, sty.form)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"inputWrapper"}
                  data-plasmic-override={overrides.inputWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.inputWrapper)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"wrapper"}
                    data-plasmic-override={overrides.wrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.wrapper)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput5"}
                      data-plasmic-override={overrides.textInput5}
                      className={classNames("__wab_instance", sty.textInput5)}
                      prefixedText={``}
                      type={"default"}
                    />

                    <Stack__
                      as={"div"}
                      data-plasmic-name={"wrapper2"}
                      data-plasmic-override={overrides.wrapper2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.wrapper2)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"progressBar"}
                        data-plasmic-override={overrides.progressBar}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.progressBar)}
                      >
                        <div
                          data-plasmic-name={"base"}
                          data-plasmic-override={overrides.base}
                          className={classNames(projectcss.all, sty.base)}
                        />

                        <div
                          data-plasmic-name={"base2"}
                          data-plasmic-override={overrides.base2}
                          className={classNames(projectcss.all, sty.base2)}
                        />

                        <div
                          data-plasmic-name={"base3"}
                          data-plasmic-override={overrides.base3}
                          className={classNames(projectcss.all, sty.base3)}
                        />

                        <div
                          data-plasmic-name={"base4"}
                          data-plasmic-override={overrides.base4}
                          className={classNames(projectcss.all, sty.base4)}
                        />

                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseProgressBarSteppedMediumLabelNone"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseProgressBarSteppedMediumLabelNone
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseProgressBarSteppedMediumLabelNone
                            )}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"progress"}
                            data-plasmic-override={overrides.progress}
                            className={classNames(projectcss.all, sty.progress)}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"inProgress"}
                            data-plasmic-override={overrides.inProgress}
                            className={classNames(
                              projectcss.all,
                              sty.inProgress
                            )}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"base5"}
                            data-plasmic-override={overrides.base5}
                            className={classNames(projectcss.all, sty.base5)}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"base6"}
                            data-plasmic-override={overrides.base6}
                            className={classNames(projectcss.all, sty.base6)}
                          />
                        ) : null}
                      </Stack__>
                      <TextInput
                        data-plasmic-name={"textInput6"}
                        data-plasmic-override={overrides.textInput6}
                        className={classNames("__wab_instance", sty.textInput6)}
                        prefixedText={``}
                        type={"default"}
                      />

                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {
                          "Utilisez 8 caract\u00e8res ou plus en m\u00e9langeant lettres, chiffres et symboles."
                        }
                      </div>
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        icon={"none"}
                        label={"ENREGISTRER"}
                      />
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"buttonWrapper"}
                  data-plasmic-override={overrides.buttonWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.buttonWrapper)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"linkWrapper"}
                    data-plasmic-override={overrides.linkWrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.linkWrapper)}
                  >
                    <div
                      data-plasmic-name={"textLink"}
                      data-plasmic-override={overrides.textLink}
                      className={classNames(projectcss.all, sty.textLink)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"textLinkBase"}
                        data-plasmic-override={overrides.textLinkBase}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.textLinkBase)}
                      >
                        <div
                          data-plasmic-name={"text2"}
                          data-plasmic-override={overrides.text2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text2
                          )}
                        >
                          {"Retour"}
                        </div>
                      </Stack__>
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  reinitialiserLeMotDePasse: [
    "reinitialiserLeMotDePasse",
    "passwordReset",
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "title",
    "heading",
    "form",
    "inputWrapper",
    "wrapper",
    "textInput5",
    "wrapper2",
    "progressBar",
    "base",
    "base2",
    "base3",
    "base4",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base5",
    "base6",
    "textInput6",
    "text",
    "button",
    "buttonWrapper",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  passwordReset: [
    "passwordReset",
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "title",
    "heading",
    "form",
    "inputWrapper",
    "wrapper",
    "textInput5",
    "wrapper2",
    "progressBar",
    "base",
    "base2",
    "base3",
    "base4",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base5",
    "base6",
    "textInput6",
    "text",
    "button",
    "buttonWrapper",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  imageWrapper: [
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3"
  ],
  logoWrapper: ["logoWrapper", "svg", "baseline", "frame", "frame2", "frame3"],
  svg: ["svg"],
  baseline: ["baseline", "frame", "frame2", "frame3"],
  frame: ["frame"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  formWrapper: [
    "formWrapper",
    "title",
    "heading",
    "form",
    "inputWrapper",
    "wrapper",
    "textInput5",
    "wrapper2",
    "progressBar",
    "base",
    "base2",
    "base3",
    "base4",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base5",
    "base6",
    "textInput6",
    "text",
    "button",
    "buttonWrapper",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  title: ["title", "heading"],
  heading: ["heading"],
  form: [
    "form",
    "inputWrapper",
    "wrapper",
    "textInput5",
    "wrapper2",
    "progressBar",
    "base",
    "base2",
    "base3",
    "base4",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base5",
    "base6",
    "textInput6",
    "text",
    "button",
    "buttonWrapper",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  inputWrapper: [
    "inputWrapper",
    "wrapper",
    "textInput5",
    "wrapper2",
    "progressBar",
    "base",
    "base2",
    "base3",
    "base4",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base5",
    "base6",
    "textInput6",
    "text",
    "button"
  ],
  wrapper: [
    "wrapper",
    "textInput5",
    "wrapper2",
    "progressBar",
    "base",
    "base2",
    "base3",
    "base4",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base5",
    "base6",
    "textInput6",
    "text",
    "button"
  ],
  textInput5: ["textInput5"],
  wrapper2: [
    "wrapper2",
    "progressBar",
    "base",
    "base2",
    "base3",
    "base4",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base5",
    "base6",
    "textInput6",
    "text",
    "button"
  ],
  progressBar: [
    "progressBar",
    "base",
    "base2",
    "base3",
    "base4",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base5",
    "base6"
  ],
  base: ["base"],
  base2: ["base2"],
  base3: ["base3"],
  base4: ["base4"],
  signedByBaseProgressBarSteppedMediumLabelNone: [
    "signedByBaseProgressBarSteppedMediumLabelNone"
  ],
  progress: ["progress"],
  inProgress: ["inProgress"],
  base5: ["base5"],
  base6: ["base6"],
  textInput6: ["textInput6"],
  text: ["text"],
  button: ["button"],
  buttonWrapper: [
    "buttonWrapper",
    "linkWrapper",
    "textLink",
    "textLinkBase",
    "text2"
  ],
  linkWrapper: ["linkWrapper", "textLink", "textLinkBase", "text2"],
  textLink: ["textLink", "textLinkBase", "text2"],
  textLinkBase: ["textLinkBase", "text2"],
  text2: ["text2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  reinitialiserLeMotDePasse: "div";
  passwordReset: "div";
  imageWrapper: "div";
  logoWrapper: "div";
  svg: "svg";
  baseline: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  formWrapper: "div";
  title: "div";
  heading: "div";
  form: "div";
  inputWrapper: "div";
  wrapper: "div";
  textInput5: typeof TextInput;
  wrapper2: "div";
  progressBar: "div";
  base: "div";
  base2: "div";
  base3: "div";
  base4: "div";
  signedByBaseProgressBarSteppedMediumLabelNone: "div";
  progress: "div";
  inProgress: "div";
  base5: "div";
  base6: "div";
  textInput6: typeof TextInput;
  text: "div";
  button: typeof Button;
  buttonWrapper: "div";
  linkWrapper: "div";
  textLink: "div";
  textLinkBase: "div";
  text2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReinitialiserLeMotDePasse__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReinitialiserLeMotDePasse__VariantsArgs;
    args?: PlasmicReinitialiserLeMotDePasse__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReinitialiserLeMotDePasse__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReinitialiserLeMotDePasse__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReinitialiserLeMotDePasse__ArgProps,
          internalVariantPropNames:
            PlasmicReinitialiserLeMotDePasse__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReinitialiserLeMotDePasse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "reinitialiserLeMotDePasse") {
    func.displayName = "PlasmicReinitialiserLeMotDePasse";
  } else {
    func.displayName = `PlasmicReinitialiserLeMotDePasse.${nodeName}`;
  }
  return func;
}

export const PlasmicReinitialiserLeMotDePasse = Object.assign(
  // Top-level PlasmicReinitialiserLeMotDePasse renders the root element
  makeNodeComponent("reinitialiserLeMotDePasse"),
  {
    // Helper components rendering sub-elements
    passwordReset: makeNodeComponent("passwordReset"),
    imageWrapper: makeNodeComponent("imageWrapper"),
    logoWrapper: makeNodeComponent("logoWrapper"),
    svg: makeNodeComponent("svg"),
    baseline: makeNodeComponent("baseline"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    formWrapper: makeNodeComponent("formWrapper"),
    title: makeNodeComponent("title"),
    heading: makeNodeComponent("heading"),
    form: makeNodeComponent("form"),
    inputWrapper: makeNodeComponent("inputWrapper"),
    wrapper: makeNodeComponent("wrapper"),
    textInput5: makeNodeComponent("textInput5"),
    wrapper2: makeNodeComponent("wrapper2"),
    progressBar: makeNodeComponent("progressBar"),
    base: makeNodeComponent("base"),
    base2: makeNodeComponent("base2"),
    base3: makeNodeComponent("base3"),
    base4: makeNodeComponent("base4"),
    signedByBaseProgressBarSteppedMediumLabelNone: makeNodeComponent(
      "signedByBaseProgressBarSteppedMediumLabelNone"
    ),
    progress: makeNodeComponent("progress"),
    inProgress: makeNodeComponent("inProgress"),
    base5: makeNodeComponent("base5"),
    base6: makeNodeComponent("base6"),
    textInput6: makeNodeComponent("textInput6"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),
    buttonWrapper: makeNodeComponent("buttonWrapper"),
    linkWrapper: makeNodeComponent("linkWrapper"),
    textLink: makeNodeComponent("textLink"),
    textLinkBase: makeNodeComponent("textLinkBase"),
    text2: makeNodeComponent("text2"),

    // Metadata about props expected for PlasmicReinitialiserLeMotDePasse
    internalVariantProps: PlasmicReinitialiserLeMotDePasse__VariantProps,
    internalArgProps: PlasmicReinitialiserLeMotDePasse__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Réinitialiser le mot de passe",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReinitialiserLeMotDePasse;
/* prettier-ignore-end */
