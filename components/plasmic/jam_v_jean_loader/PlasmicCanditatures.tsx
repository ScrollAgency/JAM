// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: pJkZO_iKR1iq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicCanditatures.module.css"; // plasmic-import: pJkZO_iKR1iq/css

import IconsIcon from "./icons/PlasmicIcon__Icons"; // plasmic-import: xPEF8FYe4Flo/icon
import Pictogram2Icon from "./icons/PlasmicIcon__Pictogram2"; // plasmic-import: 6mBt3D9w7c35/icon
import AddressBookIcon from "./icons/PlasmicIcon__AddressBook"; // plasmic-import: KdsPLv8Jc_Gc/icon
import CalendarCheckIcon from "./icons/PlasmicIcon__CalendarCheck"; // plasmic-import: nDTSrVR20Z0F/icon
import GearIcon from "./icons/PlasmicIcon__Gear"; // plasmic-import: RuEL3BXfKja4/icon
import SolarLogoutOutlineIcon from "./icons/PlasmicIcon__SolarLogoutOutline"; // plasmic-import: UZfkN-2mqbQ1/icon
import BriefcaseIcon from "./icons/PlasmicIcon__Briefcase"; // plasmic-import: 0VHaM6HaOJQH/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: yud1FH0Ox1FR/icon

createPlasmicElementProxy;

export type PlasmicCanditatures__VariantMembers = {};
export type PlasmicCanditatures__VariantsArgs = {};
type VariantPropType = keyof PlasmicCanditatures__VariantsArgs;
export const PlasmicCanditatures__VariantProps = new Array<VariantPropType>();

export type PlasmicCanditatures__ArgsType = {};
type ArgPropType = keyof PlasmicCanditatures__ArgsType;
export const PlasmicCanditatures__ArgProps = new Array<ArgPropType>();

export type PlasmicCanditatures__OverridesType = {
  root?: Flex__<"div">;
  pagesCandidaturesEmptyState?: Flex__<"div">;
  frame1437254293?: Flex__<"div">;
  frame1437254291?: Flex__<"div">;
  menu?: Flex__<"div">;
  frame1171275843?: Flex__<"div">;
  logoWrapper?: Flex__<"div">;
  baseline?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  frame1171275846?: Flex__<"div">;
  frame1437253912?: Flex__<"div">;
  navTitle?: Flex__<"div">;
  textInputBase?: Flex__<"div">;
  inputWithLabel?: Flex__<"div">;
  input?: Flex__<"div">;
  content?: Flex__<"div">;
  text?: Flex__<"div">;
  hintText?: Flex__<"div">;
  navTitle2?: Flex__<"div">;
  textInputBase2?: Flex__<"div">;
  inputWithLabel2?: Flex__<"div">;
  input2?: Flex__<"div">;
  content2?: Flex__<"div">;
  text2?: Flex__<"div">;
  hintText2?: Flex__<"div">;
  navDropdown?: Flex__<"div">;
  navTitle3?: Flex__<"div">;
  textInputBase3?: Flex__<"div">;
  inputWithLabel3?: Flex__<"div">;
  input3?: Flex__<"div">;
  content3?: Flex__<"div">;
  text3?: Flex__<"div">;
  hintText3?: Flex__<"div">;
  frame1437254303?: Flex__<"div">;
  navSubtitle?: Flex__<"div">;
  monCompte?: Flex__<"div">;
  navSubtitle2?: Flex__<"div">;
  monCompte2?: Flex__<"div">;
  monCompte3?: Flex__<"div">;
  tableHeader?: Flex__<"div">;
  text4?: Flex__<"div">;
  expandTab?: Flex__<"div">;
  frame1437254352?: Flex__<"div">;
  frame1437254292?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame1437254294?: Flex__<"div">;
  heading?: Flex__<"div">;
  frame1437253890?: Flex__<"div">;
  card?: Flex__<"div">;
  content4?: Flex__<"div">;
  featuredIcon?: Flex__<"div">;
  textAndSupportingText?: Flex__<"div">;
  text5?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  frame1437254350?: Flex__<"div">;
  application?: Flex__<"div">;
  frame5?: Flex__<"div">;
  content5?: Flex__<"div">;
  tabs?: Flex__<"div">;
  wrapper?: Flex__<"div">;
  button2?: Flex__<"div">;
  heading2?: Flex__<"div">;
  rectangle1?: Flex__<"div">;
  form?: Flex__<"div">;
  frame1437254351?: Flex__<"div">;
  inputWrapper?: Flex__<"div">;
  inputWrapper2?: Flex__<"div">;
  inputWrapper3?: Flex__<"div">;
  label?: Flex__<"div">;
  inputWrapper4?: Flex__<"div">;
  dropdownBase?: Flex__<"div">;
  inputWithLabel4?: Flex__<"div">;
  input4?: Flex__<"div">;
  contentWrapper?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  country?: Flex__<"div">;
  progressBar?: Flex__<"div">;
  signedByBaseProgressBarSteppedMediumLabelNone?: Flex__<"div">;
  progress?: Flex__<"div">;
  inProgress?: Flex__<"div">;
  base?: Flex__<"div">;
  base2?: Flex__<"div">;
  base3?: Flex__<"div">;
  base4?: Flex__<"div">;
  base5?: Flex__<"div">;
  base6?: Flex__<"div">;
};

export interface DefaultCanditaturesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCanditatures__RenderFunc(props: {
  variants: PlasmicCanditatures__VariantsArgs;
  args: PlasmicCanditatures__ArgsType;
  overrides: PlasmicCanditatures__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"pagesCandidaturesEmptyState"}
            data-plasmic-override={overrides.pagesCandidaturesEmptyState}
            className={classNames(
              projectcss.all,
              sty.pagesCandidaturesEmptyState
            )}
          >
            <div
              data-plasmic-name={"frame1437254293"}
              data-plasmic-override={overrides.frame1437254293}
              className={classNames(projectcss.all, sty.frame1437254293)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame1437254291"}
                data-plasmic-override={overrides.frame1437254291}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1437254291)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"menu"}
                  data-plasmic-override={overrides.menu}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.menu)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame1171275843"}
                    data-plasmic-override={overrides.frame1171275843}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1171275843)}
                  >
                    <IconsIcon
                      className={classNames(projectcss.all, sty.svg__iB6Nc)}
                      role={"img"}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"logoWrapper"}
                    data-plasmic-override={overrides.logoWrapper}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.logoWrapper)}
                  >
                    <Pictogram2Icon
                      className={classNames(projectcss.all, sty.svg__jFl1)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={"baseline"}
                      data-plasmic-override={overrides.baseline}
                      className={classNames(projectcss.all, sty.baseline)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame"}
                        data-plasmic-override={overrides.frame}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2G1Gf
                          )}
                        >
                          {"JOB"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame2"}
                        data-plasmic-override={overrides.frame2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4AHyD
                          )}
                        >
                          {"AROUND"}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame3"}
                        data-plasmic-override={overrides.frame3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame3)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mUaRf
                          )}
                        >
                          {"ME"}
                        </div>
                      </Stack__>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame1171275846"}
                    data-plasmic-override={overrides.frame1171275846}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1171275846)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437253912"}
                      data-plasmic-override={overrides.frame1437253912}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437253912
                      )}
                    >
                      <div
                        data-plasmic-name={"navTitle"}
                        data-plasmic-override={overrides.navTitle}
                        className={classNames(projectcss.all, sty.navTitle)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"textInputBase"}
                          data-plasmic-override={overrides.textInputBase}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.textInputBase
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"inputWithLabel"}
                            data-plasmic-override={overrides.inputWithLabel}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.inputWithLabel
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v2Odg
                                )}
                              >
                                {"Label"}
                              </div>
                            ) : null}
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.input)}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"content"}
                                data-plasmic-override={overrides.content}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.content
                                )}
                              >
                                <AddressBookIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__sYqpc
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"text"}
                                  data-plasmic-override={overrides.text}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text
                                  )}
                                >
                                  {"MES OFFRES"}
                                </div>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                          {false ? (
                            <div
                              data-plasmic-name={"hintText"}
                              data-plasmic-override={overrides.hintText}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.hintText
                              )}
                            >
                              {"This is a hint text to help user."}
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <div
                        data-plasmic-name={"navTitle2"}
                        data-plasmic-override={overrides.navTitle2}
                        className={classNames(projectcss.all, sty.navTitle2)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"textInputBase2"}
                          data-plasmic-override={overrides.textInputBase2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.textInputBase2
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"inputWithLabel2"}
                            data-plasmic-override={overrides.inputWithLabel2}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.inputWithLabel2
                            )}
                          >
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uogpA
                                )}
                              >
                                {"Label"}
                              </div>
                            ) : null}
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"input2"}
                              data-plasmic-override={overrides.input2}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.input2)}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"content2"}
                                data-plasmic-override={overrides.content2}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.content2
                                )}
                              >
                                <CalendarCheckIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__kLkKi
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"text2"}
                                  data-plasmic-override={overrides.text2}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text2
                                  )}
                                >
                                  {"MES ANNONCES"}
                                </div>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                          {false ? (
                            <div
                              data-plasmic-name={"hintText2"}
                              data-plasmic-override={overrides.hintText2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.hintText2
                              )}
                            >
                              {"This is a hint text to help user."}
                            </div>
                          ) : null}
                        </Stack__>
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"navDropdown"}
                        data-plasmic-override={overrides.navDropdown}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.navDropdown)}
                      >
                        <div
                          data-plasmic-name={"navTitle3"}
                          data-plasmic-override={overrides.navTitle3}
                          className={classNames(projectcss.all, sty.navTitle3)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"textInputBase3"}
                            data-plasmic-override={overrides.textInputBase3}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.textInputBase3
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputWithLabel3"}
                              data-plasmic-override={overrides.inputWithLabel3}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputWithLabel3
                              )}
                            >
                              {false ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__imJYs
                                  )}
                                >
                                  {"Label"}
                                </div>
                              ) : null}
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"input3"}
                                data-plasmic-override={overrides.input3}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.input3
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"content3"}
                                  data-plasmic-override={overrides.content3}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.content3
                                  )}
                                >
                                  <GearIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__tu2A8
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    data-plasmic-name={"text3"}
                                    data-plasmic-override={overrides.text3}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text3
                                    )}
                                  >
                                    {"PARAMETRES"}
                                  </div>
                                </Stack__>
                              </Stack__>
                            </Stack__>
                            {false ? (
                              <div
                                data-plasmic-name={"hintText3"}
                                data-plasmic-override={overrides.hintText3}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.hintText3
                                )}
                              >
                                {"This is a hint text to help user."}
                              </div>
                            ) : null}
                          </Stack__>
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame1437254303"}
                          data-plasmic-override={overrides.frame1437254303}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.frame1437254303
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"navSubtitle"}
                            data-plasmic-override={overrides.navSubtitle}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.navSubtitle
                            )}
                          >
                            <div
                              data-plasmic-name={"monCompte"}
                              data-plasmic-override={overrides.monCompte}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.monCompte
                              )}
                            >
                              {"Mon compte "}
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"navSubtitle2"}
                            data-plasmic-override={overrides.navSubtitle2}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.navSubtitle2
                            )}
                          >
                            <div
                              data-plasmic-name={"monCompte2"}
                              data-plasmic-override={overrides.monCompte2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.monCompte2
                              )}
                            >
                              {"Mes alertes"}
                            </div>
                          </Stack__>
                          {false ? (
                            <div
                              data-plasmic-name={"monCompte3"}
                              data-plasmic-override={overrides.monCompte3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.monCompte3
                              )}
                            >
                              {"Mon compte "}
                            </div>
                          ) : null}
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"tableHeader"}
                            data-plasmic-override={overrides.tableHeader}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.tableHeader
                            )}
                          >
                            <div
                              data-plasmic-name={"text4"}
                              data-plasmic-override={overrides.text4}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text4
                              )}
                            >
                              {""}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"expandTab"}
                    data-plasmic-override={overrides.expandTab}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.expandTab)}
                  >
                    <SolarLogoutOutlineIcon
                      className={classNames(projectcss.all, sty.svg__xrCya)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uso49
                      )}
                    >
                      {"D\u00e9connexion"}
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
              <div
                data-plasmic-name={"frame1437254352"}
                data-plasmic-override={overrides.frame1437254352}
                className={classNames(projectcss.all, sty.frame1437254352)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437254292"}
                  data-plasmic-override={overrides.frame1437254292}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437254292)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame4"}
                    data-plasmic-override={overrides.frame4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame4)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437254294"}
                      data-plasmic-override={overrides.frame1437254294}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437254294
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tVo8E
                        )}
                      >
                        <div
                          data-plasmic-name={"heading"}
                          data-plasmic-override={overrides.heading}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.heading
                          )}
                        >
                          {"Mes offres"}
                        </div>
                      </div>
                    </Stack__>
                    <div
                      data-plasmic-name={"frame1437253890"}
                      data-plasmic-override={overrides.frame1437253890}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437253890
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jdXO
                        )}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"card"}
                          data-plasmic-override={overrides.card}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.card)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zj6PS
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"content4"}
                              data-plasmic-override={overrides.content4}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.content4
                              )}
                            >
                              <div
                                data-plasmic-name={"featuredIcon"}
                                data-plasmic-override={overrides.featuredIcon}
                                className={classNames(
                                  projectcss.all,
                                  sty.featuredIcon
                                )}
                              >
                                <BriefcaseIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__vzlsh
                                  )}
                                  role={"img"}
                                />
                              </div>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"textAndSupportingText"}
                                data-plasmic-override={
                                  overrides.textAndSupportingText
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.textAndSupportingText
                                )}
                              >
                                <div
                                  data-plasmic-name={"text5"}
                                  data-plasmic-override={overrides.text5}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text5
                                  )}
                                >
                                  {
                                    "Vous n\u2019avez pas encore cr\u00e9e d\u2019offres"
                                  }
                                </div>
                                <div
                                  data-plasmic-name={"supportingText"}
                                  data-plasmic-override={
                                    overrides.supportingText
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.supportingText
                                  )}
                                >
                                  {
                                    "Creer des offres d\u2019emploi et trouvez la personne qui vous corresponds"
                                  }
                                </div>
                              </Stack__>
                            </Stack__>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zv3M
                            )}
                          />
                        </Stack__>
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437254350"}
                  data-plasmic-override={overrides.frame1437254350}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437254350)}
                >
                  <div
                    data-plasmic-name={"application"}
                    data-plasmic-override={overrides.application}
                    className={classNames(projectcss.all, sty.application)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame5"}
                      data-plasmic-override={overrides.frame5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame5)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content5"}
                        data-plasmic-override={overrides.content5}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content5)}
                      >
                        <div
                          data-plasmic-name={"tabs"}
                          data-plasmic-override={overrides.tabs}
                          className={classNames(projectcss.all, sty.tabs)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"wrapper"}
                            data-plasmic-override={overrides.wrapper}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.wrapper)}
                          >
                            <div
                              data-plasmic-name={"button2"}
                              data-plasmic-override={overrides.button2}
                              className={classNames(
                                projectcss.all,
                                sty.button2
                              )}
                            >
                              <div
                                data-plasmic-name={"heading2"}
                                data-plasmic-override={overrides.heading2}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.heading2
                                )}
                              >
                                {"Informations personnelles"}
                              </div>
                            </div>
                            {false ? (
                              <div
                                data-plasmic-name={"rectangle1"}
                                data-plasmic-override={overrides.rectangle1}
                                className={classNames(
                                  projectcss.all,
                                  sty.rectangle1
                                )}
                              />
                            ) : null}
                          </Stack__>
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.form)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame1437254351"}
                            data-plasmic-override={overrides.frame1437254351}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame1437254351
                            )}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputWrapper"}
                              data-plasmic-override={overrides.inputWrapper}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputWrapper
                              )}
                            />

                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputWrapper2"}
                              data-plasmic-override={overrides.inputWrapper2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputWrapper2
                              )}
                            />

                            <Stack__
                              as={"div"}
                              data-plasmic-name={"inputWrapper3"}
                              data-plasmic-override={overrides.inputWrapper3}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.inputWrapper3
                              )}
                            >
                              <div
                                data-plasmic-name={"label"}
                                data-plasmic-override={overrides.label}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.label
                                )}
                              >
                                {"T\u00e9l\u00e9phone*"}
                              </div>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"inputWrapper4"}
                                data-plasmic-override={overrides.inputWrapper4}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.inputWrapper4
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  data-plasmic-name={"dropdownBase"}
                                  data-plasmic-override={overrides.dropdownBase}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.dropdownBase
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"inputWithLabel4"}
                                    data-plasmic-override={
                                      overrides.inputWithLabel4
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.inputWithLabel4
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"input4"}
                                      data-plasmic-override={overrides.input4}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.input4
                                      )}
                                    >
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"contentWrapper"}
                                        data-plasmic-override={
                                          overrides.contentWrapper
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.contentWrapper
                                        )}
                                      >
                                        <PlasmicImg__
                                          data-plasmic-name={"img"}
                                          data-plasmic-override={overrides.img}
                                          alt={""}
                                          className={classNames(sty.img)}
                                          displayHeight={"24px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"24px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_v_jean_loader/images/iconFlag4.svg",
                                            fullWidth: 24,
                                            fullHeight: 24,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          data-plasmic-name={"country"}
                                          data-plasmic-override={
                                            overrides.country
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.country
                                          )}
                                        >
                                          {"FR (+33)"}
                                        </div>
                                      </Stack__>
                                      <ChevronDownIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__raBrT
                                        )}
                                        role={"img"}
                                      />
                                    </Stack__>
                                  </Stack__>
                                </Stack__>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"progressBar"}
                        data-plasmic-override={overrides.progressBar}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.progressBar)}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={
                              "signedByBaseProgressBarSteppedMediumLabelNone"
                            }
                            data-plasmic-override={
                              overrides.signedByBaseProgressBarSteppedMediumLabelNone
                            }
                            className={classNames(
                              projectcss.all,
                              sty.signedByBaseProgressBarSteppedMediumLabelNone
                            )}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"progress"}
                            data-plasmic-override={overrides.progress}
                            className={classNames(projectcss.all, sty.progress)}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"inProgress"}
                            data-plasmic-override={overrides.inProgress}
                            className={classNames(
                              projectcss.all,
                              sty.inProgress
                            )}
                          />
                        ) : null}
                        <div
                          data-plasmic-name={"base"}
                          data-plasmic-override={overrides.base}
                          className={classNames(projectcss.all, sty.base)}
                        />

                        <div
                          data-plasmic-name={"base2"}
                          data-plasmic-override={overrides.base2}
                          className={classNames(projectcss.all, sty.base2)}
                        />

                        <div
                          data-plasmic-name={"base3"}
                          data-plasmic-override={overrides.base3}
                          className={classNames(projectcss.all, sty.base3)}
                        />

                        {false ? (
                          <div
                            data-plasmic-name={"base4"}
                            data-plasmic-override={overrides.base4}
                            className={classNames(projectcss.all, sty.base4)}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"base5"}
                            data-plasmic-override={overrides.base5}
                            className={classNames(projectcss.all, sty.base5)}
                          />
                        ) : null}
                        {false ? (
                          <div
                            data-plasmic-name={"base6"}
                            data-plasmic-override={overrides.base6}
                            className={classNames(projectcss.all, sty.base6)}
                          />
                        ) : null}
                      </Stack__>
                    </Stack__>
                  </div>
                </Stack__>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pagesCandidaturesEmptyState",
    "frame1437254293",
    "frame1437254291",
    "menu",
    "frame1171275843",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "frame1171275846",
    "frame1437253912",
    "navTitle",
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText",
    "navTitle2",
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2",
    "navDropdown",
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3",
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4",
    "expandTab",
    "frame1437254352",
    "frame1437254292",
    "frame4",
    "frame1437254294",
    "heading",
    "frame1437253890",
    "card",
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText",
    "frame1437254350",
    "application",
    "frame5",
    "content5",
    "tabs",
    "wrapper",
    "button2",
    "heading2",
    "rectangle1",
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  pagesCandidaturesEmptyState: [
    "pagesCandidaturesEmptyState",
    "frame1437254293",
    "frame1437254291",
    "menu",
    "frame1171275843",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "frame1171275846",
    "frame1437253912",
    "navTitle",
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText",
    "navTitle2",
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2",
    "navDropdown",
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3",
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4",
    "expandTab",
    "frame1437254352",
    "frame1437254292",
    "frame4",
    "frame1437254294",
    "heading",
    "frame1437253890",
    "card",
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText",
    "frame1437254350",
    "application",
    "frame5",
    "content5",
    "tabs",
    "wrapper",
    "button2",
    "heading2",
    "rectangle1",
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  frame1437254293: [
    "frame1437254293",
    "frame1437254291",
    "menu",
    "frame1171275843",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "frame1171275846",
    "frame1437253912",
    "navTitle",
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText",
    "navTitle2",
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2",
    "navDropdown",
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3",
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4",
    "expandTab",
    "frame1437254352",
    "frame1437254292",
    "frame4",
    "frame1437254294",
    "heading",
    "frame1437253890",
    "card",
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText",
    "frame1437254350",
    "application",
    "frame5",
    "content5",
    "tabs",
    "wrapper",
    "button2",
    "heading2",
    "rectangle1",
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  frame1437254291: [
    "frame1437254291",
    "menu",
    "frame1171275843",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "frame1171275846",
    "frame1437253912",
    "navTitle",
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText",
    "navTitle2",
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2",
    "navDropdown",
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3",
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4",
    "expandTab"
  ],
  menu: [
    "menu",
    "frame1171275843",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "frame1171275846",
    "frame1437253912",
    "navTitle",
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText",
    "navTitle2",
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2",
    "navDropdown",
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3",
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4",
    "expandTab"
  ],
  frame1171275843: ["frame1171275843"],
  logoWrapper: ["logoWrapper", "baseline", "frame", "frame2", "frame3"],
  baseline: ["baseline", "frame", "frame2", "frame3"],
  frame: ["frame"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  frame1171275846: [
    "frame1171275846",
    "frame1437253912",
    "navTitle",
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText",
    "navTitle2",
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2",
    "navDropdown",
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3",
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4"
  ],
  frame1437253912: [
    "frame1437253912",
    "navTitle",
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText",
    "navTitle2",
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2",
    "navDropdown",
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3",
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4"
  ],
  navTitle: [
    "navTitle",
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText"
  ],
  textInputBase: [
    "textInputBase",
    "inputWithLabel",
    "input",
    "content",
    "text",
    "hintText"
  ],
  inputWithLabel: ["inputWithLabel", "input", "content", "text"],
  input: ["input", "content", "text"],
  content: ["content", "text"],
  text: ["text"],
  hintText: ["hintText"],
  navTitle2: [
    "navTitle2",
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2"
  ],
  textInputBase2: [
    "textInputBase2",
    "inputWithLabel2",
    "input2",
    "content2",
    "text2",
    "hintText2"
  ],
  inputWithLabel2: ["inputWithLabel2", "input2", "content2", "text2"],
  input2: ["input2", "content2", "text2"],
  content2: ["content2", "text2"],
  text2: ["text2"],
  hintText2: ["hintText2"],
  navDropdown: [
    "navDropdown",
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3",
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4"
  ],
  navTitle3: [
    "navTitle3",
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3"
  ],
  textInputBase3: [
    "textInputBase3",
    "inputWithLabel3",
    "input3",
    "content3",
    "text3",
    "hintText3"
  ],
  inputWithLabel3: ["inputWithLabel3", "input3", "content3", "text3"],
  input3: ["input3", "content3", "text3"],
  content3: ["content3", "text3"],
  text3: ["text3"],
  hintText3: ["hintText3"],
  frame1437254303: [
    "frame1437254303",
    "navSubtitle",
    "monCompte",
    "navSubtitle2",
    "monCompte2",
    "monCompte3",
    "tableHeader",
    "text4"
  ],
  navSubtitle: ["navSubtitle", "monCompte"],
  monCompte: ["monCompte"],
  navSubtitle2: ["navSubtitle2", "monCompte2"],
  monCompte2: ["monCompte2"],
  monCompte3: ["monCompte3"],
  tableHeader: ["tableHeader", "text4"],
  text4: ["text4"],
  expandTab: ["expandTab"],
  frame1437254352: [
    "frame1437254352",
    "frame1437254292",
    "frame4",
    "frame1437254294",
    "heading",
    "frame1437253890",
    "card",
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText",
    "frame1437254350",
    "application",
    "frame5",
    "content5",
    "tabs",
    "wrapper",
    "button2",
    "heading2",
    "rectangle1",
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  frame1437254292: [
    "frame1437254292",
    "frame4",
    "frame1437254294",
    "heading",
    "frame1437253890",
    "card",
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText"
  ],
  frame4: [
    "frame4",
    "frame1437254294",
    "heading",
    "frame1437253890",
    "card",
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText"
  ],
  frame1437254294: ["frame1437254294", "heading"],
  heading: ["heading"],
  frame1437253890: [
    "frame1437253890",
    "card",
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText"
  ],
  card: [
    "card",
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText"
  ],
  content4: [
    "content4",
    "featuredIcon",
    "textAndSupportingText",
    "text5",
    "supportingText"
  ],
  featuredIcon: ["featuredIcon"],
  textAndSupportingText: ["textAndSupportingText", "text5", "supportingText"],
  text5: ["text5"],
  supportingText: ["supportingText"],
  frame1437254350: [
    "frame1437254350",
    "application",
    "frame5",
    "content5",
    "tabs",
    "wrapper",
    "button2",
    "heading2",
    "rectangle1",
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  application: [
    "application",
    "frame5",
    "content5",
    "tabs",
    "wrapper",
    "button2",
    "heading2",
    "rectangle1",
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  frame5: [
    "frame5",
    "content5",
    "tabs",
    "wrapper",
    "button2",
    "heading2",
    "rectangle1",
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  content5: [
    "content5",
    "tabs",
    "wrapper",
    "button2",
    "heading2",
    "rectangle1",
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country"
  ],
  tabs: ["tabs", "wrapper", "button2", "heading2", "rectangle1"],
  wrapper: ["wrapper", "button2", "heading2", "rectangle1"],
  button2: ["button2", "heading2"],
  heading2: ["heading2"],
  rectangle1: ["rectangle1"],
  form: [
    "form",
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country"
  ],
  frame1437254351: [
    "frame1437254351",
    "inputWrapper",
    "inputWrapper2",
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country"
  ],
  inputWrapper: ["inputWrapper"],
  inputWrapper2: ["inputWrapper2"],
  inputWrapper3: [
    "inputWrapper3",
    "label",
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country"
  ],
  label: ["label"],
  inputWrapper4: [
    "inputWrapper4",
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country"
  ],
  dropdownBase: [
    "dropdownBase",
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country"
  ],
  inputWithLabel4: [
    "inputWithLabel4",
    "input4",
    "contentWrapper",
    "img",
    "country"
  ],
  input4: ["input4", "contentWrapper", "img", "country"],
  contentWrapper: ["contentWrapper", "img", "country"],
  img: ["img"],
  country: ["country"],
  progressBar: [
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  signedByBaseProgressBarSteppedMediumLabelNone: [
    "signedByBaseProgressBarSteppedMediumLabelNone"
  ],
  progress: ["progress"],
  inProgress: ["inProgress"],
  base: ["base"],
  base2: ["base2"],
  base3: ["base3"],
  base4: ["base4"],
  base5: ["base5"],
  base6: ["base6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pagesCandidaturesEmptyState: "div";
  frame1437254293: "div";
  frame1437254291: "div";
  menu: "div";
  frame1171275843: "div";
  logoWrapper: "div";
  baseline: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  frame1171275846: "div";
  frame1437253912: "div";
  navTitle: "div";
  textInputBase: "div";
  inputWithLabel: "div";
  input: "div";
  content: "div";
  text: "div";
  hintText: "div";
  navTitle2: "div";
  textInputBase2: "div";
  inputWithLabel2: "div";
  input2: "div";
  content2: "div";
  text2: "div";
  hintText2: "div";
  navDropdown: "div";
  navTitle3: "div";
  textInputBase3: "div";
  inputWithLabel3: "div";
  input3: "div";
  content3: "div";
  text3: "div";
  hintText3: "div";
  frame1437254303: "div";
  navSubtitle: "div";
  monCompte: "div";
  navSubtitle2: "div";
  monCompte2: "div";
  monCompte3: "div";
  tableHeader: "div";
  text4: "div";
  expandTab: "div";
  frame1437254352: "div";
  frame1437254292: "div";
  frame4: "div";
  frame1437254294: "div";
  heading: "div";
  frame1437253890: "div";
  card: "div";
  content4: "div";
  featuredIcon: "div";
  textAndSupportingText: "div";
  text5: "div";
  supportingText: "div";
  frame1437254350: "div";
  application: "div";
  frame5: "div";
  content5: "div";
  tabs: "div";
  wrapper: "div";
  button2: "div";
  heading2: "div";
  rectangle1: "div";
  form: "div";
  frame1437254351: "div";
  inputWrapper: "div";
  inputWrapper2: "div";
  inputWrapper3: "div";
  label: "div";
  inputWrapper4: "div";
  dropdownBase: "div";
  inputWithLabel4: "div";
  input4: "div";
  contentWrapper: "div";
  img: typeof PlasmicImg__;
  country: "div";
  progressBar: "div";
  signedByBaseProgressBarSteppedMediumLabelNone: "div";
  progress: "div";
  inProgress: "div";
  base: "div";
  base2: "div";
  base3: "div";
  base4: "div";
  base5: "div";
  base6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCanditatures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCanditatures__VariantsArgs;
    args?: PlasmicCanditatures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCanditatures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCanditatures__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCanditatures__ArgProps,
          internalVariantPropNames: PlasmicCanditatures__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCanditatures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCanditatures";
  } else {
    func.displayName = `PlasmicCanditatures.${nodeName}`;
  }
  return func;
}

export const PlasmicCanditatures = Object.assign(
  // Top-level PlasmicCanditatures renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pagesCandidaturesEmptyState: makeNodeComponent(
      "pagesCandidaturesEmptyState"
    ),
    frame1437254293: makeNodeComponent("frame1437254293"),
    frame1437254291: makeNodeComponent("frame1437254291"),
    menu: makeNodeComponent("menu"),
    frame1171275843: makeNodeComponent("frame1171275843"),
    logoWrapper: makeNodeComponent("logoWrapper"),
    baseline: makeNodeComponent("baseline"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame1171275846: makeNodeComponent("frame1171275846"),
    frame1437253912: makeNodeComponent("frame1437253912"),
    navTitle: makeNodeComponent("navTitle"),
    textInputBase: makeNodeComponent("textInputBase"),
    inputWithLabel: makeNodeComponent("inputWithLabel"),
    input: makeNodeComponent("input"),
    content: makeNodeComponent("content"),
    text: makeNodeComponent("text"),
    hintText: makeNodeComponent("hintText"),
    navTitle2: makeNodeComponent("navTitle2"),
    textInputBase2: makeNodeComponent("textInputBase2"),
    inputWithLabel2: makeNodeComponent("inputWithLabel2"),
    input2: makeNodeComponent("input2"),
    content2: makeNodeComponent("content2"),
    text2: makeNodeComponent("text2"),
    hintText2: makeNodeComponent("hintText2"),
    navDropdown: makeNodeComponent("navDropdown"),
    navTitle3: makeNodeComponent("navTitle3"),
    textInputBase3: makeNodeComponent("textInputBase3"),
    inputWithLabel3: makeNodeComponent("inputWithLabel3"),
    input3: makeNodeComponent("input3"),
    content3: makeNodeComponent("content3"),
    text3: makeNodeComponent("text3"),
    hintText3: makeNodeComponent("hintText3"),
    frame1437254303: makeNodeComponent("frame1437254303"),
    navSubtitle: makeNodeComponent("navSubtitle"),
    monCompte: makeNodeComponent("monCompte"),
    navSubtitle2: makeNodeComponent("navSubtitle2"),
    monCompte2: makeNodeComponent("monCompte2"),
    monCompte3: makeNodeComponent("monCompte3"),
    tableHeader: makeNodeComponent("tableHeader"),
    text4: makeNodeComponent("text4"),
    expandTab: makeNodeComponent("expandTab"),
    frame1437254352: makeNodeComponent("frame1437254352"),
    frame1437254292: makeNodeComponent("frame1437254292"),
    frame4: makeNodeComponent("frame4"),
    frame1437254294: makeNodeComponent("frame1437254294"),
    heading: makeNodeComponent("heading"),
    frame1437253890: makeNodeComponent("frame1437253890"),
    card: makeNodeComponent("card"),
    content4: makeNodeComponent("content4"),
    featuredIcon: makeNodeComponent("featuredIcon"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text5: makeNodeComponent("text5"),
    supportingText: makeNodeComponent("supportingText"),
    frame1437254350: makeNodeComponent("frame1437254350"),
    application: makeNodeComponent("application"),
    frame5: makeNodeComponent("frame5"),
    content5: makeNodeComponent("content5"),
    tabs: makeNodeComponent("tabs"),
    wrapper: makeNodeComponent("wrapper"),
    button2: makeNodeComponent("button2"),
    heading2: makeNodeComponent("heading2"),
    rectangle1: makeNodeComponent("rectangle1"),
    form: makeNodeComponent("form"),
    frame1437254351: makeNodeComponent("frame1437254351"),
    inputWrapper: makeNodeComponent("inputWrapper"),
    inputWrapper2: makeNodeComponent("inputWrapper2"),
    inputWrapper3: makeNodeComponent("inputWrapper3"),
    label: makeNodeComponent("label"),
    inputWrapper4: makeNodeComponent("inputWrapper4"),
    dropdownBase: makeNodeComponent("dropdownBase"),
    inputWithLabel4: makeNodeComponent("inputWithLabel4"),
    input4: makeNodeComponent("input4"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    img: makeNodeComponent("img"),
    country: makeNodeComponent("country"),
    progressBar: makeNodeComponent("progressBar"),
    signedByBaseProgressBarSteppedMediumLabelNone: makeNodeComponent(
      "signedByBaseProgressBarSteppedMediumLabelNone"
    ),
    progress: makeNodeComponent("progress"),
    inProgress: makeNodeComponent("inProgress"),
    base: makeNodeComponent("base"),
    base2: makeNodeComponent("base2"),
    base3: makeNodeComponent("base3"),
    base4: makeNodeComponent("base4"),
    base5: makeNodeComponent("base5"),
    base6: makeNodeComponent("base6"),

    // Metadata about props expected for PlasmicCanditatures
    internalVariantProps: PlasmicCanditatures__VariantProps,
    internalArgProps: PlasmicCanditatures__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCanditatures;
/* prettier-ignore-end */
