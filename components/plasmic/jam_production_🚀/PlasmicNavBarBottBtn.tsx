/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: VZNMDko9AGb3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicNavBarBottBtn.module.css"; // plasmic-import: VZNMDko9AGb3/css

import PhGridFourFillIcon from "./icons/PlasmicIcon__PhGridFourFill"; // plasmic-import: 0a5C2oOC6D74/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicNavBarBottBtn__VariantMembers = {
  type: "actif";
};
export type PlasmicNavBarBottBtn__VariantsArgs = {
  type?: MultiChoiceArg<"actif">;
};
type VariantPropType = keyof PlasmicNavBarBottBtn__VariantsArgs;
export const PlasmicNavBarBottBtn__VariantProps = new Array<VariantPropType>(
  "type"
);

export type PlasmicNavBarBottBtn__ArgsType = {
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNavBarBottBtn__ArgsType;
export const PlasmicNavBarBottBtn__ArgProps = new Array<ArgPropType>(
  "start",
  "label",
  "end"
);

export type PlasmicNavBarBottBtn__OverridesType = {
  frame1437253913?: Flex__<"a"> & Partial<LinkProps>;
  frame22?: Flex__<"div">;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
  ariaButton?: Flex__<typeof BaseButton>;
  softBackground?: Flex__<"div">;
  border?: Flex__<"div">;
};

export interface DefaultNavBarBottBtnProps {
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
  type?: MultiChoiceArg<"actif">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavBarBottBtn__RenderFunc(props: {
  variants: PlasmicNavBarBottBtn__VariantsArgs;
  args: PlasmicNavBarBottBtn__ArgsType;
  overrides: PlasmicNavBarBottBtn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <PlasmicLink__
      data-plasmic-name={"frame1437253913"}
      data-plasmic-override={overrides.frame1437253913}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame1437253913,
        { [sty.frame1437253913type_actif]: hasVariant($state, "type", "actif") }
      )}
      component={Link}
      href={`/candidatures`}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"frame22"}
        data-plasmic-override={overrides.frame22}
        className={classNames(projectcss.all, sty.frame22, {
          [sty.frame22type_actif]: hasVariant($state, "type", "actif")
        })}
      />

      <PhGridFourFillIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgtype_actif]: hasVariant($state, "type", "actif")
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.texttype_actif]: hasVariant($state, "type", "actif")
        })}
      >
        {hasVariant(globalVariants, "screen", "mobileOnly")
          ? "dddddddES"
          : "CANDIDATURES"}
      </div>
      <BaseButton
        data-plasmic-name={"ariaButton"}
        data-plasmic-override={overrides.ariaButton}
        className={classNames("__wab_instance", sty.ariaButton)}
        target={(() => {
          try {
            return $props.openLinkInNewTab ? "_blank" : "_self";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        {false ? (
          <div
            data-plasmic-name={"softBackground"}
            data-plasmic-override={overrides.softBackground}
            className={classNames(projectcss.all, sty.softBackground)}
          />
        ) : null}
        {false ? (
          <div
            data-plasmic-name={"border"}
            data-plasmic-override={overrides.border}
            className={classNames(projectcss.all, sty.border)}
          />
        ) : null}
        <div className={classNames(projectcss.all, sty.freeBox__lxS8Q)}>
          <div className={classNames(projectcss.all, sty.freeBox__rPbpd)}>
            {renderPlasmicSlot({
              defaultContents: (
                <CircleIcon
                  className={classNames(projectcss.all, sty.svg__bG5T)}
                  role={"img"}
                />
              ),

              value: args.start
            })}
          </div>
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ecO44
                )}
              >
                {"Text"}
              </div>
            ),
            value: args.label
          })}
          <div className={classNames(projectcss.all, sty.freeBox__qP0AI)}>
            {renderPlasmicSlot({
              defaultContents: (
                <PictogramIcon
                  className={classNames(projectcss.all, sty.svg__rTtBv)}
                  role={"img"}
                />
              ),

              value: args.end
            })}
          </div>
        </div>
      </BaseButton>
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame1437253913: [
    "frame1437253913",
    "frame22",
    "svg",
    "text",
    "ariaButton",
    "softBackground",
    "border"
  ],
  frame22: ["frame22"],
  svg: ["svg"],
  text: ["text"],
  ariaButton: ["ariaButton", "softBackground", "border"],
  softBackground: ["softBackground"],
  border: ["border"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame1437253913: "a";
  frame22: "div";
  svg: "svg";
  text: "div";
  ariaButton: typeof BaseButton;
  softBackground: "div";
  border: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBarBottBtn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBarBottBtn__VariantsArgs;
    args?: PlasmicNavBarBottBtn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBarBottBtn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavBarBottBtn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavBarBottBtn__ArgProps,
          internalVariantPropNames: PlasmicNavBarBottBtn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBarBottBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame1437253913") {
    func.displayName = "PlasmicNavBarBottBtn";
  } else {
    func.displayName = `PlasmicNavBarBottBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBarBottBtn = Object.assign(
  // Top-level PlasmicNavBarBottBtn renders the root element
  makeNodeComponent("frame1437253913"),
  {
    // Helper components rendering sub-elements
    frame22: makeNodeComponent("frame22"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    ariaButton: makeNodeComponent("ariaButton"),
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),

    // Metadata about props expected for PlasmicNavBarBottBtn
    internalVariantProps: PlasmicNavBarBottBtn__VariantProps,
    internalArgProps: PlasmicNavBarBottBtn__ArgProps
  }
);

export default PlasmicNavBarBottBtn;
/* prettier-ignore-end */
