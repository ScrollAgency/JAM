/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: ZOpOgPOAiAAY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: ZOpOgPOAiAAY/css

import Vector12Icon from "./icons/PlasmicIcon__Vector12"; // plasmic-import: 5U7jknIbCE_j/icon
import SocialIcon2Icon from "./icons/PlasmicIcon__SocialIcon2"; // plasmic-import: 85_PHFbzbYbc/icon
import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: uW8IxWz2drGt/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: jg2ejGQewG0B/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  footer?: Flex__<"footer">;
  container?: Flex__<"div">;
  column?: Flex__<"div">;
  frame6?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  frame7?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame12?: Flex__<"div">;
  socials?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  footerLinksContainer?: Flex__<"div">;
  footerLinks2?: Flex__<"div">;
  container2?: Flex__<"div">;
  divider?: Flex__<"div">;
  content2?: Flex__<"div">;
  footerText?: Flex__<"div">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <Stack__
      as={"footer"}
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.footer
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        hasGap={true}
        className={classNames(projectcss.all, sty.container)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          hasGap={true}
          className={classNames(projectcss.all, sty.column)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"frame6"}
            data-plasmic-override={overrides.frame6}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame6)}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <Vector12Icon
                className={classNames(projectcss.all, sty.svg__slGgf)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              className={classNames(projectcss.all, sty.frame7)}
            >
              <div
                data-plasmic-name={"frame9"}
                data-plasmic-override={overrides.frame9}
                className={classNames(projectcss.all, sty.frame9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7OzlH
                  )}
                >
                  {"JOB"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame11"}
                data-plasmic-override={overrides.frame11}
                className={classNames(projectcss.all, sty.frame11)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__re0Ij
                  )}
                >
                  {"AROUND"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame12"}
                data-plasmic-override={overrides.frame12}
                className={classNames(projectcss.all, sty.frame12)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bo1E5
                  )}
                >
                  {"ME"}
                </div>
              </div>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"socials"}
            data-plasmic-override={overrides.socials}
            hasGap={true}
            className={classNames(projectcss.all, sty.socials)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__sFlIi
              )}
              component={Link}
              platform={"nextjs"}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"24px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"24px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/jam_production_ðŸš€/images/socialIcon6.svg",
                  fullWidth: 24,
                  fullHeight: 24,
                  aspectRatio: 1
                }}
              />
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__fAxoM
              )}
              component={Link}
              platform={"nextjs"}
            >
              <SocialIcon2Icon
                className={classNames(projectcss.all, sty.svg__ipV2V)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__msQtb
              )}
              component={Link}
              href={(() => {
                try {
                  return "https://www.instagram.com/jobaroundme_official/?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw%3D%3D#";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
              target={"_blank"}
            >
              <Group3Icon
                className={classNames(projectcss.all, sty.svg__pi970)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___6Bo2N
              )}
              component={Link}
              platform={"nextjs"}
            >
              <Group4Icon
                className={classNames(projectcss.all, sty.svg__cyZhF)}
                role={"img"}
              />
            </PlasmicLink__>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2N5Mx
            )}
          >
            {"contact@job-around-me.com"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"footerLinksContainer"}
          data-plasmic-override={overrides.footerLinksContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.footerLinksContainer)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"footerLinks2"}
            data-plasmic-override={overrides.footerLinks2}
            hasGap={true}
            className={classNames(projectcss.all, sty.footerLinks2)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___8Sb2V
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToMentionsLegales"] = true
                  ? (() => {
                      const actionArgs = { destination: `/mentions-legales` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToMentionsLegales"] != null &&
                  typeof $steps["goToMentionsLegales"] === "object" &&
                  typeof $steps["goToMentionsLegales"].then === "function"
                ) {
                  $steps["goToMentionsLegales"] = await $steps[
                    "goToMentionsLegales"
                  ];
                }
              }}
              platform={"nextjs"}
            >
              {"Mentions l\u00e9gales"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___17TXq
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"Politique de confidentialit\u00e9"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__nunSr
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToConditionsGeneralesDutilisation"] = true
                  ? (() => {
                      const actionArgs = { destination: `/cgu` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToConditionsGeneralesDutilisation"] != null &&
                  typeof $steps["goToConditionsGeneralesDutilisation"] ===
                    "object" &&
                  typeof $steps["goToConditionsGeneralesDutilisation"].then ===
                    "function"
                ) {
                  $steps["goToConditionsGeneralesDutilisation"] = await $steps[
                    "goToConditionsGeneralesDutilisation"
                  ];
                }
              }}
              platform={"nextjs"}
            >
              {"CGU"}
            </PlasmicLink__>
          </Stack__>
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"container2"}
        data-plasmic-override={overrides.container2}
        hasGap={true}
        className={classNames(projectcss.all, sty.container2)}
      >
        <div
          data-plasmic-name={"divider"}
          data-plasmic-override={overrides.divider}
          className={classNames(projectcss.all, sty.divider)}
        />

        <div
          data-plasmic-name={"content2"}
          data-plasmic-override={overrides.content2}
          className={classNames(projectcss.all, sty.content2)}
        >
          <div
            data-plasmic-name={"footerText"}
            data-plasmic-override={overrides.footerText}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.footerText
            )}
          >
            {"\u00a9 2024 Job Around Me. Site par Agence Scroll."}
          </div>
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: [
    "footer",
    "container",
    "column",
    "frame6",
    "freeBox",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "socials",
    "img",
    "footerLinksContainer",
    "footerLinks2",
    "container2",
    "divider",
    "content2",
    "footerText"
  ],
  container: [
    "container",
    "column",
    "frame6",
    "freeBox",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "socials",
    "img",
    "footerLinksContainer",
    "footerLinks2"
  ],
  column: [
    "column",
    "frame6",
    "freeBox",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "socials",
    "img"
  ],
  frame6: ["frame6", "freeBox", "frame7", "frame9", "frame11", "frame12"],
  freeBox: ["freeBox"],
  frame7: ["frame7", "frame9", "frame11", "frame12"],
  frame9: ["frame9"],
  frame11: ["frame11"],
  frame12: ["frame12"],
  socials: ["socials", "img"],
  img: ["img"],
  footerLinksContainer: ["footerLinksContainer", "footerLinks2"],
  footerLinks2: ["footerLinks2"],
  container2: ["container2", "divider", "content2", "footerText"],
  divider: ["divider"],
  content2: ["content2", "footerText"],
  footerText: ["footerText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "footer";
  container: "div";
  column: "div";
  frame6: "div";
  freeBox: "div";
  frame7: "div";
  frame9: "div";
  frame11: "div";
  frame12: "div";
  socials: "div";
  img: typeof PlasmicImg__;
  footerLinksContainer: "div";
  footerLinks2: "div";
  container2: "div";
  divider: "div";
  content2: "div";
  footerText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    column: makeNodeComponent("column"),
    frame6: makeNodeComponent("frame6"),
    freeBox: makeNodeComponent("freeBox"),
    frame7: makeNodeComponent("frame7"),
    frame9: makeNodeComponent("frame9"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    socials: makeNodeComponent("socials"),
    img: makeNodeComponent("img"),
    footerLinksContainer: makeNodeComponent("footerLinksContainer"),
    footerLinks2: makeNodeComponent("footerLinks2"),
    container2: makeNodeComponent("container2"),
    divider: makeNodeComponent("divider"),
    content2: makeNodeComponent("content2"),
    footerText: makeNodeComponent("footerText"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
