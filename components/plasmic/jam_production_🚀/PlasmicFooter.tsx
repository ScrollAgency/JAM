/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: ZOpOgPOAiAAY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import JamSocialAccounts from "../../JamSocialAccounts"; // plasmic-import: 9Q-roeD1QeUd/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from ""; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: ZOpOgPOAiAAY/css

import Vector12Icon from "./icons/PlasmicIcon__Vector12"; // plasmic-import: 5U7jknIbCE_j/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {
  employeur: "employeur";
};
export type PlasmicFooter__VariantsArgs = {
  employeur?: SingleBooleanChoiceArg<"employeur">;
};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>(
  "employeur"
);

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  footer?: Flex__<"footer">;
  container?: Flex__<"div">;
  column?: Flex__<"div">;
  frame6?: Flex__<"div">;
  svg?: Flex__<"svg">;
  frame7?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame12?: Flex__<"div">;
  button2?: Flex__<typeof Button>;
  footerLinksContainer?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  footerLinksContainer2?: Flex__<"div">;
  footerLinksColumn?: Flex__<"div">;
  heading5?: Flex__<"div">;
  footerLinksColumn2?: Flex__<"div">;
  heading6?: Flex__<"div">;
  container2?: Flex__<"div">;
  footerLinksMobile?: Flex__<"div">;
  divider?: Flex__<"div">;
  content2?: Flex__<"div">;
  footerText?: Flex__<"div">;
};

export interface DefaultFooterProps {
  employeur?: SingleBooleanChoiceArg<"employeur">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "employeur",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.employeur
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <footer
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.footer,
        { [sty.footeremployeur]: hasVariant($state, "employeur", "employeur") }
      )}
    >
      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(projectcss.all, sty.container, {
          [sty.containeremployeur]: hasVariant($state, "employeur", "employeur")
        })}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(projectcss.all, sty.column, {
            [sty.columnemployeur]: hasVariant($state, "employeur", "employeur")
          })}
        >
          <div
            data-plasmic-name={"frame6"}
            data-plasmic-override={overrides.frame6}
            className={classNames(projectcss.all, sty.frame6)}
          >
            <Vector12Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgemployeur]: hasVariant($state, "employeur", "employeur")
              })}
              role={"img"}
            />

            <div
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              className={classNames(projectcss.all, sty.frame7)}
            >
              <div
                data-plasmic-name={"frame9"}
                data-plasmic-override={overrides.frame9}
                className={classNames(projectcss.all, sty.frame9)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7OzlH
                  )}
                >
                  {"JOB"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame11"}
                data-plasmic-override={overrides.frame11}
                className={classNames(projectcss.all, sty.frame11)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__re0Ij
                  )}
                >
                  {"AROUND"}
                </div>
              </div>
              <div
                data-plasmic-name={"frame12"}
                data-plasmic-override={overrides.frame12}
                className={classNames(projectcss.all, sty.frame12)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bo1E5
                  )}
                >
                  {"ME"}
                </div>
              </div>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2N5Mx,
              {
                [sty.textemployeur___2N5MxF93K9]: hasVariant(
                  $state,
                  "employeur",
                  "employeur"
                )
              }
            )}
          >
            {"contact@job-around-me.com"}
          </div>
          {(hasVariant($state, "employeur", "employeur") ? true : false) ? (
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2, {
                [sty.button2employeur]: hasVariant(
                  $state,
                  "employeur",
                  "employeur"
                )
              })}
              color={"white"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zcrny,
                    {
                      [sty.textemployeur__zcrnyF93K9]: hasVariant(
                        $state,
                        "employeur",
                        "employeur"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "employeur", "employeur")
                    ? "Acc\u00e8s CANDIDAT"
                    : "Acc\u00e8s employeur"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToAccueil"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAccueil"] != null &&
                  typeof $steps["goToAccueil"] === "object" &&
                  typeof $steps["goToAccueil"].then === "function"
                ) {
                  $steps["goToAccueil"] = await $steps["goToAccueil"];
                }
              }}
              roundedFull={true}
              size={"extraSmall"}
            />
          ) : null}
        </div>
        <div
          data-plasmic-name={"footerLinksContainer"}
          data-plasmic-override={overrides.footerLinksContainer}
          className={classNames(projectcss.all, sty.footerLinksContainer, {
            [sty.footerLinksContaineremployeur]: hasVariant(
              $state,
              "employeur",
              "employeur"
            )
          })}
        >
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button, {
              [sty.buttonemployeur]: hasVariant(
                $state,
                "employeur",
                "employeur"
              )
            })}
            color={"white"}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k1QQv
                )}
              >
                {"Acc\u00e8s employeur"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["goToAccueilEmployeur"] = true
                ? (() => {
                    const actionArgs = { destination: `/accueil-employeur` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToAccueilEmployeur"] != null &&
                typeof $steps["goToAccueilEmployeur"] === "object" &&
                typeof $steps["goToAccueilEmployeur"].then === "function"
              ) {
                $steps["goToAccueilEmployeur"] = await $steps[
                  "goToAccueilEmployeur"
                ];
              }
            }}
            roundedFull={true}
            size={"extraSmall"}
          />

          <div
            data-plasmic-name={"footerLinksContainer2"}
            data-plasmic-override={overrides.footerLinksContainer2}
            className={classNames(projectcss.all, sty.footerLinksContainer2, {
              [sty.footerLinksContainer2employeur]: hasVariant(
                $state,
                "employeur",
                "employeur"
              )
            })}
          >
            <div
              data-plasmic-name={"footerLinksColumn"}
              data-plasmic-override={overrides.footerLinksColumn}
              className={classNames(projectcss.all, sty.footerLinksColumn, {
                [sty.footerLinksColumnemployeur]: hasVariant(
                  $state,
                  "employeur",
                  "employeur"
                )
              })}
            >
              <div
                data-plasmic-name={"heading5"}
                data-plasmic-override={overrides.heading5}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.heading5,
                  {
                    [sty.heading5employeur]: hasVariant(
                      $state,
                      "employeur",
                      "employeur"
                    )
                  }
                )}
              >
                {"Info"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__d3FZz)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__nQqj5,
                    {
                      [sty.linkemployeur__nQqj5F93K9]: hasVariant(
                        $state,
                        "employeur",
                        "employeur"
                      )
                    }
                  )}
                  component={Link}
                  href={
                    hasVariant($state, "employeur", "employeur") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "/accueil-employeur#services"
                      : undefined
                  }
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#DDDDDD" }}
                    >
                      {"Services"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__qCzS,
                    {
                      [sty.linkemployeur__qCzSf93K9]: hasVariant(
                        $state,
                        "employeur",
                        "employeur"
                      )
                    }
                  )}
                  component={Link}
                  href={
                    hasVariant($state, "employeur", "employeur") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "/accueil-employeur/#offres"
                      : undefined
                  }
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#DDDDDD" }}
                    >
                      {"Offres"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__e2AcH,
                    {
                      [sty.linkemployeur__e2AcHf93K9]: hasVariant(
                        $state,
                        "employeur",
                        "employeur"
                      )
                    }
                  )}
                  component={Link}
                  href={
                    hasVariant($state, "employeur", "employeur") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "/accueil-employeur#faq"
                      : undefined
                  }
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#DDDDDD" }}
                    >
                      {"FAQ"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
              </div>
              <JamSocialAccounts
                className={classNames(
                  "__wab_instance",
                  sty.jamSocialAccounts__rpi9S,
                  {
                    [sty.jamSocialAccountsemployeur__rpi9Sf93K9]: hasVariant(
                      $state,
                      "employeur",
                      "employeur"
                    )
                  }
                )}
              />
            </div>
            <div
              data-plasmic-name={"footerLinksColumn2"}
              data-plasmic-override={overrides.footerLinksColumn2}
              className={classNames(projectcss.all, sty.footerLinksColumn2, {
                [sty.footerLinksColumn2employeur]: hasVariant(
                  $state,
                  "employeur",
                  "employeur"
                )
              })}
            >
              <div
                data-plasmic-name={"heading6"}
                data-plasmic-override={overrides.heading6}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.heading6,
                  {
                    [sty.heading6employeur]: hasVariant(
                      $state,
                      "employeur",
                      "employeur"
                    )
                  }
                )}
              >
                {"Legal"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___8QKcF)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___3M5Nc,
                    {
                      [sty.linkemployeur___3M5NcF93K9]: hasVariant(
                        $state,
                        "employeur",
                        "employeur"
                      )
                    }
                  )}
                  component={Link}
                  href={`/mentions-legales`}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#DDDDDD" }}
                    >
                      {"Mentions l\u00e9gales"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h2DmA,
                    {
                      [sty.textemployeur__h2DmAf93K9]: hasVariant(
                        $state,
                        "employeur",
                        "employeur"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#DDDDDD" }}
                    >
                      {"Politique de confidentialit\u00e9"}
                    </span>
                  </React.Fragment>
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__aeWed,
                    {
                      [sty.linkemployeur__aeWedF93K9]: hasVariant(
                        $state,
                        "employeur",
                        "employeur"
                      )
                    }
                  )}
                  component={Link}
                  href={`/cgu`}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#DDDDDD" }}
                    >
                      {"CGU/CGV"}
                    </span>
                  </React.Fragment>
                </PlasmicLink__>
              </div>
              <JamSocialAccounts
                className={classNames(
                  "__wab_instance",
                  sty.jamSocialAccounts__bNovp,
                  {
                    [sty.jamSocialAccountsemployeur__bNovpF93K9]: hasVariant(
                      $state,
                      "employeur",
                      "employeur"
                    )
                  }
                )}
                employeur={
                  hasVariant($state, "employeur", "employeur") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : hasVariant($state, "employeur", "employeur")
                    ? true
                    : undefined
                }
              />
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"container2"}
        data-plasmic-override={overrides.container2}
        className={classNames(projectcss.all, sty.container2, {
          [sty.container2employeur]: hasVariant(
            $state,
            "employeur",
            "employeur"
          )
        })}
      >
        <div
          data-plasmic-name={"footerLinksMobile"}
          data-plasmic-override={overrides.footerLinksMobile}
          className={classNames(projectcss.all, sty.footerLinksMobile, {
            [sty.footerLinksMobileemployeur]: hasVariant(
              $state,
              "employeur",
              "employeur"
            )
          })}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__t2B6C,
              {
                [sty.linkemployeur__t2B6CF93K9]: hasVariant(
                  $state,
                  "employeur",
                  "employeur"
                )
              }
            )}
            component={Link}
            href={`/mentions-legales`}
            platform={"nextjs"}
          >
            {"Mentions l\u00e9gales"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__gcbtg,
              {
                [sty.linkemployeur__gcbtgF93K9]: hasVariant(
                  $state,
                  "employeur",
                  "employeur"
                )
              }
            )}
            component={Link}
            href={""}
            platform={"nextjs"}
          >
            {"Politique de confidentialit\u00e9"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__hVnQ,
              {
                [sty.linkemployeur__hVnQf93K9]: hasVariant(
                  $state,
                  "employeur",
                  "employeur"
                )
              }
            )}
            component={Link}
            href={`/cgu`}
            onClick={async event => {
              const $steps = {};

              $steps["goToConditionsGeneralesDutilisation"] = true
                ? (() => {
                    const actionArgs = { destination: `/cgu` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToConditionsGeneralesDutilisation"] != null &&
                typeof $steps["goToConditionsGeneralesDutilisation"] ===
                  "object" &&
                typeof $steps["goToConditionsGeneralesDutilisation"].then ===
                  "function"
              ) {
                $steps["goToConditionsGeneralesDutilisation"] = await $steps[
                  "goToConditionsGeneralesDutilisation"
                ];
              }
            }}
            platform={"nextjs"}
          >
            {"CGU"}
          </PlasmicLink__>
        </div>
        <div
          data-plasmic-name={"divider"}
          data-plasmic-override={overrides.divider}
          className={classNames(projectcss.all, sty.divider)}
        />

        <div
          data-plasmic-name={"content2"}
          data-plasmic-override={overrides.content2}
          className={classNames(projectcss.all, sty.content2)}
        >
          <div
            data-plasmic-name={"footerText"}
            data-plasmic-override={overrides.footerText}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.footerText,
              {
                [sty.footerTextemployeur]: hasVariant(
                  $state,
                  "employeur",
                  "employeur"
                )
              }
            )}
          >
            {"\u00a9 2024 Job Around Me. Site par Agence Scroll."}
          </div>
        </div>
      </div>
    </footer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: [
    "footer",
    "container",
    "column",
    "frame6",
    "svg",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "button2",
    "footerLinksContainer",
    "button",
    "footerLinksContainer2",
    "footerLinksColumn",
    "heading5",
    "footerLinksColumn2",
    "heading6",
    "container2",
    "footerLinksMobile",
    "divider",
    "content2",
    "footerText"
  ],
  container: [
    "container",
    "column",
    "frame6",
    "svg",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "button2",
    "footerLinksContainer",
    "button",
    "footerLinksContainer2",
    "footerLinksColumn",
    "heading5",
    "footerLinksColumn2",
    "heading6"
  ],
  column: [
    "column",
    "frame6",
    "svg",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "button2"
  ],
  frame6: ["frame6", "svg", "frame7", "frame9", "frame11", "frame12"],
  svg: ["svg"],
  frame7: ["frame7", "frame9", "frame11", "frame12"],
  frame9: ["frame9"],
  frame11: ["frame11"],
  frame12: ["frame12"],
  button2: ["button2"],
  footerLinksContainer: [
    "footerLinksContainer",
    "button",
    "footerLinksContainer2",
    "footerLinksColumn",
    "heading5",
    "footerLinksColumn2",
    "heading6"
  ],
  button: ["button"],
  footerLinksContainer2: [
    "footerLinksContainer2",
    "footerLinksColumn",
    "heading5",
    "footerLinksColumn2",
    "heading6"
  ],
  footerLinksColumn: ["footerLinksColumn", "heading5"],
  heading5: ["heading5"],
  footerLinksColumn2: ["footerLinksColumn2", "heading6"],
  heading6: ["heading6"],
  container2: [
    "container2",
    "footerLinksMobile",
    "divider",
    "content2",
    "footerText"
  ],
  footerLinksMobile: ["footerLinksMobile"],
  divider: ["divider"],
  content2: ["content2", "footerText"],
  footerText: ["footerText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "footer";
  container: "div";
  column: "div";
  frame6: "div";
  svg: "svg";
  frame7: "div";
  frame9: "div";
  frame11: "div";
  frame12: "div";
  button2: typeof Button;
  footerLinksContainer: "div";
  button: typeof Button;
  footerLinksContainer2: "div";
  footerLinksColumn: "div";
  heading5: "div";
  footerLinksColumn2: "div";
  heading6: "div";
  container2: "div";
  footerLinksMobile: "div";
  divider: "div";
  content2: "div";
  footerText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    column: makeNodeComponent("column"),
    frame6: makeNodeComponent("frame6"),
    svg: makeNodeComponent("svg"),
    frame7: makeNodeComponent("frame7"),
    frame9: makeNodeComponent("frame9"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    button2: makeNodeComponent("button2"),
    footerLinksContainer: makeNodeComponent("footerLinksContainer"),
    button: makeNodeComponent("button"),
    footerLinksContainer2: makeNodeComponent("footerLinksContainer2"),
    footerLinksColumn: makeNodeComponent("footerLinksColumn"),
    heading5: makeNodeComponent("heading5"),
    footerLinksColumn2: makeNodeComponent("footerLinksColumn2"),
    heading6: makeNodeComponent("heading6"),
    container2: makeNodeComponent("container2"),
    footerLinksMobile: makeNodeComponent("footerLinksMobile"),
    divider: makeNodeComponent("divider"),
    content2: makeNodeComponent("content2"),
    footerText: makeNodeComponent("footerText"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
