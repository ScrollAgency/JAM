/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: gAnwjyfMiBe9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: RjZcZb_kakG7/component

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicMobileNavbarBottomCompany.module.css"; // plasmic-import: gAnwjyfMiBe9/css

import GridFourIcon from "./icons/PlasmicIcon__GridFour"; // plasmic-import: KzAe7cfwmhYT/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import MagnifyingGlassIcon from "./icons/PlasmicIcon__MagnifyingGlass"; // plasmic-import: fii_q6lckj-n/icon
import EnvelopeSimple2Icon from "./icons/PlasmicIcon__EnvelopeSimple2"; // plasmic-import: 44ROc7g2Vqof/icon
import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: M0oN64eO6n3z/icon
import HeartStraight2Icon from "./icons/PlasmicIcon__HeartStraight2"; // plasmic-import: IaiER4CsTFaK/icon

createPlasmicElementProxy;

export type PlasmicMobileNavbarBottomCompany__VariantMembers = {};
export type PlasmicMobileNavbarBottomCompany__VariantsArgs = {};
type VariantPropType = keyof PlasmicMobileNavbarBottomCompany__VariantsArgs;
export const PlasmicMobileNavbarBottomCompany__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMobileNavbarBottomCompany__ArgsType = {};
type ArgPropType = keyof PlasmicMobileNavbarBottomCompany__ArgsType;
export const PlasmicMobileNavbarBottomCompany__ArgProps =
  new Array<ArgPropType>();

export type PlasmicMobileNavbarBottomCompany__OverridesType = {
  mobileNavbarBottom?: Flex__<"nav">;
  frame1437253914?: Flex__<"a"> & Partial<LinkProps>;
  frame23?: Flex__<"div">;
  frame1437253915?: Flex__<"a"> & Partial<LinkProps>;
  frame24?: Flex__<"div">;
  frame1437253916?: Flex__<"a"> & Partial<LinkProps>;
  frame25?: Flex__<"div">;
};

export interface DefaultMobileNavbarBottomCompanyProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMobileNavbarBottomCompany__RenderFunc(props: {
  variants: PlasmicMobileNavbarBottomCompany__VariantsArgs;
  args: PlasmicMobileNavbarBottomCompany__ArgsType;
  overrides: PlasmicMobileNavbarBottomCompany__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    (hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
      <nav
        data-plasmic-name={"mobileNavbarBottom"}
        data-plasmic-override={overrides.mobileNavbarBottom}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.mobileNavbarBottom
        )}
      >
        <Button2
          className={classNames("__wab_instance", sty.button2__lFzQs)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yoUT
              )}
            >
              {"offres"}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["goToOffreEmployeur"] = true
              ? (() => {
                  const actionArgs = { destination: `/offre-employeur` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToOffreEmployeur"] != null &&
              typeof $steps["goToOffreEmployeur"] === "object" &&
              typeof $steps["goToOffreEmployeur"].then === "function"
            ) {
              $steps["goToOffreEmployeur"] = await $steps["goToOffreEmployeur"];
            }
          }}
          start={
            <GridFourIcon
              className={classNames(projectcss.all, sty.svg__k9QwA)}
              role={"img"}
            />
          }
          type={(() => {
            try {
              return $ctx.pagePath === "/offre-employeur" ? "actif" : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        />

        <Button2
          className={classNames("__wab_instance", sty.button2__hjd0N)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xkYfY
              )}
            >
              {"recherche"}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["goToRechercheCandidat"] = true
              ? (() => {
                  const actionArgs = { destination: `/recherche-candidat` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToRechercheCandidat"] != null &&
              typeof $steps["goToRechercheCandidat"] === "object" &&
              typeof $steps["goToRechercheCandidat"].then === "function"
            ) {
              $steps["goToRechercheCandidat"] = await $steps[
                "goToRechercheCandidat"
              ];
            }
          }}
          start={
            <MagnifyingGlassIcon
              className={classNames(projectcss.all, sty.svg__mP5Hm)}
              role={"img"}
            />
          }
          type={(() => {
            try {
              return $ctx.pagePath === "/recherche-candidat" ? "actif" : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        />

        <Button2
          className={classNames("__wab_instance", sty.button2__uDHdA)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hfotS
              )}
            >
              {"alertes"}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["goToMesAlertes"] = true
              ? (() => {
                  const actionArgs = { destination: `/alertes` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToMesAlertes"] != null &&
              typeof $steps["goToMesAlertes"] === "object" &&
              typeof $steps["goToMesAlertes"].then === "function"
            ) {
              $steps["goToMesAlertes"] = await $steps["goToMesAlertes"];
            }
          }}
          start={
            <EnvelopeSimple2Icon
              className={classNames(projectcss.all, sty.svg___0T5IH)}
              role={"img"}
            />
          }
          type={(() => {
            try {
              return $ctx.pagePath === "/alertes" ? "actif" : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        />

        <Button2
          className={classNames("__wab_instance", sty.button2__qSWa)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w9CYo
              )}
            >
              {"param\u00e8tres"}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["goToParametresEmployeur"] = true
              ? (() => {
                  const actionArgs = { destination: `/parametres-employeur` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToParametresEmployeur"] != null &&
              typeof $steps["goToParametresEmployeur"] === "object" &&
              typeof $steps["goToParametresEmployeur"].then === "function"
            ) {
              $steps["goToParametresEmployeur"] = await $steps[
                "goToParametresEmployeur"
              ];
            }
          }}
          start={
            <PhGearFillIcon
              className={classNames(projectcss.all, sty.svg__azyJh)}
              role={"img"}
            />
          }
          type={(() => {
            try {
              return $ctx.pagePath === "/parametres-employeur" ? "actif" : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
        />

        <PlasmicLink__
          data-plasmic-name={"frame1437253914"}
          data-plasmic-override={overrides.frame1437253914}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.frame1437253914
          )}
          component={Link}
          href={`/annonces`}
          platform={"nextjs"}
        >
          <div
            data-plasmic-name={"frame23"}
            data-plasmic-override={overrides.frame23}
            className={classNames(projectcss.all, sty.frame23)}
          />

          <HeartStraight2Icon
            className={classNames(projectcss.all, sty.svg__ggzBu)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cOh4Z
            )}
          >
            {"ANNONCES"}
          </div>
        </PlasmicLink__>
        <PlasmicLink__
          data-plasmic-name={"frame1437253915"}
          data-plasmic-override={overrides.frame1437253915}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.frame1437253915
          )}
          component={Link}
          href={`/alertes`}
          platform={"nextjs"}
        >
          <div
            data-plasmic-name={"frame24"}
            data-plasmic-override={overrides.frame24}
            className={classNames(projectcss.all, sty.frame24)}
          />

          <EnvelopeSimple2Icon
            className={classNames(projectcss.all, sty.svg__fpg22)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cuXda
            )}
          >
            {"ALERTES"}
          </div>
        </PlasmicLink__>
        <PlasmicLink__
          data-plasmic-name={"frame1437253916"}
          data-plasmic-override={overrides.frame1437253916}
          className={classNames(
            projectcss.all,
            projectcss.a,
            sty.frame1437253916
          )}
          component={Link}
          href={"/parametres"}
          platform={"nextjs"}
        >
          <div
            data-plasmic-name={"frame25"}
            data-plasmic-override={overrides.frame25}
            className={classNames(projectcss.all, sty.frame25)}
          />

          <PhGearFillIcon
            className={classNames(projectcss.all, sty.svg__eBmFh)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z0Rkm
            )}
          >
            {"PARAM\u00c8TRES"}
          </div>
        </PlasmicLink__>
      </nav>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mobileNavbarBottom: [
    "mobileNavbarBottom",
    "frame1437253914",
    "frame23",
    "frame1437253915",
    "frame24",
    "frame1437253916",
    "frame25"
  ],
  frame1437253914: ["frame1437253914", "frame23"],
  frame23: ["frame23"],
  frame1437253915: ["frame1437253915", "frame24"],
  frame24: ["frame24"],
  frame1437253916: ["frame1437253916", "frame25"],
  frame25: ["frame25"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mobileNavbarBottom: "nav";
  frame1437253914: "a";
  frame23: "div";
  frame1437253915: "a";
  frame24: "div";
  frame1437253916: "a";
  frame25: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMobileNavbarBottomCompany__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMobileNavbarBottomCompany__VariantsArgs;
    args?: PlasmicMobileNavbarBottomCompany__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMobileNavbarBottomCompany__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMobileNavbarBottomCompany__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMobileNavbarBottomCompany__ArgProps,
          internalVariantPropNames:
            PlasmicMobileNavbarBottomCompany__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMobileNavbarBottomCompany__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mobileNavbarBottom") {
    func.displayName = "PlasmicMobileNavbarBottomCompany";
  } else {
    func.displayName = `PlasmicMobileNavbarBottomCompany.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileNavbarBottomCompany = Object.assign(
  // Top-level PlasmicMobileNavbarBottomCompany renders the root element
  makeNodeComponent("mobileNavbarBottom"),
  {
    // Helper components rendering sub-elements
    frame1437253914: makeNodeComponent("frame1437253914"),
    frame23: makeNodeComponent("frame23"),
    frame1437253915: makeNodeComponent("frame1437253915"),
    frame24: makeNodeComponent("frame24"),
    frame1437253916: makeNodeComponent("frame1437253916"),
    frame25: makeNodeComponent("frame25"),

    // Metadata about props expected for PlasmicMobileNavbarBottomCompany
    internalVariantProps: PlasmicMobileNavbarBottomCompany__VariantProps,
    internalArgProps: PlasmicMobileNavbarBottomCompany__ArgProps
  }
);

export default PlasmicMobileNavbarBottomCompany;
/* prettier-ignore-end */
