/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: 5gbU-LxT7JdH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import { DataGridV2 } from "../../others/DataGridV2/DataGridV2"; // plasmic-import: iL_5-0entnZc/codeComponent
import MobileNavbarBottom from "../../MobileNavbarBottom"; // plasmic-import: BIS-N7QZzUVV/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicMesCandidatures.module.css"; // plasmic-import: 5gbU-LxT7JdH/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import IconPhBriefcaseIcon from "./icons/PlasmicIcon__IconPhBriefcase"; // plasmic-import: E-c3RGwvaig6/icon

createPlasmicElementProxy;

export type PlasmicMesCandidatures__VariantMembers = {};
export type PlasmicMesCandidatures__VariantsArgs = {};
type VariantPropType = keyof PlasmicMesCandidatures__VariantsArgs;
export const PlasmicMesCandidatures__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMesCandidatures__ArgsType = {};
type ArgPropType = keyof PlasmicMesCandidatures__ArgsType;
export const PlasmicMesCandidatures__ArgProps = new Array<ArgPropType>();

export type PlasmicMesCandidatures__OverridesType = {
  mesCandidatures?: Flex__<"div">;
  slidebarMenu?: Flex__<typeof Sidebar>;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  main?: Flex__<"main">;
  heading2?: Flex__<"h1">;
  contract2?: Flex__<"div">;
  card2?: Flex__<"div">;
  applications?: Flex__<"div">;
  dataGridV2?: Flex__<typeof DataGridV2>;
  noApplications?: Flex__<"div">;
  featuredIcon2?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  text6?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  mobileNavbarBottom?: Flex__<typeof MobileNavbarBottom>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultMesCandidaturesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMesCandidatures__RenderFunc(props: {
  variants: PlasmicMesCandidatures__VariantsArgs;
  args: PlasmicMesCandidatures__ArgsType;
  overrides: PlasmicMesCandidatures__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "idUser",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "pageChange",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "slidebarMenu.disableLinks",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "slidebarMenu.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "candidat"
      },
      {
        path: "mobileNavbarBottom.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? 0 : 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    candidaturesGetJobApplicationsByUser: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "bbea59bc-f1eb-462f-be90-e4846dc1da5f",
        userArgs: {
          query: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.bbea59bc-f1eb-462f-be90-e4846dc1da5f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMesCandidatures.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMesCandidatures.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMesCandidatures.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mesCandidatures"}
          data-plasmic-override={overrides.mesCandidatures}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.mesCandidatures
          )}
        >
          <Sidebar
            data-plasmic-name={"slidebarMenu"}
            data-plasmic-override={overrides.slidebarMenu}
            className={classNames("__wab_instance", sty.slidebarMenu)}
            disableLinks={generateStateValueProp($state, [
              "slidebarMenu",
              "disableLinks"
            ])}
            onDisableLinksChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "slidebarMenu",
                "disableLinks"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["slidebarMenu", "role"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, ["slidebarMenu", "role"])}
          />

          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <main
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(
              projectcss.all,
              sty.main,
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ``
                : "main-content"
            )}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mwkAc)}>
              <div className={classNames(projectcss.all, sty.freeBox__am21O)}>
                <h1
                  data-plasmic-name={"heading2"}
                  data-plasmic-override={overrides.heading2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.heading2
                  )}
                >
                  {"Mes candidatures"}
                </h1>
                <div
                  data-plasmic-name={"contract2"}
                  data-plasmic-override={overrides.contract2}
                  className={classNames(projectcss.all, sty.contract2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9ExXh
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `${
                            $queries.candidaturesGetJobApplicationsByUser.data
                              .length ?? 0
                          } candidature${
                            $queries.candidaturesGetJobApplicationsByUser.data
                              .length > 1
                              ? "s"
                              : ""
                          }`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__zGvnp)}
                end={
                  <GroupIcon
                    className={classNames(projectcss.all, sty.svg__ltUaT)}
                    role={"img"}
                  />
                }
                iconEnd={true}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jagt9
                    )}
                  >
                    {"Voir les offres d\u2019emplois"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["goToAccueil"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToAccueil"] != null &&
                    typeof $steps["goToAccueil"] === "object" &&
                    typeof $steps["goToAccueil"].then === "function"
                  ) {
                    $steps["goToAccueil"] = await $steps["goToAccueil"];
                  }
                }}
              />
            </div>
            <div
              data-plasmic-name={"card2"}
              data-plasmic-override={overrides.card2}
              className={classNames(projectcss.all, sty.card2)}
            >
              {(() => {
                try {
                  return (
                    $queries.candidaturesGetJobApplicationsByUser.data.length >
                    0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"applications"}
                  data-plasmic-override={overrides.applications}
                  className={classNames(projectcss.all, sty.applications)}
                >
                  <DataGridV2
                    data-plasmic-name={"dataGridV2"}
                    data-plasmic-override={overrides.dataGridV2}
                    className={classNames("__wab_instance", sty.dataGridV2)}
                    columnLabels={{
                      title: "Intitul\u00e9 du poste",
                      contract_type: "Contrat",
                      company_name: "Entreprises",
                      created_at: "Postul\u00e9 le",
                      status: "Statut"
                    }}
                    currentPage={(() => {
                      try {
                        return $state.pageChange;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return 1;
                        }
                        throw e;
                      }
                    })()}
                    emptyStateMessage={"Aucune donnée disponible"}
                    isLoading={false}
                    onPageChange={async page => {
                      const $steps = {};

                      $steps["updatePageChange"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageChange"]
                              },
                              operation: 0,
                              value: page
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePageChange"] != null &&
                        typeof $steps["updatePageChange"] === "object" &&
                        typeof $steps["updatePageChange"].then === "function"
                      ) {
                        $steps["updatePageChange"] = await $steps[
                          "updatePageChange"
                        ];
                      }
                    }}
                    pageSize={10}
                    showActionsColumn={false}
                    statusConfig={{
                      en_attente: { label: "En attente", color: "#E6E6E6" },
                      deleted: {
                        label: "Cette annonce n\u2019est plus disponible"
                      },
                      accepte: { label: "Accepter", color: "#f1fbf3" },
                      refuse: { label: "Refuser", color: "#fef3f2" }
                    }}
                    tasks={(() => {
                      try {
                        return $queries.candidaturesGetJobApplicationsByUser
                          .data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    theme={{
                      headerBgColor: "#E6e6e6",
                      rowBgColor: "#ffffff",
                      hoverBgColor: "#f8f8f8",
                      borderColor: "#E5E7EB",
                      textColor: "#666666"
                    }}
                    visibleColumns={[
                      "title",
                      "contract_type",
                      "company_name",
                      "created_at",
                      "status"
                    ]}
                  />
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return (
                          $queries.candidaturesGetJobApplicationsByUser.data
                            .length == 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          !$queries.candidaturesGetJobApplicationsByUser
                            .isLoading &&
                          $queries.candidaturesGetJobApplicationsByUser?.data
                            ?.length === 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div
                  data-plasmic-name={"noApplications"}
                  data-plasmic-override={overrides.noApplications}
                  className={classNames(projectcss.all, sty.noApplications)}
                >
                  <div
                    data-plasmic-name={"featuredIcon2"}
                    data-plasmic-override={overrides.featuredIcon2}
                    className={classNames(projectcss.all, sty.featuredIcon2)}
                  >
                    <IconPhBriefcaseIcon
                      className={classNames(projectcss.all, sty.svg__v41Xv)}
                      role={"img"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"textAndSupportingText2"}
                    data-plasmic-override={overrides.textAndSupportingText2}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText2
                    )}
                  >
                    <div
                      data-plasmic-name={"text6"}
                      data-plasmic-override={overrides.text6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text6
                      )}
                    >
                      {"Vous n'avez pas encore candidat\u00e9"}
                    </div>
                    <div
                      data-plasmic-name={"supportingText2"}
                      data-plasmic-override={overrides.supportingText2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText2
                      )}
                    >
                      {"Rechercher un job qui vous correspond"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__tXxvk
                      )}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__x57Ql)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zEk5D
                          )}
                        >
                          {"Voir les offres d\u2019emplois"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToAccueil"] = true
                          ? (() => {
                              const actionArgs = { destination: `/` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToAccueil"] != null &&
                          typeof $steps["goToAccueil"] === "object" &&
                          typeof $steps["goToAccueil"].then === "function"
                        ) {
                          $steps["goToAccueil"] = await $steps["goToAccueil"];
                        }
                      }}
                    />
                  </div>
                </div>
              ) : null}
            </div>
          </main>
          <MobileNavbarBottom
            data-plasmic-name={"mobileNavbarBottom"}
            data-plasmic-override={overrides.mobileNavbarBottom}
            className={classNames("__wab_instance", sty.mobileNavbarBottom)}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "mobileNavbarBottom",
                "role"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, [
              "mobileNavbarBottom",
              "role"
            ])}
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["refreshData"] = true
                ? (() => {
                    const actionArgs = {
                      queryInvalidation: [
                        "bbea59bc-f1eb-462f-be90-e4846dc1da5f"
                      ]
                    };
                    return (async ({ queryInvalidation }) => {
                      if (!queryInvalidation) {
                        return;
                      }
                      await plasmicInvalidate(queryInvalidation);
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["refreshData"] != null &&
                typeof $steps["refreshData"] === "object" &&
                typeof $steps["refreshData"].then === "function"
              ) {
                $steps["refreshData"] = await $steps["refreshData"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mesCandidatures: [
    "mesCandidatures",
    "slidebarMenu",
    "mobileNavbarTop",
    "main",
    "heading2",
    "contract2",
    "card2",
    "applications",
    "dataGridV2",
    "noApplications",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2",
    "mobileNavbarBottom",
    "sideEffect"
  ],
  slidebarMenu: ["slidebarMenu"],
  mobileNavbarTop: ["mobileNavbarTop"],
  main: [
    "main",
    "heading2",
    "contract2",
    "card2",
    "applications",
    "dataGridV2",
    "noApplications",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  heading2: ["heading2"],
  contract2: ["contract2"],
  card2: [
    "card2",
    "applications",
    "dataGridV2",
    "noApplications",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  applications: ["applications", "dataGridV2"],
  dataGridV2: ["dataGridV2"],
  noApplications: [
    "noApplications",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  featuredIcon2: ["featuredIcon2"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  text6: ["text6"],
  supportingText2: ["supportingText2"],
  mobileNavbarBottom: ["mobileNavbarBottom"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mesCandidatures: "div";
  slidebarMenu: typeof Sidebar;
  mobileNavbarTop: typeof MobileNavbarTop;
  main: "main";
  heading2: "h1";
  contract2: "div";
  card2: "div";
  applications: "div";
  dataGridV2: typeof DataGridV2;
  noApplications: "div";
  featuredIcon2: "div";
  textAndSupportingText2: "div";
  text6: "div";
  supportingText2: "div";
  mobileNavbarBottom: typeof MobileNavbarBottom;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMesCandidatures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMesCandidatures__VariantsArgs;
    args?: PlasmicMesCandidatures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMesCandidatures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMesCandidatures__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMesCandidatures__ArgProps,
          internalVariantPropNames: PlasmicMesCandidatures__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMesCandidatures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mesCandidatures") {
    func.displayName = "PlasmicMesCandidatures";
  } else {
    func.displayName = `PlasmicMesCandidatures.${nodeName}`;
  }
  return func;
}

export const PlasmicMesCandidatures = Object.assign(
  // Top-level PlasmicMesCandidatures renders the root element
  makeNodeComponent("mesCandidatures"),
  {
    // Helper components rendering sub-elements
    slidebarMenu: makeNodeComponent("slidebarMenu"),
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    main: makeNodeComponent("main"),
    heading2: makeNodeComponent("heading2"),
    contract2: makeNodeComponent("contract2"),
    card2: makeNodeComponent("card2"),
    applications: makeNodeComponent("applications"),
    dataGridV2: makeNodeComponent("dataGridV2"),
    noApplications: makeNodeComponent("noApplications"),
    featuredIcon2: makeNodeComponent("featuredIcon2"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text6: makeNodeComponent("text6"),
    supportingText2: makeNodeComponent("supportingText2"),
    mobileNavbarBottom: makeNodeComponent("mobileNavbarBottom"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicMesCandidatures
    internalVariantProps: PlasmicMesCandidatures__VariantProps,
    internalArgProps: PlasmicMesCandidatures__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Mes candidatures",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMesCandidatures;
/* prettier-ignore-end */
