/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: mAg8Ml3XUEhy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { WeglotSelector } from "../../../plasmic-library/others/WeglotSelector/WeglotSelector"; // plasmic-import: u2KNJoJwhAa_/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicMobileNavbarTop.module.css"; // plasmic-import: mAg8Ml3XUEhy/css

import Group8Icon from "./icons/PlasmicIcon__Group8"; // plasmic-import: Q1-KCseALbCY/icon
import PhBellFillIcon from "./icons/PlasmicIcon__PhBellFill"; // plasmic-import: GSkom-YMdAdP/icon
import MagnifyingGlass2Icon from "./icons/PlasmicIcon__MagnifyingGlass2"; // plasmic-import: V-P4CoTgcbiI/icon

createPlasmicElementProxy;

export type PlasmicMobileNavbarTop__VariantMembers = {};
export type PlasmicMobileNavbarTop__VariantsArgs = {};
type VariantPropType = keyof PlasmicMobileNavbarTop__VariantsArgs;
export const PlasmicMobileNavbarTop__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMobileNavbarTop__ArgsType = {};
type ArgPropType = keyof PlasmicMobileNavbarTop__ArgsType;
export const PlasmicMobileNavbarTop__ArgProps = new Array<ArgPropType>();

export type PlasmicMobileNavbarTop__OverridesType = {
  mobileNavbar?: Flex__<"header">;
  logoTitre?: Flex__<"div">;
  logo?: Flex__<"svg">;
  text?: Flex__<"div">;
  clocheRecherche?: Flex__<"div">;
  cloche?: Flex__<"svg">;
  boutonDeRecherche?: Flex__<"div">;
  svg?: Flex__<"svg">;
  freeBox?: Flex__<"div">;
  weglotSelector?: Flex__<typeof WeglotSelector>;
};

export interface DefaultMobileNavbarTopProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMobileNavbarTop__RenderFunc(props: {
  variants: PlasmicMobileNavbarTop__VariantsArgs;
  args: PlasmicMobileNavbarTop__ArgsType;
  overrides: PlasmicMobileNavbarTop__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <header
      data-plasmic-name={"mobileNavbar"}
      data-plasmic-override={overrides.mobileNavbar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.mobileNavbar
      )}
      id={"mobilenavbar"}
    >
      <div
        data-plasmic-name={"logoTitre"}
        data-plasmic-override={overrides.logoTitre}
        className={classNames(projectcss.all, sty.logoTitre)}
      >
        <Group8Icon
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames(projectcss.all, sty.logo)}
          onClick={async event => {
            const $steps = {};

            $steps["goToAccueil"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToAccueil"] != null &&
              typeof $steps["goToAccueil"] === "object" &&
              typeof $steps["goToAccueil"].then === "function"
            ) {
              $steps["goToAccueil"] = await $steps["goToAccueil"];
            }
          }}
          role={"img"}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"JOB ARROUND ME"}
        </div>
      </div>
      {false ? (
        <div
          data-plasmic-name={"clocheRecherche"}
          data-plasmic-override={overrides.clocheRecherche}
          className={classNames(projectcss.all, sty.clocheRecherche)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <PhBellFillIcon
              data-plasmic-name={"cloche"}
              data-plasmic-override={overrides.cloche}
              className={classNames(projectcss.all, sty.cloche)}
              onClick={async event => {
                const $steps = {};

                $steps["goToMesAlertes"] = true
                  ? (() => {
                      const actionArgs = { destination: `/alertes` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToMesAlertes"] != null &&
                  typeof $steps["goToMesAlertes"] === "object" &&
                  typeof $steps["goToMesAlertes"].then === "function"
                ) {
                  $steps["goToMesAlertes"] = await $steps["goToMesAlertes"];
                }
              }}
              role={"img"}
            />
          ) : null}
          {false ? (
            <div
              data-plasmic-name={"boutonDeRecherche"}
              data-plasmic-override={overrides.boutonDeRecherche}
              className={classNames(projectcss.all, sty.boutonDeRecherche)}
              onClick={async event => {
                const $steps = {};

                $steps["goToAccueil"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAccueil"] != null &&
                  typeof $steps["goToAccueil"] === "object" &&
                  typeof $steps["goToAccueil"].then === "function"
                ) {
                  $steps["goToAccueil"] = await $steps["goToAccueil"];
                }
              }}
            >
              <MagnifyingGlass2Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
          ) : null}
        </div>
      ) : null}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, "mobile-translate")}
      >
        <WeglotSelector
          data-plasmic-name={"weglotSelector"}
          data-plasmic-override={overrides.weglotSelector}
          className={classNames("__wab_instance", sty.weglotSelector)}
          defaultLanguage={"fr"}
          labels={{ fr: "FR", en: "EN" }}
          languages={["fr", "en"]}
        />
      </div>
    </header>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mobileNavbar: [
    "mobileNavbar",
    "logoTitre",
    "logo",
    "text",
    "clocheRecherche",
    "cloche",
    "boutonDeRecherche",
    "svg",
    "freeBox",
    "weglotSelector"
  ],
  logoTitre: ["logoTitre", "logo", "text"],
  logo: ["logo"],
  text: ["text"],
  clocheRecherche: ["clocheRecherche", "cloche", "boutonDeRecherche", "svg"],
  cloche: ["cloche"],
  boutonDeRecherche: ["boutonDeRecherche", "svg"],
  svg: ["svg"],
  freeBox: ["freeBox", "weglotSelector"],
  weglotSelector: ["weglotSelector"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mobileNavbar: "header";
  logoTitre: "div";
  logo: "svg";
  text: "div";
  clocheRecherche: "div";
  cloche: "svg";
  boutonDeRecherche: "div";
  svg: "svg";
  freeBox: "div";
  weglotSelector: typeof WeglotSelector;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMobileNavbarTop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMobileNavbarTop__VariantsArgs;
    args?: PlasmicMobileNavbarTop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMobileNavbarTop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMobileNavbarTop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMobileNavbarTop__ArgProps,
          internalVariantPropNames: PlasmicMobileNavbarTop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMobileNavbarTop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mobileNavbar") {
    func.displayName = "PlasmicMobileNavbarTop";
  } else {
    func.displayName = `PlasmicMobileNavbarTop.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileNavbarTop = Object.assign(
  // Top-level PlasmicMobileNavbarTop renders the root element
  makeNodeComponent("mobileNavbar"),
  {
    // Helper components rendering sub-elements
    logoTitre: makeNodeComponent("logoTitre"),
    logo: makeNodeComponent("logo"),
    text: makeNodeComponent("text"),
    clocheRecherche: makeNodeComponent("clocheRecherche"),
    cloche: makeNodeComponent("cloche"),
    boutonDeRecherche: makeNodeComponent("boutonDeRecherche"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    weglotSelector: makeNodeComponent("weglotSelector"),

    // Metadata about props expected for PlasmicMobileNavbarTop
    internalVariantProps: PlasmicMobileNavbarTop__VariantProps,
    internalArgProps: PlasmicMobileNavbarTop__ArgProps
  }
);

export default PlasmicMobileNavbarTop;
/* prettier-ignore-end */
