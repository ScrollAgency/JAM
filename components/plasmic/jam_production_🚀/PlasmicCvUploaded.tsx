/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: bmRjHjAcjHYi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicCvUploaded.module.css"; // plasmic-import: bmRjHjAcjHYi/css

import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon

createPlasmicElementProxy;

export type PlasmicCvUploaded__VariantMembers = {};
export type PlasmicCvUploaded__VariantsArgs = {};
type VariantPropType = keyof PlasmicCvUploaded__VariantsArgs;
export const PlasmicCvUploaded__VariantProps = new Array<VariantPropType>();

export type PlasmicCvUploaded__ArgsType = {
  showCard?: boolean;
  onShowCardChange?: (val: string) => void;
  fileName?: string;
  onFileNameChange?: (val: string) => void;
  onClick?: (event: any) => void;
  onDelete?: (event: any) => void;
};
type ArgPropType = keyof PlasmicCvUploaded__ArgsType;
export const PlasmicCvUploaded__ArgProps = new Array<ArgPropType>(
  "showCard",
  "onShowCardChange",
  "fileName",
  "onFileNameChange",
  "onClick",
  "onDelete"
);

export type PlasmicCvUploaded__OverridesType = {
  cvUpload?: Flex__<"div">;
  svg?: Flex__<"svg">;
  content7?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  text?: Flex__<"div">;
};

export interface DefaultCvUploadedProps {
  showCard?: boolean;
  onShowCardChange?: (val: string) => void;
  fileName?: string;
  onFileNameChange?: (val: string) => void;
  onClick?: (event: any) => void;
  onDelete?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCvUploaded__RenderFunc(props: {
  variants: PlasmicCvUploaded__VariantsArgs;
  args: PlasmicCvUploaded__ArgsType;
  overrides: PlasmicCvUploaded__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showCard",
        type: "writable",
        variableType: "boolean",

        valueProp: "showCard",
        onChangeProp: "onShowCardChange"
      },
      {
        path: "fileName",
        type: "writable",
        variableType: "text",

        valueProp: "fileName",
        onChangeProp: "onFileNameChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    (() => {
      try {
        return $state.showCard;
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <div
        data-plasmic-name={"cvUpload"}
        data-plasmic-override={overrides.cvUpload}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.cvUpload
        )}
      >
        <PhTrashIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          onClick={args.onDelete}
          role={"img"}
        />

        <div
          data-plasmic-name={"content7"}
          data-plasmic-override={overrides.content7}
          className={classNames(projectcss.all, sty.content7)}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"25px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"25px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/jam_production_ðŸš€/images/attachementJpg.jpg",
                fullWidth: 512,
                fullHeight: 512,
                aspectRatio: undefined
              }}
            />
          </div>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.fileName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Importer ou d\u00e9poser un fichier";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  cvUpload: ["cvUpload", "svg", "content7", "freeBox", "img", "text"],
  svg: ["svg"],
  content7: ["content7", "freeBox", "img", "text"],
  freeBox: ["freeBox", "img"],
  img: ["img"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  cvUpload: "div";
  svg: "svg";
  content7: "div";
  freeBox: "div";
  img: typeof PlasmicImg__;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCvUploaded__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCvUploaded__VariantsArgs;
    args?: PlasmicCvUploaded__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCvUploaded__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCvUploaded__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCvUploaded__ArgProps,
          internalVariantPropNames: PlasmicCvUploaded__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCvUploaded__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "cvUpload") {
    func.displayName = "PlasmicCvUploaded";
  } else {
    func.displayName = `PlasmicCvUploaded.${nodeName}`;
  }
  return func;
}

export const PlasmicCvUploaded = Object.assign(
  // Top-level PlasmicCvUploaded renders the root element
  makeNodeComponent("cvUpload"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    content7: makeNodeComponent("content7"),
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCvUploaded
    internalVariantProps: PlasmicCvUploaded__VariantProps,
    internalArgProps: PlasmicCvUploaded__ArgProps
  }
);

export default PlasmicCvUploaded;
/* prettier-ignore-end */
