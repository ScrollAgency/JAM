/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: QEIfjMxvx0-i

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicSelectAlert.module.css"; // plasmic-import: QEIfjMxvx0-i/css

createPlasmicElementProxy;

export type PlasmicSelectAlert__VariantMembers = {};
export type PlasmicSelectAlert__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelectAlert__VariantsArgs;
export const PlasmicSelectAlert__VariantProps = new Array<VariantPropType>();

export type PlasmicSelectAlert__ArgsType = {
  criteriaName?: string;
  onCriteriaNameChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSelectAlert__ArgsType;
export const PlasmicSelectAlert__ArgProps = new Array<ArgPropType>(
  "criteriaName",
  "onCriteriaNameChange"
);

export type PlasmicSelectAlert__OverridesType = {
  root?: Flex__<"div">;
  select?: Flex__<typeof AntdSelect>;
  text?: Flex__<"div">;
};

export interface DefaultSelectAlertProps {
  criteriaName?: string;
  onCriteriaNameChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelectAlert__RenderFunc(props: {
  variants: PlasmicSelectAlert__VariantsArgs;
  args: PlasmicSelectAlert__ArgsType;
  overrides: PlasmicSelectAlert__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "criteriaName",
        type: "writable",
        variableType: "text",

        valueProp: "criteriaName",
        onChangeProp: "onCriteriaNameChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "3c8bdc4e-677f-4634-aaef-8a13e1973a95",
        userArgs: {},
        cacheKey: `plasmic.$.3c8bdc4e-677f-4634-aaef-8a13e1973a95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <AntdSelect
        data-plasmic-name={"select"}
        data-plasmic-override={overrides.select}
        allowClear={true}
        bordered={false}
        className={classNames("__wab_instance", sty.select)}
        defaultOpen={false}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
        dropdownMatchSelectWidth={false}
        mode={"multiple"}
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["select", "value"]).apply(
            null,
            eventArgs
          );
        }}
        options={(() => {
          try {
            return $queries.query.data
              .filter(item => item.type === $state.criteriaName)
              .map(item => ({
                label: item.name,
                value: item.name
              }));
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        placeholder={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Select..."}
          </div>
        }
        popupScopeClassName={sty["select__popup"]}
        showSearch={true}
        size={"large"}
        useChildren={false}
        value={generateStateValueProp($state, ["select", "value"])}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "select", "text"],
  select: ["select", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  select: typeof AntdSelect;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectAlert__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectAlert__VariantsArgs;
    args?: PlasmicSelectAlert__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelectAlert__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelectAlert__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelectAlert__ArgProps,
          internalVariantPropNames: PlasmicSelectAlert__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelectAlert__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectAlert";
  } else {
    func.displayName = `PlasmicSelectAlert.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectAlert = Object.assign(
  // Top-level PlasmicSelectAlert renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    select: makeNodeComponent("select"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSelectAlert
    internalVariantProps: PlasmicSelectAlert__VariantProps,
    internalArgProps: PlasmicSelectAlert__ArgProps
  }
);

export default PlasmicSelectAlert;
/* prettier-ignore-end */
