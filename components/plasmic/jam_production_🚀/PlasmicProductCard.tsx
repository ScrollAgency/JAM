/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: XNMQC2V0FBMZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: XNMQC2V0FBMZ/css

import CheckmarkCircleIcon from "./icons/PlasmicIcon__CheckmarkCircle"; // plasmic-import: HItSZaiJag78/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 7Z48OGJWenMT/icon

createPlasmicElementProxy;

export type PlasmicProductCard__VariantMembers = {
  active: "active";
  roundedBorder: "roundedBorder";
};
export type PlasmicProductCard__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
  roundedBorder?: SingleBooleanChoiceArg<"roundedBorder">;
};
type VariantPropType = keyof PlasmicProductCard__VariantsArgs;
export const PlasmicProductCard__VariantProps = new Array<VariantPropType>(
  "active",
  "roundedBorder"
);

export type PlasmicProductCard__ArgsType = {
  productId?: string;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicProductCard__ArgsType;
export const PlasmicProductCard__ArgProps = new Array<ArgPropType>(
  "productId",
  "onClick"
);

export type PlasmicProductCard__OverridesType = {
  products?: Flex__<"div">;
  product?: Flex__<"div">;
  titlePrice?: Flex__<"div">;
  radioButton?: Flex__<"div">;
  buttonInactif?: Flex__<"div">;
  buttonActif?: Flex__<"div">;
  details?: Flex__<"div">;
};

export interface DefaultProductCardProps {
  productId?: string;
  onClick?: (event: any) => void;
  active?: SingleBooleanChoiceArg<"active">;
  roundedBorder?: SingleBooleanChoiceArg<"roundedBorder">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCard__RenderFunc(props: {
  variants: PlasmicProductCard__VariantsArgs;
  args: PlasmicProductCard__ArgsType;
  overrides: PlasmicProductCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          productId: "prod_SzeJg9sxLMYS7N"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      },
      {
        path: "roundedBorder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.roundedBorder
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.onClick;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    stripeProductPrice: usePlasmicDataOp(() => {
      return {
        sourceId: "iWyefF3oqfc9knnzuF1Fin",
        opId: "cbb3111f-8f19-4fa5-a256-f334947a1793",
        userArgs: {
          params: [$props.productId]
        },
        cacheKey: `plasmic.$.cbb3111f-8f19-4fa5-a256-f334947a1793.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    stripeProducts: usePlasmicDataOp(() => {
      return {
        sourceId: "iWyefF3oqfc9knnzuF1Fin",
        opId: "e99c70fb-d502-4e49-8e3c-e7aac00ca72d",
        userArgs: {},
        cacheKey: `plasmic.$.e99c70fb-d502-4e49-8e3c-e7aac00ca72d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"products"}
      data-plasmic-override={overrides.products}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_library_tailwind_3_4_number_tokens,
        styleTokensClassNames_plasmic_rich_components,
        sty.products,
        { [sty.productsactive]: hasVariant($state, "active", "active") }
      )}
      onClick={args.onClick}
    >
      <div
        data-plasmic-name={"product"}
        data-plasmic-override={overrides.product}
        className={classNames(projectcss.all, sty.product, {
          [sty.productactive]: hasVariant($state, "active", "active")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__wqM1P)}>
          <div
            data-plasmic-name={"titlePrice"}
            data-plasmic-override={overrides.titlePrice}
            className={classNames(projectcss.all, sty.titlePrice)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lowO3
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.stripeProducts.data.response.data.find(
                      product => product.id === $props.productId
                    ).name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rAweo
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $queries.stripeProductPrice.data.response.data[0]
                        .unit_amount /
                        100 +
                      "\u20AC/mois (sans engagement)"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            data-plasmic-name={"radioButton"}
            data-plasmic-override={overrides.radioButton}
            className={classNames(projectcss.all, sty.radioButton)}
          >
            <div
              data-plasmic-name={"buttonInactif"}
              data-plasmic-override={overrides.buttonInactif}
              className={classNames(projectcss.all, sty.buttonInactif, {
                [sty.buttonInactifactive]: hasVariant(
                  $state,
                  "active",
                  "active"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___686Qc)}
              />
            </div>
            <div
              data-plasmic-name={"buttonActif"}
              data-plasmic-override={overrides.buttonActif}
              className={classNames(projectcss.all, sty.buttonActif, {
                [sty.buttonActifactive]: hasVariant($state, "active", "active")
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox___9CiW)} />
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"details"}
        data-plasmic-override={overrides.details}
        className={classNames(projectcss.all, sty.details)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $queries.stripeProducts.data.response.data.find(
                product => product.id === $props.productId
              )?.name === "Basic"
                ? [
                    "Essai gratuit pendant 30 jours",
                    "3 annonces par mois",
                    "1 annonce last minute par mois",
                    ""
                  ]
                : [
                    "Essai gratuit pendant 30 jours",
                    "8 annonces classiques par mois",
                    "4 annonce last minute par mois",
                    "2 annonces boostées par mois"
                  ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__kDDti, {
                [sty.freeBoxroundedBorder__kDDtii5E7R]: hasVariant(
                  $state,
                  "roundedBorder",
                  "roundedBorder"
                )
              })}
              key={currentIndex}
            >
              {(() => {
                try {
                  return currentItem !== "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <CheckmarkCircleIcon
                  className={classNames(projectcss.all, sty.svg__dnxv1)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mmRiR,
                  {
                    [sty.textactive__mmRiRvGmp]: hasVariant(
                      $state,
                      "active",
                      "active"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem.replace("last minute", "LAST MINUTE");
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ztspQ)}>
                {(() => {
                  try {
                    return currentIndex === 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon11Icon
                    className={classNames(projectcss.all, sty.svg__qc3Uz)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return event.stopPropagation();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "info",
                                "Si vous r\u00e9siliez avant la fin de votre essai gratuit de 30 jours, votre carte ne sera pas d\u00e9bit\u00e9e."
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  products: [
    "products",
    "product",
    "titlePrice",
    "radioButton",
    "buttonInactif",
    "buttonActif",
    "details"
  ],
  product: [
    "product",
    "titlePrice",
    "radioButton",
    "buttonInactif",
    "buttonActif"
  ],
  titlePrice: ["titlePrice"],
  radioButton: ["radioButton", "buttonInactif", "buttonActif"],
  buttonInactif: ["buttonInactif"],
  buttonActif: ["buttonActif"],
  details: ["details"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  products: "div";
  product: "div";
  titlePrice: "div";
  radioButton: "div";
  buttonInactif: "div";
  buttonActif: "div";
  details: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCard__VariantsArgs;
    args?: PlasmicProductCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "products") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("products"),
  {
    // Helper components rendering sub-elements
    product: makeNodeComponent("product"),
    titlePrice: makeNodeComponent("titlePrice"),
    radioButton: makeNodeComponent("radioButton"),
    buttonInactif: makeNodeComponent("buttonInactif"),
    buttonActif: makeNodeComponent("buttonActif"),
    details: makeNodeComponent("details"),

    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
