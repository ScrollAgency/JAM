/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: mm21s-vhdlTm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SignUp } from "../../../plasmic-library/authentication/SignUp"; // plasmic-import: l54x2CZo0bN2/codeComponent

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicInscriptionEmployeur.module.css"; // plasmic-import: mm21s-vhdlTm/css

import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: wV32h4GpW1qw/icon

createPlasmicElementProxy;

export type PlasmicInscriptionEmployeur__VariantMembers = {};
export type PlasmicInscriptionEmployeur__VariantsArgs = {};
type VariantPropType = keyof PlasmicInscriptionEmployeur__VariantsArgs;
export const PlasmicInscriptionEmployeur__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInscriptionEmployeur__ArgsType = {};
type ArgPropType = keyof PlasmicInscriptionEmployeur__ArgsType;
export const PlasmicInscriptionEmployeur__ArgProps = new Array<ArgPropType>();

export type PlasmicInscriptionEmployeur__OverridesType = {
  inscription?: Flex__<"div">;
  signUp2?: Flex__<"div">;
  imageWrapper2?: Flex__<"div">;
  logoWrapper2?: Flex__<"div">;
  baseline2?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame5?: Flex__<"div">;
  frame6?: Flex__<"div">;
  formWrapper2?: Flex__<"div">;
  signupLoading2?: Flex__<"div">;
  signUp4?: Flex__<typeof SignUp>;
  img?: Flex__<typeof PlasmicImg__>;
  signupSuccess2?: Flex__<"div">;
};

export interface DefaultInscriptionEmployeurProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInscriptionEmployeur__RenderFunc(props: {
  variants: PlasmicInscriptionEmployeur__VariantsArgs;
  args: PlasmicInscriptionEmployeur__ArgsType;
  overrides: PlasmicInscriptionEmployeur__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "signUp4.email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp4.firstName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp4.lastName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp4.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp4.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp4.phone",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp4.countryCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "+33"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicInscriptionEmployeur.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicInscriptionEmployeur.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicInscriptionEmployeur.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"inscription"}
          data-plasmic-override={overrides.inscription}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.inscription
          )}
        >
          <div
            data-plasmic-name={"signUp2"}
            data-plasmic-override={overrides.signUp2}
            className={classNames(projectcss.all, sty.signUp2)}
          >
            <div
              data-plasmic-name={"imageWrapper2"}
              data-plasmic-override={overrides.imageWrapper2}
              className={classNames(projectcss.all, sty.imageWrapper2)}
            >
              <div
                data-plasmic-name={"logoWrapper2"}
                data-plasmic-override={overrides.logoWrapper2}
                className={classNames(projectcss.all, sty.logoWrapper2)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToMesCandidatures"] = true
                    ? (() => {
                        const actionArgs = { destination: `/candidatures` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToMesCandidatures"] != null &&
                    typeof $steps["goToMesCandidatures"] === "object" &&
                    typeof $steps["goToMesCandidatures"].then === "function"
                  ) {
                    $steps["goToMesCandidatures"] = await $steps[
                      "goToMesCandidatures"
                    ];
                  }
                }}
              >
                <PictogramIcon
                  className={classNames(projectcss.all, sty.svg___8VQpB)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"baseline2"}
                  data-plasmic-override={overrides.baseline2}
                  className={classNames(projectcss.all, sty.baseline2)}
                >
                  <div
                    data-plasmic-name={"frame4"}
                    data-plasmic-override={overrides.frame4}
                    className={classNames(projectcss.all, sty.frame4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lHcfG
                      )}
                    >
                      {"JOB"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame5"}
                    data-plasmic-override={overrides.frame5}
                    className={classNames(projectcss.all, sty.frame5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qRysA
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame6"}
                    data-plasmic-override={overrides.frame6}
                    className={classNames(projectcss.all, sty.frame6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lw8H6
                      )}
                    >
                      {"ME"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"formWrapper2"}
              data-plasmic-override={overrides.formWrapper2}
              className={classNames(projectcss.all, sty.formWrapper2)}
            >
              {(() => {
                try {
                  return $ctx.query.signup !== "success";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"signupLoading2"}
                  data-plasmic-override={overrides.signupLoading2}
                  className={classNames(projectcss.all, sty.signupLoading2)}
                >
                  <SignUp
                    data-plasmic-name={"signUp4"}
                    data-plasmic-override={overrides.signUp4}
                    alertPosition={"top"}
                    appleButtonText={"APPLE"}
                    buttonAbordStyle={"tertiary"}
                    buttonStyle={"primary"}
                    className={classNames("__wab_instance", sty.signUp4)}
                    confirmPassword={generateStateValueProp($state, [
                      "signUp4",
                      "confirmPassword"
                    ])}
                    confirmPasswordLabel={"Confirmer le mot de passe"}
                    countryCode={generateStateValueProp($state, [
                      "signUp4",
                      "countryCode"
                    ])}
                    email={generateStateValueProp($state, ["signUp4", "email"])}
                    emailLabel={"Email*"}
                    eyeIconColor={"#666"}
                    firstName={generateStateValueProp($state, [
                      "signUp4",
                      "firstName"
                    ])}
                    firstNameLabel={"Pr\u00e9nom*"}
                    googleButtonText={"GOOGLE"}
                    inputStyle={"simple"}
                    lastName={generateStateValueProp($state, [
                      "signUp4",
                      "lastName"
                    ])}
                    lastNameLabel={"Nom*"}
                    loginLinkLabel={"CONNEXION"}
                    loginPrefixText={"D\u00e9j\u00e0 inscrit(e) ?"}
                    maxAlerts={3}
                    oAuthButtonsPosition={"bottom"}
                    oAuthSeparatorText={"ou"}
                    onConfirmPasswordChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "signUp4",
                        "confirmPassword"
                      ]).apply(null, eventArgs);
                    }}
                    onCountryCodeChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "signUp4",
                        "countryCode"
                      ]).apply(null, eventArgs);
                    }}
                    onEmailChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "signUp4",
                        "email"
                      ]).apply(null, eventArgs);
                    }}
                    onFirstNameChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "signUp4",
                        "firstName"
                      ]).apply(null, eventArgs);
                    }}
                    onLastNameChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "signUp4",
                        "lastName"
                      ]).apply(null, eventArgs);
                    }}
                    onPasswordChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "signUp4",
                        "password"
                      ]).apply(null, eventArgs);
                    }}
                    onPhoneChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "signUp4",
                        "phone"
                      ]).apply(null, eventArgs);
                    }}
                    onSubmit={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $state.signUp4.email;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return $state.signUp4.password;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return "/register-company?signup=success";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "/offre-employeur",
                                (() => {
                                  try {
                                    return {
                                      firstName: $state.signUp4.firstName,
                                      lastName: $state.signUp4.lastName,
                                      phone: $state.signUp4.phone,
                                      email: $state.signUp4.email,
                                      role: "Company"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "SupabaseUserGlobalContext.signup"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    padding={"40px 16px"}
                    password={generateStateValueProp($state, [
                      "signUp4",
                      "password"
                    ])}
                    passwordInfoText={
                      "Utilisez 8 caractères ou plus en mélangeant lettres, chiffres et symboles."
                    }
                    passwordLabel={"Mot de passe*"}
                    passwordStrength={true}
                    phone={generateStateValueProp($state, ["signUp4", "phone"])}
                    phoneLabel={"T\u00e9l\u00e9phone*"}
                    placeholderConfirmPassword={"Mot de passe"}
                    placeholderEmail={"Email"}
                    placeholderPassword={"Mot de passe"}
                    placeholderPhone={"060606060606"}
                    privacyPolicyText={"politique de confidentialit\u00e9"}
                    redirectAfterSignUp={``}
                    redirectTo={"https://job-around-me.com/auth/oauth-callback"}
                    showAlerts={true}
                    showLabels={true}
                    showLoginLink={true}
                    showOAuthButtons={true}
                    showPasswordToggle={true}
                    showPhoneInput={true}
                    submitButtonIcon={
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/jam_production_🚀/images/image20.svg",
                          fullWidth: 34,
                          fullHeight: 33,
                          aspectRatio: undefined
                        }}
                      />
                    }
                    submitButtonIconPosition={"right"}
                    submitButtonText={"INSCRIPTION"}
                    title={"Bienvenue !"}
                    titleHeading={"h1"}
                    wrapperStyle={"card"}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $ctx.query.signup === "success";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__tcp)}>
                  <div
                    data-plasmic-name={"signupSuccess2"}
                    data-plasmic-override={overrides.signupSuccess2}
                    className={classNames(projectcss.all, sty.signupSuccess2)}
                  >
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__t5R17)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Fi33
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jKmA
                        )}
                      >
                        {
                          "Votre compte a \u00e9t\u00e9 cr\u00e9\u00e9 avec succ\u00e8s"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xoGqp
                        )}
                      >
                        {
                          "Veuillez v\u00e9rifier vos e-mails pour confirmer votre adresse \net acc\u00e9der \u00e0 Job Around Me."
                        }
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  inscription: [
    "inscription",
    "signUp2",
    "imageWrapper2",
    "logoWrapper2",
    "baseline2",
    "frame4",
    "frame5",
    "frame6",
    "formWrapper2",
    "signupLoading2",
    "signUp4",
    "img",
    "signupSuccess2"
  ],
  signUp2: [
    "signUp2",
    "imageWrapper2",
    "logoWrapper2",
    "baseline2",
    "frame4",
    "frame5",
    "frame6",
    "formWrapper2",
    "signupLoading2",
    "signUp4",
    "img",
    "signupSuccess2"
  ],
  imageWrapper2: [
    "imageWrapper2",
    "logoWrapper2",
    "baseline2",
    "frame4",
    "frame5",
    "frame6"
  ],
  logoWrapper2: ["logoWrapper2", "baseline2", "frame4", "frame5", "frame6"],
  baseline2: ["baseline2", "frame4", "frame5", "frame6"],
  frame4: ["frame4"],
  frame5: ["frame5"],
  frame6: ["frame6"],
  formWrapper2: [
    "formWrapper2",
    "signupLoading2",
    "signUp4",
    "img",
    "signupSuccess2"
  ],
  signupLoading2: ["signupLoading2", "signUp4", "img"],
  signUp4: ["signUp4", "img"],
  img: ["img"],
  signupSuccess2: ["signupSuccess2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  inscription: "div";
  signUp2: "div";
  imageWrapper2: "div";
  logoWrapper2: "div";
  baseline2: "div";
  frame4: "div";
  frame5: "div";
  frame6: "div";
  formWrapper2: "div";
  signupLoading2: "div";
  signUp4: typeof SignUp;
  img: typeof PlasmicImg__;
  signupSuccess2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInscriptionEmployeur__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInscriptionEmployeur__VariantsArgs;
    args?: PlasmicInscriptionEmployeur__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInscriptionEmployeur__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInscriptionEmployeur__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInscriptionEmployeur__ArgProps,
          internalVariantPropNames: PlasmicInscriptionEmployeur__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInscriptionEmployeur__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "inscription") {
    func.displayName = "PlasmicInscriptionEmployeur";
  } else {
    func.displayName = `PlasmicInscriptionEmployeur.${nodeName}`;
  }
  return func;
}

export const PlasmicInscriptionEmployeur = Object.assign(
  // Top-level PlasmicInscriptionEmployeur renders the root element
  makeNodeComponent("inscription"),
  {
    // Helper components rendering sub-elements
    signUp2: makeNodeComponent("signUp2"),
    imageWrapper2: makeNodeComponent("imageWrapper2"),
    logoWrapper2: makeNodeComponent("logoWrapper2"),
    baseline2: makeNodeComponent("baseline2"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    formWrapper2: makeNodeComponent("formWrapper2"),
    signupLoading2: makeNodeComponent("signupLoading2"),
    signUp4: makeNodeComponent("signUp4"),
    img: makeNodeComponent("img"),
    signupSuccess2: makeNodeComponent("signupSuccess2"),

    // Metadata about props expected for PlasmicInscriptionEmployeur
    internalVariantProps: PlasmicInscriptionEmployeur__VariantProps,
    internalArgProps: PlasmicInscriptionEmployeur__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Inscription",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInscriptionEmployeur;
/* prettier-ignore-end */
