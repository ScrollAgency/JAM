/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: NtQK0cTq4r4D

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import LikeJobCard from "../../LikeJobCard"; // plasmic-import: i_6_bWmNYijl/component
import { JobCard } from "../../cards/JobCard/JobCard"; // plasmic-import: epi6kICoBl8S/codeComponent
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import MobileNavbarBottom from "../../MobileNavbarBottom"; // plasmic-import: BIS-N7QZzUVV/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { PhoneSelector } from "../../forms/PhoneSelector/PhoneSelector"; // plasmic-import: sOyePdANTQ6t/codeComponent
import Select from "../../Select"; // plasmic-import: ZMB-SB-xJDyQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: plmAgyhhAdMc/component
import MenuSection from "../../MenuSection"; // plasmic-import: MUvYPH7rZO6i/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: nVAUbPc6gpoz/component
import { FileUploader } from "../../others/FileUploader/FileUploader"; // plasmic-import: RpVDoPZzyXH3/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicMesAnnonces.module.css"; // plasmic-import: NtQK0cTq4r4D/css

import HeartStraightIcon from "./icons/PlasmicIcon__HeartStraight"; // plasmic-import: 2A8amxR7FAse/icon
import LikeIconIcon from "./icons/PlasmicIcon__LikeIcon"; // plasmic-import: _YvBX6QjT3en/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import PhMapPin2Icon from "./icons/PlasmicIcon__PhMapPin2"; // plasmic-import: hGRa__J54hta/icon
import PhFileTextIcon from "./icons/PlasmicIcon__PhFileText"; // plasmic-import: kuV0Q3xSw_jm/icon
import PhClockIcon from "./icons/PlasmicIcon__PhClock"; // plasmic-import: r6dP5yPLK2Mb/icon
import PhCoinsLightIcon from "./icons/PlasmicIcon__PhCoinsLight"; // plasmic-import: 4H-jk36Nk9q0/icon
import PhClockCountdownIcon from "./icons/PlasmicIcon__PhClockCountdown"; // plasmic-import: EKdA7LX61Arw/icon
import PhCheckBoldIcon from "./icons/PlasmicIcon__PhCheckBold"; // plasmic-import: SpNcYHveG8zb/icon
import ShareIcon from "./icons/PlasmicIcon__Share"; // plasmic-import: gyaylpgjJPpA/icon
import IconPhBriefcase2Icon from "./icons/PlasmicIcon__IconPhBriefcase2"; // plasmic-import: QT5tozis-7ZJ/icon
import PhUsersThreeIcon from "./icons/PlasmicIcon__PhUsersThree"; // plasmic-import: 5hJF42npUKid/icon
import PhMapTrifoldFillIcon from "./icons/PlasmicIcon__PhMapTrifoldFill"; // plasmic-import: uZBfKa3cidgz/icon
import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import Line10Icon from "./icons/PlasmicIcon__Line10"; // plasmic-import: okDoJMf2ty5e/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: I5WL24ilJ3LK/icon

createPlasmicElementProxy;

export type PlasmicMesAnnonces__VariantMembers = {};
export type PlasmicMesAnnonces__VariantsArgs = {};
type VariantPropType = keyof PlasmicMesAnnonces__VariantsArgs;
export const PlasmicMesAnnonces__VariantProps = new Array<VariantPropType>();

export type PlasmicMesAnnonces__ArgsType = {};
type ArgPropType = keyof PlasmicMesAnnonces__ArgsType;
export const PlasmicMesAnnonces__ArgProps = new Array<ArgPropType>();

export type PlasmicMesAnnonces__OverridesType = {
  annonces?: Flex__<"div">;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  sidebar?: Flex__<typeof Sidebar>;
  main?: Flex__<"main">;
  h1?: Flex__<"h1">;
  sideEffect?: Flex__<typeof SideEffect>;
  annonces2?: Flex__<"div">;
  likeJobCard?: Flex__<typeof LikeJobCard>;
  jobCard?: Flex__<typeof JobCard>;
  noAnnonce?: Flex__<"div">;
  featuredIcon2?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  text6?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  mobileNavbarBottom?: Flex__<typeof MobileNavbarBottom>;
  modalDetailsJob?: Flex__<typeof Modal>;
  jobDetail?: Flex__<"div">;
  jobName?: Flex__<"div">;
  jobLocation?: Flex__<"div">;
  publicationDate?: Flex__<"div">;
  frame46?: Flex__<"div">;
  frame47?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame49?: Flex__<"div">;
  frame50?: Flex__<"div">;
  frame51?: Flex__<"div">;
  appliedBtn?: Flex__<"div">;
  frame53?: Flex__<"div">;
  jobDescriptionContainer?: Flex__<"div">;
  jobDescription?: Flex__<"div">;
  benefits?: Flex__<"div">;
  expectedProfileContainer?: Flex__<"div">;
  expectedProfile?: Flex__<"div">;
  company?: Flex__<"div">;
  companyLogo?: Flex__<typeof PlasmicImg__>;
  frame58?: Flex__<"div">;
  companyName?: Flex__<"div">;
  companyDetail?: Flex__<"div">;
  sectorActivity?: Flex__<"div">;
  companySize?: Flex__<"div">;
  companyLocation?: Flex__<"div">;
  companyDescription?: Flex__<"div">;
  modal2?: Flex__<typeof Modal>;
  header2?: Flex__<"div">;
  frame67?: Flex__<"div">;
  frame68?: Flex__<"div">;
  frame70?: Flex__<"div">;
  frame74?: Flex__<"div">;
  frame75?: Flex__<"div">;
  frame76?: Flex__<"div">;
  frame77?: Flex__<"div">;
  frame16?: Flex__<"div">;
  frame17?: Flex__<"div">;
  frame18?: Flex__<"div">;
  frame78?: Flex__<"div">;
  frame79?: Flex__<"div">;
  frame80?: Flex__<"div">;
  frame81?: Flex__<"div">;
  frame82?: Flex__<"div">;
  frame83?: Flex__<"div">;
  frame84?: Flex__<"div">;
  frame85?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  upload2?: Flex__<typeof UploadWrapper>;
  editIcon2?: Flex__<"div">;
  frame19?: Flex__<"div">;
  deleteIcon2?: Flex__<"div">;
  frame20?: Flex__<"div">;
  nomPrenom?: Flex__<"div">;
  textInput1?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  telephone?: Flex__<"div">;
  phoneSelector?: Flex__<typeof PhoneSelector>;
  textInput3?: Flex__<typeof TextInput>;
  rue?: Flex__<typeof TextInput>;
  codePosteVille?: Flex__<"div">;
  codePostal?: Flex__<typeof TextInput>;
  ville?: Flex__<typeof TextInput>;
  textInput5?: Flex__<typeof TextInput>;
  select2?: Flex__<typeof Select>;
  select4?: Flex__<typeof Select>;
  select3?: Flex__<typeof AntdSelect>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  select7?: Flex__<typeof AntdSelect>;
  select5?: Flex__<typeof Select>;
  frame14?: Flex__<"div">;
  email4?: Flex__<"div">;
  cvUpload?: Flex__<"div">;
  content5?: Flex__<"div">;
  fileUploader3?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  content?: Flex__<"div">;
  frame15?: Flex__<"div">;
  email5?: Flex__<"div">;
  cvUpload2?: Flex__<"div">;
  content6?: Flex__<"div">;
  fileUploader4?: Flex__<"div">;
  upload3?: Flex__<typeof UploadWrapper>;
  frame92?: Flex__<"div">;
  frame93?: Flex__<"div">;
  email3?: Flex__<"div">;
  fileUploader?: Flex__<typeof FileUploader>;
  frame94?: Flex__<"div">;
  email2?: Flex__<"div">;
  fileUploader2?: Flex__<typeof FileUploader>;
  textInput6?: Flex__<typeof TextInput>;
};

export interface DefaultMesAnnoncesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMesAnnonces__RenderFunc(props: {
  variants: PlasmicMesAnnonces__VariantsArgs;
  args: PlasmicMesAnnonces__ArgsType;
  overrides: PlasmicMesAnnonces__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modalDetailsJob.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal2.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput1.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload3.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isRefreshed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentJobObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "country",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "Afghanistan",
          "Afrique du Sud",
          "Albanie",
          "Alg\u00e9rie",
          "Allemagne",
          "Andorre",
          "Angola",
          "Antigua-et-Barbuda",
          "Arabie saoudite",
          "Argentine",
          "Arm\u00e9nie",
          "Australie",
          "Autriche",
          "Azerba\u00efdjan",
          "Bahamas",
          "Bahre\u00efn",
          "Bangladesh",
          "Barbade",
          "Belgique",
          "Belize",
          "B\u00e9nin",
          "Bhoutan",
          "Bi\u00e9lorussie",
          "Birmanie (Myanmar)",
          "Bolivie",
          "Bosnie-Herz\u00e9govine",
          "Botswana",
          "Br\u00e9sil",
          "Brunei",
          "Bulgarie",
          "Burkina Faso",
          "Burundi",
          "Cambodge",
          "Cameroun",
          "Canada",
          "Cap-Vert",
          "Centrafrique (R\u00e9publique)",
          "Chili",
          "Chine",
          "Chypre",
          "Colombie",
          "Comores",
          "Congo (R\u00e9publique d\u00e9mocratique du)",
          "Congo (R\u00e9publique du)",
          "Cor\u00e9e du Nord",
          "Cor\u00e9e du Sud",
          "Costa Rica",
          "C\u00f4te d'Ivoire",
          "Croatie",
          "Cuba",
          "Danemark",
          "Djibouti",
          "Dominique",
          "\u00c9gypte",
          "\u00c9mirats arabes unis",
          "\u00c9quateur",
          "\u00c9rythr\u00e9e",
          "Espagne",
          "Estonie",
          "Eswatini",
          "\u00c9tats-Unis",
          "\u00c9thiopie",
          "Fidji",
          "Finlande",
          "France",
          "Gabon",
          "Gambie",
          "G\u00e9orgie",
          "Ghana",
          "Gr\u00e8ce",
          "Grenade",
          "Guatemala",
          "Guin\u00e9e",
          "Guin\u00e9e-Bissau",
          "Guin\u00e9e \u00e9quatoriale",
          "Guyana",
          "Ha\u00efti",
          "Honduras",
          "Hongrie",
          "\u00celes Marshall",
          "\u00celes Salomon",
          "Inde",
          "Indon\u00e9sie",
          "Irak",
          "Iran",
          "Irlande",
          "Islande",
          "Isra\u00ebl",
          "Italie",
          "Jama\u00efque",
          "Japon",
          "Jordanie",
          "Kazakhstan",
          "Kenya",
          "Kirghizistan",
          "Kiribati",
          "Kosovo",
          "Kowe\u00eft",
          "Laos",
          "Lesotho",
          "Lettonie",
          "Liban",
          "Liberia",
          "Libye",
          "Liechtenstein",
          "Lituanie",
          "Luxembourg",
          "Mac\u00e9doine du Nord",
          "Madagascar",
          "Malaisie",
          "Malawi",
          "Maldives",
          "Mali",
          "Malte",
          "Maroc",
          "Maurice",
          "Mauritanie",
          "Mexique",
          "Micron\u00e9sie",
          "Moldavie",
          "Monaco",
          "Mongolie",
          "Mont\u00e9n\u00e9gro",
          "Mozambique",
          "Namibie",
          "Nauru",
          "N\u00e9pal",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Norv\u00e8ge",
          "Nouvelle-Z\u00e9lande",
          "Oman",
          "Ouganda",
          "Ouzb\u00e9kistan",
          "Pakistan",
          "Palaos",
          "Palestine",
          "Panama",
          "Papouasie-Nouvelle-Guin\u00e9e",
          "Paraguay",
          "Pays-Bas",
          "P\u00e9rou",
          "Philippines",
          "Pologne",
          "Portugal",
          "Qatar",
          "R\u00e9publique dominicaine",
          "R\u00e9publique tch\u00e8que",
          "Roumanie",
          "Royaume-Uni",
          "Russie",
          "Rwanda",
          "Saint-Christophe-et-Ni\u00e9v\u00e8s",
          "Sainte-Lucie",
          "Saint-Marin",
          "Saint-Vincent-et-les-Grenadines",
          "Salvador",
          "Samoa",
          "Sao Tom\u00e9-et-Principe",
          "S\u00e9n\u00e9gal",
          "Serbie",
          "Seychelles",
          "Sierra Leone",
          "Singapour",
          "Slovaquie",
          "Slov\u00e9nie",
          "Somalie",
          "Soudan",
          "Soudan du Sud",
          "Sri Lanka",
          "Su\u00e8de",
          "Suisse",
          "Suriname",
          "Syrie",
          "Tadjikistan",
          "Ta\u00efwan",
          "Tanzanie",
          "Tchad",
          "Tha\u00eflande",
          "Timor oriental",
          "Togo",
          "Tonga",
          "Trinit\u00e9-et-Tobago",
          "Tunisie",
          "Turkm\u00e9nistan",
          "Turquie",
          "Tuvalu",
          "Ukraine",
          "Uruguay",
          "Vanuatu",
          "Vatican",
          "Venezuela",
          "Vi\u00eat Nam",
          "Y\u00e9men",
          "Zambie",
          "Zimbabwe"
        ]
      },
      {
        path: "likeJobCard[].name",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].city",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].campany",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].sector",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].contractType",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].availability",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].workingTime",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].salary",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].workMode",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].companyLogo",
        type: "private",
        variableType: "text"
      },
      {
        path: "likeJobCard[].isLastMinute",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "likeJobCard[].isNew",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "likeJobCard[].isApplied",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sidebar.disableLinks",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sidebar.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "candidat"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    jobsLiked: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "8b5c082f-d99a-4dae-bab9-7c91407a4070",
        userArgs: {
          filters: [
            $ctx.SupabaseUser.user == null ? null : $ctx.SupabaseUser.user.id
          ]
        },
        cacheKey: `plasmic.$.8b5c082f-d99a-4dae-bab9-7c91407a4070.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    userLikedJobs: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "a6f75235-f527-45c2-93df-15fcf84a6820",
        userArgs: {
          query: [$ctx.SupabaseUser.user?.id]
        },
        cacheKey: `plasmic.$.a6f75235-f527-45c2-93df-15fcf84a6820.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUser: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "2ac376a0-4976-4171-8f83-bbacf35a99a0",
        userArgs: {
          filters: [
            $ctx.SupabaseUser.user == null ? null : $ctx.SupabaseUser.user.id
          ]
        },
        cacheKey: `plasmic.$.2ac376a0-4976-4171-8f83-bbacf35a99a0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
        userArgs: {
          path: [
            $queries.getUser.data[0].id +
              "/" +
              $queries.getUser.data[0].profile_photo
          ]
        },
        cacheKey: `plasmic.$.8be05618-e3eb-4b37-889a-c18c2902bc93.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getTransportModes: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "ec594f6d-c410-4ab6-b4c2-40e0b46bb731",
        userArgs: {},
        cacheKey: `plasmic.$.ec594f6d-c410-4ab6-b4c2-40e0b46bb731.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSoftSkill: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "782fb4f4-ec90-41a0-a2e9-7e5a5135d08c",
        userArgs: {},
        cacheKey: `plasmic.$.782fb4f4-ec90-41a0-a2e9-7e5a5135d08c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getXpLevel: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "b2a4d57d-9e60-42ef-90a4-3c0c39a3cc9e",
        userArgs: {},
        cacheKey: `plasmic.$.b2a4d57d-9e60-42ef-90a4-3c0c39a3cc9e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    userApplications: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "a3e4c858-0549-4f80-9f4b-d2e2d7018c4e",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.a3e4c858-0549-4f80-9f4b-d2e2d7018c4e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchUserCoordinates: usePlasmicDataOp(() => {
      return {
        sourceId: "3fRequBPthJKGmQ2njgcZi",
        opId: "8c868659-4850-46a7-98a2-048f1f0a938e",
        userArgs: {
          params: [
            $state.form.value.city ?? "Paris",

            $state.form.value.Country ?? "France",

            $state.form.value.postal_code ?? "75000"
          ]
        },
        cacheKey: `plasmic.$.8c868659-4850-46a7-98a2-048f1f0a938e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMesAnnonces.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMesAnnonces.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMesAnnonces.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"annonces"}
          data-plasmic-override={overrides.annonces}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.annonces
          )}
        >
          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
            disableLinks={generateStateValueProp($state, [
              "sidebar",
              "disableLinks"
            ])}
            onDisableLinksChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebar",
                "disableLinks"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sidebar", "role"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, ["sidebar", "role"])}
          />

          <main
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Mes annonces sauvegard\u00e9es"}
            </h1>
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: [
                          "a6f75235-f527-45c2-93df-15fcf84a6820"
                        ]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }}
            />

            {(() => {
              try {
                return $queries.userLikedJobs.data.length > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"annonces2"}
                data-plasmic-override={overrides.annonces2}
                className={classNames(projectcss.all, sty.annonces2)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.userLikedJobs.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tceqD)}
                      key={currentIndex}
                    >
                      {(() => {
                        const child$Props = {
                          availability: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "availability"
                          ]),
                          campany: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "campany"
                          ]),
                          city: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "city"
                          ]),
                          className: classNames(
                            "__wab_instance",
                            sty.likeJobCard
                          ),
                          companyLogo: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "companyLogo"
                          ]),
                          contractType: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "contractType"
                          ]),
                          isApplied: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "isApplied"
                          ]),
                          isLastMinute: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "isLastMinute"
                          ]),
                          isNew: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "isNew"
                          ]),
                          name: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "name"
                          ]),
                          onAvailabilityChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "availability"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onCampanyChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "campany"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onCityChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "city"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onClick: async event => {
                            const $steps = {};

                            $steps["updateCurrentJobObject"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentJobObject"]
                                    },
                                    operation: 0,
                                    value: currentItem
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentJobObject"] != null &&
                              typeof $steps["updateCurrentJobObject"] ===
                                "object" &&
                              typeof $steps["updateCurrentJobObject"].then ===
                                "function"
                            ) {
                              $steps["updateCurrentJobObject"] = await $steps[
                                "updateCurrentJobObject"
                              ];
                            }

                            $steps["updateModalIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "modalDetailsJob",
                                        "isOpen"
                                      ]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalIsOpen"] != null &&
                              typeof $steps["updateModalIsOpen"] === "object" &&
                              typeof $steps["updateModalIsOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalIsOpen"] = await $steps[
                                "updateModalIsOpen"
                              ];
                            }
                          },
                          onCompanyLogoChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "companyLogo"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onContractTypeChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "contractType"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onIsAppliedChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "isApplied"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onIsLastMinuteChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "isLastMinute"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onIsNewChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "isNew"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onNameChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "name"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onSalaryChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "salary"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onSectorChange2: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "sector"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onWorkModeChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "workMode"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onWorkingTimeChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "likeJobCard",
                              __plasmic_idx_0,
                              "workingTime"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          salary: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "salary"
                          ]),
                          sector: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "sector"
                          ]),
                          workMode: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "workMode"
                          ]),
                          workingTime: generateStateValueProp($state, [
                            "likeJobCard",
                            __plasmic_idx_0,
                            "workingTime"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "likeJobCard[].name",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].city",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.location;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].campany",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.company_name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].sector",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.sector_activity;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].contractType",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.contract_type;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].availability",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.availability_status;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].workingTime",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.working_time;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].salary",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.salary;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].workMode",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.work_mode;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].companyLogo",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.logo_file;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "likeJobCard[].isLastMinute",
                              initFunc: ({ $props, $state, $queries }) => false
                            },
                            {
                              name: "likeJobCard[].isNew",
                              initFunc: ({ $props, $state, $queries }) => false
                            },
                            {
                              name: "likeJobCard[].isApplied",
                              initFunc: ({ $props, $state, $queries }) => false
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <LikeJobCard
                            data-plasmic-name={"likeJobCard"}
                            data-plasmic-override={overrides.likeJobCard}
                            {...child$Props}
                          />
                        );
                      })()}
                      <HeartStraightIcon
                        className={classNames(projectcss.all, sty.svg__t661R)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDb"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                    opId: "21389a04-150f-4bd5-bdca-85fbbce35635",
                                    userArgs: {
                                      conditions: [currentItem.id]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [
                                      "a6f75235-f527-45c2-93df-15fcf84a6820",
                                      "24ab9e7e-7e19-4ab2-82fc-82df12596da0"
                                    ],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDb"] != null &&
                            typeof $steps["updateDb"] === "object" &&
                            typeof $steps["updateDb"].then === "function"
                          ) {
                            $steps["updateDb"] = await $steps["updateDb"];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return event?.stopPropagation();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["showToast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "success",
                                    (() => {
                                      try {
                                        return `L'annonce ${currentItem.title} a bien été retirée de vos favoris`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["showToast"] != null &&
                            typeof $steps["showToast"] === "object" &&
                            typeof $steps["showToast"].then === "function"
                          ) {
                            $steps["showToast"] = await $steps["showToast"];
                          }
                        }}
                        role={"img"}
                      />

                      <JobCard
                        data-plasmic-name={"jobCard"}
                        data-plasmic-override={overrides.jobCard}
                        availability={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/09559aac36fd99f7328c58c54917e963.svg";
                          __composite["text"] = currentItem.availability_status;
                          return __composite;
                        })()}
                        city={(() => {
                          try {
                            return currentItem.location;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        className={classNames("__wab_instance", sty.jobCard)}
                        companyName={(() => {
                          try {
                            return currentItem.company_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        contractType={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/8c7917b8895bfc981624579d17930e0b.svg";
                          __composite["text"] = currentItem.contract_type;
                          return __composite;
                        })()}
                        customIcons={{}}
                        domain={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/317422994ee40e8e3801225ee1942b34.svg";
                          __composite["text"] = currentItem.sector_activity;
                          return __composite;
                        })()}
                        logo={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? (() => {
                                try {
                                  return currentItem.company_logo;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return currentItem.company_logo;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        }
                        metrics={[]}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateJobObjetct"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["currentJobObject"]
                                  },
                                  operation: 0,
                                  value: currentItem
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateJobObjetct"] != null &&
                            typeof $steps["updateJobObjetct"] === "object" &&
                            typeof $steps["updateJobObjetct"].then ===
                              "function"
                          ) {
                            $steps["updateJobObjetct"] = await $steps[
                              "updateJobObjetct"
                            ];
                          }

                          $steps["openModal"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modalDetailsJob", "isOpen"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["openModal"] != null &&
                            typeof $steps["openModal"] === "object" &&
                            typeof $steps["openModal"].then === "function"
                          ) {
                            $steps["openModal"] = await $steps["openModal"];
                          }
                        }}
                        salary={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/f452255eec148d4879254c4826702c60.svg";
                          __composite["text"] = currentItem.salary;
                          return __composite;
                        })()}
                        state={"default"}
                        tags={[]}
                        title={(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        workMode={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/04b9ddd401eb67adc0329768776e582b.svg";
                          __composite["text"] = currentItem.work_mode;
                          return __composite;
                        })()}
                        workingTime={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/e0ace4705321f39c98f28e815c1fd071.svg";
                          __composite["text"] = currentItem.working_time;
                          return __composite;
                        })()}
                      />
                    </div>
                  );
                })}
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $queries.jobsLiked.data.length == 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return (
                        !$queries.userLikedJobs.isLoading &&
                        $queries.userLikedJobs?.data?.length == 0
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div
                data-plasmic-name={"noAnnonce"}
                data-plasmic-override={overrides.noAnnonce}
                className={classNames(projectcss.all, sty.noAnnonce)}
              >
                <div
                  data-plasmic-name={"featuredIcon2"}
                  data-plasmic-override={overrides.featuredIcon2}
                  className={classNames(projectcss.all, sty.featuredIcon2)}
                >
                  <LikeIconIcon
                    className={classNames(projectcss.all, sty.svg___2X0X6)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"textAndSupportingText2"}
                  data-plasmic-override={overrides.textAndSupportingText2}
                  className={classNames(
                    projectcss.all,
                    sty.textAndSupportingText2
                  )}
                >
                  <div
                    data-plasmic-name={"text6"}
                    data-plasmic-override={overrides.text6}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text6
                    )}
                  >
                    {"Aucune annonce sauvegard\u00e9e"}
                  </div>
                  <div
                    data-plasmic-name={"supportingText2"}
                    data-plasmic-override={overrides.supportingText2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.supportingText2
                    )}
                  >
                    {"Sauvegardez des annonces pour les retrouver plus tard."}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__kG0N)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__bPade)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mpYVm
                        )}
                      >
                        {"Voir les offres d\u2019emplois"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToAccueil"] = true
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToAccueil"] != null &&
                        typeof $steps["goToAccueil"] === "object" &&
                        typeof $steps["goToAccueil"].then === "function"
                      ) {
                        $steps["goToAccueil"] = await $steps["goToAccueil"];
                      }
                    }}
                  />
                </div>
              </div>
            ) : null}
          </main>
          <MobileNavbarBottom
            data-plasmic-name={"mobileNavbarBottom"}
            data-plasmic-override={overrides.mobileNavbarBottom}
            className={classNames("__wab_instance", sty.mobileNavbarBottom)}
          />

          <Modal
            data-plasmic-name={"modalDetailsJob"}
            data-plasmic-override={overrides.modalDetailsJob}
            className={classNames("__wab_instance", sty.modalDetailsJob)}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__rXpJf)}>
                <div
                  data-plasmic-name={"jobDetail"}
                  data-plasmic-override={overrides.jobDetail}
                  className={classNames(projectcss.all, sty.jobDetail)}
                >
                  <div
                    data-plasmic-name={"jobName"}
                    data-plasmic-override={overrides.jobName}
                    className={classNames(projectcss.all, sty.jobName)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wKtdo
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.currentJobObject.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qKbOh)}
                  >
                    <div
                      data-plasmic-name={"jobLocation"}
                      data-plasmic-override={overrides.jobLocation}
                      className={classNames(projectcss.all, sty.jobLocation)}
                    >
                      <PhMapPin2Icon
                        className={classNames(projectcss.all, sty.svg__ndN)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tPj94
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.currentJobObject.location;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"publicationDate"}
                      data-plasmic-override={overrides.publicationDate}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.publicationDate
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.currentJobObject.created_at
                              ? "Publié le " +
                                  new Date($state.currentJobObject.created_at)
                                    .toISOString()
                                    .split("T")[0]
                              : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame46"}
                    data-plasmic-override={overrides.frame46}
                    className={classNames(projectcss.all, sty.frame46)}
                  >
                    <div
                      data-plasmic-name={"frame47"}
                      data-plasmic-override={overrides.frame47}
                      className={classNames(projectcss.all, sty.frame47)}
                    >
                      <div
                        data-plasmic-name={"frame48"}
                        data-plasmic-override={overrides.frame48}
                        className={classNames(projectcss.all, sty.frame48)}
                      >
                        <PhFileTextIcon
                          className={classNames(projectcss.all, sty.svg__o6KW0)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__c1Eel
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.contract_type;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame49"}
                        data-plasmic-override={overrides.frame49}
                        className={classNames(projectcss.all, sty.frame49)}
                      >
                        <PhClockIcon
                          className={classNames(projectcss.all, sty.svg__vBps1)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yaNfI
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.working_time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame50"}
                        data-plasmic-override={overrides.frame50}
                        className={classNames(projectcss.all, sty.frame50)}
                      >
                        <PhCoinsLightIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7Ggja
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lUvyu
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.salary;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame51"}
                        data-plasmic-override={overrides.frame51}
                        className={classNames(projectcss.all, sty.frame51)}
                      >
                        <PhClockCountdownIcon
                          className={classNames(projectcss.all, sty.svg__hLv75)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ofYah
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject
                                  .availability_status;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                    {(() => {
                      try {
                        return $queries.userApplications.data.some(
                          application =>
                            application.job_id == $state.currentJobObject.id
                        )
                          ? false
                          : true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___2QlzG
                        )}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kQa7C
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={"postuler"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateModal2IsOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modal2", "isOpen"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModal2IsOpen"] != null &&
                            typeof $steps["updateModal2IsOpen"] === "object" &&
                            typeof $steps["updateModal2IsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateModal2IsOpen"] = await $steps[
                              "updateModal2IsOpen"
                            ];
                          }
                        }}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $queries.userApplications.data.some(
                          application =>
                            application.job_id == $state.currentJobObject.id
                        )
                          ? true
                          : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"appliedBtn"}
                        data-plasmic-override={overrides.appliedBtn}
                        className={classNames(projectcss.all, sty.appliedBtn)}
                      >
                        <PhCheckBoldIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___3QAXy
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tj2Ed
                          )}
                        >
                          {"Postul\u00e9"}
                        </div>
                      </div>
                    ) : null}
                  </div>
                  <div
                    data-plasmic-name={"frame53"}
                    data-plasmic-override={overrides.frame53}
                    className={classNames(projectcss.all, sty.frame53)}
                  >
                    <ShareIcon
                      className={classNames(projectcss.all, sty.svg__ze8B)}
                      role={"img"}
                    />

                    <LikeIconIcon
                      className={classNames(projectcss.all, sty.svg___7Yng)}
                      role={"img"}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"jobDescriptionContainer"}
                  data-plasmic-override={overrides.jobDescriptionContainer}
                  className={classNames(
                    projectcss.all,
                    sty.jobDescriptionContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oImH1
                    )}
                  >
                    {"Description du poste"}
                  </div>
                  <div
                    data-plasmic-name={"jobDescription"}
                    data-plasmic-override={overrides.jobDescription}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.jobDescription
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.currentJobObject.description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"benefits"}
                    data-plasmic-override={overrides.benefits}
                    className={classNames(projectcss.all, sty.benefits)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.currentJobObject.benefits
                            .replace(/{/g, "")
                            .replace(/}/g, "")
                            .replace(/"/g, "")
                            .split(",");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__my5Hr
                          )}
                          key={currentIndex}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      );
                    })}
                  </div>
                </div>
                <div
                  data-plasmic-name={"expectedProfileContainer"}
                  data-plasmic-override={overrides.expectedProfileContainer}
                  className={classNames(
                    projectcss.all,
                    sty.expectedProfileContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gJlu0
                    )}
                  >
                    {"Profil attendu"}
                  </div>
                  <div
                    data-plasmic-name={"expectedProfile"}
                    data-plasmic-override={overrides.expectedProfile}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.expectedProfile
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.currentJobObject.requirements;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"company"}
                  data-plasmic-override={overrides.company}
                  className={classNames(projectcss.all, sty.company)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pmIza)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lVtVz
                      )}
                    >
                      {"L\u2019entreprise"}
                    </div>
                    <PlasmicImg__
                      data-plasmic-name={"companyLogo"}
                      data-plasmic-override={overrides.companyLogo}
                      alt={""}
                      className={classNames(sty.companyLogo)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.currentJobObject.logo_file;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <div
                    data-plasmic-name={"frame58"}
                    data-plasmic-override={overrides.frame58}
                    className={classNames(projectcss.all, sty.frame58)}
                  >
                    <div
                      data-plasmic-name={"companyName"}
                      data-plasmic-override={overrides.companyName}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.companyName
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.currentJobObject.company_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      data-plasmic-name={"companyDetail"}
                      data-plasmic-override={overrides.companyDetail}
                      className={classNames(projectcss.all, sty.companyDetail)}
                    >
                      <div
                        data-plasmic-name={"sectorActivity"}
                        data-plasmic-override={overrides.sectorActivity}
                        className={classNames(
                          projectcss.all,
                          sty.sectorActivity
                        )}
                      >
                        <IconPhBriefcase2Icon
                          className={classNames(projectcss.all, sty.svg__xehZu)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l3F6S
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.sector_activity;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"companySize"}
                        data-plasmic-override={overrides.companySize}
                        className={classNames(projectcss.all, sty.companySize)}
                      >
                        <PhUsersThreeIcon
                          className={classNames(projectcss.all, sty.svg__f4Y8V)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eLbN
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.company_size;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"companyLocation"}
                        data-plasmic-override={overrides.companyLocation}
                        className={classNames(
                          projectcss.all,
                          sty.companyLocation
                        )}
                      >
                        <PhMapTrifoldFillIcon
                          className={classNames(projectcss.all, sty.svg__cZnOn)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hgWgt
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.company_address;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"companyDescription"}
                    data-plasmic-override={overrides.companyDescription}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.companyDescription
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.currentJobObject.company_description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uWdKp)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modalDetailsJob", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalIsOpen"] != null &&
                      typeof $steps["updateModalIsOpen"] === "object" &&
                      typeof $steps["updateModalIsOpen"].then === "function"
                    ) {
                      $steps["updateModalIsOpen"] = await $steps[
                        "updateModalIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, [
              "modalDetailsJob",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "modalDetailsJob",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            trigger={null}
          />

          <Modal
            data-plasmic-name={"modal2"}
            data-plasmic-override={overrides.modal2}
            className={classNames("__wab_instance", sty.modal2)}
            closeOnBackdropClick={false}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__r2706)}>
                {(() => {
                  try {
                    return (
                      $ctx.SupabaseUser.user !== undefined &&
                      $ctx.SupabaseUser.user !== null
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"header2"}
                    data-plasmic-override={overrides.header2}
                    className={classNames(projectcss.all, sty.header2)}
                  >
                    <div
                      data-plasmic-name={"frame67"}
                      data-plasmic-override={overrides.frame67}
                      className={classNames(projectcss.all, sty.frame67)}
                    >
                      <div
                        data-plasmic-name={"frame68"}
                        data-plasmic-override={overrides.frame68}
                        className={classNames(projectcss.all, sty.frame68)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rs7KC
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          data-plasmic-name={"frame70"}
                          data-plasmic-override={overrides.frame70}
                          className={classNames(projectcss.all, sty.frame70)}
                        >
                          <PhMapPin2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jzzlO
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lfEI
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.currentJobObject.location;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aLkg
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.currentJobObject.created_at
                                ? "Publié le " +
                                    new Date($state.currentJobObject.created_at)
                                      .toISOString()
                                      .split("T")[0]
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame74"}
                      data-plasmic-override={overrides.frame74}
                      className={classNames(projectcss.all, sty.frame74)}
                    >
                      <div
                        data-plasmic-name={"frame75"}
                        data-plasmic-override={overrides.frame75}
                        className={classNames(projectcss.all, sty.frame75)}
                      >
                        <div
                          data-plasmic-name={"frame76"}
                          data-plasmic-override={overrides.frame76}
                          className={classNames(projectcss.all, sty.frame76)}
                        >
                          <PhFileTextIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___7Hlko
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6Gw9F
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.currentJobObject.contract_type;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame77"}
                          data-plasmic-override={overrides.frame77}
                          className={classNames(projectcss.all, sty.frame77)}
                        >
                          <PhClockIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__daMKt
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mcSwt
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.currentJobObject.working_time;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame16"}
                          data-plasmic-override={overrides.frame16}
                          className={classNames(projectcss.all, sty.frame16)}
                        >
                          <PhCoinsLightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hfRTl
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gShvf
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.currentJobObject.salary;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame17"}
                          data-plasmic-override={overrides.frame17}
                          className={classNames(projectcss.all, sty.frame17)}
                        >
                          <PhClockCountdownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___7Dq3X
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a9SaX
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.currentJobObject
                                    .availability_status;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame18"}
                      data-plasmic-override={overrides.frame18}
                      className={classNames(projectcss.all, sty.frame18)}
                    >
                      <div
                        data-plasmic-name={"frame78"}
                        data-plasmic-override={overrides.frame78}
                        className={classNames(projectcss.all, sty.frame78)}
                      >
                        <div
                          data-plasmic-name={"frame79"}
                          data-plasmic-override={overrides.frame79}
                          className={classNames(projectcss.all, sty.frame79)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6ZJi6
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.currentJobObject.company_name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"frame80"}
                            data-plasmic-override={overrides.frame80}
                            className={classNames(projectcss.all, sty.frame80)}
                          >
                            <div
                              data-plasmic-name={"frame81"}
                              data-plasmic-override={overrides.frame81}
                              className={classNames(
                                projectcss.all,
                                sty.frame81
                              )}
                            >
                              <IconPhBriefcase2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___6NcEy
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__y92D
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.currentJobObject
                                        .sector_activity;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"frame82"}
                              data-plasmic-override={overrides.frame82}
                              className={classNames(
                                projectcss.all,
                                sty.frame82
                              )}
                            >
                              <PhUsersThreeIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___4I6Vy
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___01DF4
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.currentJobObject
                                        .company_size;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"frame83"}
                              data-plasmic-override={overrides.frame83}
                              className={classNames(
                                projectcss.all,
                                sty.frame83
                              )}
                            >
                              <div
                                data-plasmic-name={"frame84"}
                                data-plasmic-override={overrides.frame84}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame84
                                )}
                              >
                                <PhMapTrifoldFillIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__lMags
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__m52K5
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.currentJobObject
                                          .company_address;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      {(() => {
                        try {
                          return $state.currentJobObject.logo_file != null;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"frame85"}
                          data-plasmic-override={overrides.frame85}
                          className={classNames(projectcss.all, sty.frame85)}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__j7AdV)}
                            displayHeight={"55px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"150px"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return $state.currentJobObject.logo_file;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      ) : null}
                    </div>
                  </div>
                ) : null}
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["cv"] =
                        $state.upload.files.length > 0
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                  userArgs: {
                                    path: [
                                      $ctx.SupabaseUser.user.id,

                                      $state.upload.files[0].name
                                    ],

                                    content: [$state.upload.files[0].contents],

                                    contentType: [$state.upload.files[0].type]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["cv"] != null &&
                        typeof $steps["cv"] === "object" &&
                        typeof $steps["cv"].then === "function"
                      ) {
                        $steps["cv"] = await $steps["cv"];
                      }

                      $steps["ldm"] =
                        $state.upload3.files.length > 0
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                  userArgs: {
                                    path: [
                                      $ctx.SupabaseUser.user.id,

                                      $state.upload3.files[0].name
                                    ],

                                    content: [$state.upload3.files[0].contents],

                                    contentType: [$state.upload3.files[0].type]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["ldm"] != null &&
                        typeof $steps["ldm"] === "object" &&
                        typeof $steps["ldm"].then === "function"
                      ) {
                        $steps["ldm"] = await $steps["ldm"];
                      }

                      $steps["updateUser"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "71c51a9c-8556-45fb-8a36-acb9ebbbf8c3",
                                userArgs: {
                                  variables: [
                                    $state.form.value.address,

                                    $state.form.value.city,

                                    $state.form.value.Country,

                                    $steps.ldm?.path.split("/")[1],

                                    $steps.cv?.path.split("/")[1],

                                    $state.form.value.first_name,

                                    $state.form.value.last_name,

                                    $state.form.value.level,

                                    $state.form.value.linkedin_url,

                                    $state.form.value.phone_number,

                                    $state.form.value.postal_code,

                                    $state.form.value.short_presentation,

                                    $state.form.value.skill,

                                    $state.form.value.transport_mode,

                                    new Date().toISOString(),

                                    $queries.fetchUserCoordinates.data.response
                                      .features[0].geometry.coordinates[0],

                                    $queries.fetchUserCoordinates.data.response
                                      .features[0].geometry.coordinates[1]
                                  ],

                                  conditions: [$ctx.SupabaseUser.user.id]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUser"] != null &&
                        typeof $steps["updateUser"] === "object" &&
                        typeof $steps["updateUser"].then === "function"
                      ) {
                        $steps["updateUser"] = await $steps["updateUser"];
                      }

                      $steps["createApplication"] = (
                        $queries.userApplications.data.some(
                          application =>
                            application.job_id == $state.currentJobObject.id
                        )
                          ? false
                          : true
                      )
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "3bdd662e-dbe1-4c67-aea3-5cb5f68c33ee",
                                userArgs: {
                                  variables: [
                                    $state.form.value.address,

                                    $state.form.value.city,

                                    $steps.ldm?.path.split("/")[1],

                                    $steps.cv?.path.split("/")[1],

                                    $queries.userLikedJobs.data[0].id,

                                    $state.form.value.level,

                                    $state.form.value.linkedin_url,

                                    $state.form.value.postal_code,

                                    $state.form.value.short_presentation,

                                    $state.form.value.skill,

                                    $state.form.value.transport_mode,

                                    $ctx.SupabaseUser.user.id
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "bbea59bc-f1eb-462f-be90-e4846dc1da5f",
                                  "a3e4c858-0549-4f80-9f4b-d2e2d7018c4e"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["createApplication"] != null &&
                        typeof $steps["createApplication"] === "object" &&
                        typeof $steps["createApplication"].then === "function"
                      ) {
                        $steps["createApplication"] = await $steps[
                          "createApplication"
                        ];
                      }

                      $steps["errorMsg"] = (
                        $queries.userApplications.data.some(
                          application =>
                            application.job_id == $state.currentJobObject.id
                        )
                          ? true
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "warning",
                                "Attention",
                                "Vous avez d\u00e9j\u00e0 postul\u00e9 \u00e0 cette offre."
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["errorMsg"] != null &&
                        typeof $steps["errorMsg"] === "object" &&
                        typeof $steps["errorMsg"].then === "function"
                      ) {
                        $steps["errorMsg"] = await $steps["errorMsg"];
                      }

                      $steps["succesMsg"] = (
                        $queries.userApplications.data.some(
                          application =>
                            application.job_id == $state.currentJobObject.id
                        )
                          ? false
                          : true
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "Merci",
                                "Votre candidature a \u00e9t\u00e9 envoy\u00e9 !"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["succesMsg"] != null &&
                        typeof $steps["succesMsg"] === "object" &&
                        typeof $steps["succesMsg"].then === "function"
                      ) {
                        $steps["succesMsg"] = await $steps["succesMsg"];
                      }

                      $steps["closeModal2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal2", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["closeModal2"] != null &&
                        typeof $steps["closeModal2"] === "object" &&
                        typeof $steps["closeModal2"].then === "function"
                      ) {
                        $steps["closeModal2"] = await $steps["closeModal2"];
                      }

                      $steps["sendEmailToEmployer"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
                                opId: "ac3aeb59-a5a8-4309-9807-433a1356e04e",
                                userArgs: {
                                  body: [
                                    {
                                      to: `${$state.currentJobObject.employer_email}`,
                                      template: "applicationReceived",
                                      subject:
                                        "Nouvelle candidature reçue pour votre offre \uD83D\uDCBC",
                                      params: {
                                        firstName:
                                          $state.currentJobObject.employer_name,
                                        jobTitle: $state.currentJobObject.title,
                                        candidateName:
                                          $queries.getUser.data[0].first_name +
                                          " " +
                                          $queries.getUser.data[0].last_name,
                                        applicationUrl: `https://job-around-me.com/candidatures-employeur/${$state.currentJobObject.id}`
                                      }
                                    }
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["sendEmailToEmployer"] != null &&
                        typeof $steps["sendEmailToEmployer"] === "object" &&
                        typeof $steps["sendEmailToEmployer"].then === "function"
                      ) {
                        $steps["sendEmailToEmployer"] = await $steps[
                          "sendEmailToEmployer"
                        ];
                      }

                      $steps["sendEmailToCandidat"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
                                opId: "ac3aeb59-a5a8-4309-9807-433a1356e04e",
                                userArgs: {
                                  body: [
                                    {
                                      to: `${$state.form.value?.email}`,
                                      template: "applicationSubmitted",
                                      subject:
                                        "Ta candidature a bien été envoyée ✅",
                                      params: {
                                        firstName:
                                          $state.form.value?.first_name,
                                        jobTitle:
                                          $state.currentJobObject?.title,
                                        companyName:
                                          $state.currentJobObject.company_name,
                                        applicationUrl:
                                          "https://job-around-me.com/candidatures"
                                      }
                                    }
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["sendEmailToCandidat"] != null &&
                        typeof $steps["sendEmailToCandidat"] === "object" &&
                        typeof $steps["sendEmailToCandidat"].then === "function"
                      ) {
                        $steps["sendEmailToCandidat"] = await $steps[
                          "sendEmailToCandidat"
                        ];
                      }
                    },
                    onFinishFailed: async data => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "Veuillez remplir toutes les informations obligatoires"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2A6UX
                        )}
                      >
                        <UploadWrapper
                          data-plasmic-name={"upload2"}
                          data-plasmic-override={overrides.upload2}
                          accept={"image/*"}
                          className={classNames("__wab_instance", sty.upload2)}
                          files={generateStateValueProp($state, [
                            "upload2",
                            "files"
                          ])}
                          onFilesChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "upload2",
                              "files"
                            ]).apply(null, eventArgs);

                            (async files => {
                              const $steps = {};

                              $steps["supabaseUploadFile"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                        opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                        userArgs: {
                                          path: [
                                            $ctx.SupabaseUser.user.id,

                                            $state.upload2.files[0].name
                                          ],

                                          content: [
                                            $state.upload2.files[0].contents
                                          ],

                                          contentType: [
                                            $state.upload2.files[0].type
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["supabaseUploadFile"] != null &&
                                typeof $steps["supabaseUploadFile"] ===
                                  "object" &&
                                typeof $steps["supabaseUploadFile"].then ===
                                  "function"
                              ) {
                                $steps["supabaseUploadFile"] = await $steps[
                                  "supabaseUploadFile"
                                ];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "ca8056ed-4ec7-4218-bb8b-d4f4da770307",
                                        userArgs: {
                                          keys: [$ctx.SupabaseUser.user.id],

                                          variables: [
                                            $steps.supabaseUploadFile?.path.split(
                                              "/"
                                            )[1]
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          showUploadList={true}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__wlCyn)}
                            displayHeight={"132px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"132px"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return $queries.getPp.signedUrl
                                  ? $queries.getPp.signedUrl
                                  : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qpDsR
                            )}
                          >
                            <div
                              data-plasmic-name={"editIcon2"}
                              data-plasmic-override={overrides.editIcon2}
                              className={classNames(
                                projectcss.all,
                                sty.editIcon2
                              )}
                            >
                              <div
                                data-plasmic-name={"frame19"}
                                data-plasmic-override={overrides.frame19}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame19
                                )}
                              />

                              <PhPencilSimpleIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1MfPz
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              data-plasmic-name={"deleteIcon2"}
                              data-plasmic-override={overrides.deleteIcon2}
                              className={classNames(
                                projectcss.all,
                                sty.deleteIcon2
                              )}
                            >
                              <div
                                data-plasmic-name={"frame20"}
                                data-plasmic-override={overrides.frame20}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame20
                                )}
                              />

                              <PhTrashIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__q5OKk
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateUpload2Files"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["upload2", "files"]
                                          },
                                          operation: 1
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            undefined
                                          );
                                          return undefined;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateUpload2Files"] != null &&
                                    typeof $steps["updateUpload2Files"] ===
                                      "object" &&
                                    typeof $steps["updateUpload2Files"].then ===
                                      "function"
                                  ) {
                                    $steps["updateUpload2Files"] = await $steps[
                                      "updateUpload2Files"
                                    ];
                                  }

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return event.stopPropagation();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["postgresUpdateMany"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                            opId: "00154d6f-41ac-4e44-8d5a-da12df8e7c56",
                                            userArgs: {
                                              conditions: [
                                                $ctx.SupabaseUser.user.id
                                              ],

                                              variables: [null]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["postgresUpdateMany"] != null &&
                                    typeof $steps["postgresUpdateMany"] ===
                                      "object" &&
                                    typeof $steps["postgresUpdateMany"].then ===
                                      "function"
                                  ) {
                                    $steps["postgresUpdateMany"] = await $steps[
                                      "postgresUpdateMany"
                                    ];
                                  }
                                }}
                                role={"img"}
                              />
                            </div>
                          </div>
                        </UploadWrapper>
                      </div>
                      <div
                        data-plasmic-name={"nomPrenom"}
                        data-plasmic-override={overrides.nomPrenom}
                        className={classNames(projectcss.all, sty.nomPrenom)}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__reDhu
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pxvbH
                              )}
                            >
                              {"Pr\u00e9nom"}
                            </div>
                          }
                          name={"first_name"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput1"}
                            data-plasmic-override={overrides.textInput1}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput1
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getUser.data[0].first_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput1",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pr\u00e9nom"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__s4OTk
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jryR
                              )}
                            >
                              {"Nom"}
                            </div>
                          }
                          name={"last_name"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput2"}
                            data-plasmic-override={overrides.textInput2}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput2
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getUser.data[0].last_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput2",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pr\u00e9nom"}
                          />
                        </FormItemWrapper>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__dKNuc
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wjlL
                            )}
                          >
                            {"E-mail"}
                          </div>
                        }
                        name={"email"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput4"}
                          data-plasmic-override={overrides.textInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput4
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.getUser.data[0].email;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          disabled={true}
                          inputType={"email"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"E-mail"}
                        />
                      </FormItemWrapper>
                      <div
                        data-plasmic-name={"telephone"}
                        data-plasmic-override={overrides.telephone}
                        className={classNames(projectcss.all, sty.telephone)}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__dyWm4
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__orwfl
                              )}
                            >
                              {"T\u00e9l\u00e9phone"}
                            </div>
                          }
                          name={"countryCode"}
                        >
                          <PhoneSelector
                            data-plasmic-name={"phoneSelector"}
                            data-plasmic-override={overrides.phoneSelector}
                            className={classNames(
                              "__wab_instance",
                              sty.phoneSelector
                            )}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__hjXXr
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__avVsh
                              )}
                            >
                              {""}
                            </div>
                          }
                          name={"phone_number"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput3"}
                            data-plasmic-override={overrides.textInput3}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput3
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getUser.data[0].phone_number;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            inputType={"tel"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput3",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"6060606060"}
                          />
                        </FormItemWrapper>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___8J4Gu
                        )}
                        label={"Adresse"}
                        name={"address"}
                      >
                        <TextInput
                          data-plasmic-name={"rue"}
                          data-plasmic-override={overrides.rue}
                          className={classNames("__wab_instance", sty.rue)}
                          defaultValue={(() => {
                            try {
                              return $queries.getUser.data[0].address;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          inputType={"text"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "rue",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Rue"}
                        />
                      </FormItemWrapper>
                      <div
                        data-plasmic-name={"codePosteVille"}
                        data-plasmic-override={overrides.codePosteVille}
                        className={classNames(
                          projectcss.all,
                          sty.codePosteVille
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__aA0L
                          )}
                          hidden={false}
                          label={""}
                          name={"postal_code"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"codePostal"}
                            data-plasmic-override={overrides.codePostal}
                            className={classNames(
                              "__wab_instance",
                              sty.codePostal
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getUser.data[0].postal_code;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "codePostal",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Code postal"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__e91Zx
                          )}
                          label={"Adresse*"}
                          name={"city"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"ville"}
                            data-plasmic-override={overrides.ville}
                            className={classNames("__wab_instance", sty.ville)}
                            defaultValue={(() => {
                              try {
                                return $queries.getUser.data[0].city;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "ville",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Ville"}
                          />
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rhZlq
                        )}
                      >
                        <TextInput
                          data-plasmic-name={"textInput5"}
                          data-plasmic-override={overrides.textInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput5
                          )}
                          defaultValue={``}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Code postal"}
                        />

                        <Select
                          data-plasmic-name={"select2"}
                          data-plasmic-override={overrides.select2}
                          className={classNames("__wab_instance", sty.select2)}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select2",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Ville"}
                          showLabel={false}
                        />
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__t6BZ4
                        )}
                        initialValue={$queries.getUser?.data[0]?.country}
                        label={null}
                        name={"Country"}
                        noLabel={true}
                      >
                        <Select
                          data-plasmic-name={"select4"}
                          data-plasmic-override={overrides.select4}
                          className={classNames("__wab_instance", sty.select4)}
                          initialSelectedValue={"France"}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.country;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.menuItem__k70Nc
                                )}
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pays"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <Line10Icon
                        className={classNames(projectcss.all, sty.svg__edx1G)}
                        role={"img"}
                      />

                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__axNyR
                        )}
                        initialValue={(() => {
                          try {
                            return $queries.getUser.data[0].transport_mode;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Moyens de transport"}
                        name={"transport_mode"}
                        noLabel={false}
                      >
                        <AntdSelect
                          data-plasmic-name={"select3"}
                          data-plasmic-override={overrides.select3}
                          bordered={false}
                          className={classNames("__wab_instance", sty.select3)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select3",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getTransportModes.data.map(
                                mode => ({
                                  value: mode.mode,
                                  label: mode.mode
                                })
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mGebR
                              )}
                            >
                              {"Moyen de transport"}
                            </div>
                          }
                          popupScopeClassName={sty["select3__popup"]}
                          size={"large"}
                          value={generateStateValueProp($state, [
                            "select3",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__ePjz3
                        )}
                        initialValue={(() => {
                          try {
                            return $queries.getUser.data[0].short_presentation;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gruOh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qOlm4
                              )}
                            >
                              {"Pr\u00e9sentation courte"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__h4Srf
                              )}
                            >
                              {
                                "D\u00e9crivez le type de poste que vous cherchez, les missions que vous souhaitez effectuer. Ajouter les mots-cl\u00e9s qui vous semblent les plus pertinents pour trouver les jobs qui correspondent \u00e0 votre recherche.\r\n\r"
                              }
                            </div>
                          </div>
                        }
                        name={"short_presentation"}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput"}
                          data-plasmic-override={overrides.textAreaInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pr\u00e9sentation"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__fe2OV
                        )}
                        initialValue={(() => {
                          try {
                            return $queries.getUser.data[0].skill;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zzdNz
                            )}
                          >
                            {"Comp\u00e9tences"}
                          </div>
                        }
                        name={"skill"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select7"}
                          data-plasmic-override={overrides.select7}
                          className={classNames("__wab_instance", sty.select7)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select7",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getSoftSkill.data.map(skill => ({
                                value: skill.id,
                                label: skill.skill
                              }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__iWnQ
                              )}
                            >
                              <PlusIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__k3YsR
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sGY4
                                )}
                              >
                                {"Ajouter"}
                              </div>
                            </div>
                          }
                          popupScopeClassName={sty["select7__popup"]}
                          size={"large"}
                          value={generateStateValueProp($state, [
                            "select7",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__m6NTd
                        )}
                        hidden={false}
                        initialValue={$queries.getUser.data[0]?.level}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xBkHn
                            )}
                          >
                            {"Niveau d'exp\u00e9rience"}
                          </div>
                        }
                        name={"level"}
                      >
                        <Select
                          data-plasmic-name={"select5"}
                          data-plasmic-override={overrides.select5}
                          className={classNames("__wab_instance", sty.select5)}
                          initialSelectedValue={$queries.getUser.data[0]?.level}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getXpLevel.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem.level;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"S\u00e9l\u00e9ctionner"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zt1XJ
                        )}
                      >
                        <div
                          data-plasmic-name={"frame14"}
                          data-plasmic-override={overrides.frame14}
                          className={classNames(projectcss.all, sty.frame14)}
                        >
                          <div
                            data-plasmic-name={"email4"}
                            data-plasmic-override={overrides.email4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.email4
                            )}
                          >
                            {"CV"}
                          </div>
                          {(() => {
                            try {
                              return $queries.getUser.data[0].cv_file !== null;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"cvUpload"}
                              data-plasmic-override={overrides.cvUpload}
                              className={classNames(
                                projectcss.all,
                                sty.cvUpload
                              )}
                            >
                              <PhTrashIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__jVd84
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"content5"}
                                data-plasmic-override={overrides.content5}
                                className={classNames(
                                  projectcss.all,
                                  sty.content5
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__fOUne)}
                                  displayHeight={"39px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"39px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                    fullWidth: 39,
                                    fullHeight: 39,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nk258
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.getUser.data[0].cv_file;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Importer ou d\u00e9poser un fichier";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $queries.getUser.data[0].cv_file === null;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"fileUploader3"}
                              data-plasmic-override={overrides.fileUploader3}
                              className={classNames(
                                projectcss.all,
                                sty.fileUploader3
                              )}
                            >
                              <UploadWrapper
                                data-plasmic-name={"upload"}
                                data-plasmic-override={overrides.upload}
                                accept={"application/pdf"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload
                                )}
                                files={generateStateValueProp($state, [
                                  "upload",
                                  "files"
                                ])}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={true}
                              >
                                <div
                                  data-plasmic-name={"content"}
                                  data-plasmic-override={overrides.content}
                                  className={classNames(
                                    projectcss.all,
                                    sty.content
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__qKqHr)}
                                    displayHeight={"39px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"39px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                      fullWidth: 39,
                                      fullHeight: 39,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___0SmYt
                                    )}
                                  >
                                    {"Importer ou d\u00e9poser un fichier"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__v6TdO
                                    )}
                                  >
                                    {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                  </div>
                                </div>
                              </UploadWrapper>
                            </div>
                          ) : null}
                        </div>
                        <div
                          data-plasmic-name={"frame15"}
                          data-plasmic-override={overrides.frame15}
                          className={classNames(projectcss.all, sty.frame15)}
                        >
                          <div
                            data-plasmic-name={"email5"}
                            data-plasmic-override={overrides.email5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.email5
                            )}
                          >
                            {"Lettre de motivation"}
                          </div>
                          {(() => {
                            try {
                              return (
                                $queries.getUser.data[0].cover_letter_file !==
                                null
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"cvUpload2"}
                              data-plasmic-override={overrides.cvUpload2}
                              className={classNames(
                                projectcss.all,
                                sty.cvUpload2
                              )}
                            >
                              <PhTrashIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__pqJhb
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"content6"}
                                data-plasmic-override={overrides.content6}
                                className={classNames(
                                  projectcss.all,
                                  sty.content6
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__jNm3Y)}
                                  displayHeight={"39px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"39px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                    fullWidth: 39,
                                    fullHeight: 39,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jjIn4
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.getUser.data[0]
                                          .cover_letter_file;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Importer ou d\u00e9poser un fichier";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $queries.getUser.data[0].cover_letter_file ===
                                null
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"fileUploader4"}
                              data-plasmic-override={overrides.fileUploader4}
                              className={classNames(
                                projectcss.all,
                                sty.fileUploader4
                              )}
                            >
                              <UploadWrapper
                                data-plasmic-name={"upload3"}
                                data-plasmic-override={overrides.upload3}
                                accept={"application/pdf"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload3
                                )}
                                files={generateStateValueProp($state, [
                                  "upload3",
                                  "files"
                                ])}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload3",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uGk76
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__bb4Yp)}
                                    displayHeight={"39px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"39px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                      fullWidth: 39,
                                      fullHeight: 39,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fg56A
                                    )}
                                  >
                                    {"Importer ou d\u00e9poser un fichier"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__alvEu
                                    )}
                                  >
                                    {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                  </div>
                                </div>
                              </UploadWrapper>
                            </div>
                          ) : null}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame92"}
                        data-plasmic-override={overrides.frame92}
                        className={classNames(projectcss.all, sty.frame92)}
                      >
                        <div
                          data-plasmic-name={"frame93"}
                          data-plasmic-override={overrides.frame93}
                          className={classNames(projectcss.all, sty.frame93)}
                        >
                          <div
                            data-plasmic-name={"email3"}
                            data-plasmic-override={overrides.email3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.email3
                            )}
                          >
                            {"CV"}
                          </div>
                          <FileUploader
                            data-plasmic-name={"fileUploader"}
                            data-plasmic-override={overrides.fileUploader}
                            accept={"*/*"}
                            className={classNames(
                              "__wab_instance",
                              sty.fileUploader
                            )}
                            maxSize={5242880}
                            state={"complete"}
                          />
                        </div>
                        <div
                          data-plasmic-name={"frame94"}
                          data-plasmic-override={overrides.frame94}
                          className={classNames(projectcss.all, sty.frame94)}
                        >
                          <div
                            data-plasmic-name={"email2"}
                            data-plasmic-override={overrides.email2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.email2
                            )}
                          >
                            {"Lettre de motivation"}
                          </div>
                          <FileUploader
                            data-plasmic-name={"fileUploader2"}
                            data-plasmic-override={overrides.fileUploader2}
                            accept={"*/*"}
                            className={classNames(
                              "__wab_instance",
                              sty.fileUploader2
                            )}
                            maxSize={7}
                            state={"complete"}
                          />
                        </div>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__uOtGr
                        )}
                        initialValue={$queries.getUser?.data[0]?.linkedin_url}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gJTnz
                            )}
                          >
                            {"Linkedin"}
                          </div>
                        }
                        name={"linkedin_url"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput6"}
                          data-plasmic-override={overrides.textInput6}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput6
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput6",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"https://"}
                        />
                      </FormItemWrapper>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ka1Ow
                        )}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lyCcn
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={"enregistrer et postuler"}
                        submitsForm={true}
                      />
                    </FormWrapper>
                  );
                })()}
              </div>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__sQ9Iq)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModal2IsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal2", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModal2IsOpen"] != null &&
                      typeof $steps["updateModal2IsOpen"] === "object" &&
                      typeof $steps["updateModal2IsOpen"].then === "function"
                    ) {
                      $steps["updateModal2IsOpen"] = await $steps[
                        "updateModal2IsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["modal2", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal2", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            trigger={null}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  annonces: [
    "annonces",
    "mobileNavbarTop",
    "sidebar",
    "main",
    "h1",
    "sideEffect",
    "annonces2",
    "likeJobCard",
    "jobCard",
    "noAnnonce",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2",
    "mobileNavbarBottom",
    "modalDetailsJob",
    "jobDetail",
    "jobName",
    "jobLocation",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "appliedBtn",
    "frame53",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "company",
    "companyLogo",
    "frame58",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "companySize",
    "companyLocation",
    "companyDescription",
    "modal2",
    "header2",
    "frame67",
    "frame68",
    "frame70",
    "frame74",
    "frame75",
    "frame76",
    "frame77",
    "frame16",
    "frame17",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "frame82",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select3",
    "textAreaInput",
    "select7",
    "select5",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6"
  ],
  mobileNavbarTop: ["mobileNavbarTop"],
  sidebar: ["sidebar"],
  main: [
    "main",
    "h1",
    "sideEffect",
    "annonces2",
    "likeJobCard",
    "jobCard",
    "noAnnonce",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  h1: ["h1"],
  sideEffect: ["sideEffect"],
  annonces2: ["annonces2", "likeJobCard", "jobCard"],
  likeJobCard: ["likeJobCard"],
  jobCard: ["jobCard"],
  noAnnonce: [
    "noAnnonce",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  featuredIcon2: ["featuredIcon2"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  text6: ["text6"],
  supportingText2: ["supportingText2"],
  mobileNavbarBottom: ["mobileNavbarBottom"],
  modalDetailsJob: [
    "modalDetailsJob",
    "jobDetail",
    "jobName",
    "jobLocation",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "appliedBtn",
    "frame53",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "company",
    "companyLogo",
    "frame58",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "companySize",
    "companyLocation",
    "companyDescription"
  ],
  jobDetail: [
    "jobDetail",
    "jobName",
    "jobLocation",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "appliedBtn",
    "frame53"
  ],
  jobName: ["jobName"],
  jobLocation: ["jobLocation"],
  publicationDate: ["publicationDate"],
  frame46: [
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "appliedBtn"
  ],
  frame47: ["frame47", "frame48", "frame49", "frame50", "frame51"],
  frame48: ["frame48"],
  frame49: ["frame49"],
  frame50: ["frame50"],
  frame51: ["frame51"],
  appliedBtn: ["appliedBtn"],
  frame53: ["frame53"],
  jobDescriptionContainer: [
    "jobDescriptionContainer",
    "jobDescription",
    "benefits"
  ],
  jobDescription: ["jobDescription"],
  benefits: ["benefits"],
  expectedProfileContainer: ["expectedProfileContainer", "expectedProfile"],
  expectedProfile: ["expectedProfile"],
  company: [
    "company",
    "companyLogo",
    "frame58",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "companySize",
    "companyLocation",
    "companyDescription"
  ],
  companyLogo: ["companyLogo"],
  frame58: [
    "frame58",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "companySize",
    "companyLocation"
  ],
  companyName: ["companyName"],
  companyDetail: [
    "companyDetail",
    "sectorActivity",
    "companySize",
    "companyLocation"
  ],
  sectorActivity: ["sectorActivity"],
  companySize: ["companySize"],
  companyLocation: ["companyLocation"],
  companyDescription: ["companyDescription"],
  modal2: [
    "modal2",
    "header2",
    "frame67",
    "frame68",
    "frame70",
    "frame74",
    "frame75",
    "frame76",
    "frame77",
    "frame16",
    "frame17",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "frame82",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select3",
    "textAreaInput",
    "select7",
    "select5",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6"
  ],
  header2: [
    "header2",
    "frame67",
    "frame68",
    "frame70",
    "frame74",
    "frame75",
    "frame76",
    "frame77",
    "frame16",
    "frame17",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "frame82",
    "frame83",
    "frame84",
    "frame85"
  ],
  frame67: ["frame67", "frame68", "frame70"],
  frame68: ["frame68", "frame70"],
  frame70: ["frame70"],
  frame74: ["frame74", "frame75", "frame76", "frame77", "frame16", "frame17"],
  frame75: ["frame75", "frame76", "frame77", "frame16", "frame17"],
  frame76: ["frame76"],
  frame77: ["frame77"],
  frame16: ["frame16"],
  frame17: ["frame17"],
  frame18: [
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "frame82",
    "frame83",
    "frame84",
    "frame85"
  ],
  frame78: [
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "frame82",
    "frame83",
    "frame84"
  ],
  frame79: ["frame79", "frame80", "frame81", "frame82", "frame83", "frame84"],
  frame80: ["frame80", "frame81", "frame82", "frame83", "frame84"],
  frame81: ["frame81"],
  frame82: ["frame82"],
  frame83: ["frame83", "frame84"],
  frame84: ["frame84"],
  frame85: ["frame85"],
  form: [
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select3",
    "textAreaInput",
    "select7",
    "select5",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6"
  ],
  upload2: ["upload2", "editIcon2", "frame19", "deleteIcon2", "frame20"],
  editIcon2: ["editIcon2", "frame19"],
  frame19: ["frame19"],
  deleteIcon2: ["deleteIcon2", "frame20"],
  frame20: ["frame20"],
  nomPrenom: ["nomPrenom", "textInput1", "textInput2"],
  textInput1: ["textInput1"],
  textInput2: ["textInput2"],
  textInput4: ["textInput4"],
  telephone: ["telephone", "phoneSelector", "textInput3"],
  phoneSelector: ["phoneSelector"],
  textInput3: ["textInput3"],
  rue: ["rue"],
  codePosteVille: ["codePosteVille", "codePostal", "ville"],
  codePostal: ["codePostal"],
  ville: ["ville"],
  textInput5: ["textInput5"],
  select2: ["select2"],
  select4: ["select4"],
  select3: ["select3"],
  textAreaInput: ["textAreaInput"],
  select7: ["select7"],
  select5: ["select5"],
  frame14: [
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content"
  ],
  email4: ["email4"],
  cvUpload: ["cvUpload", "content5"],
  content5: ["content5"],
  fileUploader3: ["fileUploader3", "upload", "content"],
  upload: ["upload", "content"],
  content: ["content"],
  frame15: [
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3"
  ],
  email5: ["email5"],
  cvUpload2: ["cvUpload2", "content6"],
  content6: ["content6"],
  fileUploader4: ["fileUploader4", "upload3"],
  upload3: ["upload3"],
  frame92: [
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2"
  ],
  frame93: ["frame93", "email3", "fileUploader"],
  email3: ["email3"],
  fileUploader: ["fileUploader"],
  frame94: ["frame94", "email2", "fileUploader2"],
  email2: ["email2"],
  fileUploader2: ["fileUploader2"],
  textInput6: ["textInput6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  annonces: "div";
  mobileNavbarTop: typeof MobileNavbarTop;
  sidebar: typeof Sidebar;
  main: "main";
  h1: "h1";
  sideEffect: typeof SideEffect;
  annonces2: "div";
  likeJobCard: typeof LikeJobCard;
  jobCard: typeof JobCard;
  noAnnonce: "div";
  featuredIcon2: "div";
  textAndSupportingText2: "div";
  text6: "div";
  supportingText2: "div";
  mobileNavbarBottom: typeof MobileNavbarBottom;
  modalDetailsJob: typeof Modal;
  jobDetail: "div";
  jobName: "div";
  jobLocation: "div";
  publicationDate: "div";
  frame46: "div";
  frame47: "div";
  frame48: "div";
  frame49: "div";
  frame50: "div";
  frame51: "div";
  appliedBtn: "div";
  frame53: "div";
  jobDescriptionContainer: "div";
  jobDescription: "div";
  benefits: "div";
  expectedProfileContainer: "div";
  expectedProfile: "div";
  company: "div";
  companyLogo: typeof PlasmicImg__;
  frame58: "div";
  companyName: "div";
  companyDetail: "div";
  sectorActivity: "div";
  companySize: "div";
  companyLocation: "div";
  companyDescription: "div";
  modal2: typeof Modal;
  header2: "div";
  frame67: "div";
  frame68: "div";
  frame70: "div";
  frame74: "div";
  frame75: "div";
  frame76: "div";
  frame77: "div";
  frame16: "div";
  frame17: "div";
  frame18: "div";
  frame78: "div";
  frame79: "div";
  frame80: "div";
  frame81: "div";
  frame82: "div";
  frame83: "div";
  frame84: "div";
  frame85: "div";
  form: typeof FormWrapper;
  upload2: typeof UploadWrapper;
  editIcon2: "div";
  frame19: "div";
  deleteIcon2: "div";
  frame20: "div";
  nomPrenom: "div";
  textInput1: typeof TextInput;
  textInput2: typeof TextInput;
  textInput4: typeof TextInput;
  telephone: "div";
  phoneSelector: typeof PhoneSelector;
  textInput3: typeof TextInput;
  rue: typeof TextInput;
  codePosteVille: "div";
  codePostal: typeof TextInput;
  ville: typeof TextInput;
  textInput5: typeof TextInput;
  select2: typeof Select;
  select4: typeof Select;
  select3: typeof AntdSelect;
  textAreaInput: typeof TextAreaInput;
  select7: typeof AntdSelect;
  select5: typeof Select;
  frame14: "div";
  email4: "div";
  cvUpload: "div";
  content5: "div";
  fileUploader3: "div";
  upload: typeof UploadWrapper;
  content: "div";
  frame15: "div";
  email5: "div";
  cvUpload2: "div";
  content6: "div";
  fileUploader4: "div";
  upload3: typeof UploadWrapper;
  frame92: "div";
  frame93: "div";
  email3: "div";
  fileUploader: typeof FileUploader;
  frame94: "div";
  email2: "div";
  fileUploader2: typeof FileUploader;
  textInput6: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMesAnnonces__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMesAnnonces__VariantsArgs;
    args?: PlasmicMesAnnonces__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMesAnnonces__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMesAnnonces__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMesAnnonces__ArgProps,
          internalVariantPropNames: PlasmicMesAnnonces__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMesAnnonces__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "annonces") {
    func.displayName = "PlasmicMesAnnonces";
  } else {
    func.displayName = `PlasmicMesAnnonces.${nodeName}`;
  }
  return func;
}

export const PlasmicMesAnnonces = Object.assign(
  // Top-level PlasmicMesAnnonces renders the root element
  makeNodeComponent("annonces"),
  {
    // Helper components rendering sub-elements
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    h1: makeNodeComponent("h1"),
    sideEffect: makeNodeComponent("sideEffect"),
    annonces2: makeNodeComponent("annonces2"),
    likeJobCard: makeNodeComponent("likeJobCard"),
    jobCard: makeNodeComponent("jobCard"),
    noAnnonce: makeNodeComponent("noAnnonce"),
    featuredIcon2: makeNodeComponent("featuredIcon2"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text6: makeNodeComponent("text6"),
    supportingText2: makeNodeComponent("supportingText2"),
    mobileNavbarBottom: makeNodeComponent("mobileNavbarBottom"),
    modalDetailsJob: makeNodeComponent("modalDetailsJob"),
    jobDetail: makeNodeComponent("jobDetail"),
    jobName: makeNodeComponent("jobName"),
    jobLocation: makeNodeComponent("jobLocation"),
    publicationDate: makeNodeComponent("publicationDate"),
    frame46: makeNodeComponent("frame46"),
    frame47: makeNodeComponent("frame47"),
    frame48: makeNodeComponent("frame48"),
    frame49: makeNodeComponent("frame49"),
    frame50: makeNodeComponent("frame50"),
    frame51: makeNodeComponent("frame51"),
    appliedBtn: makeNodeComponent("appliedBtn"),
    frame53: makeNodeComponent("frame53"),
    jobDescriptionContainer: makeNodeComponent("jobDescriptionContainer"),
    jobDescription: makeNodeComponent("jobDescription"),
    benefits: makeNodeComponent("benefits"),
    expectedProfileContainer: makeNodeComponent("expectedProfileContainer"),
    expectedProfile: makeNodeComponent("expectedProfile"),
    company: makeNodeComponent("company"),
    companyLogo: makeNodeComponent("companyLogo"),
    frame58: makeNodeComponent("frame58"),
    companyName: makeNodeComponent("companyName"),
    companyDetail: makeNodeComponent("companyDetail"),
    sectorActivity: makeNodeComponent("sectorActivity"),
    companySize: makeNodeComponent("companySize"),
    companyLocation: makeNodeComponent("companyLocation"),
    companyDescription: makeNodeComponent("companyDescription"),
    modal2: makeNodeComponent("modal2"),
    header2: makeNodeComponent("header2"),
    frame67: makeNodeComponent("frame67"),
    frame68: makeNodeComponent("frame68"),
    frame70: makeNodeComponent("frame70"),
    frame74: makeNodeComponent("frame74"),
    frame75: makeNodeComponent("frame75"),
    frame76: makeNodeComponent("frame76"),
    frame77: makeNodeComponent("frame77"),
    frame16: makeNodeComponent("frame16"),
    frame17: makeNodeComponent("frame17"),
    frame18: makeNodeComponent("frame18"),
    frame78: makeNodeComponent("frame78"),
    frame79: makeNodeComponent("frame79"),
    frame80: makeNodeComponent("frame80"),
    frame81: makeNodeComponent("frame81"),
    frame82: makeNodeComponent("frame82"),
    frame83: makeNodeComponent("frame83"),
    frame84: makeNodeComponent("frame84"),
    frame85: makeNodeComponent("frame85"),
    form: makeNodeComponent("form"),
    upload2: makeNodeComponent("upload2"),
    editIcon2: makeNodeComponent("editIcon2"),
    frame19: makeNodeComponent("frame19"),
    deleteIcon2: makeNodeComponent("deleteIcon2"),
    frame20: makeNodeComponent("frame20"),
    nomPrenom: makeNodeComponent("nomPrenom"),
    textInput1: makeNodeComponent("textInput1"),
    textInput2: makeNodeComponent("textInput2"),
    textInput4: makeNodeComponent("textInput4"),
    telephone: makeNodeComponent("telephone"),
    phoneSelector: makeNodeComponent("phoneSelector"),
    textInput3: makeNodeComponent("textInput3"),
    rue: makeNodeComponent("rue"),
    codePosteVille: makeNodeComponent("codePosteVille"),
    codePostal: makeNodeComponent("codePostal"),
    ville: makeNodeComponent("ville"),
    textInput5: makeNodeComponent("textInput5"),
    select2: makeNodeComponent("select2"),
    select4: makeNodeComponent("select4"),
    select3: makeNodeComponent("select3"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    select7: makeNodeComponent("select7"),
    select5: makeNodeComponent("select5"),
    frame14: makeNodeComponent("frame14"),
    email4: makeNodeComponent("email4"),
    cvUpload: makeNodeComponent("cvUpload"),
    content5: makeNodeComponent("content5"),
    fileUploader3: makeNodeComponent("fileUploader3"),
    upload: makeNodeComponent("upload"),
    content: makeNodeComponent("content"),
    frame15: makeNodeComponent("frame15"),
    email5: makeNodeComponent("email5"),
    cvUpload2: makeNodeComponent("cvUpload2"),
    content6: makeNodeComponent("content6"),
    fileUploader4: makeNodeComponent("fileUploader4"),
    upload3: makeNodeComponent("upload3"),
    frame92: makeNodeComponent("frame92"),
    frame93: makeNodeComponent("frame93"),
    email3: makeNodeComponent("email3"),
    fileUploader: makeNodeComponent("fileUploader"),
    frame94: makeNodeComponent("frame94"),
    email2: makeNodeComponent("email2"),
    fileUploader2: makeNodeComponent("fileUploader2"),
    textInput6: makeNodeComponent("textInput6"),

    // Metadata about props expected for PlasmicMesAnnonces
    internalVariantProps: PlasmicMesAnnonces__VariantProps,
    internalArgProps: PlasmicMesAnnonces__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Mes annonces",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMesAnnonces;
/* prettier-ignore-end */
