/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: Q7CdaymKCrsx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import { Accordion } from "@/plasmic-library/accordions/Accordion/Accordion"; // plasmic-import: -gP7ERQN5qH1/codeComponent
import { AccordionItem } from "@/plasmic-library/accordions/Accordion/Accordion"; // plasmic-import: hJN_iqaoFDr8/codeComponent
import { AccordionTrigger } from "@/plasmic-library/accordions/Accordion/Accordion"; // plasmic-import: HDsLndt6b8B_/codeComponent
import { AccordionContent } from "@/plasmic-library/accordions/Accordion/Accordion"; // plasmic-import: R7Gyb7E5G-Nm/codeComponent
import Footer from "../../Footer"; // plasmic-import: ZOpOgPOAiAAY/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicAccueilEmployeur.module.css"; // plasmic-import: Q7CdaymKCrsx/css

import Group9Icon from "./icons/PlasmicIcon__Group9"; // plasmic-import: ms6q7ryQNArM/icon
import Vector12Icon from "./icons/PlasmicIcon__Vector12"; // plasmic-import: 5U7jknIbCE_j/icon
import BurgerMenuSvgrepoComSvgIcon from "./icons/PlasmicIcon__BurgerMenuSvgrepoComSvg"; // plasmic-import: gRAQlG3nZIRq/icon
import DeleteSvgrepoComSvgIcon from "./icons/PlasmicIcon__DeleteSvgrepoComSvg"; // plasmic-import: un50fnKIt1qA/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import Group7Icon from "./icons/PlasmicIcon__Group7"; // plasmic-import: vdpUMPTJMw-6/icon
import MapPinAreaIcon from "./icons/PlasmicIcon__MapPinArea"; // plasmic-import: a48tox17ANKy/icon
import UserCircleCheckIcon from "./icons/PlasmicIcon__UserCircleCheck"; // plasmic-import: 5x3b8_2ZwjiB/icon
import BarChart2Icon from "./icons/PlasmicIcon__BarChart2"; // plasmic-import: 9Oxczg72Yias/icon
import Zap2Icon from "./icons/PlasmicIcon__Zap2"; // plasmic-import: KID9PfB0Xnj1/icon
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: Md8YZbpyTssd/icon
import CheckIconIcon from "./icons/PlasmicIcon__CheckIcon"; // plasmic-import: LPYr2gnfNtLP/icon
import HandDrawnArrowIcon from "./icons/PlasmicIcon__HandDrawnArrow"; // plasmic-import: WxPlIkHsuvOD/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import Frame1171275265Icon from "./icons/PlasmicIcon__Frame1171275265"; // plasmic-import: qHTkWFuLGJRP/icon
import MinusCircleIcon from "./icons/PlasmicIcon__MinusCircle"; // plasmic-import: OHiw_2IBL6V4/icon
import PlusCircle2Icon from "./icons/PlasmicIcon__PlusCircle2"; // plasmic-import: Bk_iFwJOhfaS/icon

createPlasmicElementProxy;

export type PlasmicAccueilEmployeur__VariantMembers = {};
export type PlasmicAccueilEmployeur__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccueilEmployeur__VariantsArgs;
export const PlasmicAccueilEmployeur__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAccueilEmployeur__ArgsType = {};
type ArgPropType = keyof PlasmicAccueilEmployeur__ArgsType;
export const PlasmicAccueilEmployeur__ArgProps = new Array<ArgPropType>();

export type PlasmicAccueilEmployeur__OverridesType = {
  root?: Flex__<"div">;
  structureLp?: Flex__<"div">;
  navbar?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  frame21?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  frame24?: Flex__<"div">;
  frame25?: Flex__<"div">;
  jamLogo2?: Flex__<"div">;
  frame30?: Flex__<"div">;
  frame31?: Flex__<"div">;
  frame32?: Flex__<"div">;
  frame33?: Flex__<"div">;
  header3?: Flex__<"header">;
  jamLogo?: Flex__<"div">;
  frame26?: Flex__<"div">;
  frame27?: Flex__<"div">;
  frame28?: Flex__<"div">;
  frame29?: Flex__<"div">;
  menuItems2?: Flex__<"div">;
  frame6?: Flex__<"div">;
  pexelsPhotoByCottonbroStudio?: Flex__<"div">;
  frame7?: Flex__<"div">;
  hero?: Flex__<"div">;
  headingCta?: Flex__<"div">;
  headingSubheading?: Flex__<"div">;
  headline?: Flex__<"div">;
  badgeGroup?: Flex__<"div">;
  content?: Flex__<"div">;
  message?: Flex__<"div">;
  trouvezUnCandidatNaJamaisEteAussiSimple?: Flex__<"div">;
  frame1437254417?: Flex__<"div">;
  frame1437254418?: Flex__<"div">;
  benefices?: Flex__<"div">;
  container?: Flex__<"div">;
  content2?: Flex__<"div">;
  headingAndSupportingText?: Flex__<"div">;
  headingAndBadge?: Flex__<"div">;
  badgeGroup2?: Flex__<"div">;
  content3?: Flex__<"div">;
  message2?: Flex__<"div">;
  heading?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  container2?: Flex__<"div">;
  content4?: Flex__<"div">;
  featureText?: Flex__<"div">;
  featuredIcon?: Flex__<"div">;
  textAndSupportingText?: Flex__<"div">;
  text4?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  featureText2?: Flex__<"div">;
  featuredIcon2?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  text5?: Flex__<"div">;
  supportingText3?: Flex__<"div">;
  featureText3?: Flex__<"div">;
  featuredIcon3?: Flex__<"div">;
  textAndSupportingText3?: Flex__<"div">;
  text6?: Flex__<"div">;
  supportingText4?: Flex__<"div">;
  citation?: Flex__<"div">;
  container3?: Flex__<"div">;
  content5?: Flex__<"div">;
  quoteAndAttribution?: Flex__<"div">;
  quote?: Flex__<"div">;
  avatarAndText?: Flex__<"div">;
  textAndSupportingText4?: Flex__<"div">;
  text7?: Flex__<"div">;
  supportingText5?: Flex__<"div">;
  services?: Flex__<"div">;
  headingCta2?: Flex__<"div">;
  headingSubheading2?: Flex__<"div">;
  headline2?: Flex__<"div">;
  badgeGroup3?: Flex__<"div">;
  content6?: Flex__<"div">;
  message3?: Flex__<"div">;
  container4?: Flex__<"div">;
  content7?: Flex__<"div">;
  description?: Flex__<"div">;
  iconAndText?: Flex__<"div">;
  featuredIcon4?: Flex__<"div">;
  headingAndSupportingText2?: Flex__<"div">;
  heading2?: Flex__<"div">;
  supportingText6?: Flex__<"div">;
  content8?: Flex__<"div">;
  placeholderImage?: Flex__<"div">;
  container5?: Flex__<"div">;
  content9?: Flex__<"div">;
  placeholderImage2?: Flex__<"div">;
  content10?: Flex__<"div">;
  description2?: Flex__<"div">;
  iconAndText2?: Flex__<"div">;
  featuredIcon5?: Flex__<"div">;
  headingAndSupportingText3?: Flex__<"div">;
  heading3?: Flex__<"div">;
  supportingText7?: Flex__<"div">;
  services2?: Flex__<"div">;
  headingCta3?: Flex__<"div">;
  headingSubheading3?: Flex__<"div">;
  headline3?: Flex__<"div">;
  badgeGroup4?: Flex__<"div">;
  content11?: Flex__<"div">;
  message4?: Flex__<"div">;
  container6?: Flex__<"div">;
  content12?: Flex__<"div">;
  pricingTierCard?: Flex__<"div">;
  header?: Flex__<"div">;
  frame8?: Flex__<"div">;
  price?: Flex__<"div">;
  price2?: Flex__<"div">;
  headingAndSupportingText4?: Flex__<"div">;
  supportingText8?: Flex__<"div">;
  content13?: Flex__<"div">;
  checkItems?: Flex__<"div">;
  checkItemText?: Flex__<"div">;
  textWrap?: Flex__<"div">;
  text8?: Flex__<"div">;
  checkItemText2?: Flex__<"div">;
  textWrap2?: Flex__<"div">;
  text9?: Flex__<"div">;
  checkItemText3?: Flex__<"div">;
  textWrap3?: Flex__<"div">;
  text10?: Flex__<"div">;
  pricingTierCard2?: Flex__<"div">;
  header2?: Flex__<"div">;
  frame9?: Flex__<"div">;
  price3?: Flex__<"div">;
  price4?: Flex__<"div">;
  text11?: Flex__<"div">;
  badgeGroup5?: Flex__<"div">;
  content14?: Flex__<"div">;
  message5?: Flex__<"div">;
  headingAndSupportingText5?: Flex__<"div">;
  supportingText9?: Flex__<"div">;
  content15?: Flex__<"div">;
  checkItems2?: Flex__<"div">;
  checkItemText4?: Flex__<"div">;
  textWrap4?: Flex__<"div">;
  text12?: Flex__<"div">;
  checkItemText5?: Flex__<"div">;
  textWrap5?: Flex__<"div">;
  text13?: Flex__<"div">;
  checkItemText6?: Flex__<"div">;
  textWrap6?: Flex__<"div">;
  text14?: Flex__<"div">;
  checkItemText7?: Flex__<"div">;
  textWrap7?: Flex__<"div">;
  text15?: Flex__<"div">;
  checkItemText8?: Flex__<"div">;
  textWrap8?: Flex__<"div">;
  text16?: Flex__<"div">;
  benefices2?: Flex__<"div">;
  container7?: Flex__<"div">;
  content16?: Flex__<"div">;
  headingAndSupportingText6?: Flex__<"div">;
  headingAndBadge2?: Flex__<"div">;
  badgeGroup6?: Flex__<"div">;
  content17?: Flex__<"div">;
  message6?: Flex__<"div">;
  heading4?: Flex__<"div">;
  supportingText10?: Flex__<"div">;
  container8?: Flex__<"div">;
  frame10?: Flex__<"div">;
  headingAndSupportingText7?: Flex__<"div">;
  supportingText11?: Flex__<"div">;
  button3?: Flex__<typeof Button>;
  image?: Flex__<"div">;
  frame1073713936?: Flex__<"div">;
  placeholderImage3?: Flex__<"div">;
  iPhone16?: Flex__<"div">;
  faq?: Flex__<"div">;
  headingCta4?: Flex__<"div">;
  headingSubheading4?: Flex__<"div">;
  headline4?: Flex__<"div">;
  badgeGroup7?: Flex__<"div">;
  content18?: Flex__<"div">;
  message7?: Flex__<"div">;
  accordion?: Flex__<typeof Accordion>;
  container9?: Flex__<"div">;
  content19?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame12?: Flex__<"div">;
  faqBloc?: Flex__<"div">;
  question?: Flex__<"div">;
  frame13?: Flex__<"div">;
  text17?: Flex__<"div">;
  iconWrap?: Flex__<"div">;
  reponse?: Flex__<"div">;
  supportingText12?: Flex__<"div">;
  faqBloc2?: Flex__<"div">;
  question2?: Flex__<"div">;
  frame14?: Flex__<"div">;
  text18?: Flex__<"div">;
  iconWrap2?: Flex__<"div">;
  faqBloc3?: Flex__<"div">;
  question3?: Flex__<"div">;
  frame15?: Flex__<"div">;
  text19?: Flex__<"div">;
  iconWrap3?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultAccueilEmployeurProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccueilEmployeur__RenderFunc(props: {
  variants: PlasmicAccueilEmployeur__VariantsArgs;
  args: PlasmicAccueilEmployeur__ArgsType;
  overrides: PlasmicAccueilEmployeur__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAccueilEmployeur.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAccueilEmployeur.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAccueilEmployeur.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"structureLp"}
            data-plasmic-override={overrides.structureLp}
            className={classNames(projectcss.all, sty.structureLp)}
          >
            <div
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames(projectcss.all, sty.navbar)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__tnXcN
                      )}
                      component={Link}
                      href={"#"}
                      platform={"nextjs"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__phMut)}
                        displayHeight={"40px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={
                          "https://static1.plasmic.app/nav-logo-placeholder.svg"
                        }
                      />
                    </PlasmicLink__>
                    <div
                      data-plasmic-name={"frame21"}
                      data-plasmic-override={overrides.frame21}
                      className={classNames(projectcss.all, sty.frame21)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToAccueil"] = true
                          ? (() => {
                              const actionArgs = { destination: `/` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToAccueil"] != null &&
                          typeof $steps["goToAccueil"] === "object" &&
                          typeof $steps["goToAccueil"].then === "function"
                        ) {
                          $steps["goToAccueil"] = await $steps["goToAccueil"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wheUt
                        )}
                      >
                        <Group9Icon
                          className={classNames(projectcss.all, sty.svg__wLlmy)}
                          role={"img"}
                        />
                      </div>
                      <div
                        data-plasmic-name={"frame22"}
                        data-plasmic-override={overrides.frame22}
                        className={classNames(projectcss.all, sty.frame22)}
                      >
                        <div
                          data-plasmic-name={"frame23"}
                          data-plasmic-override={overrides.frame23}
                          className={classNames(projectcss.all, sty.frame23)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jpcGy
                            )}
                          >
                            {"JOB"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame24"}
                          data-plasmic-override={overrides.frame24}
                          className={classNames(projectcss.all, sty.frame24)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7VxeN
                            )}
                          >
                            {"AROUND"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame25"}
                          data-plasmic-override={overrides.frame25}
                          className={classNames(projectcss.all, sty.frame25)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wj9He
                            )}
                          >
                            {"ME"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"jamLogo2"}
                      data-plasmic-override={overrides.jamLogo2}
                      className={classNames(projectcss.all, sty.jamLogo2)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToAccueil"] = true
                          ? (() => {
                              const actionArgs = { destination: `/` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToAccueil"] != null &&
                          typeof $steps["goToAccueil"] === "object" &&
                          typeof $steps["goToAccueil"].then === "function"
                        ) {
                          $steps["goToAccueil"] = await $steps["goToAccueil"];
                        }
                      }}
                    >
                      <Vector12Icon
                        className={classNames(projectcss.all, sty.svg__xpbO)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"frame30"}
                        data-plasmic-override={overrides.frame30}
                        className={classNames(projectcss.all, sty.frame30)}
                      >
                        <div
                          data-plasmic-name={"frame31"}
                          data-plasmic-override={overrides.frame31}
                          className={classNames(projectcss.all, sty.frame31)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rTsc7
                            )}
                          >
                            {"JOB"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame32"}
                          data-plasmic-override={overrides.frame32}
                          className={classNames(projectcss.all, sty.frame32)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__klkPd
                            )}
                          >
                            {"AROUND"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame33"}
                          data-plasmic-override={overrides.frame33}
                          className={classNames(projectcss.all, sty.frame33)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2Mxuu
                            )}
                          >
                            {"ME"}
                          </div>
                        </div>
                      </div>
                    </div>
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <React.Fragment>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__eipx9)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={"https://static1.plasmic.app/close.svg"}
                    />

                    <DeleteSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__msSz)}
                      role={"img"}
                    />
                  </React.Fragment>
                }
                itemsGap={8}
                menuItems={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__wVUcq
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"Home"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___80Bar
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"About"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__pIsmj
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"Contact"}
                    </PlasmicLink__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u5Kve
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return "/accueil-employeur#services";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      {"Services"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i21K9
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return "/accueil-employeur#offres";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      {"Offres"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x58Rd
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return "/accueil-employeur#faq";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      {"FAQ"}
                    </div>
                    <Button
                      className={classNames("__wab_instance", sty.button__xmd8)}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__s1Fnz)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gbcC2
                          )}
                        >
                          {"Connexion"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToConnexion"] = true
                          ? (() => {
                              const actionArgs = { destination: `/login` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToConnexion"] != null &&
                          typeof $steps["goToConnexion"] === "object" &&
                          typeof $steps["goToConnexion"].then === "function"
                        ) {
                          $steps["goToConnexion"] = await $steps[
                            "goToConnexion"
                          ];
                        }
                      }}
                    />
                  </React.Fragment>
                }
                openButton={
                  <React.Fragment>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__epGx)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={"https://static1.plasmic.app/menu.svg"}
                    />

                    <BurgerMenuSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__sg6Lw)}
                      role={"img"}
                    />
                  </React.Fragment>
                }
                responsiveBreakpoint={768}
              />

              <header
                data-plasmic-name={"header3"}
                data-plasmic-override={overrides.header3}
                className={classNames(projectcss.all, sty.header3)}
              >
                <div
                  data-plasmic-name={"jamLogo"}
                  data-plasmic-override={overrides.jamLogo}
                  className={classNames(projectcss.all, sty.jamLogo)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToAccueil"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToAccueil"] != null &&
                      typeof $steps["goToAccueil"] === "object" &&
                      typeof $steps["goToAccueil"].then === "function"
                    ) {
                      $steps["goToAccueil"] = await $steps["goToAccueil"];
                    }
                  }}
                >
                  <Vector12Icon
                    className={classNames(projectcss.all, sty.svg__bzI4)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"frame26"}
                    data-plasmic-override={overrides.frame26}
                    className={classNames(projectcss.all, sty.frame26)}
                  >
                    <div
                      data-plasmic-name={"frame27"}
                      data-plasmic-override={overrides.frame27}
                      className={classNames(projectcss.all, sty.frame27)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yjGpL
                        )}
                      >
                        {"JOB"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame28"}
                      data-plasmic-override={overrides.frame28}
                      className={classNames(projectcss.all, sty.frame28)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zQap
                        )}
                      >
                        {"AROUND"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame29"}
                      data-plasmic-override={overrides.frame29}
                      className={classNames(projectcss.all, sty.frame29)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qkM1
                        )}
                      >
                        {"ME"}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"menuItems2"}
                  data-plasmic-override={overrides.menuItems2}
                  className={classNames(projectcss.all, sty.menuItems2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a7Sx9
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return "/accueil-employeur#services";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    {"Services"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kN5JX
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return "/accueil-employeur#offres";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    {"Offres"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bvSbf
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return "/accueil-employeur#faq";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    {"FAQ"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gSxWr)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__kfsux)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__givjV)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ffqSi
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.SupabaseUser.user
                                ? "Voir mon compte"
                                : "Connexion";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Connexion";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToConnexion"] = true
                        ? (() => {
                            const actionArgs = { destination: `/login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToConnexion"] != null &&
                        typeof $steps["goToConnexion"] === "object" &&
                        typeof $steps["goToConnexion"].then === "function"
                      ) {
                        $steps["goToConnexion"] = await $steps["goToConnexion"];
                      }
                    }}
                  />
                </div>
              </header>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fS8Xf)}>
              <div
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <div
                  data-plasmic-name={"pexelsPhotoByCottonbroStudio"}
                  data-plasmic-override={overrides.pexelsPhotoByCottonbroStudio}
                  className={classNames(
                    projectcss.all,
                    sty.pexelsPhotoByCottonbroStudio
                  )}
                />

                <div
                  data-plasmic-name={"frame7"}
                  data-plasmic-override={overrides.frame7}
                  className={classNames(projectcss.all, sty.frame7)}
                >
                  <div
                    data-plasmic-name={"hero"}
                    data-plasmic-override={overrides.hero}
                    className={classNames(projectcss.all, sty.hero)}
                  >
                    <div
                      data-plasmic-name={"headingCta"}
                      data-plasmic-override={overrides.headingCta}
                      className={classNames(projectcss.all, sty.headingCta)}
                    >
                      <div
                        data-plasmic-name={"headingSubheading"}
                        data-plasmic-override={overrides.headingSubheading}
                        className={classNames(
                          projectcss.all,
                          sty.headingSubheading
                        )}
                      >
                        <div
                          data-plasmic-name={"headline"}
                          data-plasmic-override={overrides.headline}
                          className={classNames(projectcss.all, sty.headline)}
                        >
                          <div
                            data-plasmic-name={"badgeGroup"}
                            data-plasmic-override={overrides.badgeGroup}
                            className={classNames(
                              projectcss.all,
                              sty.badgeGroup
                            )}
                          >
                            <div
                              data-plasmic-name={"content"}
                              data-plasmic-override={overrides.content}
                              className={classNames(
                                projectcss.all,
                                sty.content
                              )}
                            >
                              <div
                                data-plasmic-name={"message"}
                                data-plasmic-override={overrides.message}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.message
                                )}
                              >
                                {"Get ready to find your job"}
                              </div>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={
                              "trouvezUnCandidatNaJamaisEteAussiSimple"
                            }
                            data-plasmic-override={
                              overrides.trouvezUnCandidatNaJamaisEteAussiSimple
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.trouvezUnCandidatNaJamaisEteAussiSimple
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-uqUcyTUgvV0c)" }}
                              >
                                {
                                  "Trouvez un candidat n\u2019a jamais \u00e9t\u00e9 aussi"
                                }
                              </span>
                              <React.Fragment> </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{
                                  color: "var(--token-XkcIRFBUIQDs)",
                                  fontWeight: 600
                                }}
                              >
                                {"simple"}
                              </span>
                              <React.Fragment>{""}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {" "}
                              </span>
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kIkPb
                          )}
                        >
                          {
                            "Job Around Me est une application con\u00e7ue pour r\u00e9volutionner la recherche d\u2019emploi et le recrutement en s\u2019appuyant sur la g\u00e9olocalisation. "
                          }
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame1437254417"}
                      data-plasmic-override={overrides.frame1437254417}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437254417
                      )}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__qPwEg
                        )}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kPpk1
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3Df4S
                            )}
                          >
                            {"INSCRIPTION"}
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToRegister"] = true
                            ? (() => {
                                const actionArgs = { destination: `/register` };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToRegister"] != null &&
                            typeof $steps["goToRegister"] === "object" &&
                            typeof $steps["goToRegister"].then === "function"
                          ) {
                            $steps["goToRegister"] = await $steps[
                              "goToRegister"
                            ];
                          }
                        }}
                      />
                    </div>
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : false
                    ) ? (
                      <div
                        data-plasmic-name={"frame1437254418"}
                        data-plasmic-override={overrides.frame1437254418}
                        className={classNames(
                          projectcss.all,
                          sty.frame1437254418
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__gGjH0
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hJs8
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vMgyM
                              )}
                            >
                              {"INSCRIPTION"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToRegister"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/register`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToRegister"] != null &&
                              typeof $steps["goToRegister"] === "object" &&
                              typeof $steps["goToRegister"].then === "function"
                            ) {
                              $steps["goToRegister"] = await $steps[
                                "goToRegister"
                              ];
                            }
                          }}
                        />

                        <Group7Icon
                          className={classNames(projectcss.all, sty.svg__eKbul)}
                          role={"img"}
                        />
                      </div>
                    ) : null}
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"benefices"}
              data-plasmic-override={overrides.benefices}
              className={classNames(projectcss.all, sty.benefices)}
            >
              <div
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                className={classNames(projectcss.all, sty.container)}
              >
                <div
                  data-plasmic-name={"content2"}
                  data-plasmic-override={overrides.content2}
                  className={classNames(projectcss.all, sty.content2)}
                >
                  <div
                    data-plasmic-name={"headingAndSupportingText"}
                    data-plasmic-override={overrides.headingAndSupportingText}
                    className={classNames(
                      projectcss.all,
                      sty.headingAndSupportingText
                    )}
                  >
                    <div
                      data-plasmic-name={"headingAndBadge"}
                      data-plasmic-override={overrides.headingAndBadge}
                      className={classNames(
                        projectcss.all,
                        sty.headingAndBadge
                      )}
                    >
                      <div
                        data-plasmic-name={"badgeGroup2"}
                        data-plasmic-override={overrides.badgeGroup2}
                        className={classNames(projectcss.all, sty.badgeGroup2)}
                      >
                        <div
                          data-plasmic-name={"content3"}
                          data-plasmic-override={overrides.content3}
                          className={classNames(projectcss.all, sty.content3)}
                        >
                          <div
                            data-plasmic-name={"message2"}
                            data-plasmic-override={overrides.message2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.message2
                            )}
                          >
                            {"Notre solution"}
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"heading"}
                        data-plasmic-override={overrides.heading}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading
                        )}
                      >
                        {"Pourquoi chercher sur Job Around Me\u00a0?"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"supportingText"}
                      data-plasmic-override={overrides.supportingText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText
                      )}
                    >
                      {
                        "Job Around Me facilite l\u2019emploi local, rapide et flexible, connectant candidats et employeurs efficacement"
                      }
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                className={classNames(projectcss.all, sty.container2)}
              >
                <div
                  data-plasmic-name={"content4"}
                  data-plasmic-override={overrides.content4}
                  className={classNames(projectcss.all, sty.content4)}
                >
                  <div
                    data-plasmic-name={"featureText"}
                    data-plasmic-override={overrides.featureText}
                    className={classNames(projectcss.all, sty.featureText)}
                  >
                    <div
                      data-plasmic-name={"featuredIcon"}
                      data-plasmic-override={overrides.featuredIcon}
                      className={classNames(projectcss.all, sty.featuredIcon)}
                    >
                      <MapPinAreaIcon
                        className={classNames(projectcss.all, sty.svg__jTxKn)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"textAndSupportingText"}
                      data-plasmic-override={overrides.textAndSupportingText}
                      className={classNames(
                        projectcss.all,
                        sty.textAndSupportingText
                      )}
                    >
                      <div
                        data-plasmic-name={"text4"}
                        data-plasmic-override={overrides.text4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text4
                        )}
                      >
                        {"Trouvez des candidats \nlocaux rapidement"}
                      </div>
                      <div
                        data-plasmic-name={"supportingText2"}
                        data-plasmic-override={overrides.supportingText2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.supportingText2
                        )}
                      >
                        {
                          "Publiez vos offres et recrutez des talents \u00e0 proximit\u00e9 pour r\u00e9duire les d\u00e9lais d\u2019embauche."
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"featureText2"}
                    data-plasmic-override={overrides.featureText2}
                    className={classNames(projectcss.all, sty.featureText2)}
                  >
                    <div
                      data-plasmic-name={"featuredIcon2"}
                      data-plasmic-override={overrides.featuredIcon2}
                      className={classNames(projectcss.all, sty.featuredIcon2)}
                    >
                      <UserCircleCheckIcon
                        className={classNames(projectcss.all, sty.svg__xucO)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"textAndSupportingText2"}
                      data-plasmic-override={overrides.textAndSupportingText2}
                      className={classNames(
                        projectcss.all,
                        sty.textAndSupportingText2
                      )}
                    >
                      <div
                        data-plasmic-name={"text5"}
                        data-plasmic-override={overrides.text5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text5
                        )}
                      >
                        {
                          "Acc\u00e9dez \u00e0 un vivier \nde profils qualifi\u00e9s"
                        }
                      </div>
                      <div
                        data-plasmic-name={"supportingText3"}
                        data-plasmic-override={overrides.supportingText3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.supportingText3
                        )}
                      >
                        {
                          "Consultez et s\u00e9lectionnez des candidats correspondant \u00e0 vos crit\u00e8res gr\u00e2ce \u00e0 une base mise \u00e0 jour en continu."
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"featureText3"}
                    data-plasmic-override={overrides.featureText3}
                    className={classNames(projectcss.all, sty.featureText3)}
                  >
                    <div
                      data-plasmic-name={"featuredIcon3"}
                      data-plasmic-override={overrides.featuredIcon3}
                      className={classNames(projectcss.all, sty.featuredIcon3)}
                    >
                      <BarChart2Icon
                        className={classNames(projectcss.all, sty.svg__bbCoS)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"textAndSupportingText3"}
                      data-plasmic-override={overrides.textAndSupportingText3}
                      className={classNames(
                        projectcss.all,
                        sty.textAndSupportingText3
                      )}
                    >
                      <div
                        data-plasmic-name={"text6"}
                        data-plasmic-override={overrides.text6}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text6
                        )}
                      >
                        {"G\u00e9rez vos recrutements \nefficacement"}
                      </div>
                      <div
                        data-plasmic-name={"supportingText4"}
                        data-plasmic-override={overrides.supportingText4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.supportingText4
                        )}
                      >
                        {
                          "Profitez d\u2019une interface intuitive pour publier, suivre et optimiser vos offres en temps r\u00e9el."
                        }
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"citation"}
              data-plasmic-override={overrides.citation}
              className={classNames(projectcss.all, sty.citation)}
            >
              <div
                data-plasmic-name={"container3"}
                data-plasmic-override={overrides.container3}
                className={classNames(projectcss.all, sty.container3)}
              >
                <div
                  data-plasmic-name={"content5"}
                  data-plasmic-override={overrides.content5}
                  className={classNames(projectcss.all, sty.content5)}
                >
                  <div
                    data-plasmic-name={"quoteAndAttribution"}
                    data-plasmic-override={overrides.quoteAndAttribution}
                    className={classNames(
                      projectcss.all,
                      sty.quoteAndAttribution
                    )}
                  >
                    <div
                      data-plasmic-name={"quote"}
                      data-plasmic-override={overrides.quote}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.quote
                      )}
                    >
                      {
                        "\u201cGr\u00e2ce \u00e0 Job Around Me, j\u2019ai trouv\u00e9 en quelques jours deux employ\u00e9s motiv\u00e9s habitant tout pr\u00e8s. Simple, rapide et efficace. Je recommande !\u201d"
                      }
                    </div>
                    <div
                      data-plasmic-name={"avatarAndText"}
                      data-plasmic-override={overrides.avatarAndText}
                      className={classNames(projectcss.all, sty.avatarAndText)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___9V4Sv)}
                        displayHeight={"64px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"64px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/jam_production_🚀/images/ellipse.svg",
                          fullWidth: 64,
                          fullHeight: 64,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        data-plasmic-name={"textAndSupportingText4"}
                        data-plasmic-override={overrides.textAndSupportingText4}
                        className={classNames(
                          projectcss.all,
                          sty.textAndSupportingText4
                        )}
                      >
                        <div
                          data-plasmic-name={"text7"}
                          data-plasmic-override={overrides.text7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text7
                          )}
                        >
                          {"Marc.L"}
                        </div>
                        <div
                          data-plasmic-name={"supportingText5"}
                          data-plasmic-override={overrides.supportingText5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.supportingText5
                          )}
                        >
                          {"G\u00e9rant"}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__uVYzH)}>
              <div
                data-plasmic-name={"services"}
                data-plasmic-override={overrides.services}
                className={classNames(projectcss.all, sty.services)}
                id={"services"}
              >
                <div
                  data-plasmic-name={"headingCta2"}
                  data-plasmic-override={overrides.headingCta2}
                  className={classNames(projectcss.all, sty.headingCta2)}
                >
                  <div
                    data-plasmic-name={"headingSubheading2"}
                    data-plasmic-override={overrides.headingSubheading2}
                    className={classNames(
                      projectcss.all,
                      sty.headingSubheading2
                    )}
                    id={"services"}
                  >
                    <div
                      data-plasmic-name={"headline2"}
                      data-plasmic-override={overrides.headline2}
                      className={classNames(projectcss.all, sty.headline2)}
                    >
                      <div
                        data-plasmic-name={"badgeGroup3"}
                        data-plasmic-override={overrides.badgeGroup3}
                        className={classNames(projectcss.all, sty.badgeGroup3)}
                      >
                        <div
                          data-plasmic-name={"content6"}
                          data-plasmic-override={overrides.content6}
                          className={classNames(projectcss.all, sty.content6)}
                        >
                          <div
                            data-plasmic-name={"message3"}
                            data-plasmic-override={overrides.message3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.message3
                            )}
                          >
                            {"Services"}
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kvEu3
                        )}
                      >
                        {"Ce que nous proposons"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m9JtK
                      )}
                    >
                      {
                        "Avec Job Around Me, nous connectons employeurs et employ\u00e9s dans un esprit de proximit\u00e9, de rapidit\u00e9 et de flexibilit\u00e9 pour r\u00e9pondre aux d\u00e9fis modernes du march\u00e9 de l\u2019emploi."
                      }
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"container4"}
                  data-plasmic-override={overrides.container4}
                  className={classNames(projectcss.all, sty.container4)}
                >
                  <div
                    data-plasmic-name={"content7"}
                    data-plasmic-override={overrides.content7}
                    className={classNames(projectcss.all, sty.content7)}
                  >
                    <div
                      data-plasmic-name={"description"}
                      data-plasmic-override={overrides.description}
                      className={classNames(projectcss.all, sty.description)}
                    >
                      <div
                        data-plasmic-name={"iconAndText"}
                        data-plasmic-override={overrides.iconAndText}
                        className={classNames(projectcss.all, sty.iconAndText)}
                      >
                        <div
                          data-plasmic-name={"featuredIcon4"}
                          data-plasmic-override={overrides.featuredIcon4}
                          className={classNames(
                            projectcss.all,
                            sty.featuredIcon4
                          )}
                        >
                          <Zap2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wgsVb
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          data-plasmic-name={"headingAndSupportingText2"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText2
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText2
                          )}
                        >
                          <div
                            data-plasmic-name={"heading2"}
                            data-plasmic-override={overrides.heading2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading2
                            )}
                          >
                            {"C\u00f4t\u00e9 talents"}
                          </div>
                          <div
                            data-plasmic-name={"supportingText6"}
                            data-plasmic-override={overrides.supportingText6}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText6
                            )}
                          >
                            {
                              "Job Around Me s\u2019adresse aussi bien aux jeunes \u00e9tudiants en qu\u00eate de missions ponctuelles qu\u2019aux personnes souhaitant un emploi compl\u00e9mentaire pour arrondir leurs fins de mois. \n\nPour les candidats, l\u2019application facilite l\u2019acc\u00e8s \u00e0 des opportunit\u00e9s proches de chez eux gr\u00e2ce \u00e0 une interface intuitive et des options de filtrage personnalis\u00e9es. "
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"content8"}
                    data-plasmic-override={overrides.content8}
                    className={classNames(projectcss.all, sty.content8)}
                  >
                    <div
                      data-plasmic-name={"placeholderImage"}
                      data-plasmic-override={overrides.placeholderImage}
                      className={classNames(
                        projectcss.all,
                        sty.placeholderImage
                      )}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"container5"}
                  data-plasmic-override={overrides.container5}
                  className={classNames(projectcss.all, sty.container5)}
                >
                  <div
                    data-plasmic-name={"content9"}
                    data-plasmic-override={overrides.content9}
                    className={classNames(projectcss.all, sty.content9)}
                  >
                    <div
                      data-plasmic-name={"placeholderImage2"}
                      data-plasmic-override={overrides.placeholderImage2}
                      className={classNames(
                        projectcss.all,
                        sty.placeholderImage2
                      )}
                    />
                  </div>
                  <div
                    data-plasmic-name={"content10"}
                    data-plasmic-override={overrides.content10}
                    className={classNames(projectcss.all, sty.content10)}
                  >
                    <div
                      data-plasmic-name={"description2"}
                      data-plasmic-override={overrides.description2}
                      className={classNames(projectcss.all, sty.description2)}
                    >
                      <div
                        data-plasmic-name={"iconAndText2"}
                        data-plasmic-override={overrides.iconAndText2}
                        className={classNames(projectcss.all, sty.iconAndText2)}
                      >
                        <div
                          data-plasmic-name={"featuredIcon5"}
                          data-plasmic-override={overrides.featuredIcon5}
                          className={classNames(
                            projectcss.all,
                            sty.featuredIcon5
                          )}
                        >
                          <Zap2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ccpPu
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          data-plasmic-name={"headingAndSupportingText3"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText3
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText3
                          )}
                        >
                          <div
                            data-plasmic-name={"heading3"}
                            data-plasmic-override={overrides.heading3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading3
                            )}
                          >
                            {"C\u00f4t\u00e9 entreprise"}
                          </div>
                          <div
                            data-plasmic-name={"supportingText7"}
                            data-plasmic-override={overrides.supportingText7}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText7
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Pour les employeurs, nous proposons une plateforme qui permet de publier des offres et de trouver trouver des talents en quelques minutes. Les fonctionnalit\u00e9s "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Last Minute"}
                              </span>
                              <React.Fragment>{" et "}</React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Boost"}
                              </span>
                              <React.Fragment>
                                {
                                  " permettent de mettre en avant vos annonces pour r\u00e9duire consid\u00e9rablement les d\u00e9lais de recrutement."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jtKi3
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToRegister"] = true
                            ? (() => {
                                const actionArgs = { destination: `/register` };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToRegister"] != null &&
                            typeof $steps["goToRegister"] === "object" &&
                            typeof $steps["goToRegister"].then === "function"
                          ) {
                            $steps["goToRegister"] = await $steps[
                              "goToRegister"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xE6Np
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                            >
                              {"INSCRIPTION"}
                            </span>
                          </React.Fragment>
                        </div>
                        <ArrowRightIcon
                          className={classNames(projectcss.all, sty.svg__fptHe)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"services2"}
              data-plasmic-override={overrides.services2}
              className={classNames(projectcss.all, sty.services2)}
              id={"offres"}
            >
              <div
                data-plasmic-name={"headingCta3"}
                data-plasmic-override={overrides.headingCta3}
                className={classNames(projectcss.all, sty.headingCta3)}
              >
                <div
                  data-plasmic-name={"headingSubheading3"}
                  data-plasmic-override={overrides.headingSubheading3}
                  className={classNames(projectcss.all, sty.headingSubheading3)}
                >
                  <div
                    data-plasmic-name={"headline3"}
                    data-plasmic-override={overrides.headline3}
                    className={classNames(projectcss.all, sty.headline3)}
                    id={"offres"}
                  >
                    <div
                      data-plasmic-name={"badgeGroup4"}
                      data-plasmic-override={overrides.badgeGroup4}
                      className={classNames(projectcss.all, sty.badgeGroup4)}
                    >
                      <div
                        data-plasmic-name={"content11"}
                        data-plasmic-override={overrides.content11}
                        className={classNames(projectcss.all, sty.content11)}
                      >
                        <div
                          data-plasmic-name={"message4"}
                          data-plasmic-override={overrides.message4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.message4
                          )}
                        >
                          {"Offres"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9P6H
                      )}
                    >
                      {
                        "Pr\u00eat \u00e0 trouver le talent qui vous correspond ?"
                      }
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"container6"}
                data-plasmic-override={overrides.container6}
                className={classNames(projectcss.all, sty.container6)}
              >
                <div
                  data-plasmic-name={"content12"}
                  data-plasmic-override={overrides.content12}
                  className={classNames(projectcss.all, sty.content12)}
                >
                  <div
                    data-plasmic-name={"pricingTierCard"}
                    data-plasmic-override={overrides.pricingTierCard}
                    className={classNames(projectcss.all, sty.pricingTierCard)}
                  >
                    <div
                      data-plasmic-name={"header"}
                      data-plasmic-override={overrides.header}
                      className={classNames(projectcss.all, sty.header)}
                    >
                      <div
                        data-plasmic-name={"frame8"}
                        data-plasmic-override={overrides.frame8}
                        className={classNames(projectcss.all, sty.frame8)}
                      >
                        <div
                          data-plasmic-name={"price"}
                          data-plasmic-override={overrides.price}
                          className={classNames(projectcss.all, sty.price)}
                        >
                          <div
                            data-plasmic-name={"price2"}
                            data-plasmic-override={overrides.price2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.price2
                            )}
                          >
                            {"19,99 \u20ac/mois"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"headingAndSupportingText4"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText4
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText4
                          )}
                        >
                          <div
                            data-plasmic-name={"supportingText8"}
                            data-plasmic-override={overrides.supportingText8}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText8
                            )}
                          >
                            {
                              "Solution id\u00e9ale pour un recrutement rapide, flexible et efficace \u00e0 moindre co\u00fbt."
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"content13"}
                      data-plasmic-override={overrides.content13}
                      className={classNames(projectcss.all, sty.content13)}
                    >
                      <div
                        data-plasmic-name={"checkItems"}
                        data-plasmic-override={overrides.checkItems}
                        className={classNames(projectcss.all, sty.checkItems)}
                      >
                        <div
                          data-plasmic-name={"checkItemText"}
                          data-plasmic-override={overrides.checkItemText}
                          className={classNames(
                            projectcss.all,
                            sty.checkItemText
                          )}
                        >
                          <CheckIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tQx2T
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"textWrap"}
                            data-plasmic-override={overrides.textWrap}
                            className={classNames(projectcss.all, sty.textWrap)}
                          >
                            <div
                              data-plasmic-name={"text8"}
                              data-plasmic-override={overrides.text8}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text8
                              )}
                            >
                              {"Publication de 3 annonces"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"checkItemText2"}
                          data-plasmic-override={overrides.checkItemText2}
                          className={classNames(
                            projectcss.all,
                            sty.checkItemText2
                          )}
                        >
                          <CheckIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sbUIx
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"textWrap2"}
                            data-plasmic-override={overrides.textWrap2}
                            className={classNames(
                              projectcss.all,
                              sty.textWrap2
                            )}
                          >
                            <div
                              data-plasmic-name={"text9"}
                              data-plasmic-override={overrides.text9}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text9
                              )}
                            >
                              {"1 annonce urgente incluse"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"checkItemText3"}
                          data-plasmic-override={overrides.checkItemText3}
                          className={classNames(
                            projectcss.all,
                            sty.checkItemText3
                          )}
                        >
                          <CheckIconIcon
                            className={classNames(projectcss.all, sty.svg__iEq)}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"textWrap3"}
                            data-plasmic-override={overrides.textWrap3}
                            className={classNames(
                              projectcss.all,
                              sty.textWrap3
                            )}
                          >
                            <div
                              data-plasmic-name={"text10"}
                              data-plasmic-override={overrides.text10}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text10
                              )}
                            >
                              {"Acc\u00e8s \u00e0 une base de candidats"}
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sbymt
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__qaIyq
                          )}
                          color={"white"}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vYcfz
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lkgTo
                              )}
                            >
                              {"souscrire"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToRegister"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/register`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToRegister"] != null &&
                              typeof $steps["goToRegister"] === "object" &&
                              typeof $steps["goToRegister"].then === "function"
                            ) {
                              $steps["goToRegister"] = await $steps[
                                "goToRegister"
                              ];
                            }
                          }}
                          type={"bordered"}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"pricingTierCard2"}
                    data-plasmic-override={overrides.pricingTierCard2}
                    className={classNames(projectcss.all, sty.pricingTierCard2)}
                  >
                    <div
                      data-plasmic-name={"header2"}
                      data-plasmic-override={overrides.header2}
                      className={classNames(projectcss.all, sty.header2)}
                    >
                      <div
                        data-plasmic-name={"frame9"}
                        data-plasmic-override={overrides.frame9}
                        className={classNames(projectcss.all, sty.frame9)}
                      >
                        <div
                          data-plasmic-name={"price3"}
                          data-plasmic-override={overrides.price3}
                          className={classNames(projectcss.all, sty.price3)}
                        >
                          <div
                            data-plasmic-name={"price4"}
                            data-plasmic-override={overrides.price4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.price4
                            )}
                          >
                            {"69,99 \u20ac/mois"}
                          </div>
                          {false ? (
                            <HandDrawnArrowIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wsywt
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {false ? (
                            <div
                              data-plasmic-name={"text11"}
                              data-plasmic-override={overrides.text11}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text11
                              )}
                            >
                              {"Most popular!"}
                            </div>
                          ) : null}
                          <div
                            data-plasmic-name={"badgeGroup5"}
                            data-plasmic-override={overrides.badgeGroup5}
                            className={classNames(
                              projectcss.all,
                              sty.badgeGroup5
                            )}
                          >
                            <div
                              data-plasmic-name={"content14"}
                              data-plasmic-override={overrides.content14}
                              className={classNames(
                                projectcss.all,
                                sty.content14
                              )}
                            >
                              <div
                                data-plasmic-name={"message5"}
                                data-plasmic-override={overrides.message5}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.message5
                                )}
                              >
                                {"Le + populaire"}
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"headingAndSupportingText5"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText5
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText5
                          )}
                        >
                          <div
                            data-plasmic-name={"supportingText9"}
                            data-plasmic-override={overrides.supportingText9}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText9
                            )}
                          >
                            {
                              "Recrutement premium avec visibilit\u00e9 accrue, acc\u00e8s prioritaire et annonces urgentes."
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"content15"}
                      data-plasmic-override={overrides.content15}
                      className={classNames(projectcss.all, sty.content15)}
                    >
                      <div
                        data-plasmic-name={"checkItems2"}
                        data-plasmic-override={overrides.checkItems2}
                        className={classNames(projectcss.all, sty.checkItems2)}
                      >
                        <div
                          data-plasmic-name={"checkItemText4"}
                          data-plasmic-override={overrides.checkItemText4}
                          className={classNames(
                            projectcss.all,
                            sty.checkItemText4
                          )}
                        >
                          <CheckIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ndyBr
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"textWrap4"}
                            data-plasmic-override={overrides.textWrap4}
                            className={classNames(
                              projectcss.all,
                              sty.textWrap4
                            )}
                          >
                            <div
                              data-plasmic-name={"text12"}
                              data-plasmic-override={overrides.text12}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text12
                              )}
                            >
                              {"Publication de 8 annonces"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"checkItemText5"}
                          data-plasmic-override={overrides.checkItemText5}
                          className={classNames(
                            projectcss.all,
                            sty.checkItemText5
                          )}
                        >
                          <CheckIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___6QjlY
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"textWrap5"}
                            data-plasmic-override={overrides.textWrap5}
                            className={classNames(
                              projectcss.all,
                              sty.textWrap5
                            )}
                          >
                            <div
                              data-plasmic-name={"text13"}
                              data-plasmic-override={overrides.text13}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text13
                              )}
                            >
                              {"4 annonces urgentes incluses"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"checkItemText6"}
                          data-plasmic-override={overrides.checkItemText6}
                          className={classNames(
                            projectcss.all,
                            sty.checkItemText6
                          )}
                        >
                          <CheckIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__glk3V
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"textWrap6"}
                            data-plasmic-override={overrides.textWrap6}
                            className={classNames(
                              projectcss.all,
                              sty.textWrap6
                            )}
                          >
                            <div
                              data-plasmic-name={"text14"}
                              data-plasmic-override={overrides.text14}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text14
                              )}
                            >
                              {"Acc\u00e8s prioritaire aux meilleurs talents"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"checkItemText7"}
                          data-plasmic-override={overrides.checkItemText7}
                          className={classNames(
                            projectcss.all,
                            sty.checkItemText7
                          )}
                        >
                          <CheckIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___2Jp1R
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"textWrap7"}
                            data-plasmic-override={overrides.textWrap7}
                            className={classNames(
                              projectcss.all,
                              sty.textWrap7
                            )}
                          >
                            <div
                              data-plasmic-name={"text15"}
                              data-plasmic-override={overrides.text15}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text15
                              )}
                            >
                              {"Alertes et notifications personnalis\u00e9es"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"checkItemText8"}
                          data-plasmic-override={overrides.checkItemText8}
                          className={classNames(
                            projectcss.all,
                            sty.checkItemText8
                          )}
                        >
                          <CheckIconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wzdRg
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"textWrap8"}
                            data-plasmic-override={overrides.textWrap8}
                            className={classNames(
                              projectcss.all,
                              sty.textWrap8
                            )}
                          >
                            <div
                              data-plasmic-name={"text16"}
                              data-plasmic-override={overrides.text16}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text16
                              )}
                            >
                              <React.Fragment>
                                <React.Fragment>
                                  {"Suivi des performances "}
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                                >
                                  {"(Coming soon)"}
                                </span>
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3AHu
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__xULhi
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4U97P
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cUsbp
                              )}
                            >
                              {"Souscrire"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToRegister"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/register`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToRegister"] != null &&
                              typeof $steps["goToRegister"] === "object" &&
                              typeof $steps["goToRegister"].then === "function"
                            ) {
                              $steps["goToRegister"] = await $steps[
                                "goToRegister"
                              ];
                            }
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            {false ? (
              <div
                data-plasmic-name={"benefices2"}
                data-plasmic-override={overrides.benefices2}
                className={classNames(projectcss.all, sty.benefices2)}
              >
                <div
                  data-plasmic-name={"container7"}
                  data-plasmic-override={overrides.container7}
                  className={classNames(projectcss.all, sty.container7)}
                >
                  <div
                    data-plasmic-name={"content16"}
                    data-plasmic-override={overrides.content16}
                    className={classNames(projectcss.all, sty.content16)}
                  >
                    <div
                      data-plasmic-name={"headingAndSupportingText6"}
                      data-plasmic-override={
                        overrides.headingAndSupportingText6
                      }
                      className={classNames(
                        projectcss.all,
                        sty.headingAndSupportingText6
                      )}
                    >
                      <div
                        data-plasmic-name={"headingAndBadge2"}
                        data-plasmic-override={overrides.headingAndBadge2}
                        className={classNames(
                          projectcss.all,
                          sty.headingAndBadge2
                        )}
                      >
                        <div
                          data-plasmic-name={"badgeGroup6"}
                          data-plasmic-override={overrides.badgeGroup6}
                          className={classNames(
                            projectcss.all,
                            sty.badgeGroup6
                          )}
                        >
                          <div
                            data-plasmic-name={"content17"}
                            data-plasmic-override={overrides.content17}
                            className={classNames(
                              projectcss.all,
                              sty.content17
                            )}
                          >
                            <div
                              data-plasmic-name={"message6"}
                              data-plasmic-override={overrides.message6}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.message6
                              )}
                            >
                              {"A propos"}
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"heading4"}
                          data-plasmic-override={overrides.heading4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.heading4
                          )}
                        >
                          {"Qui sommes nous ?"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"supportingText10"}
                        data-plasmic-override={overrides.supportingText10}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.supportingText10
                        )}
                      >
                        {"En savoir plus sur Job Around Me"}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"container8"}
                  data-plasmic-override={overrides.container8}
                  className={classNames(projectcss.all, sty.container8)}
                >
                  <div
                    data-plasmic-name={"frame10"}
                    data-plasmic-override={overrides.frame10}
                    className={classNames(projectcss.all, sty.frame10)}
                  >
                    <div
                      data-plasmic-name={"headingAndSupportingText7"}
                      data-plasmic-override={
                        overrides.headingAndSupportingText7
                      }
                      className={classNames(
                        projectcss.all,
                        sty.headingAndSupportingText7
                      )}
                    >
                      <div
                        data-plasmic-name={"supportingText11"}
                        data-plasmic-override={overrides.supportingText11}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.supportingText11
                        )}
                      >
                        {
                          "JobAroundMe est une application con\u00e7ue pour r\u00e9volutionner la recherche d\u2019emploi et le recrutement en s\u2019appuyant sur la g\u00e9olocalisation. Nous mettons directement en relation, via notre plateforme, les employeurs et les candidats en fonction de leur proximit\u00e9, permettant ainsi une r\u00e9ponse rapide et adapt\u00e9e aux besoins de chacun. \nQue ce soit pour des missions temporaires, des postes \u00e0 long terme ou des remplacements urgents, nous offrons une solution simple et efficace pour trouver ou pourvoir un emploi."
                        }
                      </div>
                      <Button
                        data-plasmic-name={"button3"}
                        data-plasmic-override={overrides.button3}
                        className={classNames("__wab_instance", sty.button3)}
                      />
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"image"}
                    data-plasmic-override={overrides.image}
                    className={classNames(projectcss.all, sty.image)}
                  >
                    <div
                      data-plasmic-name={"frame1073713936"}
                      data-plasmic-override={overrides.frame1073713936}
                      className={classNames(
                        projectcss.all,
                        sty.frame1073713936
                      )}
                    >
                      <Frame1171275265Icon
                        className={classNames(projectcss.all, sty.svg__tkLir)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"placeholderImage3"}
                      data-plasmic-override={overrides.placeholderImage3}
                      className={classNames(
                        projectcss.all,
                        sty.placeholderImage3
                      )}
                    />

                    <div
                      data-plasmic-name={"iPhone16"}
                      data-plasmic-override={overrides.iPhone16}
                      className={classNames(projectcss.all, sty.iPhone16)}
                    />
                  </div>
                </div>
              </div>
            ) : null}
            <div
              data-plasmic-name={"faq"}
              data-plasmic-override={overrides.faq}
              className={classNames(projectcss.all, sty.faq)}
              id={"faq"}
            >
              <div
                data-plasmic-name={"headingCta4"}
                data-plasmic-override={overrides.headingCta4}
                className={classNames(projectcss.all, sty.headingCta4)}
              >
                <div
                  data-plasmic-name={"headingSubheading4"}
                  data-plasmic-override={overrides.headingSubheading4}
                  className={classNames(projectcss.all, sty.headingSubheading4)}
                  id={"faq"}
                >
                  <div
                    data-plasmic-name={"headline4"}
                    data-plasmic-override={overrides.headline4}
                    className={classNames(projectcss.all, sty.headline4)}
                  >
                    <div
                      data-plasmic-name={"badgeGroup7"}
                      data-plasmic-override={overrides.badgeGroup7}
                      className={classNames(projectcss.all, sty.badgeGroup7)}
                    >
                      <div
                        data-plasmic-name={"content18"}
                        data-plasmic-override={overrides.content18}
                        className={classNames(projectcss.all, sty.content18)}
                      >
                        <div
                          data-plasmic-name={"message7"}
                          data-plasmic-override={overrides.message7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.message7
                          )}
                        >
                          {"FAQ"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qQ3S7
                      )}
                    >
                      {"Des questions?"}
                    </div>
                  </div>
                </div>
              </div>
              <Accordion
                data-plasmic-name={"accordion"}
                data-plasmic-override={overrides.accordion}
                className={classNames("__wab_instance", sty.accordion)}
                collapsible={false}
                type={"multiple"}
              >
                <AccordionItem
                  className={classNames(
                    "__wab_instance",
                    sty.accordionItem__lFa3
                  )}
                  value={"item-1"}
                >
                  <AccordionTrigger
                    className={classNames(
                      "__wab_instance",
                      sty.accordionTrigger__i6W2V
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5Nwgh
                      )}
                    >
                      {
                        "1. Combien de temps faut-il pour que mes annonces soient visibles sur la plateforme ?"
                      }
                    </div>
                  </AccordionTrigger>
                  <AccordionContent
                    className={classNames(
                      "__wab_instance",
                      sty.accordionContent__dznFz
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rxKal
                      )}
                    >
                      {
                        "Les annonces sont publi\u00e9es instantan\u00e9ment d\u00e8s leur validation, ce qui vous permet de commencer \u00e0 avoir acc\u00e8s \u00e0\u00a0 des candidatures en temps r\u00e9el."
                      }
                    </div>
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem
                  className={classNames(
                    "__wab_instance",
                    sty.accordionItem__bwVpc
                  )}
                  value={"item-2"}
                >
                  <AccordionTrigger
                    className={classNames(
                      "__wab_instance",
                      sty.accordionTrigger__uxO5D
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8TmS
                      )}
                    >
                      {
                        "2. Puis-je modifier ou supprimer mes annonces une fois qu\u2019elles sont publi\u00e9es ?"
                      }
                    </div>
                  </AccordionTrigger>
                  <AccordionContent
                    className={classNames(
                      "__wab_instance",
                      sty.accordionContent__xne2C
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t8Qmz
                      )}
                    >
                      {
                        "Oui, vous avez la possibilit\u00e9 de modifier ou de supprimer vos annonces \u00e0 tout moment, pour les adapter \u00e0 vos besoins."
                      }
                    </div>
                  </AccordionContent>
                </AccordionItem>
                <AccordionItem
                  className={classNames(
                    "__wab_instance",
                    sty.accordionItem__smCqv
                  )}
                  value={"item-3"}
                >
                  <AccordionTrigger
                    className={classNames(
                      "__wab_instance",
                      sty.accordionTrigger___7Bvgf
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o2S18
                      )}
                    >
                      {
                        "3. Comment savoir si les candidats qui postulent correspondent \u00e0 mes crit\u00e8res ?\r"
                      }
                    </div>
                  </AccordionTrigger>
                  <AccordionContent
                    className={classNames(
                      "__wab_instance",
                      sty.accordionContent__n5Mfb
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r3ImA
                      )}
                    >
                      {
                        "La plateforme vous permet de filtrer les candidatures selon des crit\u00e8res sp\u00e9cifiques, tels que la proximit\u00e9 g\u00e9ographique, le type de contrat, et les comp\u00e9tences, afin de trouver les profils les plus adapt\u00e9s \u00e0 vos besoins.\r\n\r"
                      }
                    </div>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
              <div
                data-plasmic-name={"container9"}
                data-plasmic-override={overrides.container9}
                className={classNames(projectcss.all, sty.container9)}
              >
                <div
                  data-plasmic-name={"content19"}
                  data-plasmic-override={overrides.content19}
                  className={classNames(projectcss.all, sty.content19)}
                >
                  <div
                    data-plasmic-name={"frame11"}
                    data-plasmic-override={overrides.frame11}
                    className={classNames(projectcss.all, sty.frame11)}
                  >
                    <div
                      data-plasmic-name={"frame12"}
                      data-plasmic-override={overrides.frame12}
                      className={classNames(projectcss.all, sty.frame12)}
                    >
                      <div
                        data-plasmic-name={"faqBloc"}
                        data-plasmic-override={overrides.faqBloc}
                        className={classNames(projectcss.all, sty.faqBloc)}
                      >
                        <div
                          data-plasmic-name={"question"}
                          data-plasmic-override={overrides.question}
                          className={classNames(projectcss.all, sty.question)}
                        >
                          <div
                            data-plasmic-name={"frame13"}
                            data-plasmic-override={overrides.frame13}
                            className={classNames(projectcss.all, sty.frame13)}
                          >
                            <div
                              data-plasmic-name={"text17"}
                              data-plasmic-override={overrides.text17}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text17
                              )}
                            >
                              {
                                "1. Combien de temps faut-il pour que mes annonces soient visibles sur la plateforme ?"
                              }
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"iconWrap"}
                            data-plasmic-override={overrides.iconWrap}
                            className={classNames(projectcss.all, sty.iconWrap)}
                          >
                            <MinusCircleIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0IUeK
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"reponse"}
                          data-plasmic-override={overrides.reponse}
                          className={classNames(projectcss.all, sty.reponse)}
                        >
                          <div
                            data-plasmic-name={"supportingText12"}
                            data-plasmic-override={overrides.supportingText12}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText12
                            )}
                          >
                            {
                              "Les annonces sont publi\u00e9es instantan\u00e9ment d\u00e8s leur validation, ce qui vous permet de commencer \u00e0 avoir acc\u00e8s \u00e0\u00a0 des candidatures en temps r\u00e9el."
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"faqBloc2"}
                      data-plasmic-override={overrides.faqBloc2}
                      className={classNames(projectcss.all, sty.faqBloc2)}
                    >
                      <div
                        data-plasmic-name={"question2"}
                        data-plasmic-override={overrides.question2}
                        className={classNames(projectcss.all, sty.question2)}
                      >
                        <div
                          data-plasmic-name={"frame14"}
                          data-plasmic-override={overrides.frame14}
                          className={classNames(projectcss.all, sty.frame14)}
                        >
                          <div
                            data-plasmic-name={"text18"}
                            data-plasmic-override={overrides.text18}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text18
                            )}
                          >
                            {
                              "2. Puis-je modifier ou supprimer mes annonces une fois qu\u2019elles sont publi\u00e9es ?"
                            }
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"iconWrap2"}
                          data-plasmic-override={overrides.iconWrap2}
                          className={classNames(projectcss.all, sty.iconWrap2)}
                        >
                          <PlusCircle2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__e2Yr2
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"faqBloc3"}
                      data-plasmic-override={overrides.faqBloc3}
                      className={classNames(projectcss.all, sty.faqBloc3)}
                    >
                      <div
                        data-plasmic-name={"question3"}
                        data-plasmic-override={overrides.question3}
                        className={classNames(projectcss.all, sty.question3)}
                      >
                        <div
                          data-plasmic-name={"frame15"}
                          data-plasmic-override={overrides.frame15}
                          className={classNames(projectcss.all, sty.frame15)}
                        >
                          <div
                            data-plasmic-name={"text19"}
                            data-plasmic-override={overrides.text19}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text19
                            )}
                          >
                            {
                              "3. Comment savoir si les candidats qui postulent correspondent \u00e0 mes crit\u00e8res ?"
                            }
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"iconWrap3"}
                          data-plasmic-override={overrides.iconWrap3}
                          className={classNames(projectcss.all, sty.iconWrap3)}
                        >
                          <PlusCircle2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___1S3DW
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
              employeur={true}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "structureLp",
    "navbar",
    "navigationBar",
    "frame21",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "jamLogo2",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header3",
    "jamLogo",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "menuItems2",
    "frame6",
    "pexelsPhotoByCottonbroStudio",
    "frame7",
    "hero",
    "headingCta",
    "headingSubheading",
    "headline",
    "badgeGroup",
    "content",
    "message",
    "trouvezUnCandidatNaJamaisEteAussiSimple",
    "frame1437254417",
    "frame1437254418",
    "benefices",
    "container",
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "supportingText",
    "container2",
    "content4",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text5",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text6",
    "supportingText4",
    "citation",
    "container3",
    "content5",
    "quoteAndAttribution",
    "quote",
    "avatarAndText",
    "textAndSupportingText4",
    "text7",
    "supportingText5",
    "services",
    "headingCta2",
    "headingSubheading2",
    "headline2",
    "badgeGroup3",
    "content6",
    "message3",
    "container4",
    "content7",
    "description",
    "iconAndText",
    "featuredIcon4",
    "headingAndSupportingText2",
    "heading2",
    "supportingText6",
    "content8",
    "placeholderImage",
    "container5",
    "content9",
    "placeholderImage2",
    "content10",
    "description2",
    "iconAndText2",
    "featuredIcon5",
    "headingAndSupportingText3",
    "heading3",
    "supportingText7",
    "services2",
    "headingCta3",
    "headingSubheading3",
    "headline3",
    "badgeGroup4",
    "content11",
    "message4",
    "container6",
    "content12",
    "pricingTierCard",
    "header",
    "frame8",
    "price",
    "price2",
    "headingAndSupportingText4",
    "supportingText8",
    "content13",
    "checkItems",
    "checkItemText",
    "textWrap",
    "text8",
    "checkItemText2",
    "textWrap2",
    "text9",
    "checkItemText3",
    "textWrap3",
    "text10",
    "pricingTierCard2",
    "header2",
    "frame9",
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5",
    "headingAndSupportingText5",
    "supportingText9",
    "content15",
    "checkItems2",
    "checkItemText4",
    "textWrap4",
    "text12",
    "checkItemText5",
    "textWrap5",
    "text13",
    "checkItemText6",
    "textWrap6",
    "text14",
    "checkItemText7",
    "textWrap7",
    "text15",
    "checkItemText8",
    "textWrap8",
    "text16",
    "benefices2",
    "container7",
    "content16",
    "headingAndSupportingText6",
    "headingAndBadge2",
    "badgeGroup6",
    "content17",
    "message6",
    "heading4",
    "supportingText10",
    "container8",
    "frame10",
    "headingAndSupportingText7",
    "supportingText11",
    "button3",
    "image",
    "frame1073713936",
    "placeholderImage3",
    "iPhone16",
    "faq",
    "headingCta4",
    "headingSubheading4",
    "headline4",
    "badgeGroup7",
    "content18",
    "message7",
    "accordion",
    "container9",
    "content19",
    "frame11",
    "frame12",
    "faqBloc",
    "question",
    "frame13",
    "text17",
    "iconWrap",
    "reponse",
    "supportingText12",
    "faqBloc2",
    "question2",
    "frame14",
    "text18",
    "iconWrap2",
    "faqBloc3",
    "question3",
    "frame15",
    "text19",
    "iconWrap3",
    "footer"
  ],
  structureLp: [
    "structureLp",
    "navbar",
    "navigationBar",
    "frame21",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "jamLogo2",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header3",
    "jamLogo",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "menuItems2",
    "frame6",
    "pexelsPhotoByCottonbroStudio",
    "frame7",
    "hero",
    "headingCta",
    "headingSubheading",
    "headline",
    "badgeGroup",
    "content",
    "message",
    "trouvezUnCandidatNaJamaisEteAussiSimple",
    "frame1437254417",
    "frame1437254418",
    "benefices",
    "container",
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "supportingText",
    "container2",
    "content4",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text5",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text6",
    "supportingText4",
    "citation",
    "container3",
    "content5",
    "quoteAndAttribution",
    "quote",
    "avatarAndText",
    "textAndSupportingText4",
    "text7",
    "supportingText5",
    "services",
    "headingCta2",
    "headingSubheading2",
    "headline2",
    "badgeGroup3",
    "content6",
    "message3",
    "container4",
    "content7",
    "description",
    "iconAndText",
    "featuredIcon4",
    "headingAndSupportingText2",
    "heading2",
    "supportingText6",
    "content8",
    "placeholderImage",
    "container5",
    "content9",
    "placeholderImage2",
    "content10",
    "description2",
    "iconAndText2",
    "featuredIcon5",
    "headingAndSupportingText3",
    "heading3",
    "supportingText7",
    "services2",
    "headingCta3",
    "headingSubheading3",
    "headline3",
    "badgeGroup4",
    "content11",
    "message4",
    "container6",
    "content12",
    "pricingTierCard",
    "header",
    "frame8",
    "price",
    "price2",
    "headingAndSupportingText4",
    "supportingText8",
    "content13",
    "checkItems",
    "checkItemText",
    "textWrap",
    "text8",
    "checkItemText2",
    "textWrap2",
    "text9",
    "checkItemText3",
    "textWrap3",
    "text10",
    "pricingTierCard2",
    "header2",
    "frame9",
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5",
    "headingAndSupportingText5",
    "supportingText9",
    "content15",
    "checkItems2",
    "checkItemText4",
    "textWrap4",
    "text12",
    "checkItemText5",
    "textWrap5",
    "text13",
    "checkItemText6",
    "textWrap6",
    "text14",
    "checkItemText7",
    "textWrap7",
    "text15",
    "checkItemText8",
    "textWrap8",
    "text16",
    "benefices2",
    "container7",
    "content16",
    "headingAndSupportingText6",
    "headingAndBadge2",
    "badgeGroup6",
    "content17",
    "message6",
    "heading4",
    "supportingText10",
    "container8",
    "frame10",
    "headingAndSupportingText7",
    "supportingText11",
    "button3",
    "image",
    "frame1073713936",
    "placeholderImage3",
    "iPhone16",
    "faq",
    "headingCta4",
    "headingSubheading4",
    "headline4",
    "badgeGroup7",
    "content18",
    "message7",
    "accordion",
    "container9",
    "content19",
    "frame11",
    "frame12",
    "faqBloc",
    "question",
    "frame13",
    "text17",
    "iconWrap",
    "reponse",
    "supportingText12",
    "faqBloc2",
    "question2",
    "frame14",
    "text18",
    "iconWrap2",
    "faqBloc3",
    "question3",
    "frame15",
    "text19",
    "iconWrap3",
    "footer"
  ],
  navbar: [
    "navbar",
    "navigationBar",
    "frame21",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "jamLogo2",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header3",
    "jamLogo",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "menuItems2"
  ],
  navigationBar: [
    "navigationBar",
    "frame21",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "jamLogo2",
    "frame30",
    "frame31",
    "frame32",
    "frame33"
  ],
  frame21: ["frame21", "frame22", "frame23", "frame24", "frame25"],
  frame22: ["frame22", "frame23", "frame24", "frame25"],
  frame23: ["frame23"],
  frame24: ["frame24"],
  frame25: ["frame25"],
  jamLogo2: ["jamLogo2", "frame30", "frame31", "frame32", "frame33"],
  frame30: ["frame30", "frame31", "frame32", "frame33"],
  frame31: ["frame31"],
  frame32: ["frame32"],
  frame33: ["frame33"],
  header3: [
    "header3",
    "jamLogo",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "menuItems2"
  ],
  jamLogo: ["jamLogo", "frame26", "frame27", "frame28", "frame29"],
  frame26: ["frame26", "frame27", "frame28", "frame29"],
  frame27: ["frame27"],
  frame28: ["frame28"],
  frame29: ["frame29"],
  menuItems2: ["menuItems2"],
  frame6: [
    "frame6",
    "pexelsPhotoByCottonbroStudio",
    "frame7",
    "hero",
    "headingCta",
    "headingSubheading",
    "headline",
    "badgeGroup",
    "content",
    "message",
    "trouvezUnCandidatNaJamaisEteAussiSimple",
    "frame1437254417",
    "frame1437254418"
  ],
  pexelsPhotoByCottonbroStudio: ["pexelsPhotoByCottonbroStudio"],
  frame7: [
    "frame7",
    "hero",
    "headingCta",
    "headingSubheading",
    "headline",
    "badgeGroup",
    "content",
    "message",
    "trouvezUnCandidatNaJamaisEteAussiSimple",
    "frame1437254417",
    "frame1437254418"
  ],
  hero: [
    "hero",
    "headingCta",
    "headingSubheading",
    "headline",
    "badgeGroup",
    "content",
    "message",
    "trouvezUnCandidatNaJamaisEteAussiSimple",
    "frame1437254417",
    "frame1437254418"
  ],
  headingCta: [
    "headingCta",
    "headingSubheading",
    "headline",
    "badgeGroup",
    "content",
    "message",
    "trouvezUnCandidatNaJamaisEteAussiSimple"
  ],
  headingSubheading: [
    "headingSubheading",
    "headline",
    "badgeGroup",
    "content",
    "message",
    "trouvezUnCandidatNaJamaisEteAussiSimple"
  ],
  headline: [
    "headline",
    "badgeGroup",
    "content",
    "message",
    "trouvezUnCandidatNaJamaisEteAussiSimple"
  ],
  badgeGroup: ["badgeGroup", "content", "message"],
  content: ["content", "message"],
  message: ["message"],
  trouvezUnCandidatNaJamaisEteAussiSimple: [
    "trouvezUnCandidatNaJamaisEteAussiSimple"
  ],
  frame1437254417: ["frame1437254417"],
  frame1437254418: ["frame1437254418"],
  benefices: [
    "benefices",
    "container",
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "supportingText",
    "container2",
    "content4",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text5",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text6",
    "supportingText4"
  ],
  container: [
    "container",
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "supportingText"
  ],
  content2: [
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "supportingText"
  ],
  headingAndSupportingText: [
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "supportingText"
  ],
  headingAndBadge: [
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading"
  ],
  badgeGroup2: ["badgeGroup2", "content3", "message2"],
  content3: ["content3", "message2"],
  message2: ["message2"],
  heading: ["heading"],
  supportingText: ["supportingText"],
  container2: [
    "container2",
    "content4",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text5",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text6",
    "supportingText4"
  ],
  content4: [
    "content4",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text5",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text6",
    "supportingText4"
  ],
  featureText: [
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText2"
  ],
  featuredIcon: ["featuredIcon"],
  textAndSupportingText: ["textAndSupportingText", "text4", "supportingText2"],
  text4: ["text4"],
  supportingText2: ["supportingText2"],
  featureText2: [
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text5",
    "supportingText3"
  ],
  featuredIcon2: ["featuredIcon2"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text5",
    "supportingText3"
  ],
  text5: ["text5"],
  supportingText3: ["supportingText3"],
  featureText3: [
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text6",
    "supportingText4"
  ],
  featuredIcon3: ["featuredIcon3"],
  textAndSupportingText3: [
    "textAndSupportingText3",
    "text6",
    "supportingText4"
  ],
  text6: ["text6"],
  supportingText4: ["supportingText4"],
  citation: [
    "citation",
    "container3",
    "content5",
    "quoteAndAttribution",
    "quote",
    "avatarAndText",
    "textAndSupportingText4",
    "text7",
    "supportingText5"
  ],
  container3: [
    "container3",
    "content5",
    "quoteAndAttribution",
    "quote",
    "avatarAndText",
    "textAndSupportingText4",
    "text7",
    "supportingText5"
  ],
  content5: [
    "content5",
    "quoteAndAttribution",
    "quote",
    "avatarAndText",
    "textAndSupportingText4",
    "text7",
    "supportingText5"
  ],
  quoteAndAttribution: [
    "quoteAndAttribution",
    "quote",
    "avatarAndText",
    "textAndSupportingText4",
    "text7",
    "supportingText5"
  ],
  quote: ["quote"],
  avatarAndText: [
    "avatarAndText",
    "textAndSupportingText4",
    "text7",
    "supportingText5"
  ],
  textAndSupportingText4: [
    "textAndSupportingText4",
    "text7",
    "supportingText5"
  ],
  text7: ["text7"],
  supportingText5: ["supportingText5"],
  services: [
    "services",
    "headingCta2",
    "headingSubheading2",
    "headline2",
    "badgeGroup3",
    "content6",
    "message3",
    "container4",
    "content7",
    "description",
    "iconAndText",
    "featuredIcon4",
    "headingAndSupportingText2",
    "heading2",
    "supportingText6",
    "content8",
    "placeholderImage",
    "container5",
    "content9",
    "placeholderImage2",
    "content10",
    "description2",
    "iconAndText2",
    "featuredIcon5",
    "headingAndSupportingText3",
    "heading3",
    "supportingText7"
  ],
  headingCta2: [
    "headingCta2",
    "headingSubheading2",
    "headline2",
    "badgeGroup3",
    "content6",
    "message3"
  ],
  headingSubheading2: [
    "headingSubheading2",
    "headline2",
    "badgeGroup3",
    "content6",
    "message3"
  ],
  headline2: ["headline2", "badgeGroup3", "content6", "message3"],
  badgeGroup3: ["badgeGroup3", "content6", "message3"],
  content6: ["content6", "message3"],
  message3: ["message3"],
  container4: [
    "container4",
    "content7",
    "description",
    "iconAndText",
    "featuredIcon4",
    "headingAndSupportingText2",
    "heading2",
    "supportingText6",
    "content8",
    "placeholderImage"
  ],
  content7: [
    "content7",
    "description",
    "iconAndText",
    "featuredIcon4",
    "headingAndSupportingText2",
    "heading2",
    "supportingText6"
  ],
  description: [
    "description",
    "iconAndText",
    "featuredIcon4",
    "headingAndSupportingText2",
    "heading2",
    "supportingText6"
  ],
  iconAndText: [
    "iconAndText",
    "featuredIcon4",
    "headingAndSupportingText2",
    "heading2",
    "supportingText6"
  ],
  featuredIcon4: ["featuredIcon4"],
  headingAndSupportingText2: [
    "headingAndSupportingText2",
    "heading2",
    "supportingText6"
  ],
  heading2: ["heading2"],
  supportingText6: ["supportingText6"],
  content8: ["content8", "placeholderImage"],
  placeholderImage: ["placeholderImage"],
  container5: [
    "container5",
    "content9",
    "placeholderImage2",
    "content10",
    "description2",
    "iconAndText2",
    "featuredIcon5",
    "headingAndSupportingText3",
    "heading3",
    "supportingText7"
  ],
  content9: ["content9", "placeholderImage2"],
  placeholderImage2: ["placeholderImage2"],
  content10: [
    "content10",
    "description2",
    "iconAndText2",
    "featuredIcon5",
    "headingAndSupportingText3",
    "heading3",
    "supportingText7"
  ],
  description2: [
    "description2",
    "iconAndText2",
    "featuredIcon5",
    "headingAndSupportingText3",
    "heading3",
    "supportingText7"
  ],
  iconAndText2: [
    "iconAndText2",
    "featuredIcon5",
    "headingAndSupportingText3",
    "heading3",
    "supportingText7"
  ],
  featuredIcon5: ["featuredIcon5"],
  headingAndSupportingText3: [
    "headingAndSupportingText3",
    "heading3",
    "supportingText7"
  ],
  heading3: ["heading3"],
  supportingText7: ["supportingText7"],
  services2: [
    "services2",
    "headingCta3",
    "headingSubheading3",
    "headline3",
    "badgeGroup4",
    "content11",
    "message4",
    "container6",
    "content12",
    "pricingTierCard",
    "header",
    "frame8",
    "price",
    "price2",
    "headingAndSupportingText4",
    "supportingText8",
    "content13",
    "checkItems",
    "checkItemText",
    "textWrap",
    "text8",
    "checkItemText2",
    "textWrap2",
    "text9",
    "checkItemText3",
    "textWrap3",
    "text10",
    "pricingTierCard2",
    "header2",
    "frame9",
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5",
    "headingAndSupportingText5",
    "supportingText9",
    "content15",
    "checkItems2",
    "checkItemText4",
    "textWrap4",
    "text12",
    "checkItemText5",
    "textWrap5",
    "text13",
    "checkItemText6",
    "textWrap6",
    "text14",
    "checkItemText7",
    "textWrap7",
    "text15",
    "checkItemText8",
    "textWrap8",
    "text16"
  ],
  headingCta3: [
    "headingCta3",
    "headingSubheading3",
    "headline3",
    "badgeGroup4",
    "content11",
    "message4"
  ],
  headingSubheading3: [
    "headingSubheading3",
    "headline3",
    "badgeGroup4",
    "content11",
    "message4"
  ],
  headline3: ["headline3", "badgeGroup4", "content11", "message4"],
  badgeGroup4: ["badgeGroup4", "content11", "message4"],
  content11: ["content11", "message4"],
  message4: ["message4"],
  container6: [
    "container6",
    "content12",
    "pricingTierCard",
    "header",
    "frame8",
    "price",
    "price2",
    "headingAndSupportingText4",
    "supportingText8",
    "content13",
    "checkItems",
    "checkItemText",
    "textWrap",
    "text8",
    "checkItemText2",
    "textWrap2",
    "text9",
    "checkItemText3",
    "textWrap3",
    "text10",
    "pricingTierCard2",
    "header2",
    "frame9",
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5",
    "headingAndSupportingText5",
    "supportingText9",
    "content15",
    "checkItems2",
    "checkItemText4",
    "textWrap4",
    "text12",
    "checkItemText5",
    "textWrap5",
    "text13",
    "checkItemText6",
    "textWrap6",
    "text14",
    "checkItemText7",
    "textWrap7",
    "text15",
    "checkItemText8",
    "textWrap8",
    "text16"
  ],
  content12: [
    "content12",
    "pricingTierCard",
    "header",
    "frame8",
    "price",
    "price2",
    "headingAndSupportingText4",
    "supportingText8",
    "content13",
    "checkItems",
    "checkItemText",
    "textWrap",
    "text8",
    "checkItemText2",
    "textWrap2",
    "text9",
    "checkItemText3",
    "textWrap3",
    "text10",
    "pricingTierCard2",
    "header2",
    "frame9",
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5",
    "headingAndSupportingText5",
    "supportingText9",
    "content15",
    "checkItems2",
    "checkItemText4",
    "textWrap4",
    "text12",
    "checkItemText5",
    "textWrap5",
    "text13",
    "checkItemText6",
    "textWrap6",
    "text14",
    "checkItemText7",
    "textWrap7",
    "text15",
    "checkItemText8",
    "textWrap8",
    "text16"
  ],
  pricingTierCard: [
    "pricingTierCard",
    "header",
    "frame8",
    "price",
    "price2",
    "headingAndSupportingText4",
    "supportingText8",
    "content13",
    "checkItems",
    "checkItemText",
    "textWrap",
    "text8",
    "checkItemText2",
    "textWrap2",
    "text9",
    "checkItemText3",
    "textWrap3",
    "text10"
  ],
  header: [
    "header",
    "frame8",
    "price",
    "price2",
    "headingAndSupportingText4",
    "supportingText8"
  ],
  frame8: [
    "frame8",
    "price",
    "price2",
    "headingAndSupportingText4",
    "supportingText8"
  ],
  price: ["price", "price2"],
  price2: ["price2"],
  headingAndSupportingText4: ["headingAndSupportingText4", "supportingText8"],
  supportingText8: ["supportingText8"],
  content13: [
    "content13",
    "checkItems",
    "checkItemText",
    "textWrap",
    "text8",
    "checkItemText2",
    "textWrap2",
    "text9",
    "checkItemText3",
    "textWrap3",
    "text10"
  ],
  checkItems: [
    "checkItems",
    "checkItemText",
    "textWrap",
    "text8",
    "checkItemText2",
    "textWrap2",
    "text9",
    "checkItemText3",
    "textWrap3",
    "text10"
  ],
  checkItemText: ["checkItemText", "textWrap", "text8"],
  textWrap: ["textWrap", "text8"],
  text8: ["text8"],
  checkItemText2: ["checkItemText2", "textWrap2", "text9"],
  textWrap2: ["textWrap2", "text9"],
  text9: ["text9"],
  checkItemText3: ["checkItemText3", "textWrap3", "text10"],
  textWrap3: ["textWrap3", "text10"],
  text10: ["text10"],
  pricingTierCard2: [
    "pricingTierCard2",
    "header2",
    "frame9",
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5",
    "headingAndSupportingText5",
    "supportingText9",
    "content15",
    "checkItems2",
    "checkItemText4",
    "textWrap4",
    "text12",
    "checkItemText5",
    "textWrap5",
    "text13",
    "checkItemText6",
    "textWrap6",
    "text14",
    "checkItemText7",
    "textWrap7",
    "text15",
    "checkItemText8",
    "textWrap8",
    "text16"
  ],
  header2: [
    "header2",
    "frame9",
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5",
    "headingAndSupportingText5",
    "supportingText9"
  ],
  frame9: [
    "frame9",
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5",
    "headingAndSupportingText5",
    "supportingText9"
  ],
  price3: [
    "price3",
    "price4",
    "text11",
    "badgeGroup5",
    "content14",
    "message5"
  ],
  price4: ["price4"],
  text11: ["text11"],
  badgeGroup5: ["badgeGroup5", "content14", "message5"],
  content14: ["content14", "message5"],
  message5: ["message5"],
  headingAndSupportingText5: ["headingAndSupportingText5", "supportingText9"],
  supportingText9: ["supportingText9"],
  content15: [
    "content15",
    "checkItems2",
    "checkItemText4",
    "textWrap4",
    "text12",
    "checkItemText5",
    "textWrap5",
    "text13",
    "checkItemText6",
    "textWrap6",
    "text14",
    "checkItemText7",
    "textWrap7",
    "text15",
    "checkItemText8",
    "textWrap8",
    "text16"
  ],
  checkItems2: [
    "checkItems2",
    "checkItemText4",
    "textWrap4",
    "text12",
    "checkItemText5",
    "textWrap5",
    "text13",
    "checkItemText6",
    "textWrap6",
    "text14",
    "checkItemText7",
    "textWrap7",
    "text15",
    "checkItemText8",
    "textWrap8",
    "text16"
  ],
  checkItemText4: ["checkItemText4", "textWrap4", "text12"],
  textWrap4: ["textWrap4", "text12"],
  text12: ["text12"],
  checkItemText5: ["checkItemText5", "textWrap5", "text13"],
  textWrap5: ["textWrap5", "text13"],
  text13: ["text13"],
  checkItemText6: ["checkItemText6", "textWrap6", "text14"],
  textWrap6: ["textWrap6", "text14"],
  text14: ["text14"],
  checkItemText7: ["checkItemText7", "textWrap7", "text15"],
  textWrap7: ["textWrap7", "text15"],
  text15: ["text15"],
  checkItemText8: ["checkItemText8", "textWrap8", "text16"],
  textWrap8: ["textWrap8", "text16"],
  text16: ["text16"],
  benefices2: [
    "benefices2",
    "container7",
    "content16",
    "headingAndSupportingText6",
    "headingAndBadge2",
    "badgeGroup6",
    "content17",
    "message6",
    "heading4",
    "supportingText10",
    "container8",
    "frame10",
    "headingAndSupportingText7",
    "supportingText11",
    "button3",
    "image",
    "frame1073713936",
    "placeholderImage3",
    "iPhone16"
  ],
  container7: [
    "container7",
    "content16",
    "headingAndSupportingText6",
    "headingAndBadge2",
    "badgeGroup6",
    "content17",
    "message6",
    "heading4",
    "supportingText10"
  ],
  content16: [
    "content16",
    "headingAndSupportingText6",
    "headingAndBadge2",
    "badgeGroup6",
    "content17",
    "message6",
    "heading4",
    "supportingText10"
  ],
  headingAndSupportingText6: [
    "headingAndSupportingText6",
    "headingAndBadge2",
    "badgeGroup6",
    "content17",
    "message6",
    "heading4",
    "supportingText10"
  ],
  headingAndBadge2: [
    "headingAndBadge2",
    "badgeGroup6",
    "content17",
    "message6",
    "heading4"
  ],
  badgeGroup6: ["badgeGroup6", "content17", "message6"],
  content17: ["content17", "message6"],
  message6: ["message6"],
  heading4: ["heading4"],
  supportingText10: ["supportingText10"],
  container8: [
    "container8",
    "frame10",
    "headingAndSupportingText7",
    "supportingText11",
    "button3",
    "image",
    "frame1073713936",
    "placeholderImage3",
    "iPhone16"
  ],
  frame10: [
    "frame10",
    "headingAndSupportingText7",
    "supportingText11",
    "button3"
  ],
  headingAndSupportingText7: [
    "headingAndSupportingText7",
    "supportingText11",
    "button3"
  ],
  supportingText11: ["supportingText11"],
  button3: ["button3"],
  image: ["image", "frame1073713936", "placeholderImage3", "iPhone16"],
  frame1073713936: ["frame1073713936"],
  placeholderImage3: ["placeholderImage3"],
  iPhone16: ["iPhone16"],
  faq: [
    "faq",
    "headingCta4",
    "headingSubheading4",
    "headline4",
    "badgeGroup7",
    "content18",
    "message7",
    "accordion",
    "container9",
    "content19",
    "frame11",
    "frame12",
    "faqBloc",
    "question",
    "frame13",
    "text17",
    "iconWrap",
    "reponse",
    "supportingText12",
    "faqBloc2",
    "question2",
    "frame14",
    "text18",
    "iconWrap2",
    "faqBloc3",
    "question3",
    "frame15",
    "text19",
    "iconWrap3"
  ],
  headingCta4: [
    "headingCta4",
    "headingSubheading4",
    "headline4",
    "badgeGroup7",
    "content18",
    "message7"
  ],
  headingSubheading4: [
    "headingSubheading4",
    "headline4",
    "badgeGroup7",
    "content18",
    "message7"
  ],
  headline4: ["headline4", "badgeGroup7", "content18", "message7"],
  badgeGroup7: ["badgeGroup7", "content18", "message7"],
  content18: ["content18", "message7"],
  message7: ["message7"],
  accordion: ["accordion"],
  container9: [
    "container9",
    "content19",
    "frame11",
    "frame12",
    "faqBloc",
    "question",
    "frame13",
    "text17",
    "iconWrap",
    "reponse",
    "supportingText12",
    "faqBloc2",
    "question2",
    "frame14",
    "text18",
    "iconWrap2",
    "faqBloc3",
    "question3",
    "frame15",
    "text19",
    "iconWrap3"
  ],
  content19: [
    "content19",
    "frame11",
    "frame12",
    "faqBloc",
    "question",
    "frame13",
    "text17",
    "iconWrap",
    "reponse",
    "supportingText12",
    "faqBloc2",
    "question2",
    "frame14",
    "text18",
    "iconWrap2",
    "faqBloc3",
    "question3",
    "frame15",
    "text19",
    "iconWrap3"
  ],
  frame11: [
    "frame11",
    "frame12",
    "faqBloc",
    "question",
    "frame13",
    "text17",
    "iconWrap",
    "reponse",
    "supportingText12",
    "faqBloc2",
    "question2",
    "frame14",
    "text18",
    "iconWrap2",
    "faqBloc3",
    "question3",
    "frame15",
    "text19",
    "iconWrap3"
  ],
  frame12: [
    "frame12",
    "faqBloc",
    "question",
    "frame13",
    "text17",
    "iconWrap",
    "reponse",
    "supportingText12"
  ],
  faqBloc: [
    "faqBloc",
    "question",
    "frame13",
    "text17",
    "iconWrap",
    "reponse",
    "supportingText12"
  ],
  question: ["question", "frame13", "text17", "iconWrap"],
  frame13: ["frame13", "text17"],
  text17: ["text17"],
  iconWrap: ["iconWrap"],
  reponse: ["reponse", "supportingText12"],
  supportingText12: ["supportingText12"],
  faqBloc2: ["faqBloc2", "question2", "frame14", "text18", "iconWrap2"],
  question2: ["question2", "frame14", "text18", "iconWrap2"],
  frame14: ["frame14", "text18"],
  text18: ["text18"],
  iconWrap2: ["iconWrap2"],
  faqBloc3: ["faqBloc3", "question3", "frame15", "text19", "iconWrap3"],
  question3: ["question3", "frame15", "text19", "iconWrap3"],
  frame15: ["frame15", "text19"],
  text19: ["text19"],
  iconWrap3: ["iconWrap3"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  structureLp: "div";
  navbar: "div";
  navigationBar: typeof NavigationBar;
  frame21: "div";
  frame22: "div";
  frame23: "div";
  frame24: "div";
  frame25: "div";
  jamLogo2: "div";
  frame30: "div";
  frame31: "div";
  frame32: "div";
  frame33: "div";
  header3: "header";
  jamLogo: "div";
  frame26: "div";
  frame27: "div";
  frame28: "div";
  frame29: "div";
  menuItems2: "div";
  frame6: "div";
  pexelsPhotoByCottonbroStudio: "div";
  frame7: "div";
  hero: "div";
  headingCta: "div";
  headingSubheading: "div";
  headline: "div";
  badgeGroup: "div";
  content: "div";
  message: "div";
  trouvezUnCandidatNaJamaisEteAussiSimple: "div";
  frame1437254417: "div";
  frame1437254418: "div";
  benefices: "div";
  container: "div";
  content2: "div";
  headingAndSupportingText: "div";
  headingAndBadge: "div";
  badgeGroup2: "div";
  content3: "div";
  message2: "div";
  heading: "div";
  supportingText: "div";
  container2: "div";
  content4: "div";
  featureText: "div";
  featuredIcon: "div";
  textAndSupportingText: "div";
  text4: "div";
  supportingText2: "div";
  featureText2: "div";
  featuredIcon2: "div";
  textAndSupportingText2: "div";
  text5: "div";
  supportingText3: "div";
  featureText3: "div";
  featuredIcon3: "div";
  textAndSupportingText3: "div";
  text6: "div";
  supportingText4: "div";
  citation: "div";
  container3: "div";
  content5: "div";
  quoteAndAttribution: "div";
  quote: "div";
  avatarAndText: "div";
  textAndSupportingText4: "div";
  text7: "div";
  supportingText5: "div";
  services: "div";
  headingCta2: "div";
  headingSubheading2: "div";
  headline2: "div";
  badgeGroup3: "div";
  content6: "div";
  message3: "div";
  container4: "div";
  content7: "div";
  description: "div";
  iconAndText: "div";
  featuredIcon4: "div";
  headingAndSupportingText2: "div";
  heading2: "div";
  supportingText6: "div";
  content8: "div";
  placeholderImage: "div";
  container5: "div";
  content9: "div";
  placeholderImage2: "div";
  content10: "div";
  description2: "div";
  iconAndText2: "div";
  featuredIcon5: "div";
  headingAndSupportingText3: "div";
  heading3: "div";
  supportingText7: "div";
  services2: "div";
  headingCta3: "div";
  headingSubheading3: "div";
  headline3: "div";
  badgeGroup4: "div";
  content11: "div";
  message4: "div";
  container6: "div";
  content12: "div";
  pricingTierCard: "div";
  header: "div";
  frame8: "div";
  price: "div";
  price2: "div";
  headingAndSupportingText4: "div";
  supportingText8: "div";
  content13: "div";
  checkItems: "div";
  checkItemText: "div";
  textWrap: "div";
  text8: "div";
  checkItemText2: "div";
  textWrap2: "div";
  text9: "div";
  checkItemText3: "div";
  textWrap3: "div";
  text10: "div";
  pricingTierCard2: "div";
  header2: "div";
  frame9: "div";
  price3: "div";
  price4: "div";
  text11: "div";
  badgeGroup5: "div";
  content14: "div";
  message5: "div";
  headingAndSupportingText5: "div";
  supportingText9: "div";
  content15: "div";
  checkItems2: "div";
  checkItemText4: "div";
  textWrap4: "div";
  text12: "div";
  checkItemText5: "div";
  textWrap5: "div";
  text13: "div";
  checkItemText6: "div";
  textWrap6: "div";
  text14: "div";
  checkItemText7: "div";
  textWrap7: "div";
  text15: "div";
  checkItemText8: "div";
  textWrap8: "div";
  text16: "div";
  benefices2: "div";
  container7: "div";
  content16: "div";
  headingAndSupportingText6: "div";
  headingAndBadge2: "div";
  badgeGroup6: "div";
  content17: "div";
  message6: "div";
  heading4: "div";
  supportingText10: "div";
  container8: "div";
  frame10: "div";
  headingAndSupportingText7: "div";
  supportingText11: "div";
  button3: typeof Button;
  image: "div";
  frame1073713936: "div";
  placeholderImage3: "div";
  iPhone16: "div";
  faq: "div";
  headingCta4: "div";
  headingSubheading4: "div";
  headline4: "div";
  badgeGroup7: "div";
  content18: "div";
  message7: "div";
  accordion: typeof Accordion;
  container9: "div";
  content19: "div";
  frame11: "div";
  frame12: "div";
  faqBloc: "div";
  question: "div";
  frame13: "div";
  text17: "div";
  iconWrap: "div";
  reponse: "div";
  supportingText12: "div";
  faqBloc2: "div";
  question2: "div";
  frame14: "div";
  text18: "div";
  iconWrap2: "div";
  faqBloc3: "div";
  question3: "div";
  frame15: "div";
  text19: "div";
  iconWrap3: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccueilEmployeur__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccueilEmployeur__VariantsArgs;
    args?: PlasmicAccueilEmployeur__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccueilEmployeur__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccueilEmployeur__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccueilEmployeur__ArgProps,
          internalVariantPropNames: PlasmicAccueilEmployeur__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccueilEmployeur__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccueilEmployeur";
  } else {
    func.displayName = `PlasmicAccueilEmployeur.${nodeName}`;
  }
  return func;
}

export const PlasmicAccueilEmployeur = Object.assign(
  // Top-level PlasmicAccueilEmployeur renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    structureLp: makeNodeComponent("structureLp"),
    navbar: makeNodeComponent("navbar"),
    navigationBar: makeNodeComponent("navigationBar"),
    frame21: makeNodeComponent("frame21"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    frame24: makeNodeComponent("frame24"),
    frame25: makeNodeComponent("frame25"),
    jamLogo2: makeNodeComponent("jamLogo2"),
    frame30: makeNodeComponent("frame30"),
    frame31: makeNodeComponent("frame31"),
    frame32: makeNodeComponent("frame32"),
    frame33: makeNodeComponent("frame33"),
    header3: makeNodeComponent("header3"),
    jamLogo: makeNodeComponent("jamLogo"),
    frame26: makeNodeComponent("frame26"),
    frame27: makeNodeComponent("frame27"),
    frame28: makeNodeComponent("frame28"),
    frame29: makeNodeComponent("frame29"),
    menuItems2: makeNodeComponent("menuItems2"),
    frame6: makeNodeComponent("frame6"),
    pexelsPhotoByCottonbroStudio: makeNodeComponent(
      "pexelsPhotoByCottonbroStudio"
    ),
    frame7: makeNodeComponent("frame7"),
    hero: makeNodeComponent("hero"),
    headingCta: makeNodeComponent("headingCta"),
    headingSubheading: makeNodeComponent("headingSubheading"),
    headline: makeNodeComponent("headline"),
    badgeGroup: makeNodeComponent("badgeGroup"),
    content: makeNodeComponent("content"),
    message: makeNodeComponent("message"),
    trouvezUnCandidatNaJamaisEteAussiSimple: makeNodeComponent(
      "trouvezUnCandidatNaJamaisEteAussiSimple"
    ),
    frame1437254417: makeNodeComponent("frame1437254417"),
    frame1437254418: makeNodeComponent("frame1437254418"),
    benefices: makeNodeComponent("benefices"),
    container: makeNodeComponent("container"),
    content2: makeNodeComponent("content2"),
    headingAndSupportingText: makeNodeComponent("headingAndSupportingText"),
    headingAndBadge: makeNodeComponent("headingAndBadge"),
    badgeGroup2: makeNodeComponent("badgeGroup2"),
    content3: makeNodeComponent("content3"),
    message2: makeNodeComponent("message2"),
    heading: makeNodeComponent("heading"),
    supportingText: makeNodeComponent("supportingText"),
    container2: makeNodeComponent("container2"),
    content4: makeNodeComponent("content4"),
    featureText: makeNodeComponent("featureText"),
    featuredIcon: makeNodeComponent("featuredIcon"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text4: makeNodeComponent("text4"),
    supportingText2: makeNodeComponent("supportingText2"),
    featureText2: makeNodeComponent("featureText2"),
    featuredIcon2: makeNodeComponent("featuredIcon2"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text5: makeNodeComponent("text5"),
    supportingText3: makeNodeComponent("supportingText3"),
    featureText3: makeNodeComponent("featureText3"),
    featuredIcon3: makeNodeComponent("featuredIcon3"),
    textAndSupportingText3: makeNodeComponent("textAndSupportingText3"),
    text6: makeNodeComponent("text6"),
    supportingText4: makeNodeComponent("supportingText4"),
    citation: makeNodeComponent("citation"),
    container3: makeNodeComponent("container3"),
    content5: makeNodeComponent("content5"),
    quoteAndAttribution: makeNodeComponent("quoteAndAttribution"),
    quote: makeNodeComponent("quote"),
    avatarAndText: makeNodeComponent("avatarAndText"),
    textAndSupportingText4: makeNodeComponent("textAndSupportingText4"),
    text7: makeNodeComponent("text7"),
    supportingText5: makeNodeComponent("supportingText5"),
    services: makeNodeComponent("services"),
    headingCta2: makeNodeComponent("headingCta2"),
    headingSubheading2: makeNodeComponent("headingSubheading2"),
    headline2: makeNodeComponent("headline2"),
    badgeGroup3: makeNodeComponent("badgeGroup3"),
    content6: makeNodeComponent("content6"),
    message3: makeNodeComponent("message3"),
    container4: makeNodeComponent("container4"),
    content7: makeNodeComponent("content7"),
    description: makeNodeComponent("description"),
    iconAndText: makeNodeComponent("iconAndText"),
    featuredIcon4: makeNodeComponent("featuredIcon4"),
    headingAndSupportingText2: makeNodeComponent("headingAndSupportingText2"),
    heading2: makeNodeComponent("heading2"),
    supportingText6: makeNodeComponent("supportingText6"),
    content8: makeNodeComponent("content8"),
    placeholderImage: makeNodeComponent("placeholderImage"),
    container5: makeNodeComponent("container5"),
    content9: makeNodeComponent("content9"),
    placeholderImage2: makeNodeComponent("placeholderImage2"),
    content10: makeNodeComponent("content10"),
    description2: makeNodeComponent("description2"),
    iconAndText2: makeNodeComponent("iconAndText2"),
    featuredIcon5: makeNodeComponent("featuredIcon5"),
    headingAndSupportingText3: makeNodeComponent("headingAndSupportingText3"),
    heading3: makeNodeComponent("heading3"),
    supportingText7: makeNodeComponent("supportingText7"),
    services2: makeNodeComponent("services2"),
    headingCta3: makeNodeComponent("headingCta3"),
    headingSubheading3: makeNodeComponent("headingSubheading3"),
    headline3: makeNodeComponent("headline3"),
    badgeGroup4: makeNodeComponent("badgeGroup4"),
    content11: makeNodeComponent("content11"),
    message4: makeNodeComponent("message4"),
    container6: makeNodeComponent("container6"),
    content12: makeNodeComponent("content12"),
    pricingTierCard: makeNodeComponent("pricingTierCard"),
    header: makeNodeComponent("header"),
    frame8: makeNodeComponent("frame8"),
    price: makeNodeComponent("price"),
    price2: makeNodeComponent("price2"),
    headingAndSupportingText4: makeNodeComponent("headingAndSupportingText4"),
    supportingText8: makeNodeComponent("supportingText8"),
    content13: makeNodeComponent("content13"),
    checkItems: makeNodeComponent("checkItems"),
    checkItemText: makeNodeComponent("checkItemText"),
    textWrap: makeNodeComponent("textWrap"),
    text8: makeNodeComponent("text8"),
    checkItemText2: makeNodeComponent("checkItemText2"),
    textWrap2: makeNodeComponent("textWrap2"),
    text9: makeNodeComponent("text9"),
    checkItemText3: makeNodeComponent("checkItemText3"),
    textWrap3: makeNodeComponent("textWrap3"),
    text10: makeNodeComponent("text10"),
    pricingTierCard2: makeNodeComponent("pricingTierCard2"),
    header2: makeNodeComponent("header2"),
    frame9: makeNodeComponent("frame9"),
    price3: makeNodeComponent("price3"),
    price4: makeNodeComponent("price4"),
    text11: makeNodeComponent("text11"),
    badgeGroup5: makeNodeComponent("badgeGroup5"),
    content14: makeNodeComponent("content14"),
    message5: makeNodeComponent("message5"),
    headingAndSupportingText5: makeNodeComponent("headingAndSupportingText5"),
    supportingText9: makeNodeComponent("supportingText9"),
    content15: makeNodeComponent("content15"),
    checkItems2: makeNodeComponent("checkItems2"),
    checkItemText4: makeNodeComponent("checkItemText4"),
    textWrap4: makeNodeComponent("textWrap4"),
    text12: makeNodeComponent("text12"),
    checkItemText5: makeNodeComponent("checkItemText5"),
    textWrap5: makeNodeComponent("textWrap5"),
    text13: makeNodeComponent("text13"),
    checkItemText6: makeNodeComponent("checkItemText6"),
    textWrap6: makeNodeComponent("textWrap6"),
    text14: makeNodeComponent("text14"),
    checkItemText7: makeNodeComponent("checkItemText7"),
    textWrap7: makeNodeComponent("textWrap7"),
    text15: makeNodeComponent("text15"),
    checkItemText8: makeNodeComponent("checkItemText8"),
    textWrap8: makeNodeComponent("textWrap8"),
    text16: makeNodeComponent("text16"),
    benefices2: makeNodeComponent("benefices2"),
    container7: makeNodeComponent("container7"),
    content16: makeNodeComponent("content16"),
    headingAndSupportingText6: makeNodeComponent("headingAndSupportingText6"),
    headingAndBadge2: makeNodeComponent("headingAndBadge2"),
    badgeGroup6: makeNodeComponent("badgeGroup6"),
    content17: makeNodeComponent("content17"),
    message6: makeNodeComponent("message6"),
    heading4: makeNodeComponent("heading4"),
    supportingText10: makeNodeComponent("supportingText10"),
    container8: makeNodeComponent("container8"),
    frame10: makeNodeComponent("frame10"),
    headingAndSupportingText7: makeNodeComponent("headingAndSupportingText7"),
    supportingText11: makeNodeComponent("supportingText11"),
    button3: makeNodeComponent("button3"),
    image: makeNodeComponent("image"),
    frame1073713936: makeNodeComponent("frame1073713936"),
    placeholderImage3: makeNodeComponent("placeholderImage3"),
    iPhone16: makeNodeComponent("iPhone16"),
    faq: makeNodeComponent("faq"),
    headingCta4: makeNodeComponent("headingCta4"),
    headingSubheading4: makeNodeComponent("headingSubheading4"),
    headline4: makeNodeComponent("headline4"),
    badgeGroup7: makeNodeComponent("badgeGroup7"),
    content18: makeNodeComponent("content18"),
    message7: makeNodeComponent("message7"),
    accordion: makeNodeComponent("accordion"),
    container9: makeNodeComponent("container9"),
    content19: makeNodeComponent("content19"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    faqBloc: makeNodeComponent("faqBloc"),
    question: makeNodeComponent("question"),
    frame13: makeNodeComponent("frame13"),
    text17: makeNodeComponent("text17"),
    iconWrap: makeNodeComponent("iconWrap"),
    reponse: makeNodeComponent("reponse"),
    supportingText12: makeNodeComponent("supportingText12"),
    faqBloc2: makeNodeComponent("faqBloc2"),
    question2: makeNodeComponent("question2"),
    frame14: makeNodeComponent("frame14"),
    text18: makeNodeComponent("text18"),
    iconWrap2: makeNodeComponent("iconWrap2"),
    faqBloc3: makeNodeComponent("faqBloc3"),
    question3: makeNodeComponent("question3"),
    frame15: makeNodeComponent("frame15"),
    text19: makeNodeComponent("text19"),
    iconWrap3: makeNodeComponent("iconWrap3"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAccueilEmployeur
    internalVariantProps: PlasmicAccueilEmployeur__VariantProps,
    internalArgProps: PlasmicAccueilEmployeur__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Accueil employeur",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccueilEmployeur;
/* prettier-ignore-end */
