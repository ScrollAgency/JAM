/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: o2sDSKJQp4UX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicProgressBar.module.css"; // plasmic-import: o2sDSKJQp4UX/css

createPlasmicElementProxy;

export type PlasmicProgressBar__VariantMembers = {
  step1: "step1";
  step2: "step2";
  step3: "step3";
};
export type PlasmicProgressBar__VariantsArgs = {
  step1?: SingleBooleanChoiceArg<"step1">;
  step2?: SingleBooleanChoiceArg<"step2">;
  step3?: SingleBooleanChoiceArg<"step3">;
};
type VariantPropType = keyof PlasmicProgressBar__VariantsArgs;
export const PlasmicProgressBar__VariantProps = new Array<VariantPropType>(
  "step1",
  "step2",
  "step3"
);

export type PlasmicProgressBar__ArgsType = {};
type ArgPropType = keyof PlasmicProgressBar__ArgsType;
export const PlasmicProgressBar__ArgProps = new Array<ArgPropType>();

export type PlasmicProgressBar__OverridesType = {
  progressBar?: Flex__<"div">;
  bar1?: Flex__<"div">;
  bar2?: Flex__<"div">;
  bar3?: Flex__<"div">;
};

export interface DefaultProgressBarProps {
  step1?: SingleBooleanChoiceArg<"step1">;
  step2?: SingleBooleanChoiceArg<"step2">;
  step3?: SingleBooleanChoiceArg<"step3">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProgressBar__RenderFunc(props: {
  variants: PlasmicProgressBar__VariantsArgs;
  args: PlasmicProgressBar__ArgsType;
  overrides: PlasmicProgressBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "step1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.step1
      },
      {
        path: "step2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.step2
      },
      {
        path: "step3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.step3
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"progressBar"}
      data-plasmic-override={overrides.progressBar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.progressBar,
        {
          [sty.progressBarstep1]: hasVariant($state, "step1", "step1"),
          [sty.progressBarstep2]: hasVariant($state, "step2", "step2"),
          [sty.progressBarstep3]: hasVariant($state, "step3", "step3")
        }
      )}
    >
      <div
        data-plasmic-name={"bar1"}
        data-plasmic-override={overrides.bar1}
        className={classNames(projectcss.all, sty.bar1, {
          [sty.bar1step1]: hasVariant($state, "step1", "step1")
        })}
      />

      <div
        data-plasmic-name={"bar2"}
        data-plasmic-override={overrides.bar2}
        className={classNames(projectcss.all, sty.bar2, {
          [sty.bar2step1]: hasVariant($state, "step1", "step1"),
          [sty.bar2step2]: hasVariant($state, "step2", "step2"),
          [sty.bar2step3]: hasVariant($state, "step3", "step3")
        })}
      />

      <div
        data-plasmic-name={"bar3"}
        data-plasmic-override={overrides.bar3}
        className={classNames(projectcss.all, sty.bar3, {
          [sty.bar3step2]: hasVariant($state, "step2", "step2"),
          [sty.bar3step3]: hasVariant($state, "step3", "step3")
        })}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  progressBar: ["progressBar", "bar1", "bar2", "bar3"],
  bar1: ["bar1"],
  bar2: ["bar2"],
  bar3: ["bar3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  progressBar: "div";
  bar1: "div";
  bar2: "div";
  bar3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProgressBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProgressBar__VariantsArgs;
    args?: PlasmicProgressBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProgressBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProgressBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProgressBar__ArgProps,
          internalVariantPropNames: PlasmicProgressBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProgressBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "progressBar") {
    func.displayName = "PlasmicProgressBar";
  } else {
    func.displayName = `PlasmicProgressBar.${nodeName}`;
  }
  return func;
}

export const PlasmicProgressBar = Object.assign(
  // Top-level PlasmicProgressBar renders the root element
  makeNodeComponent("progressBar"),
  {
    // Helper components rendering sub-elements
    bar1: makeNodeComponent("bar1"),
    bar2: makeNodeComponent("bar2"),
    bar3: makeNodeComponent("bar3"),

    // Metadata about props expected for PlasmicProgressBar
    internalVariantProps: PlasmicProgressBar__VariantProps,
    internalArgProps: PlasmicProgressBar__ArgProps
  }
);

export default PlasmicProgressBar;
/* prettier-ignore-end */
