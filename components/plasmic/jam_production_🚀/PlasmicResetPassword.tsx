/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: n2hOExzm1qoT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { TextInput } from "../../forms/TextInput/TextInput"; // plasmic-import: vyWUomJMQins/codeComponent
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import { ResetPassword } from "../../auth/ResetPassword"; // plasmic-import: Ju3qM8OwHoNT/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicResetPassword.module.css"; // plasmic-import: n2hOExzm1qoT/css

import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicResetPassword__VariantMembers = {};
export type PlasmicResetPassword__VariantsArgs = {};
type VariantPropType = keyof PlasmicResetPassword__VariantsArgs;
export const PlasmicResetPassword__VariantProps = new Array<VariantPropType>();

export type PlasmicResetPassword__ArgsType = {};
type ArgPropType = keyof PlasmicResetPassword__ArgsType;
export const PlasmicResetPassword__ArgProps = new Array<ArgPropType>();

export type PlasmicResetPassword__OverridesType = {
  root?: Flex__<"div">;
  passwordReset?: Flex__<"div">;
  imageWrapper?: Flex__<"div">;
  logoWrapper?: Flex__<"div">;
  svg?: Flex__<"svg">;
  baseline?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  formWrapper?: Flex__<"div">;
  title?: Flex__<"div">;
  heading?: Flex__<"div">;
  form2?: Flex__<typeof FormWrapper>;
  inputWrapper?: Flex__<"div">;
  textInput7?: Flex__<typeof TextInput>;
  progressBar?: Flex__<"div">;
  signedByBaseProgressBarSteppedMediumLabelNone?: Flex__<"div">;
  progress?: Flex__<"div">;
  inProgress?: Flex__<"div">;
  base?: Flex__<"div">;
  base2?: Flex__<"div">;
  base3?: Flex__<"div">;
  base4?: Flex__<"div">;
  base5?: Flex__<"div">;
  base6?: Flex__<"div">;
  text?: Flex__<"div">;
  inputWrapper2?: Flex__<"div">;
  textInput6?: Flex__<typeof TextInput>;
  text5?: Flex__<"div">;
  jamButton?: Flex__<typeof JamButton>;
  resetPassword?: Flex__<typeof ResetPassword>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultResetPasswordProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResetPassword__RenderFunc(props: {
  variants: PlasmicResetPassword__VariantsArgs;
  args: PlasmicResetPassword__ArgsType;
  overrides: PlasmicResetPassword__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "mdp1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mdp2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.pagePath.split("/").pop().replace(/\[|\]/g, "");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "resetPassword.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "resetPassword.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "50501e4e-ae31-4347-b6ef-95306713a2c1",
        userArgs: {
          filters: [$ctx.params.recovery_token]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.50501e4e-ae31-4347-b6ef-95306713a2c1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    newPassword: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "ffd3590c-ad8a-407d-af5b-5f686175e4a9",
        userArgs: {
          query: [$state.mdp1, $state.variable]
        },
        cacheKey: `plasmic.$.ffd3590c-ad8a-407d-af5b-5f686175e4a9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicResetPassword.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicResetPassword.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicResetPassword.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        if ($state.variable === "") {
                          return (window.location = "/login");
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <div
            data-plasmic-name={"passwordReset"}
            data-plasmic-override={overrides.passwordReset}
            className={classNames(projectcss.all, sty.passwordReset)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"imageWrapper"}
              data-plasmic-override={overrides.imageWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.imageWrapper)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"logoWrapper"}
                data-plasmic-override={overrides.logoWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.logoWrapper)}
              >
                <PictogramIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"baseline"}
                  data-plasmic-override={overrides.baseline}
                  className={classNames(projectcss.all, sty.baseline)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t32U
                      )}
                    >
                      {"JOB"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame2"}
                    data-plasmic-override={overrides.frame2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Ju1W
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame3"}
                    data-plasmic-override={overrides.frame3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wHIqF
                      )}
                    >
                      {"ME"}
                    </div>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"formWrapper"}
              data-plasmic-override={overrides.formWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.formWrapper)}
            >
              <div
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(projectcss.all, sty.title)}
              >
                <div
                  data-plasmic-name={"heading"}
                  data-plasmic-override={overrides.heading}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.heading
                  )}
                >
                  {"R\u00e9initialiser le mot de passe"}
                </div>
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form2),
                  extendedOnValuesChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form2", "value"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);

                    (async (changedValues, allValues) => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "SupabaseUserGlobalContext.updateUserPassword"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }).apply(null, eventArgs);
                  },
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: "advanced",
                  onFinish: async values => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $state.mdp2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions[
                            "SupabaseUserGlobalContext.updateUserPassword"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  },
                  onIsSubmittingChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form2", "isSubmitting"],
                      FormWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  ref: ref => {
                    $refs["form2"] = ref;
                  },
                  submitSlot: null,
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form2.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form2.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form2"}
                    data-plasmic-override={overrides.form2}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__xwr3E
                      )}
                      label={null}
                      name={"mdp1"}
                      noLabel={true}
                      rules={[
                        {
                          ruleType: "advanced",
                          message: (() => {
                            try {
                              return "Une erreur est survenue lors du changement de votre adresse e-mail. Veuillez réessayer plus tard ou contacter le support.";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          custom: (rule, value) => {
                            return (
                              $state.mdp1 === $state.mdp2 &&
                              $state.mdp1 !== "" &&
                              $state.mdp2 !== ""
                            );
                          }
                        },

                        {
                          ruleType: "required",
                          message:
                            '"Une erreur est survenue lors du changement de votre adresse e-mail. Veuillez r\u00e9essayer plus tard ou contacter le support."'
                        }
                      ]}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputWrapper"}
                        data-plasmic-override={overrides.inputWrapper}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.inputWrapper)}
                      >
                        <TextInput
                          data-plasmic-name={"textInput7"}
                          data-plasmic-override={overrides.textInput7}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput7
                          )}
                          isMulti={false}
                          label={"Nouveau mot de passe*"}
                          placeholder={"*********"}
                          showIcon={false}
                          showLabel={true}
                          state={"default"}
                          text={""}
                          type={"password"}
                        />
                      </Stack__>
                    </FormItemWrapper>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"progressBar"}
                      data-plasmic-override={overrides.progressBar}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.progressBar)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={
                            "signedByBaseProgressBarSteppedMediumLabelNone"
                          }
                          data-plasmic-override={
                            overrides.signedByBaseProgressBarSteppedMediumLabelNone
                          }
                          className={classNames(
                            projectcss.all,
                            sty.signedByBaseProgressBarSteppedMediumLabelNone
                          )}
                        />
                      ) : null}
                      {false ? (
                        <div
                          data-plasmic-name={"progress"}
                          data-plasmic-override={overrides.progress}
                          className={classNames(projectcss.all, sty.progress)}
                        />
                      ) : null}
                      {false ? (
                        <div
                          data-plasmic-name={"inProgress"}
                          data-plasmic-override={overrides.inProgress}
                          className={classNames(projectcss.all, sty.inProgress)}
                        />
                      ) : null}
                      <div
                        data-plasmic-name={"base"}
                        data-plasmic-override={overrides.base}
                        className={classNames(projectcss.all, sty.base)}
                      />

                      <div
                        data-plasmic-name={"base2"}
                        data-plasmic-override={overrides.base2}
                        className={classNames(projectcss.all, sty.base2)}
                      />

                      <div
                        data-plasmic-name={"base3"}
                        data-plasmic-override={overrides.base3}
                        className={classNames(projectcss.all, sty.base3)}
                      />

                      <div
                        data-plasmic-name={"base4"}
                        data-plasmic-override={overrides.base4}
                        className={classNames(projectcss.all, sty.base4)}
                      />

                      {false ? (
                        <div
                          data-plasmic-name={"base5"}
                          data-plasmic-override={overrides.base5}
                          className={classNames(projectcss.all, sty.base5)}
                        />
                      ) : null}
                      {false ? (
                        <div
                          data-plasmic-name={"base6"}
                          data-plasmic-override={overrides.base6}
                          className={classNames(projectcss.all, sty.base6)}
                        />
                      ) : null}
                    </Stack__>
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {
                        "Utilisez 8 caract\u00e8res ou plus en m\u00e9langeant lettres, chiffres et symboles."
                      }
                    </div>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__o0Nd
                      )}
                      label={null}
                      name={"mdp2"}
                      noLabel={true}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"inputWrapper2"}
                        data-plasmic-override={overrides.inputWrapper2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.inputWrapper2
                        )}
                      >
                        <TextInput
                          data-plasmic-name={"textInput6"}
                          data-plasmic-override={overrides.textInput6}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput6
                          )}
                          isMulti={false}
                          label={"Confirmez le mot de passe*"}
                          placeholder={"*********"}
                          showIcon={false}
                          showLabel={true}
                          state={"default"}
                          text={""}
                          type={"password"}
                        />

                        <div
                          data-plasmic-name={"text5"}
                          data-plasmic-override={overrides.text5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text5
                          )}
                        >
                          {""}
                        </div>
                      </Stack__>
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__pbCs
                      )}
                      label={null}
                      name={"message"}
                      noLabel={true}
                    >
                      <JamButton
                        data-plasmic-name={"jamButton"}
                        data-plasmic-override={overrides.jamButton}
                        className={classNames("__wab_instance", sty.jamButton)}
                        icon={"end"}
                        iconImage={
                          "/plasmic/jam_production_🚀/images/image11.svg"
                        }
                        label={"ENREGISTRER"}
                        onClick={async () => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.form2.isSubmitting = true);
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      />
                    </FormItemWrapper>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rxNho
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (window.location = "/login");
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Retour"}
                        </span>
                      </React.Fragment>
                    </div>
                  </FormWrapper>
                );
              })()}
              <ResetPassword
                data-plasmic-name={"resetPassword"}
                data-plasmic-override={overrides.resetPassword}
                alertPosition={"top"}
                cancelButtonStyle={"tertiary"}
                cancelButtonText={"Annuler"}
                className={classNames("__wab_instance", sty.resetPassword)}
                confirmPassword={generateStateValueProp($state, [
                  "resetPassword",
                  "confirmPassword"
                ])}
                confirmPasswordLabel={"Répétez le mot de passe"}
                confirmPasswordPlaceholder={"Confirmez votre mot de passe"}
                eyeIconColor={"#666"}
                inputStyle={"simple"}
                maxAlerts={3}
                onConfirmPasswordChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "resetPassword",
                    "confirmPassword"
                  ]).apply(null, eventArgs);
                }}
                onPasswordChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "resetPassword",
                    "password"
                  ]).apply(null, eventArgs);
                }}
                onSubmit={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $state.resetPassword.confirmPassword;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions[
                          "SupabaseUserGlobalContext.updateUserPassword"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
                password={generateStateValueProp($state, [
                  "resetPassword",
                  "password"
                ])}
                passwordLabel={"Nouveau mot de passe"}
                passwordPlaceholder={"Entrez votre nouveau mot de passe"}
                passwordStrength={true}
                resetSuccessMessage={
                  "Votre mot de passe a été réinitialisé avec succès!"
                }
                showAlerts={true}
                showCancelButton={true}
                showPasswordToggle={true}
                showSubmitButton={true}
                submitButtonIcon={
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/jam_production_🚀/images/image18.svg",
                      fullWidth: 34,
                      fullHeight: 33,
                      aspectRatio: undefined
                    }}
                  />
                }
                submitButtonIconPosition={"right"}
                submitButtonStyle={"primary"}
                submitButtonText={"R\u00c9INITIALISER"}
                submitButtonTextColor={"#000"}
                title={"Réinitialiser le mot de passe"}
                titleHeading={"h1"}
                wrapperStyle={"card"}
              />
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "passwordReset",
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "title",
    "heading",
    "form2",
    "inputWrapper",
    "textInput7",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6",
    "text",
    "inputWrapper2",
    "textInput6",
    "text5",
    "jamButton",
    "resetPassword",
    "img"
  ],
  passwordReset: [
    "passwordReset",
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "title",
    "heading",
    "form2",
    "inputWrapper",
    "textInput7",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6",
    "text",
    "inputWrapper2",
    "textInput6",
    "text5",
    "jamButton",
    "resetPassword",
    "img"
  ],
  imageWrapper: [
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3"
  ],
  logoWrapper: ["logoWrapper", "svg", "baseline", "frame", "frame2", "frame3"],
  svg: ["svg"],
  baseline: ["baseline", "frame", "frame2", "frame3"],
  frame: ["frame"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  formWrapper: [
    "formWrapper",
    "title",
    "heading",
    "form2",
    "inputWrapper",
    "textInput7",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6",
    "text",
    "inputWrapper2",
    "textInput6",
    "text5",
    "jamButton",
    "resetPassword",
    "img"
  ],
  title: ["title", "heading"],
  heading: ["heading"],
  form2: [
    "form2",
    "inputWrapper",
    "textInput7",
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6",
    "text",
    "inputWrapper2",
    "textInput6",
    "text5",
    "jamButton"
  ],
  inputWrapper: ["inputWrapper", "textInput7"],
  textInput7: ["textInput7"],
  progressBar: [
    "progressBar",
    "signedByBaseProgressBarSteppedMediumLabelNone",
    "progress",
    "inProgress",
    "base",
    "base2",
    "base3",
    "base4",
    "base5",
    "base6"
  ],
  signedByBaseProgressBarSteppedMediumLabelNone: [
    "signedByBaseProgressBarSteppedMediumLabelNone"
  ],
  progress: ["progress"],
  inProgress: ["inProgress"],
  base: ["base"],
  base2: ["base2"],
  base3: ["base3"],
  base4: ["base4"],
  base5: ["base5"],
  base6: ["base6"],
  text: ["text"],
  inputWrapper2: ["inputWrapper2", "textInput6", "text5"],
  textInput6: ["textInput6"],
  text5: ["text5"],
  jamButton: ["jamButton"],
  resetPassword: ["resetPassword", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  passwordReset: "div";
  imageWrapper: "div";
  logoWrapper: "div";
  svg: "svg";
  baseline: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  formWrapper: "div";
  title: "div";
  heading: "div";
  form2: typeof FormWrapper;
  inputWrapper: "div";
  textInput7: typeof TextInput;
  progressBar: "div";
  signedByBaseProgressBarSteppedMediumLabelNone: "div";
  progress: "div";
  inProgress: "div";
  base: "div";
  base2: "div";
  base3: "div";
  base4: "div";
  base5: "div";
  base6: "div";
  text: "div";
  inputWrapper2: "div";
  textInput6: typeof TextInput;
  text5: "div";
  jamButton: typeof JamButton;
  resetPassword: typeof ResetPassword;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResetPassword__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResetPassword__VariantsArgs;
    args?: PlasmicResetPassword__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResetPassword__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicResetPassword__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResetPassword__ArgProps,
          internalVariantPropNames: PlasmicResetPassword__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResetPassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResetPassword";
  } else {
    func.displayName = `PlasmicResetPassword.${nodeName}`;
  }
  return func;
}

export const PlasmicResetPassword = Object.assign(
  // Top-level PlasmicResetPassword renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    passwordReset: makeNodeComponent("passwordReset"),
    imageWrapper: makeNodeComponent("imageWrapper"),
    logoWrapper: makeNodeComponent("logoWrapper"),
    svg: makeNodeComponent("svg"),
    baseline: makeNodeComponent("baseline"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    formWrapper: makeNodeComponent("formWrapper"),
    title: makeNodeComponent("title"),
    heading: makeNodeComponent("heading"),
    form2: makeNodeComponent("form2"),
    inputWrapper: makeNodeComponent("inputWrapper"),
    textInput7: makeNodeComponent("textInput7"),
    progressBar: makeNodeComponent("progressBar"),
    signedByBaseProgressBarSteppedMediumLabelNone: makeNodeComponent(
      "signedByBaseProgressBarSteppedMediumLabelNone"
    ),
    progress: makeNodeComponent("progress"),
    inProgress: makeNodeComponent("inProgress"),
    base: makeNodeComponent("base"),
    base2: makeNodeComponent("base2"),
    base3: makeNodeComponent("base3"),
    base4: makeNodeComponent("base4"),
    base5: makeNodeComponent("base5"),
    base6: makeNodeComponent("base6"),
    text: makeNodeComponent("text"),
    inputWrapper2: makeNodeComponent("inputWrapper2"),
    textInput6: makeNodeComponent("textInput6"),
    text5: makeNodeComponent("text5"),
    jamButton: makeNodeComponent("jamButton"),
    resetPassword: makeNodeComponent("resetPassword"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicResetPassword
    internalVariantProps: PlasmicResetPassword__VariantProps,
    internalArgProps: PlasmicResetPassword__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Reset password",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResetPassword;
/* prettier-ignore-end */
