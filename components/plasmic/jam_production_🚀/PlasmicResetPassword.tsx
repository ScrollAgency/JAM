/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: n2hOExzm1qoT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ResetPassword } from "../../../plasmic-library/authentication/ResetPassword"; // plasmic-import: Ju3qM8OwHoNT/codeComponent

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicResetPassword.module.css"; // plasmic-import: n2hOExzm1qoT/css

import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicResetPassword__VariantMembers = {};
export type PlasmicResetPassword__VariantsArgs = {};
type VariantPropType = keyof PlasmicResetPassword__VariantsArgs;
export const PlasmicResetPassword__VariantProps = new Array<VariantPropType>();

export type PlasmicResetPassword__ArgsType = {};
type ArgPropType = keyof PlasmicResetPassword__ArgsType;
export const PlasmicResetPassword__ArgProps = new Array<ArgPropType>();

export type PlasmicResetPassword__OverridesType = {
  root?: Flex__<"div">;
  passwordReset?: Flex__<"div">;
  imageWrapper?: Flex__<"div">;
  logoWrapper?: Flex__<"div">;
  svg?: Flex__<"svg">;
  baseline?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  formWrapper?: Flex__<"div">;
  resetPassword?: Flex__<typeof ResetPassword>;
};

export interface DefaultResetPasswordProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResetPassword__RenderFunc(props: {
  variants: PlasmicResetPassword__VariantsArgs;
  args: PlasmicResetPassword__ArgsType;
  overrides: PlasmicResetPassword__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.pagePath.split("/").pop().replace(/\[|\]/g, "");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "resetPassword.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "resetPassword.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicResetPassword.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicResetPassword.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicResetPassword.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        if ($state.variable === "") {
                          return (window.location = "/login");
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <div
            data-plasmic-name={"passwordReset"}
            data-plasmic-override={overrides.passwordReset}
            className={classNames(projectcss.all, sty.passwordReset)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"imageWrapper"}
              data-plasmic-override={overrides.imageWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.imageWrapper)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"logoWrapper"}
                data-plasmic-override={overrides.logoWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.logoWrapper)}
              >
                <PictogramIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"baseline"}
                  data-plasmic-override={overrides.baseline}
                  className={classNames(projectcss.all, sty.baseline)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame"}
                    data-plasmic-override={overrides.frame}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t32U
                      )}
                    >
                      {"JOB"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame2"}
                    data-plasmic-override={overrides.frame2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Ju1W
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame3"}
                    data-plasmic-override={overrides.frame3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wHIqF
                      )}
                    >
                      {"ME"}
                    </div>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"formWrapper"}
              data-plasmic-override={overrides.formWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.formWrapper)}
            >
              <ResetPassword
                data-plasmic-name={"resetPassword"}
                data-plasmic-override={overrides.resetPassword}
                alertPosition={"top"}
                cancelButtonStyle={"tertiary"}
                cancelButtonText={"Annuler"}
                className={classNames("__wab_instance", sty.resetPassword)}
                confirmPassword={generateStateValueProp($state, [
                  "resetPassword",
                  "confirmPassword"
                ])}
                confirmPasswordLabel={"Répétez le mot de passe*"}
                confirmPasswordPlaceholder={"Confirmez votre mot de passe"}
                eyeIconColor={"#666"}
                inputStyle={"simple"}
                maxAlerts={3}
                onAlertClose={async id => {
                  const $steps = {};
                }}
                onConfirmPasswordChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "resetPassword",
                    "confirmPassword"
                  ]).apply(null, eventArgs);

                  (async event => {
                    const $steps = {};

                    $steps["updateResetPasswordConfirmPassword"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["resetPassword", "confirmPassword"]
                            },
                            operation: 0,
                            value: $state.resetPassword.confirmPassword
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateResetPasswordConfirmPassword"] != null &&
                      typeof $steps["updateResetPasswordConfirmPassword"] ===
                        "object" &&
                      typeof $steps["updateResetPasswordConfirmPassword"]
                        .then === "function"
                    ) {
                      $steps["updateResetPasswordConfirmPassword"] =
                        await $steps["updateResetPasswordConfirmPassword"];
                    }
                  }).apply(null, eventArgs);
                }}
                onPasswordChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "resetPassword",
                    "password"
                  ]).apply(null, eventArgs);

                  (async event => {
                    const $steps = {};

                    $steps["updateResetPasswordPassword"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["resetPassword", "password"]
                            },
                            operation: 0,
                            value: $state.resetPassword.password
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateResetPasswordPassword"] != null &&
                      typeof $steps["updateResetPasswordPassword"] ===
                        "object" &&
                      typeof $steps["updateResetPasswordPassword"].then ===
                        "function"
                    ) {
                      $steps["updateResetPasswordPassword"] = await $steps[
                        "updateResetPasswordPassword"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                onSubmit={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $state.resetPassword.password;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions[
                          "SupabaseUserGlobalContext.updateUserPassword"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["goToConnexion"] = false
                    ? (() => {
                        const actionArgs = { destination: `/login` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToConnexion"] != null &&
                    typeof $steps["goToConnexion"] === "object" &&
                    typeof $steps["goToConnexion"].then === "function"
                  ) {
                    $steps["goToConnexion"] = await $steps["goToConnexion"];
                  }
                }}
                password={generateStateValueProp($state, [
                  "resetPassword",
                  "password"
                ])}
                passwordLabel={"Nouveau mot de passe*"}
                passwordPlaceholder={"Entrez votre nouveau mot de passe"}
                resetSuccessMessage={
                  "Votre mot de passe a été réinitialisé avec succès!"
                }
                showAlerts={true}
                showPasswordStrength={true}
                showPasswordToggle={true}
                submitButtonStyle={"primary"}
                submitButtonText={"R\u00c9INITIALISER"}
                title={"Réinitialiser le mot de passe"}
                titleHeading={"h1"}
                wrapperStyle={"card"}
              />
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "passwordReset",
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "resetPassword"
  ],
  passwordReset: [
    "passwordReset",
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "resetPassword"
  ],
  imageWrapper: [
    "imageWrapper",
    "logoWrapper",
    "svg",
    "baseline",
    "frame",
    "frame2",
    "frame3"
  ],
  logoWrapper: ["logoWrapper", "svg", "baseline", "frame", "frame2", "frame3"],
  svg: ["svg"],
  baseline: ["baseline", "frame", "frame2", "frame3"],
  frame: ["frame"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  formWrapper: ["formWrapper", "resetPassword"],
  resetPassword: ["resetPassword"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  passwordReset: "div";
  imageWrapper: "div";
  logoWrapper: "div";
  svg: "svg";
  baseline: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  formWrapper: "div";
  resetPassword: typeof ResetPassword;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResetPassword__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResetPassword__VariantsArgs;
    args?: PlasmicResetPassword__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResetPassword__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicResetPassword__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResetPassword__ArgProps,
          internalVariantPropNames: PlasmicResetPassword__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResetPassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResetPassword";
  } else {
    func.displayName = `PlasmicResetPassword.${nodeName}`;
  }
  return func;
}

export const PlasmicResetPassword = Object.assign(
  // Top-level PlasmicResetPassword renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    passwordReset: makeNodeComponent("passwordReset"),
    imageWrapper: makeNodeComponent("imageWrapper"),
    logoWrapper: makeNodeComponent("logoWrapper"),
    svg: makeNodeComponent("svg"),
    baseline: makeNodeComponent("baseline"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    formWrapper: makeNodeComponent("formWrapper"),
    resetPassword: makeNodeComponent("resetPassword"),

    // Metadata about props expected for PlasmicResetPassword
    internalVariantProps: PlasmicResetPassword__VariantProps,
    internalArgProps: PlasmicResetPassword__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Reset password",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResetPassword;
/* prettier-ignore-end */
