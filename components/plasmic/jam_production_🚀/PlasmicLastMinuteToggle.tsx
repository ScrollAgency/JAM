/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: Porp6y76-dWy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Tooltip from "../../Tooltip"; // plasmic-import: rW3ePQ0MTGnf/component
import Switch2 from "../../Switch2"; // plasmic-import: sRIc2uNHyI8c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicLastMinuteToggle.module.css"; // plasmic-import: Porp6y76-dWy/css

import Vector24Icon from "./icons/PlasmicIcon__Vector24"; // plasmic-import: gE3R4PbFS3wL/icon
import ClockCountdownIcon from "./icons/PlasmicIcon__ClockCountdown"; // plasmic-import: SFl8xy9PdAWQ/icon

createPlasmicElementProxy;

export type PlasmicLastMinuteToggle__VariantMembers = {};
export type PlasmicLastMinuteToggle__VariantsArgs = {};
type VariantPropType = keyof PlasmicLastMinuteToggle__VariantsArgs;
export const PlasmicLastMinuteToggle__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLastMinuteToggle__ArgsType = {
  switch2IsSelected?: boolean;
  onSwitch2IsSelectedChange?: (val: boolean) => void;
  isDisabled?: boolean;
  onIsDisabledChange?: (val: string) => void;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicLastMinuteToggle__ArgsType;
export const PlasmicLastMinuteToggle__ArgProps = new Array<ArgPropType>(
  "switch2IsSelected",
  "onSwitch2IsSelectedChange",
  "isDisabled",
  "onIsDisabledChange",
  "onClick"
);

export type PlasmicLastMinuteToggle__OverridesType = {
  lastMinuteToggle?: Flex__<"div">;
  tooltip?: Flex__<typeof Tooltip>;
  freeBox?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  switch2?: Flex__<typeof Switch2>;
  textAndSupportingText?: Flex__<"div">;
  text?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  text2?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
};

export interface DefaultLastMinuteToggleProps {
  switch2IsSelected?: boolean;
  onSwitch2IsSelectedChange?: (val: boolean) => void;
  isDisabled?: boolean;
  onIsDisabledChange?: (val: string) => void;
  onClick?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLastMinuteToggle__RenderFunc(props: {
  variants: PlasmicLastMinuteToggle__VariantsArgs;
  args: PlasmicLastMinuteToggle__ArgsType;
  overrides: PlasmicLastMinuteToggle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "switch2.isSelected",
        type: "writable",
        variableType: "boolean",

        valueProp: "switch2IsSelected",
        onChangeProp: "onSwitch2IsSelectedChange"
      },
      {
        path: "isDisabled",
        type: "writable",
        variableType: "boolean",

        valueProp: "isDisabled",
        onChangeProp: "onIsDisabledChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"lastMinuteToggle"}
      data-plasmic-override={overrides.lastMinuteToggle}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.lastMinuteToggle,
        ``
      )}
      onClick={args.onClick}
    >
      <Tooltip
        data-plasmic-name={"tooltip"}
        data-plasmic-override={overrides.tooltip}
        className={classNames("__wab_instance", sty.tooltip)}
        content={
          <React.Fragment>
            {(() => {
              try {
                return !$state.isDisabled;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"textAndSupportingText"}
                data-plasmic-override={overrides.textAndSupportingText}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.textAndSupportingText
                )}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Vous souhaitez une disponibilit\u00e9 imm\u00e9diate."}
                </div>
                <div
                  data-plasmic-name={"supportingText"}
                  data-plasmic-override={overrides.supportingText}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.supportingText
                  )}
                >
                  {
                    "Peut-\u00eatre voulez-vous \u00e9galement utiliser la fonctionnalit\u00e9 Last Minute pour attirer l\u2019attention des candidats en recherche active ? Si vous choisissez cette option, 1 cr\u00e9dit Last Minute sera consomm\u00e9.\n"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ryVx
                  )}
                >
                  {"Actuellement il vous reste 1/4 Last Minute ce mois-ci."}
                </div>
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $state.isDisabled;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"textAndSupportingText2"}
                data-plasmic-override={overrides.textAndSupportingText2}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.textAndSupportingText2
                )}
              >
                <div
                  data-plasmic-name={"text2"}
                  data-plasmic-override={overrides.text2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text2
                  )}
                >
                  {"Vous n\u2019avez plus de cr\u00e9dit Last Minute."}
                </div>
                <div
                  data-plasmic-name={"supportingText2"}
                  data-plasmic-override={overrides.supportingText2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.supportingText2
                  )}
                >
                  {
                    "Chaque mois, votre compte est recharg\u00e9 de 4 cr\u00e9dits Last Minute. Vous pouvez \u00e9galement acheter des cr\u00e9dits suppl\u00e9mentaires dans Abonnements."
                  }
                </div>
              </Stack__>
            ) : null}
          </React.Fragment>
        }
        trigger={
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {(() => {
              try {
                return (
                  $state.switch2.isSelected &&
                  ($state.isDisabled || !$state.isDisabled)
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"17px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"17px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/jam_production_🚀/images/vector23.svg",
                  fullWidth: 17,
                  fullHeight: 17,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {(() => {
              try {
                return $state.isDisabled && !$state.switch2.isSelected;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Vector24Icon
                className={classNames(projectcss.all, sty.svg___6G6Sw)}
                role={"img"}
              />
            ) : null}
            {(() => {
              try {
                return !$state.switch2.isSelected && !$state.isDisabled;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <ClockCountdownIcon
                className={classNames(projectcss.all, sty.svg__lhe24)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qjpnd,
                (() => {
                  try {
                    return (() => {
                      if ($state.isDisabled && $state.switch2.isSelected) {
                        return "zero-charge last-minute";
                      } else if ($state.switch2 && $state.switch2.isSelected) {
                        return "last-minute";
                      } else if ($state.isDisabled) {
                        return "zero-charge";
                      } else {
                        return "charge";
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            >
              {"LAST MINUTE"}
            </div>
            <Switch2
              data-plasmic-name={"switch2"}
              data-plasmic-override={overrides.switch2}
              className={classNames("__wab_instance", sty.switch2)}
              disabled={(() => {
                try {
                  return $state.isDisabled;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              isSelected={generateStateValueProp($state, [
                "switch2",
                "isSelected"
              ])}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "switch2",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showLabel={false}
            />
          </Stack__>
        }
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  lastMinuteToggle: [
    "lastMinuteToggle",
    "tooltip",
    "freeBox",
    "img",
    "switch2",
    "textAndSupportingText",
    "text",
    "supportingText",
    "textAndSupportingText2",
    "text2",
    "supportingText2"
  ],
  tooltip: [
    "tooltip",
    "freeBox",
    "img",
    "switch2",
    "textAndSupportingText",
    "text",
    "supportingText",
    "textAndSupportingText2",
    "text2",
    "supportingText2"
  ],
  freeBox: ["freeBox", "img", "switch2"],
  img: ["img"],
  switch2: ["switch2"],
  textAndSupportingText: ["textAndSupportingText", "text", "supportingText"],
  text: ["text"],
  supportingText: ["supportingText"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text2",
    "supportingText2"
  ],
  text2: ["text2"],
  supportingText2: ["supportingText2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  lastMinuteToggle: "div";
  tooltip: typeof Tooltip;
  freeBox: "div";
  img: typeof PlasmicImg__;
  switch2: typeof Switch2;
  textAndSupportingText: "div";
  text: "div";
  supportingText: "div";
  textAndSupportingText2: "div";
  text2: "div";
  supportingText2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLastMinuteToggle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLastMinuteToggle__VariantsArgs;
    args?: PlasmicLastMinuteToggle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLastMinuteToggle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLastMinuteToggle__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLastMinuteToggle__ArgProps,
          internalVariantPropNames: PlasmicLastMinuteToggle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLastMinuteToggle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "lastMinuteToggle") {
    func.displayName = "PlasmicLastMinuteToggle";
  } else {
    func.displayName = `PlasmicLastMinuteToggle.${nodeName}`;
  }
  return func;
}

export const PlasmicLastMinuteToggle = Object.assign(
  // Top-level PlasmicLastMinuteToggle renders the root element
  makeNodeComponent("lastMinuteToggle"),
  {
    // Helper components rendering sub-elements
    tooltip: makeNodeComponent("tooltip"),
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),
    switch2: makeNodeComponent("switch2"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text: makeNodeComponent("text"),
    supportingText: makeNodeComponent("supportingText"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text2: makeNodeComponent("text2"),
    supportingText2: makeNodeComponent("supportingText2"),

    // Metadata about props expected for PlasmicLastMinuteToggle
    internalVariantProps: PlasmicLastMinuteToggle__VariantProps,
    internalArgProps: PlasmicLastMinuteToggle__ArgProps
  }
);

export default PlasmicLastMinuteToggle;
/* prettier-ignore-end */
