/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: 9ezuHS1vIH9P

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { PageLoader } from "../../others/PageLoader/PageLoader"; // plasmic-import: FHDrnDhA4DZe/codeComponent
import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import LoadingComponent from "../../LoadingComponent"; // plasmic-import: H7nb8l13ZEyx/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { PhoneSelector } from "../../forms/PhoneSelector/PhoneSelector"; // plasmic-import: sOyePdANTQ6t/codeComponent
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import DeleteAccount2 from "../../DeleteAccount2"; // plasmic-import: Aiz3LwUBdbOf/component
import { ResetPassword } from "../../../plasmic-library/authentication/ResetPassword"; // plasmic-import: Ju3qM8OwHoNT/codeComponent
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: nVAUbPc6gpoz/component
import Select from "../../Select"; // plasmic-import: ZMB-SB-xJDyQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: plmAgyhhAdMc/component
import MobileNavbarBottom from "../../MobileNavbarBottom"; // plasmic-import: BIS-N7QZzUVV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicParametresEmployeur.module.css"; // plasmic-import: 9ezuHS1vIH9P/css

import Loader4FillSvgrepoComSvgIcon from "./icons/PlasmicIcon__Loader4FillSvgrepoComSvg"; // plasmic-import: pSQ8_3_KJpQd/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import SolarLogoutOutlineIcon from "./icons/PlasmicIcon__SolarLogoutOutline"; // plasmic-import: UZfkN-2mqbQ1/icon

createPlasmicElementProxy;

export type PlasmicParametresEmployeur__VariantMembers = {};
export type PlasmicParametresEmployeur__VariantsArgs = {};
type VariantPropType = keyof PlasmicParametresEmployeur__VariantsArgs;
export const PlasmicParametresEmployeur__VariantProps =
  new Array<VariantPropType>();

export type PlasmicParametresEmployeur__ArgsType = {};
type ArgPropType = keyof PlasmicParametresEmployeur__ArgsType;
export const PlasmicParametresEmployeur__ArgProps = new Array<ArgPropType>();

export type PlasmicParametresEmployeur__OverridesType = {
  parametresEmployeur?: Flex__<"div">;
  updateFirstGoogleConnection?: Flex__<typeof PageLoader>;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  sidebar?: Flex__<typeof Sidebar>;
  loadingComponent?: Flex__<typeof LoadingComponent>;
  main?: Flex__<"div">;
  heading?: Flex__<"div">;
  card4?: Flex__<"div">;
  formulaire2?: Flex__<typeof FormWrapper>;
  firstName?: Flex__<typeof TextInput>;
  lastName?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  telephone?: Flex__<"div">;
  phoneSelector?: Flex__<typeof PhoneSelector>;
  textInput7?: Flex__<typeof TextInput>;
  deleteAccount2?: Flex__<typeof DeleteAccount2>;
  card3?: Flex__<"div">;
  resetPassword?: Flex__<typeof ResetPassword>;
  informationsPersonnelles?: Flex__<"div">;
  frame1437254343?: Flex__<"div">;
  upload2?: Flex__<typeof UploadWrapper>;
  img?: Flex__<typeof PlasmicImg__>;
  editIcon?: Flex__<"div">;
  frame7?: Flex__<"div">;
  deleteIcon?: Flex__<"div">;
  frame8?: Flex__<"div">;
  formulaire?: Flex__<typeof FormWrapper>;
  textInput5?: Flex__<typeof TextInput>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  rue?: Flex__<typeof TextInput>;
  codePosteVille?: Flex__<"div">;
  codePostal?: Flex__<typeof TextInput>;
  ville?: Flex__<typeof TextInput>;
  select6?: Flex__<typeof Select>;
  textInput6?: Flex__<typeof TextInput>;
  select?: Flex__<typeof Select>;
  select2?: Flex__<typeof Select>;
  textInput4?: Flex__<typeof TextInput>;
  expandTab?: Flex__<"div">;
  mobileNavbarBottom?: Flex__<typeof MobileNavbarBottom>;
};

export interface DefaultParametresEmployeurProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicParametresEmployeur__RenderFunc(props: {
  variants: PlasmicParametresEmployeur__VariantsArgs;
  args: PlasmicParametresEmployeur__ArgsType;
  overrides: PlasmicParametresEmployeur__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "resetPassword.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "resetPassword.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "formulaire.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formulaire",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formulaire.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formulaire",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "rue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formulaire2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formulaire2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formulaire2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formulaire2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "firstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lastName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sidebar.disableLinks",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "sidebar.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "employer"
      },
      {
        path: "countries",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "Afghanistan",
          "Afrique du Sud",
          "Albanie",
          "Alg\u00e9rie",
          "Allemagne",
          "Andorre",
          "Angola",
          "Antigua-et-Barbuda",
          "Arabie saoudite",
          "Argentine",
          "Arm\u00e9nie",
          "Australie",
          "Autriche",
          "Azerba\u00efdjan",
          "Bahamas",
          "Bahre\u00efn",
          "Bangladesh",
          "Barbade",
          "Belgique",
          "Belize",
          "B\u00e9nin",
          "Bhoutan",
          "Bi\u00e9lorussie",
          "Birmanie (Myanmar)",
          "Bolivie",
          "Bosnie-Herz\u00e9govine",
          "Botswana",
          "Br\u00e9sil",
          "Brunei",
          "Bulgarie",
          "Burkina Faso",
          "Burundi",
          "Cambodge",
          "Cameroun",
          "Canada",
          "Cap-Vert",
          "Centrafrique (R\u00e9publique)",
          "Chili",
          "Chine",
          "Chypre",
          "Colombie",
          "Comores",
          "Congo (R\u00e9publique d\u00e9mocratique du)",
          "Congo (R\u00e9publique du)",
          "Cor\u00e9e du Nord",
          "Cor\u00e9e du Sud",
          "Costa Rica",
          "C\u00f4te d'Ivoire",
          "Croatie",
          "Cuba",
          "Danemark",
          "Djibouti",
          "Dominique",
          "\u00c9gypte",
          "\u00c9mirats arabes unis",
          "\u00c9quateur",
          "\u00c9rythr\u00e9e",
          "Espagne",
          "Estonie",
          "Eswatini",
          "\u00c9tats-Unis",
          "\u00c9thiopie",
          "Fidji",
          "Finlande",
          "France",
          "Gabon",
          "Gambie",
          "G\u00e9orgie",
          "Ghana",
          "Gr\u00e8ce",
          "Grenade",
          "Guatemala",
          "Guin\u00e9e",
          "Guin\u00e9e-Bissau",
          "Guin\u00e9e \u00e9quatoriale",
          "Guyana",
          "Ha\u00efti",
          "Honduras",
          "Hongrie",
          "\u00celes Marshall",
          "\u00celes Salomon",
          "Inde",
          "Indon\u00e9sie",
          "Irak",
          "Iran",
          "Irlande",
          "Islande",
          "Isra\u00ebl",
          "Italie",
          "Jama\u00efque",
          "Japon",
          "Jordanie",
          "Kazakhstan",
          "Kenya",
          "Kirghizistan",
          "Kiribati",
          "Kosovo",
          "Kowe\u00eft",
          "Laos",
          "Lesotho",
          "Lettonie",
          "Liban",
          "Liberia",
          "Libye",
          "Liechtenstein",
          "Lituanie",
          "Luxembourg",
          "Mac\u00e9doine du Nord",
          "Madagascar",
          "Malaisie",
          "Malawi",
          "Maldives",
          "Mali",
          "Malte",
          "Maroc",
          "Maurice",
          "Mauritanie",
          "Mexique",
          "Micron\u00e9sie",
          "Moldavie",
          "Monaco",
          "Mongolie",
          "Mont\u00e9n\u00e9gro",
          "Mozambique",
          "Namibie",
          "Nauru",
          "N\u00e9pal",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Norv\u00e8ge",
          "Nouvelle-Z\u00e9lande",
          "Oman",
          "Ouganda",
          "Ouzb\u00e9kistan",
          "Pakistan",
          "Palaos",
          "Palestine",
          "Panama",
          "Papouasie-Nouvelle-Guin\u00e9e",
          "Paraguay",
          "Pays-Bas",
          "P\u00e9rou",
          "Philippines",
          "Pologne",
          "Portugal",
          "Qatar",
          "R\u00e9publique dominicaine",
          "R\u00e9publique tch\u00e8que",
          "Roumanie",
          "Royaume-Uni",
          "Russie",
          "Rwanda",
          "Saint-Christophe-et-Ni\u00e9v\u00e8s",
          "Sainte-Lucie",
          "Saint-Marin",
          "Saint-Vincent-et-les-Grenadines",
          "Salvador",
          "Samoa",
          "Sao Tom\u00e9-et-Principe",
          "S\u00e9n\u00e9gal",
          "Serbie",
          "Seychelles",
          "Sierra Leone",
          "Singapour",
          "Slovaquie",
          "Slov\u00e9nie",
          "Somalie",
          "Soudan",
          "Soudan du Sud",
          "Sri Lanka",
          "Su\u00e8de",
          "Suisse",
          "Suriname",
          "Syrie",
          "Tadjikistan",
          "Ta\u00efwan",
          "Tanzanie",
          "Tchad",
          "Tha\u00eflande",
          "Timor oriental",
          "Togo",
          "Tonga",
          "Trinit\u00e9-et-Tobago",
          "Tunisie",
          "Turkm\u00e9nistan",
          "Turquie",
          "Tuvalu",
          "Ukraine",
          "Uruguay",
          "Vanuatu",
          "Vatican",
          "Venezuela",
          "Vi\u00eat Nam",
          "Y\u00e9men",
          "Zambie",
          "Zimbabwe"
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCriteria: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "3c8bdc4e-677f-4634-aaef-8a13e1973a95",
        userArgs: {},
        cacheKey: `plasmic.$.3c8bdc4e-677f-4634-aaef-8a13e1973a95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramGetCompanyById: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "a0f345b5-bbed-4347-80ba-1896e0ae6a8a",
        userArgs: {
          filters: [$ctx.SupabaseUser.user?.id]
        },
        cacheKey: `plasmic.$.a0f345b5-bbed-4347-80ba-1896e0ae6a8a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramEmpGetPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "c1aa4a8a-4072-41ae-bd85-9a0ae0f16d97",
        userArgs: {
          path: [
            $queries.paramEmpGetUser?.data[0]?.id +
              "/" +
              $queries.paramEmpGetUser?.data[0]?.profile_photo
          ]
        },
        cacheKey: `plasmic.$.c1aa4a8a-4072-41ae-bd85-9a0ae0f16d97.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramEmpGetUser: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "c97d2f24-3d9a-4bf9-8107-193ee0e13062",
        userArgs: {
          filters: [$ctx.SupabaseUser.user?.id]
        },
        cacheKey: `plasmic.$.c97d2f24-3d9a-4bf9-8107-193ee0e13062.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicParametresEmployeur.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicParametresEmployeur.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicParametresEmployeur.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"parametresEmployeur"}
          data-plasmic-override={overrides.parametresEmployeur}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.parametresEmployeur
          )}
        >
          <PageLoader
            data-plasmic-name={"updateFirstGoogleConnection"}
            data-plasmic-override={overrides.updateFirstGoogleConnection}
            className={classNames(
              "__wab_instance",
              sty.updateFirstGoogleConnection
            )}
            onMount={async () => {
              const $steps = {};

              $steps["refreshData"] = true
                ? (() => {
                    const actionArgs = {
                      queryInvalidation: [
                        "9c25c922-f186-4ed9-850f-6ded6b307e4e"
                      ]
                    };
                    return (async ({ queryInvalidation }) => {
                      if (!queryInvalidation) {
                        return;
                      }
                      await plasmicInvalidate(queryInvalidation);
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["refreshData"] != null &&
                typeof $steps["refreshData"] === "object" &&
                typeof $steps["refreshData"].then === "function"
              ) {
                $steps["refreshData"] = await $steps["refreshData"];
              }

              $steps["updateFromGoogle"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                        opId: "e0315555-ad20-46a4-8822-28eea310b98c",
                        userArgs: {
                          conditions: [$ctx.SupabaseUser.user?.id],

                          variables: [
                            $ctx.SupabaseUser.user?.user_metadata?.name?.split(
                              " "
                            )[0],

                            $ctx.SupabaseUser.user?.user_metadata?.name?.split(
                              " "
                            )[1],

                            $ctx.SupabaseUser.user?.user_metadata?.role
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFromGoogle"] != null &&
                typeof $steps["updateFromGoogle"] === "object" &&
                typeof $steps["updateFromGoogle"].then === "function"
              ) {
                $steps["updateFromGoogle"] = await $steps["updateFromGoogle"];
              }
            }}
            shouldRun={(() => {
              try {
                return (() => {
                  const googleName =
                    $ctx.SupabaseUser.user?.user_metadata?.name ?? null;
                  return (
                    $queries.paramEmpGetUser.data[0].first_name === null &&
                    $queries.paramEmpGetUser.data[0].last_name === null &&
                    googleName !== null
                  );
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
          />

          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
            disableLinks={generateStateValueProp($state, [
              "sidebar",
              "disableLinks"
            ])}
            onDisableLinksChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebar",
                "disableLinks"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sidebar", "role"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, ["sidebar", "role"])}
          />

          <LoadingBoundary
            loadingState={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dkUo9)}
                  >
                    <LoadingComponent
                      data-plasmic-name={"loadingComponent"}
                      data-plasmic-override={overrides.loadingComponent}
                      className={classNames(
                        "__wab_instance",
                        sty.loadingComponent
                      )}
                    />
                  </div>
                )}
              </DataCtxReader__>
            }
          >
            <DataCtxReader__>
              {$ctx => (
                <div
                  data-plasmic-name={"main"}
                  data-plasmic-override={overrides.main}
                  className={classNames(
                    projectcss.all,
                    sty.main,
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ``
                      : "main-content"
                  )}
                >
                  <div
                    data-plasmic-name={"heading"}
                    data-plasmic-override={overrides.heading}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.heading
                    )}
                  >
                    {"Mon compte"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nnSgO)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jUfvw)}
                    >
                      <div
                        data-plasmic-name={"card4"}
                        data-plasmic-override={overrides.card4}
                        className={classNames(projectcss.all, sty.card4)}
                      >
                        <LoadingBoundary
                          loadingState={
                            <DataCtxReader__>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kavrd
                                  )}
                                >
                                  <Loader4FillSvgrepoComSvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__uvPIe,
                                      "spinner"
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              )}
                            </DataCtxReader__>
                          }
                        >
                          <DataCtxReader__>
                            {$ctx =>
                              (() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.formulaire2
                                  ),
                                  extendedOnValuesChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["formulaire2", "value"],
                                      FormWrapper_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  formItems: [
                                    {
                                      label: "Name",
                                      name: "name",
                                      inputType: "Text"
                                    },
                                    {
                                      label: "Message",
                                      name: "message",
                                      inputType: "Text Area"
                                    }
                                  ],
                                  initialValues: undefined,
                                  labelCol: { span: 8, horizontalOnly: true },
                                  layout: "vertical",
                                  mode: "advanced",
                                  onFinish: async values => {
                                    const $steps = {};

                                    $steps["updateDb"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "kVSSe8ab4TtzwRPnTeEeUp",
                                              opId: "ceea2a7c-d46f-4302-9b29-ff5e0171699d",
                                              userArgs: {
                                                keys: [
                                                  $ctx.SupabaseUser.user.id
                                                ],

                                                variables: [
                                                  $state.formulaire2.value
                                                    .first_name,

                                                  $state.formulaire2.value
                                                    .last_name,

                                                  $state.formulaire2.value
                                                    .phone_number
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "c97d2f24-3d9a-4bf9-8107-193ee0e13062"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDb"] != null &&
                                      typeof $steps["updateDb"] === "object" &&
                                      typeof $steps["updateDb"].then ===
                                        "function"
                                    ) {
                                      $steps["updateDb"] =
                                        await $steps["updateDb"];
                                    }

                                    $steps["showToast"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "success",
                                              "Votre profil entreprise a bien \u00e9t\u00e9 mis \u00e0 jour !"
                                            ]
                                          };
                                          return $globalActions[
                                            "plasmic-antd5-config-provider.showNotification"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["showToast"] != null &&
                                      typeof $steps["showToast"] === "object" &&
                                      typeof $steps["showToast"].then ===
                                        "function"
                                    ) {
                                      $steps["showToast"] =
                                        await $steps["showToast"];
                                    }
                                  },
                                  onFinishFailed: async data => {
                                    const $steps = {};

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: ["error", "error"]
                                          };
                                          return $globalActions[
                                            "plasmic-antd5-config-provider.showNotification"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }
                                  },
                                  onIsSubmittingChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "isSubmitting",
                                      ["formulaire2", "isSubmitting"],
                                      FormWrapper_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  ref: ref => {
                                    $refs["formulaire2"] = ref;
                                  },
                                  submitSlot: null,
                                  wrapperCol: { span: 16, horizontalOnly: true }
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "formulaire2.value"
                                    },
                                    {
                                      name: "isSubmitting",
                                      plasmicStateName:
                                        "formulaire2.isSubmitting"
                                    }
                                  ],
                                  [],
                                  FormWrapper_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <FormWrapper
                                    data-plasmic-name={"formulaire2"}
                                    data-plasmic-override={
                                      overrides.formulaire2
                                    }
                                    {...child$Props}
                                  >
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__q3Nu6
                                      )}
                                      initialValue={(() => {
                                        const googleFirstName =
                                          $ctx.SupabaseUser.user?.user_metadata?.name?.split(
                                            " "
                                          )[0] ?? null;
                                        const firstName =
                                          $queries.paramEmpGetUser?.data?.[0]
                                            ?.first_name ?? googleFirstName;
                                        return firstName;
                                      })()}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lIHt
                                          )}
                                        >
                                          {"Pr\u00e9nom"}
                                        </div>
                                      }
                                      name={"first_name"}
                                    >
                                      <TextInput
                                        data-plasmic-name={"firstName"}
                                        data-plasmic-override={
                                          overrides.firstName
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.firstName
                                        )}
                                        defaultValue={(() => {
                                          try {
                                            return (() => {
                                              const googleFirstName =
                                                $ctx.SupabaseUser.user?.user_metadata?.name?.split(
                                                  " "
                                                )[0] ?? null;
                                              const firstName =
                                                $queries.paramEmpGetUser
                                                  ?.data?.[0]?.first_name ??
                                                googleFirstName;
                                              return firstName;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "firstName",
                                            "value"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        placeholder={"Pr\u00e9nom"}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__a1JDf
                                      )}
                                      initialValue={(() => {
                                        const googleLastName =
                                          $ctx.SupabaseUser.user?.user_metadata?.name?.split(
                                            " "
                                          )[1] ?? null;
                                        const lastName =
                                          $queries.paramEmpGetUser?.data?.[0]
                                            ?.last_name ?? googleLastName;
                                        return lastName;
                                      })()}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___9M8Xg
                                          )}
                                        >
                                          {"Nom"}
                                        </div>
                                      }
                                      name={"last_name"}
                                    >
                                      <TextInput
                                        data-plasmic-name={"lastName"}
                                        data-plasmic-override={
                                          overrides.lastName
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.lastName
                                        )}
                                        defaultValue={(() => {
                                          try {
                                            return (() => {
                                              const googleLastName =
                                                $ctx.SupabaseUser.user?.user_metadata?.name?.split(
                                                  " "
                                                )[1] ?? null;
                                              const lastName =
                                                $queries.paramEmpGetUser
                                                  ?.data?.[0]?.last_name ??
                                                googleLastName;
                                              return lastName;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "lastName",
                                            "value"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        placeholder={"Nom"}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__ryeA
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__tyAbu
                                          )}
                                        >
                                          {"Email"}
                                        </div>
                                      }
                                      name={"email"}
                                    >
                                      <TextInput
                                        data-plasmic-name={"textInput3"}
                                        data-plasmic-override={
                                          overrides.textInput3
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.textInput3
                                        )}
                                        defaultValue={(() => {
                                          try {
                                            return $queries.paramEmpGetUser
                                              .data[0].email;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        disabled={true}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "textInput3",
                                            "value"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        placeholder={"Email"}
                                      />
                                    </FormItemWrapper>
                                    <div
                                      data-plasmic-name={"telephone"}
                                      data-plasmic-override={
                                        overrides.telephone
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.telephone
                                      )}
                                    >
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField__kGDbI
                                        )}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__j1O6
                                            )}
                                          >
                                            {"T\u00e9l\u00e9phone"}
                                          </div>
                                        }
                                        name={"countryCode"}
                                      >
                                        <PhoneSelector
                                          data-plasmic-name={"phoneSelector"}
                                          data-plasmic-override={
                                            overrides.phoneSelector
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.phoneSelector
                                          )}
                                        />
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField__mls5A
                                        )}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ifqYs
                                            )}
                                          >
                                            {""}
                                          </div>
                                        }
                                        name={"phone_number"}
                                      >
                                        <TextInput
                                          data-plasmic-name={"textInput7"}
                                          data-plasmic-override={
                                            overrides.textInput7
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.textInput7
                                          )}
                                          defaultValue={(() => {
                                            try {
                                              return $queries.paramEmpGetUser
                                                .data[0].phone_number;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                          inputType={"tel"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "textInput7",
                                              "value"
                                            ]).apply(null, eventArgs);

                                            if (
                                              eventArgs.length > 1 &&
                                              eventArgs[1] &&
                                              eventArgs[1]._plasmic_state_init_
                                            ) {
                                              return;
                                            }
                                          }}
                                          placeholder={"0606060606"}
                                        />
                                      </FormItemWrapper>
                                    </div>
                                    <Button
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__exwFy
                                      )}
                                      color={"white"}
                                      end={
                                        <GroupIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__rbdnk
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      iconEnd={true}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__e06G
                                          )}
                                        >
                                          {hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? "enregistrer"
                                            : "enregistrer les modifications"}
                                        </div>
                                      }
                                      submitsForm={true}
                                      type={"bordered"}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__zPqk
                                      )}
                                    >
                                      <DeleteAccount2
                                        data-plasmic-name={"deleteAccount2"}
                                        data-plasmic-override={
                                          overrides.deleteAccount2
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.deleteAccount2
                                        )}
                                        color={"white"}
                                        iconStart={true}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___1ZwDb
                                            )}
                                          >
                                            {"Supprimer le compte"}
                                          </div>
                                        }
                                        start={
                                          <PhTrashIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__jkXcF
                                            )}
                                            role={"img"}
                                          />
                                        }
                                      />
                                    </div>
                                  </FormWrapper>
                                );
                              })()
                            }
                          </DataCtxReader__>
                        </LoadingBoundary>
                      </div>
                      <div
                        data-plasmic-name={"card3"}
                        data-plasmic-override={overrides.card3}
                        className={classNames(projectcss.all, sty.card3)}
                      >
                        <ResetPassword
                          data-plasmic-name={"resetPassword"}
                          data-plasmic-override={overrides.resetPassword}
                          alertPosition={"top"}
                          cancelButtonStyle={"tertiary"}
                          cancelButtonText={"Annuler"}
                          className={classNames(
                            "__wab_instance",
                            sty.resetPassword
                          )}
                          confirmPassword={generateStateValueProp($state, [
                            "resetPassword",
                            "confirmPassword"
                          ])}
                          confirmPasswordLabel={
                            "R\u00e9p\u00e9tez le nouveau mot de passe*"
                          }
                          confirmPasswordPlaceholder={
                            "Confirmez votre mot de passe"
                          }
                          eyeIconColor={"#666"}
                          inputStyle={"simple"}
                          maxAlerts={3}
                          onConfirmPasswordChange={async (
                            ...eventArgs: any
                          ) => {
                            generateStateOnChangeProp($state, [
                              "resetPassword",
                              "confirmPassword"
                            ]).apply(null, eventArgs);
                          }}
                          onPasswordChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "resetPassword",
                              "password"
                            ]).apply(null, eventArgs);
                          }}
                          onSubmit={async event => {
                            const $steps = {};

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return $state.resetPassword
                                            .confirmPassword;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "SupabaseUserGlobalContext.updateUserPassword"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] =
                                await $steps["postgresUpdateById"];
                            }
                          }}
                          password={generateStateValueProp($state, [
                            "resetPassword",
                            "password"
                          ])}
                          passwordLabel={"Modifier mot de passe*"}
                          passwordPlaceholder={
                            "Entrez votre nouveau mot de passe"
                          }
                          resetSuccessMessage={
                            "Votre mot de passe a été réinitialisé avec succès!"
                          }
                          showAlerts={true}
                          showCancelButton={true}
                          showPasswordStrength={true}
                          showPasswordToggle={true}
                          submitButtonStyle={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "primary"
                              : ``
                          }
                          submitButtonText={"Réinitialiser"}
                          title={``}
                          titleHeading={"h1"}
                          wrapperStyle={"card"}
                        />
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"informationsPersonnelles"}
                      data-plasmic-override={overrides.informationsPersonnelles}
                      className={classNames(
                        projectcss.all,
                        sty.informationsPersonnelles
                      )}
                    >
                      <div
                        data-plasmic-name={"frame1437254343"}
                        data-plasmic-override={overrides.frame1437254343}
                        className={classNames(
                          projectcss.all,
                          sty.frame1437254343
                        )}
                      >
                        <UploadWrapper
                          data-plasmic-name={"upload2"}
                          data-plasmic-override={overrides.upload2}
                          accept={""}
                          className={classNames("__wab_instance", sty.upload2)}
                          files={generateStateValueProp($state, [
                            "upload2",
                            "files"
                          ])}
                          maxCount={1}
                          onFilesChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "upload2",
                              "files"
                            ]).apply(null, eventArgs);

                            (async files => {
                              const $steps = {};

                              $steps["supabaseUploadFile"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                        opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                        userArgs: {
                                          path: [
                                            $ctx.SupabaseUser.user.id,

                                            $state.upload2.files[0].name
                                          ],

                                          content: [
                                            $state.upload2.files[0].contents
                                          ],

                                          contentType: [
                                            $state.upload2.files[0].type
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "c1aa4a8a-4072-41ae-bd85-9a0ae0f16d97",
                                          "c97d2f24-3d9a-4bf9-8107-193ee0e13062"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["supabaseUploadFile"] != null &&
                                typeof $steps["supabaseUploadFile"] ===
                                  "object" &&
                                typeof $steps["supabaseUploadFile"].then ===
                                  "function"
                              ) {
                                $steps["supabaseUploadFile"] =
                                  await $steps["supabaseUploadFile"];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "ca8056ed-4ec7-4218-bb8b-d4f4da770307",
                                        userArgs: {
                                          keys: [$ctx.SupabaseUser.user.id],

                                          variables: [
                                            $steps.supabaseUploadFile?.path.split(
                                              "/"
                                            )[1]
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "c1aa4a8a-4072-41ae-bd85-9a0ae0f16d97",
                                          "c97d2f24-3d9a-4bf9-8107-193ee0e13062"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] =
                                  await $steps["postgresUpdateById"];
                              }
                            }).apply(null, eventArgs);
                          }}
                          showUploadList={false}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"132px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"132px"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return $queries.paramEmpGetPp.signedUrl
                                  ? $queries.paramEmpGetPp.signedUrl
                                  : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />

                          <div
                            data-plasmic-name={"editIcon"}
                            data-plasmic-override={overrides.editIcon}
                            className={classNames(projectcss.all, sty.editIcon)}
                          >
                            <div
                              data-plasmic-name={"frame7"}
                              data-plasmic-override={overrides.frame7}
                              className={classNames(projectcss.all, sty.frame7)}
                            />

                            <PhPencilSimpleIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ai8Y7
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"deleteIcon"}
                            data-plasmic-override={overrides.deleteIcon}
                            className={classNames(
                              projectcss.all,
                              sty.deleteIcon
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateUpload2Files"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["upload2", "files"]
                                      },
                                      operation: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        undefined
                                      );
                                      return undefined;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateUpload2Files"] != null &&
                                typeof $steps["updateUpload2Files"] ===
                                  "object" &&
                                typeof $steps["updateUpload2Files"].then ===
                                  "function"
                              ) {
                                $steps["updateUpload2Files"] =
                                  await $steps["updateUpload2Files"];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return event.stopPropagation();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["postgresUpdateMany"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "480b9e74-9c5c-4bcb-91b0-e654609fe8c1",
                                        userArgs: {
                                          conditions: [
                                            $ctx.SupabaseUser.user.id
                                          ],

                                          variables: [null]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateMany"] != null &&
                                typeof $steps["postgresUpdateMany"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateMany"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateMany"] =
                                  await $steps["postgresUpdateMany"];
                              }
                            }}
                          >
                            <div
                              data-plasmic-name={"frame8"}
                              data-plasmic-override={overrides.frame8}
                              className={classNames(projectcss.all, sty.frame8)}
                            />

                            <PhTrashIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___3C99Q
                              )}
                              role={"img"}
                            />
                          </div>
                        </UploadWrapper>
                      </div>
                      <LoadingBoundary
                        loadingState={
                          <DataCtxReader__>
                            {$ctx => (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nsjw9
                                )}
                              >
                                <Loader4FillSvgrepoComSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__sKTqg,
                                    "spinner"
                                  )}
                                  role={"img"}
                                />
                              </div>
                            )}
                          </DataCtxReader__>
                        }
                      >
                        <DataCtxReader__>
                          {$ctx =>
                            (() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.formulaire
                                ),
                                extendedOnValuesChange: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["formulaire", "value"],
                                    FormWrapper_Helpers
                                  ).apply(null, eventArgs);
                                },
                                formItems: [
                                  {
                                    label: "Name",
                                    name: "name",
                                    inputType: "Text"
                                  },
                                  {
                                    label: "Message",
                                    name: "message",
                                    inputType: "Text Area"
                                  }
                                ],
                                initialValues: undefined,
                                labelCol: { span: 8, horizontalOnly: true },
                                layout: "vertical",
                                mode: "advanced",
                                onFinish: async values => {
                                  const $steps = {};

                                  $steps["updateUser"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                            opId: "69585a24-0931-463c-a1b7-bb54827e817e",
                                            userArgs: {
                                              conditions: [
                                                $ctx.SupabaseUser.user.id
                                              ],

                                              variables: [
                                                $state.formulaire.value.name,

                                                $state.formulaire.value
                                                  .descriptions,

                                                $state.formulaire.value.address,

                                                $state.formulaire.value
                                                  .postal_code,

                                                $state.formulaire.value
                                                  .location,

                                                $state.formulaire.value.country,

                                                $state.formulaire.value.siren,

                                                $state.formulaire.value.sector,

                                                $state.formulaire.value
                                                  .team_size,

                                                $state.formulaire.value.website
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "a0f345b5-bbed-4347-80ba-1896e0ae6a8a"
                                            ],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateUser"] != null &&
                                    typeof $steps["updateUser"] === "object" &&
                                    typeof $steps["updateUser"].then ===
                                      "function"
                                  ) {
                                    $steps["updateUser"] =
                                      await $steps["updateUser"];
                                  }

                                  $steps["invokeGlobalAction"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "success",
                                            "Votre profil entreprise a bien \u00e9t\u00e9 mis \u00e0 jour !"
                                          ]
                                        };
                                        return $globalActions[
                                          "plasmic-antd5-config-provider.showNotification"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] =
                                      await $steps["invokeGlobalAction"];
                                  }
                                },
                                onFinishFailed: async data => {
                                  const $steps = {};

                                  $steps["invokeGlobalAction"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: ["error", "error"]
                                        };
                                        return $globalActions[
                                          "plasmic-antd5-config-provider.showNotification"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] =
                                      await $steps["invokeGlobalAction"];
                                  }
                                },
                                onIsSubmittingChange: async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "isSubmitting",
                                    ["formulaire", "isSubmitting"],
                                    FormWrapper_Helpers
                                  ).apply(null, eventArgs);
                                },
                                ref: ref => {
                                  $refs["formulaire"] = ref;
                                },
                                submitSlot: null,
                                wrapperCol: { span: 16, horizontalOnly: true }
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "formulaire.value"
                                  },
                                  {
                                    name: "isSubmitting",
                                    plasmicStateName: "formulaire.isSubmitting"
                                  }
                                ],
                                [],
                                FormWrapper_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <FormWrapper
                                  data-plasmic-name={"formulaire"}
                                  data-plasmic-override={overrides.formulaire}
                                  {...child$Props}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__n2HvJ
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__s9Hvh
                                        )}
                                      >
                                        {"Nom de l'entreprise"}
                                      </div>
                                    }
                                    name={"name"}
                                  >
                                    <TextInput
                                      data-plasmic-name={"textInput5"}
                                      data-plasmic-override={
                                        overrides.textInput5
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textInput5
                                      )}
                                      defaultValue={(() => {
                                        try {
                                          return $queries.paramGetCompanyById
                                            .data[0].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "textInput5",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Nom de l'entreprise"}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__b3L11
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__t1R00
                                        )}
                                      >
                                        {"Pr\u00e9sentation courte"}
                                      </div>
                                    }
                                    name={"descriptions"}
                                  >
                                    <TextAreaInput
                                      data-plasmic-name={"textAreaInput"}
                                      data-plasmic-override={
                                        overrides.textAreaInput
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textAreaInput
                                      )}
                                      defaultValue={(() => {
                                        try {
                                          return $queries.paramGetCompanyById
                                            .data[0].descriptions;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "textAreaInput",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Pr\u00e9sentation"}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__jg0Re
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pXcNo
                                        )}
                                      >
                                        {"Adresse"}
                                      </div>
                                    }
                                    name={"address"}
                                  >
                                    <TextInput
                                      data-plasmic-name={"rue"}
                                      data-plasmic-override={overrides.rue}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.rue
                                      )}
                                      defaultValue={(() => {
                                        try {
                                          return $queries.paramGetCompanyById
                                            ?.data[0]?.address;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "rue",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Rue"}
                                    />
                                  </FormItemWrapper>
                                  <div
                                    data-plasmic-name={"codePosteVille"}
                                    data-plasmic-override={
                                      overrides.codePosteVille
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.codePosteVille
                                    )}
                                  >
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__jg6X
                                      )}
                                      hidden={false}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__raBtx
                                          )}
                                        >
                                          {""}
                                        </div>
                                      }
                                      name={"postal_code"}
                                      noLabel={true}
                                    >
                                      <TextInput
                                        data-plasmic-name={"codePostal"}
                                        data-plasmic-override={
                                          overrides.codePostal
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.codePostal
                                        )}
                                        defaultValue={(() => {
                                          try {
                                            return $queries.paramGetCompanyById
                                              ?.data[0]?.postal_code;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "codePostal",
                                            "value"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        placeholder={"Code postal"}
                                      />
                                    </FormItemWrapper>
                                    <FormItemWrapper
                                      className={classNames(
                                        "__wab_instance",
                                        sty.formField__k5Is4
                                      )}
                                      label={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__gVglM
                                          )}
                                        >
                                          {"Adresse*"}
                                        </div>
                                      }
                                      name={"location"}
                                      noLabel={true}
                                    >
                                      <TextInput
                                        data-plasmic-name={"ville"}
                                        data-plasmic-override={overrides.ville}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.ville
                                        )}
                                        defaultValue={(() => {
                                          try {
                                            return $queries.paramGetCompanyById
                                              ?.data[0]?.location;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "ville",
                                            "value"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        }}
                                        placeholder={"Ville"}
                                      />
                                    </FormItemWrapper>
                                  </div>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__tz9H6
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__bfmNr
                                        )}
                                      >
                                        {"Adresse*"}
                                      </div>
                                    }
                                    name={"country"}
                                    noLabel={true}
                                  >
                                    <Select
                                      data-plasmic-name={"select6"}
                                      data-plasmic-override={overrides.select6}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select6
                                      )}
                                      initialSelectedValue={(() => {
                                        try {
                                          return $queries.paramGetCompanyById
                                            ?.data[0]?.country;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      items={(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                        (() => {
                                          try {
                                            return $state.countries;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const currentItem = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <MenuItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.menuItem__hxhHy
                                              )}
                                              key={currentIndex}
                                              label={(() => {
                                                try {
                                                  return currentItem;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              value={(() => {
                                                try {
                                                  return currentItem;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          );
                                        }
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select6",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Pays"}
                                      showLabel={false}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__gnnov
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__xKuX
                                        )}
                                      >
                                        {"SIREN"}
                                      </div>
                                    }
                                    name={"siren"}
                                  >
                                    <TextInput
                                      data-plasmic-name={"textInput6"}
                                      data-plasmic-override={
                                        overrides.textInput6
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textInput6
                                      )}
                                      defaultValue={(() => {
                                        try {
                                          return $queries.paramGetCompanyById
                                            ?.data[0]?.siren;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "textInput6",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Num\u00e9ro"}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__gh3Mt
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ngz4H
                                        )}
                                      >
                                        {"Secteur d'activit\u00e9"}
                                      </div>
                                    }
                                    name={"sector"}
                                  >
                                    <Select
                                      data-plasmic-name={"select"}
                                      data-plasmic-override={overrides.select}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select
                                      )}
                                      initialSelectedValue={(() => {
                                        try {
                                          return $queries.paramGetCompanyById
                                            ?.data[0]?.sector;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      items={(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                        (() => {
                                          try {
                                            return $queries.getCriteria.data
                                              .filter(
                                                item =>
                                                  item.type ===
                                                  "sector_activity"
                                              )
                                              .map(item => ({
                                                value: item.name,
                                                label: item.name
                                              }));
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const currentItem = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <MenuItem
                                              key={currentIndex}
                                              label={(() => {
                                                try {
                                                  return currentItem.label;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              value={(() => {
                                                try {
                                                  return currentItem.value;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          );
                                        }
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Secteur d'activit\u00e9"}
                                      showLabel={false}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__pmcez
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__vl6Qz
                                        )}
                                      >
                                        {"Taille de l'entreprise"}
                                      </div>
                                    }
                                    name={"team_size"}
                                  >
                                    <Select
                                      data-plasmic-name={"select2"}
                                      data-plasmic-override={overrides.select2}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select2
                                      )}
                                      initialSelectedValue={(() => {
                                        try {
                                          return $queries.paramGetCompanyById
                                            ?.data[0]?.team_size;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      items={(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                        (() => {
                                          try {
                                            return $queries.getCriteria.data
                                              .filter(
                                                item =>
                                                  item.type === "company_size"
                                              )
                                              .map(item => ({
                                                value: item.name,
                                                label: item.name
                                              }));
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const currentItem = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <MenuItem
                                              key={currentIndex}
                                              label={(() => {
                                                try {
                                                  return currentItem.label;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              value={(() => {
                                                try {
                                                  return currentItem.value;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          );
                                        }
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select2",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Taille de l'entreprise"}
                                      showLabel={false}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__nsxgp
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__nrPoc
                                        )}
                                      >
                                        {"Site web"}
                                      </div>
                                    }
                                    name={"website"}
                                  >
                                    <TextInput
                                      data-plasmic-name={"textInput4"}
                                      data-plasmic-override={
                                        overrides.textInput4
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textInput4
                                      )}
                                      defaultValue={(() => {
                                        try {
                                          return $queries.paramGetCompanyById
                                            ?.data[0]?.website;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "textInput4",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"https://"}
                                    />
                                  </FormItemWrapper>
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__oo2UE
                                    )}
                                    color={"white"}
                                    end={
                                      <GroupIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__sNnfc
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    iconEnd={true}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mjsDj
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "enregistrer"
                                          : "enregistrer les modifications"}
                                      </div>
                                    }
                                    submitsForm={true}
                                    type={"bordered"}
                                  />
                                </FormWrapper>
                              );
                            })()
                          }
                        </DataCtxReader__>
                      </LoadingBoundary>
                    </div>
                  </div>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"expandTab"}
                      data-plasmic-override={overrides.expandTab}
                      className={classNames(projectcss.all, sty.expandTab)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = { args: ["/"] };
                              return $globalActions[
                                "SupabaseUserGlobalContext.logout"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] =
                            await $steps["invokeGlobalAction"];
                        }
                      }}
                    >
                      <SolarLogoutOutlineIcon
                        className={classNames(projectcss.all, sty.svg___0FXEu)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uiFkR
                        )}
                      >
                        {"D\u00e9connexion"}
                      </div>
                    </div>
                  ) : null}
                </div>
              )}
            </DataCtxReader__>
          </LoadingBoundary>
          <MobileNavbarBottom
            data-plasmic-name={"mobileNavbarBottom"}
            data-plasmic-override={overrides.mobileNavbarBottom}
            className={classNames("__wab_instance", sty.mobileNavbarBottom)}
            user={"employer"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parametresEmployeur: [
    "parametresEmployeur",
    "updateFirstGoogleConnection",
    "mobileNavbarTop",
    "sidebar",
    "loadingComponent",
    "main",
    "heading",
    "card4",
    "formulaire2",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput7",
    "deleteAccount2",
    "card3",
    "resetPassword",
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "img",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "formulaire",
    "textInput5",
    "textAreaInput",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select6",
    "textInput6",
    "select",
    "select2",
    "textInput4",
    "expandTab",
    "mobileNavbarBottom"
  ],
  updateFirstGoogleConnection: ["updateFirstGoogleConnection"],
  mobileNavbarTop: ["mobileNavbarTop"],
  sidebar: ["sidebar"],
  loadingComponent: ["loadingComponent"],
  main: [
    "main",
    "heading",
    "card4",
    "formulaire2",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput7",
    "deleteAccount2",
    "card3",
    "resetPassword",
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "img",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "formulaire",
    "textInput5",
    "textAreaInput",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select6",
    "textInput6",
    "select",
    "select2",
    "textInput4",
    "expandTab"
  ],
  heading: ["heading"],
  card4: [
    "card4",
    "formulaire2",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput7",
    "deleteAccount2"
  ],
  formulaire2: [
    "formulaire2",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput7",
    "deleteAccount2"
  ],
  firstName: ["firstName"],
  lastName: ["lastName"],
  textInput3: ["textInput3"],
  telephone: ["telephone", "phoneSelector", "textInput7"],
  phoneSelector: ["phoneSelector"],
  textInput7: ["textInput7"],
  deleteAccount2: ["deleteAccount2"],
  card3: ["card3", "resetPassword"],
  resetPassword: ["resetPassword"],
  informationsPersonnelles: [
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "img",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "formulaire",
    "textInput5",
    "textAreaInput",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select6",
    "textInput6",
    "select",
    "select2",
    "textInput4"
  ],
  frame1437254343: [
    "frame1437254343",
    "upload2",
    "img",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8"
  ],
  upload2: ["upload2", "img", "editIcon", "frame7", "deleteIcon", "frame8"],
  img: ["img"],
  editIcon: ["editIcon", "frame7"],
  frame7: ["frame7"],
  deleteIcon: ["deleteIcon", "frame8"],
  frame8: ["frame8"],
  formulaire: [
    "formulaire",
    "textInput5",
    "textAreaInput",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select6",
    "textInput6",
    "select",
    "select2",
    "textInput4"
  ],
  textInput5: ["textInput5"],
  textAreaInput: ["textAreaInput"],
  rue: ["rue"],
  codePosteVille: ["codePosteVille", "codePostal", "ville"],
  codePostal: ["codePostal"],
  ville: ["ville"],
  select6: ["select6"],
  textInput6: ["textInput6"],
  select: ["select"],
  select2: ["select2"],
  textInput4: ["textInput4"],
  expandTab: ["expandTab"],
  mobileNavbarBottom: ["mobileNavbarBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  parametresEmployeur: "div";
  updateFirstGoogleConnection: typeof PageLoader;
  mobileNavbarTop: typeof MobileNavbarTop;
  sidebar: typeof Sidebar;
  loadingComponent: typeof LoadingComponent;
  main: "div";
  heading: "div";
  card4: "div";
  formulaire2: typeof FormWrapper;
  firstName: typeof TextInput;
  lastName: typeof TextInput;
  textInput3: typeof TextInput;
  telephone: "div";
  phoneSelector: typeof PhoneSelector;
  textInput7: typeof TextInput;
  deleteAccount2: typeof DeleteAccount2;
  card3: "div";
  resetPassword: typeof ResetPassword;
  informationsPersonnelles: "div";
  frame1437254343: "div";
  upload2: typeof UploadWrapper;
  img: typeof PlasmicImg__;
  editIcon: "div";
  frame7: "div";
  deleteIcon: "div";
  frame8: "div";
  formulaire: typeof FormWrapper;
  textInput5: typeof TextInput;
  textAreaInput: typeof TextAreaInput;
  rue: typeof TextInput;
  codePosteVille: "div";
  codePostal: typeof TextInput;
  ville: typeof TextInput;
  select6: typeof Select;
  textInput6: typeof TextInput;
  select: typeof Select;
  select2: typeof Select;
  textInput4: typeof TextInput;
  expandTab: "div";
  mobileNavbarBottom: typeof MobileNavbarBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicParametresEmployeur__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicParametresEmployeur__VariantsArgs;
    args?: PlasmicParametresEmployeur__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicParametresEmployeur__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicParametresEmployeur__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicParametresEmployeur__ArgProps,
          internalVariantPropNames: PlasmicParametresEmployeur__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicParametresEmployeur__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "parametresEmployeur") {
    func.displayName = "PlasmicParametresEmployeur";
  } else {
    func.displayName = `PlasmicParametresEmployeur.${nodeName}`;
  }
  return func;
}

export const PlasmicParametresEmployeur = Object.assign(
  // Top-level PlasmicParametresEmployeur renders the root element
  makeNodeComponent("parametresEmployeur"),
  {
    // Helper components rendering sub-elements
    updateFirstGoogleConnection: makeNodeComponent(
      "updateFirstGoogleConnection"
    ),
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    sidebar: makeNodeComponent("sidebar"),
    loadingComponent: makeNodeComponent("loadingComponent"),
    main: makeNodeComponent("main"),
    heading: makeNodeComponent("heading"),
    card4: makeNodeComponent("card4"),
    formulaire2: makeNodeComponent("formulaire2"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    textInput3: makeNodeComponent("textInput3"),
    telephone: makeNodeComponent("telephone"),
    phoneSelector: makeNodeComponent("phoneSelector"),
    textInput7: makeNodeComponent("textInput7"),
    deleteAccount2: makeNodeComponent("deleteAccount2"),
    card3: makeNodeComponent("card3"),
    resetPassword: makeNodeComponent("resetPassword"),
    informationsPersonnelles: makeNodeComponent("informationsPersonnelles"),
    frame1437254343: makeNodeComponent("frame1437254343"),
    upload2: makeNodeComponent("upload2"),
    img: makeNodeComponent("img"),
    editIcon: makeNodeComponent("editIcon"),
    frame7: makeNodeComponent("frame7"),
    deleteIcon: makeNodeComponent("deleteIcon"),
    frame8: makeNodeComponent("frame8"),
    formulaire: makeNodeComponent("formulaire"),
    textInput5: makeNodeComponent("textInput5"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    rue: makeNodeComponent("rue"),
    codePosteVille: makeNodeComponent("codePosteVille"),
    codePostal: makeNodeComponent("codePostal"),
    ville: makeNodeComponent("ville"),
    select6: makeNodeComponent("select6"),
    textInput6: makeNodeComponent("textInput6"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    textInput4: makeNodeComponent("textInput4"),
    expandTab: makeNodeComponent("expandTab"),
    mobileNavbarBottom: makeNodeComponent("mobileNavbarBottom"),

    // Metadata about props expected for PlasmicParametresEmployeur
    internalVariantProps: PlasmicParametresEmployeur__VariantProps,
    internalArgProps: PlasmicParametresEmployeur__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Paramètres",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicParametresEmployeur;
/* prettier-ignore-end */
