/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: 9ezuHS1vIH9P

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Sidebar2 from "../../Sidebar2"; // plasmic-import: RXqL3kdDrXwo/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { PhoneSelector } from "../../forms/PhoneSelector/PhoneSelector"; // plasmic-import: sOyePdANTQ6t/codeComponent
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import DeleteAccount2 from "../../DeleteAccount2"; // plasmic-import: Aiz3LwUBdbOf/component
import { ResetPassword } from "../../auth/ResetPassword"; // plasmic-import: Ju3qM8OwHoNT/codeComponent
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: nVAUbPc6gpoz/component
import Select from "../../Select"; // plasmic-import: ZMB-SB-xJDyQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: plmAgyhhAdMc/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import MobileNavbarBottom2 from "../../MobileNavbarBottom2"; // plasmic-import: gAnwjyfMiBe9/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicParametresEmployeur.module.css"; // plasmic-import: 9ezuHS1vIH9P/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: yud1FH0Ox1FR/icon
import SolarLogoutOutlineIcon from "./icons/PlasmicIcon__SolarLogoutOutline"; // plasmic-import: UZfkN-2mqbQ1/icon

createPlasmicElementProxy;

export type PlasmicParametresEmployeur__VariantMembers = {};
export type PlasmicParametresEmployeur__VariantsArgs = {};
type VariantPropType = keyof PlasmicParametresEmployeur__VariantsArgs;
export const PlasmicParametresEmployeur__VariantProps =
  new Array<VariantPropType>();

export type PlasmicParametresEmployeur__ArgsType = {};
type ArgPropType = keyof PlasmicParametresEmployeur__ArgsType;
export const PlasmicParametresEmployeur__ArgProps = new Array<ArgPropType>();

export type PlasmicParametresEmployeur__OverridesType = {
  parametresEmployeur?: Flex__<"div">;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  sidebar2?: Flex__<typeof Sidebar2>;
  main?: Flex__<"div">;
  heading?: Flex__<"div">;
  card4?: Flex__<"div">;
  formulaire2?: Flex__<typeof FormWrapper>;
  firstName?: Flex__<typeof TextInput>;
  lastName?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  telephone?: Flex__<"div">;
  phoneSelector?: Flex__<typeof PhoneSelector>;
  textInput7?: Flex__<typeof TextInput>;
  deleteAccount2?: Flex__<typeof DeleteAccount2>;
  card3?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  resetPassword?: Flex__<typeof ResetPassword>;
  informationsPersonnelles?: Flex__<"div">;
  frame1437254343?: Flex__<"div">;
  upload2?: Flex__<typeof UploadWrapper>;
  img?: Flex__<typeof PlasmicImg__>;
  editIcon?: Flex__<"div">;
  frame7?: Flex__<"div">;
  deleteIcon?: Flex__<"div">;
  frame8?: Flex__<"div">;
  formulaire?: Flex__<typeof FormWrapper>;
  textInput5?: Flex__<typeof TextInput>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  rue?: Flex__<typeof TextInput>;
  codePosteVille?: Flex__<"div">;
  codePostal?: Flex__<typeof TextInput>;
  ville?: Flex__<typeof TextInput>;
  select6?: Flex__<typeof Select>;
  menuItem?: Flex__<typeof MenuItem>;
  textInput6?: Flex__<typeof TextInput>;
  select3?: Flex__<typeof AntdSelect>;
  select5?: Flex__<typeof AntdSelect>;
  textInput4?: Flex__<typeof TextInput>;
  expandTab?: Flex__<"div">;
  mobileNavbarBottom2?: Flex__<typeof MobileNavbarBottom2>;
};

export interface DefaultParametresEmployeurProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicParametresEmployeur__RenderFunc(props: {
  variants: PlasmicParametresEmployeur__VariantsArgs;
  args: PlasmicParametresEmployeur__ArgsType;
  overrides: PlasmicParametresEmployeur__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "resetPassword.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "resetPassword.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "formulaire.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formulaire",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formulaire.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formulaire",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "rue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formulaire2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formulaire2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formulaire2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formulaire2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "firstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lastName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCriteria: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "3c8bdc4e-677f-4634-aaef-8a13e1973a95",
        userArgs: {},
        cacheKey: `plasmic.$.3c8bdc4e-677f-4634-aaef-8a13e1973a95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramGetCompanyById: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "e13b458c-532d-419c-bc09-41e0eb79063a",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.e13b458c-532d-419c-bc09-41e0eb79063a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramEmpGetPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
        userArgs: {
          path: [
            $queries.paramEmpGetUser.data[0].id +
              "/" +
              $queries.paramEmpGetUser.data[0].profile_photo
          ]
        },
        cacheKey: `plasmic.$.8be05618-e3eb-4b37-889a-c18c2902bc93.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramEmpGetUser: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "9f412504-e938-4e59-9fca-bfe70cfa0a98",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.9f412504-e938-4e59-9fca-bfe70cfa0a98.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCountries: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "55fe18eb-11a3-411e-bf08-f786d3cb4a98",
        userArgs: {},
        cacheKey: `plasmic.$.55fe18eb-11a3-411e-bf08-f786d3cb4a98.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"parametresEmployeur"}
          data-plasmic-override={overrides.parametresEmployeur}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.parametresEmployeur
          )}
        >
          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Sidebar2
            data-plasmic-name={"sidebar2"}
            data-plasmic-override={overrides.sidebar2}
            className={classNames("__wab_instance", sty.sidebar2)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <div
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.heading
              )}
            >
              {"Mon compte"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nnSgO)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__jUfvw)}>
                <div
                  data-plasmic-name={"card4"}
                  data-plasmic-override={overrides.card4}
                  className={classNames(projectcss.all, sty.card4)}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.formulaire2),
                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["formulaire2", "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      initialValues: (() => {
                        try {
                          return $queries.paramEmpGetUser.data[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "ceea2a7c-d46f-4302-9b29-ff5e0171699d",
                                  userArgs: {
                                    keys: [$ctx.SupabaseUser.user.id],
                                    variables: [
                                      $state.formulaire2.value.first_name,
                                      $state.formulaire2.value.last_name,
                                      $state.formulaire2.value.phone_number
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [
                                    "9f412504-e938-4e59-9fca-bfe70cfa0a98"
                                  ],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "success",
                                  "Votre profil entreprise a bien \u00e9t\u00e9 mis \u00e0 jour !"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      },
                      onFinishFailed: async data => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = { args: ["error", "error"] };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      },
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["formulaire2", "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["formulaire2"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "formulaire2.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "formulaire2.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"formulaire2"}
                        data-plasmic-override={overrides.formulaire2}
                        {...child$Props}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__q3Nu6
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lIHt
                              )}
                            >
                              {"Pr\u00e9nom"}
                            </div>
                          }
                          name={"first_name"}
                        >
                          <TextInput
                            data-plasmic-name={"firstName"}
                            data-plasmic-override={overrides.firstName}
                            className={classNames(
                              "__wab_instance",
                              sty.firstName
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "firstName",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pr\u00e9nom"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__a1JDf
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9M8Xg
                              )}
                            >
                              {"Nom"}
                            </div>
                          }
                          name={"last_name"}
                        >
                          <TextInput
                            data-plasmic-name={"lastName"}
                            data-plasmic-override={overrides.lastName}
                            className={classNames(
                              "__wab_instance",
                              sty.lastName
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "lastName",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Nom"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__ryeA
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tyAbu
                              )}
                            >
                              {"Email"}
                            </div>
                          }
                          name={"email"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput3"}
                            data-plasmic-override={overrides.textInput3}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput3
                            )}
                            disabled={true}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput3",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Email"}
                          />
                        </FormItemWrapper>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"telephone"}
                          data-plasmic-override={overrides.telephone}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.telephone)}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__kGDbI
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j1O6
                                )}
                              >
                                {"T\u00e9l\u00e9phone"}
                              </div>
                            }
                            name={"countryCode"}
                          >
                            <PhoneSelector
                              data-plasmic-name={"phoneSelector"}
                              data-plasmic-override={overrides.phoneSelector}
                              className={classNames(
                                "__wab_instance",
                                sty.phoneSelector
                              )}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__mls5A
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ifqYs
                                )}
                              >
                                {""}
                              </div>
                            }
                            name={"phone_number"}
                          >
                            <TextInput
                              data-plasmic-name={"textInput7"}
                              data-plasmic-override={overrides.textInput7}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput7
                              )}
                              defaultValue={(() => {
                                try {
                                  return $queries.paramEmpGetUser.data[0]
                                    .phone_number;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              inputType={"tel"}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput7",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"0606060606"}
                            />
                          </FormItemWrapper>
                        </Stack__>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__exwFy
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rbdnk
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__e06G
                              )}
                            >
                              {"enregistrer les modifications"}
                            </div>
                          }
                          submitsForm={true}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zPqk
                          )}
                        >
                          <DeleteAccount2
                            data-plasmic-name={"deleteAccount2"}
                            data-plasmic-override={overrides.deleteAccount2}
                            className={classNames(
                              "__wab_instance",
                              sty.deleteAccount2
                            )}
                            color={"white"}
                            iconStart={true}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1ZwDb
                                )}
                              >
                                {"Supprimer le compte"}
                              </div>
                            }
                            start={
                              <PhTrashIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__jkXcF
                                )}
                                role={"img"}
                              />
                            }
                          />
                        </div>
                      </FormWrapper>
                    );
                  })()}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"card3"}
                  data-plasmic-override={overrides.card3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.card3)}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return $state.resetPassword
                                        .confirmPassword;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "SupabaseUserGlobalContext.updateUserPassword"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction2"] =
                          $state.resetPassword.password ===
                          $state.resetPassword.confirmPassword
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "success",
                                    "Mot de passe r\u00e9initialis\u00e9 avec succ\u00e8s"
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }
                      },
                      onIsSubmittingChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        <ResetPassword
                          data-plasmic-name={"resetPassword"}
                          data-plasmic-override={overrides.resetPassword}
                          alertPosition={"top"}
                          cancelButtonStyle={"tertiary"}
                          cancelButtonText={"Annuler"}
                          className={classNames(
                            "__wab_instance",
                            sty.resetPassword
                          )}
                          confirmPassword={generateStateValueProp($state, [
                            "resetPassword",
                            "confirmPassword"
                          ])}
                          confirmPasswordLabel={
                            "R\u00e9p\u00e9tez le nouveau mot de passe"
                          }
                          confirmPasswordPlaceholder={
                            "Confirmez votre mot de passe"
                          }
                          eyeIconColor={"#666"}
                          inputStyle={"simple"}
                          maxAlerts={3}
                          onConfirmPasswordChange={async (
                            ...eventArgs: any
                          ) => {
                            generateStateOnChangeProp($state, [
                              "resetPassword",
                              "confirmPassword"
                            ]).apply(null, eventArgs);
                          }}
                          onPasswordChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "resetPassword",
                              "password"
                            ]).apply(null, eventArgs);
                          }}
                          onSubmit={async event => {
                            const $steps = {};

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return $state.resetPassword
                                            .confirmPassword;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "SupabaseUserGlobalContext.updateUserPassword"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }
                          }}
                          password={generateStateValueProp($state, [
                            "resetPassword",
                            "password"
                          ])}
                          passwordLabel={"Modifier mot de passe"}
                          passwordPlaceholder={
                            "Entrez votre nouveau mot de passe"
                          }
                          passwordStrength={true}
                          resetSuccessMessage={
                            "Votre mot de passe a été réinitialisé avec succès!"
                          }
                          showAlerts={true}
                          showCancelButton={false}
                          showPasswordToggle={true}
                          showSubmitButton={false}
                          submitButtonStyle={"primary"}
                          submitButtonText={"Réinitialiser"}
                          title={``}
                          titleHeading={"h1"}
                          wrapperStyle={"card"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__l43Zx
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__keiMx
                            )}
                            end={
                              <GroupIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sOZ
                                )}
                                role={"img"}
                              />
                            }
                            iconEnd={true}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tzsRi
                                )}
                              >
                                {"enregistrer les modifications"}
                              </div>
                            }
                            submitsForm={true}
                          />
                        </div>
                      </FormWrapper>
                    );
                  })()}
                </Stack__>
              </div>
              <div
                data-plasmic-name={"informationsPersonnelles"}
                data-plasmic-override={overrides.informationsPersonnelles}
                className={classNames(
                  projectcss.all,
                  sty.informationsPersonnelles
                )}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437254343"}
                  data-plasmic-override={overrides.frame1437254343}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437254343)}
                >
                  <UploadWrapper
                    data-plasmic-name={"upload2"}
                    data-plasmic-override={overrides.upload2}
                    accept={""}
                    className={classNames("__wab_instance", sty.upload2)}
                    files={generateStateValueProp($state, ["upload2", "files"])}
                    maxCount={1}
                    onFilesChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "upload2",
                        "files"
                      ]).apply(null, eventArgs);

                      (async files => {
                        const $steps = {};

                        $steps["supabaseUploadFile"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                  userArgs: {
                                    path: [
                                      $ctx.SupabaseUser.user.id,
                                      $state.upload2.files[0].name
                                    ],
                                    content: [$state.upload2.files[0].contents],
                                    contentType: [$state.upload2.files[0].type]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [
                                    "8be05618-e3eb-4b37-889a-c18c2902bc93",
                                    "9f412504-e938-4e59-9fca-bfe70cfa0a98"
                                  ],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["supabaseUploadFile"] != null &&
                          typeof $steps["supabaseUploadFile"] === "object" &&
                          typeof $steps["supabaseUploadFile"].then ===
                            "function"
                        ) {
                          $steps["supabaseUploadFile"] = await $steps[
                            "supabaseUploadFile"
                          ];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "ca8056ed-4ec7-4218-bb8b-d4f4da770307",
                                  userArgs: {
                                    keys: [$ctx.SupabaseUser.user.id],
                                    variables: [
                                      $steps.supabaseUploadFile?.path.split(
                                        "/"
                                      )[1]
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [
                                    "8be05618-e3eb-4b37-889a-c18c2902bc93",
                                    "9f412504-e938-4e59-9fca-bfe70cfa0a98"
                                  ],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    showUploadList={false}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"132px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"132px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $queries.paramEmpGetPp.signedUrl
                            ? $queries.paramEmpGetPp.signedUrl
                            : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <div
                      data-plasmic-name={"editIcon"}
                      data-plasmic-override={overrides.editIcon}
                      className={classNames(projectcss.all, sty.editIcon)}
                    >
                      <div
                        data-plasmic-name={"frame7"}
                        data-plasmic-override={overrides.frame7}
                        className={classNames(projectcss.all, sty.frame7)}
                      />

                      <PhPencilSimpleIcon
                        className={classNames(projectcss.all, sty.svg__ai8Y7)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"deleteIcon"}
                      data-plasmic-override={overrides.deleteIcon}
                      className={classNames(projectcss.all, sty.deleteIcon)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateUpload2Files"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["upload2", "files"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUpload2Files"] != null &&
                          typeof $steps["updateUpload2Files"] === "object" &&
                          typeof $steps["updateUpload2Files"].then ===
                            "function"
                        ) {
                          $steps["updateUpload2Files"] = await $steps[
                            "updateUpload2Files"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return event.stopPropagation();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["postgresUpdateMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "480b9e74-9c5c-4bcb-91b0-e654609fe8c1",
                                  userArgs: {
                                    conditions: [$ctx.SupabaseUser.user.id],
                                    variables: [null]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateMany"] != null &&
                          typeof $steps["postgresUpdateMany"] === "object" &&
                          typeof $steps["postgresUpdateMany"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateMany"] = await $steps[
                            "postgresUpdateMany"
                          ];
                        }
                      }}
                    >
                      <div
                        data-plasmic-name={"frame8"}
                        data-plasmic-override={overrides.frame8}
                        className={classNames(projectcss.all, sty.frame8)}
                      />

                      <PhTrashIcon
                        className={classNames(projectcss.all, sty.svg___3C99Q)}
                        role={"img"}
                      />
                    </div>
                  </UploadWrapper>
                </Stack__>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.formulaire),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["formulaire", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: (() => {
                      try {
                        return $queries.paramGetCompanyById.data[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["postgresUpdateMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "69585a24-0931-463c-a1b7-bb54827e817e",
                                userArgs: {
                                  conditions: [$ctx.SupabaseUser.user.id],
                                  variables: [
                                    $state.formulaire.value.name,
                                    $state.formulaire.value.descriptions,
                                    $state.formulaire.value.address,
                                    $state.formulaire.value.postal_code,
                                    $state.formulaire.value.location,
                                    $state.formulaire.value.country,
                                    $state.formulaire.value.siren,
                                    $state.formulaire.value.sector,
                                    $state.formulaire.value.team_size,
                                    $state.formulaire.value.website
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "e13b458c-532d-419c-bc09-41e0eb79063a"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateMany"] != null &&
                        typeof $steps["postgresUpdateMany"] === "object" &&
                        typeof $steps["postgresUpdateMany"].then === "function"
                      ) {
                        $steps["postgresUpdateMany"] = await $steps[
                          "postgresUpdateMany"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "Votre profil entreprise a bien \u00e9t\u00e9 mis \u00e0 jour !"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    },
                    onFinishFailed: async data => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = { args: ["error", "error"] };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["formulaire", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["formulaire"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "formulaire.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "formulaire.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"formulaire"}
                      data-plasmic-override={overrides.formulaire}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__n2HvJ
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__s9Hvh
                            )}
                          >
                            {"Nom de l'entreprise"}
                          </div>
                        }
                        name={"name"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput5"}
                          data-plasmic-override={overrides.textInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput5
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Nom de l'entreprise"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__b3L11
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__t1R00
                            )}
                          >
                            {"Pr\u00e9sentation courte"}
                          </div>
                        }
                        name={"descriptions"}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput"}
                          data-plasmic-override={overrides.textAreaInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pr\u00e9sentation"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__jg0Re
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pXcNo
                            )}
                          >
                            {"Adresse"}
                          </div>
                        }
                        name={"address"}
                      >
                        <TextInput
                          data-plasmic-name={"rue"}
                          data-plasmic-override={overrides.rue}
                          className={classNames("__wab_instance", sty.rue)}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "rue",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Rue"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"codePosteVille"}
                        data-plasmic-override={overrides.codePosteVille}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.codePosteVille
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__jg6X
                          )}
                          hidden={false}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__raBtx
                              )}
                            >
                              {""}
                            </div>
                          }
                          name={"postal_code"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"codePostal"}
                            data-plasmic-override={overrides.codePostal}
                            className={classNames(
                              "__wab_instance",
                              sty.codePostal
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "codePostal",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Code postal"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__k5Is4
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gVglM
                              )}
                            >
                              {"Adresse*"}
                            </div>
                          }
                          name={"location"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"ville"}
                            data-plasmic-override={overrides.ville}
                            className={classNames("__wab_instance", sty.ville)}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "ville",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Ville"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__tz9H6
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bfmNr
                            )}
                          >
                            {"Adresse*"}
                          </div>
                        }
                        name={"country"}
                        noLabel={true}
                      >
                        <Select
                          data-plasmic-name={"select6"}
                          data-plasmic-override={overrides.select6}
                          className={classNames("__wab_instance", sty.select6)}
                          initialSelectedValue={(() => {
                            try {
                              return $queries.paramGetCompanyById.data[0]
                                .country;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getCountries.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                data-plasmic-name={"menuItem"}
                                data-plasmic-override={overrides.menuItem}
                                className={classNames(
                                  "__wab_instance",
                                  sty.menuItem
                                )}
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select6",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pays"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__gnnov
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xKuX
                            )}
                          >
                            {"SIREN"}
                          </div>
                        }
                        name={"siren"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput6"}
                          data-plasmic-override={overrides.textInput6}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput6
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput6",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Num\u00e9ro"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__gh3Mt
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ngz4H
                            )}
                          >
                            {"Secteur d'activit\u00e9"}
                          </div>
                        }
                        name={"sector"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select3"}
                          data-plasmic-override={overrides.select3}
                          className={classNames("__wab_instance", sty.select3)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select3",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getCriteria.data
                                .filter(item => item.type === "sector_activity")
                                .map(item => ({
                                  value: item.name,
                                  label: item.name
                                }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={""}
                          popupScopeClassName={sty["select3__popup"]}
                          suffixIcon={
                            <ChevronDownIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__maaqq
                              )}
                              role={"img"}
                            />
                          }
                          value={generateStateValueProp($state, [
                            "select3",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__pmcez
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vl6Qz
                            )}
                          >
                            {"Taille de l'entreprise"}
                          </div>
                        }
                        name={"team_size"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select5"}
                          data-plasmic-override={overrides.select5}
                          className={classNames("__wab_instance", sty.select5)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select5",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getCriteria.data
                                .filter(item => item.type === "company_size")
                                .map(item => ({
                                  value: item.name,
                                  label: item.name
                                }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={""}
                          popupScopeClassName={sty["select5__popup"]}
                          suffixIcon={
                            <ChevronDownIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yMeZb
                              )}
                              role={"img"}
                            />
                          }
                          value={generateStateValueProp($state, [
                            "select5",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__nsxgp
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nrPoc
                            )}
                          >
                            {"Site web"}
                          </div>
                        }
                        name={"website"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput4"}
                          data-plasmic-override={overrides.textInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput4
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"https://"}
                        />
                      </FormItemWrapper>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__oo2UE
                        )}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__sNnfc
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mjsDj
                            )}
                          >
                            {"enregistrer les modifications"}
                          </div>
                        }
                        submitsForm={true}
                      />
                    </FormWrapper>
                  );
                })()}
              </div>
            </Stack__>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"expandTab"}
                data-plasmic-override={overrides.expandTab}
                hasGap={true}
                className={classNames(projectcss.all, sty.expandTab)}
                onClick={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = { args: ["/"] };
                        return $globalActions[
                          "SupabaseUserGlobalContext.logout"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
              >
                <SolarLogoutOutlineIcon
                  className={classNames(projectcss.all, sty.svg___0FXEu)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uiFkR
                  )}
                >
                  {"D\u00e9connexion"}
                </div>
              </Stack__>
            ) : null}
          </Stack__>
          <MobileNavbarBottom2
            data-plasmic-name={"mobileNavbarBottom2"}
            data-plasmic-override={overrides.mobileNavbarBottom2}
            className={classNames("__wab_instance", sty.mobileNavbarBottom2)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parametresEmployeur: [
    "parametresEmployeur",
    "mobileNavbarTop",
    "sidebar2",
    "main",
    "heading",
    "card4",
    "formulaire2",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput7",
    "deleteAccount2",
    "card3",
    "form",
    "resetPassword",
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "img",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "formulaire",
    "textInput5",
    "textAreaInput",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select6",
    "menuItem",
    "textInput6",
    "select3",
    "select5",
    "textInput4",
    "expandTab",
    "mobileNavbarBottom2"
  ],
  mobileNavbarTop: ["mobileNavbarTop"],
  sidebar2: ["sidebar2"],
  main: [
    "main",
    "heading",
    "card4",
    "formulaire2",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput7",
    "deleteAccount2",
    "card3",
    "form",
    "resetPassword",
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "img",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "formulaire",
    "textInput5",
    "textAreaInput",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select6",
    "menuItem",
    "textInput6",
    "select3",
    "select5",
    "textInput4",
    "expandTab"
  ],
  heading: ["heading"],
  card4: [
    "card4",
    "formulaire2",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput7",
    "deleteAccount2"
  ],
  formulaire2: [
    "formulaire2",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput7",
    "deleteAccount2"
  ],
  firstName: ["firstName"],
  lastName: ["lastName"],
  textInput3: ["textInput3"],
  telephone: ["telephone", "phoneSelector", "textInput7"],
  phoneSelector: ["phoneSelector"],
  textInput7: ["textInput7"],
  deleteAccount2: ["deleteAccount2"],
  card3: ["card3", "form", "resetPassword"],
  form: ["form", "resetPassword"],
  resetPassword: ["resetPassword"],
  informationsPersonnelles: [
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "img",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "formulaire",
    "textInput5",
    "textAreaInput",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select6",
    "menuItem",
    "textInput6",
    "select3",
    "select5",
    "textInput4"
  ],
  frame1437254343: [
    "frame1437254343",
    "upload2",
    "img",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8"
  ],
  upload2: ["upload2", "img", "editIcon", "frame7", "deleteIcon", "frame8"],
  img: ["img"],
  editIcon: ["editIcon", "frame7"],
  frame7: ["frame7"],
  deleteIcon: ["deleteIcon", "frame8"],
  frame8: ["frame8"],
  formulaire: [
    "formulaire",
    "textInput5",
    "textAreaInput",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select6",
    "menuItem",
    "textInput6",
    "select3",
    "select5",
    "textInput4"
  ],
  textInput5: ["textInput5"],
  textAreaInput: ["textAreaInput"],
  rue: ["rue"],
  codePosteVille: ["codePosteVille", "codePostal", "ville"],
  codePostal: ["codePostal"],
  ville: ["ville"],
  select6: ["select6", "menuItem"],
  menuItem: ["menuItem"],
  textInput6: ["textInput6"],
  select3: ["select3"],
  select5: ["select5"],
  textInput4: ["textInput4"],
  expandTab: ["expandTab"],
  mobileNavbarBottom2: ["mobileNavbarBottom2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  parametresEmployeur: "div";
  mobileNavbarTop: typeof MobileNavbarTop;
  sidebar2: typeof Sidebar2;
  main: "div";
  heading: "div";
  card4: "div";
  formulaire2: typeof FormWrapper;
  firstName: typeof TextInput;
  lastName: typeof TextInput;
  textInput3: typeof TextInput;
  telephone: "div";
  phoneSelector: typeof PhoneSelector;
  textInput7: typeof TextInput;
  deleteAccount2: typeof DeleteAccount2;
  card3: "div";
  form: typeof FormWrapper;
  resetPassword: typeof ResetPassword;
  informationsPersonnelles: "div";
  frame1437254343: "div";
  upload2: typeof UploadWrapper;
  img: typeof PlasmicImg__;
  editIcon: "div";
  frame7: "div";
  deleteIcon: "div";
  frame8: "div";
  formulaire: typeof FormWrapper;
  textInput5: typeof TextInput;
  textAreaInput: typeof TextAreaInput;
  rue: typeof TextInput;
  codePosteVille: "div";
  codePostal: typeof TextInput;
  ville: typeof TextInput;
  select6: typeof Select;
  menuItem: typeof MenuItem;
  textInput6: typeof TextInput;
  select3: typeof AntdSelect;
  select5: typeof AntdSelect;
  textInput4: typeof TextInput;
  expandTab: "div";
  mobileNavbarBottom2: typeof MobileNavbarBottom2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicParametresEmployeur__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicParametresEmployeur__VariantsArgs;
    args?: PlasmicParametresEmployeur__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicParametresEmployeur__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicParametresEmployeur__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicParametresEmployeur__ArgProps,
          internalVariantPropNames: PlasmicParametresEmployeur__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicParametresEmployeur__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "parametresEmployeur") {
    func.displayName = "PlasmicParametresEmployeur";
  } else {
    func.displayName = `PlasmicParametresEmployeur.${nodeName}`;
  }
  return func;
}

export const PlasmicParametresEmployeur = Object.assign(
  // Top-level PlasmicParametresEmployeur renders the root element
  makeNodeComponent("parametresEmployeur"),
  {
    // Helper components rendering sub-elements
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    sidebar2: makeNodeComponent("sidebar2"),
    main: makeNodeComponent("main"),
    heading: makeNodeComponent("heading"),
    card4: makeNodeComponent("card4"),
    formulaire2: makeNodeComponent("formulaire2"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    textInput3: makeNodeComponent("textInput3"),
    telephone: makeNodeComponent("telephone"),
    phoneSelector: makeNodeComponent("phoneSelector"),
    textInput7: makeNodeComponent("textInput7"),
    deleteAccount2: makeNodeComponent("deleteAccount2"),
    card3: makeNodeComponent("card3"),
    form: makeNodeComponent("form"),
    resetPassword: makeNodeComponent("resetPassword"),
    informationsPersonnelles: makeNodeComponent("informationsPersonnelles"),
    frame1437254343: makeNodeComponent("frame1437254343"),
    upload2: makeNodeComponent("upload2"),
    img: makeNodeComponent("img"),
    editIcon: makeNodeComponent("editIcon"),
    frame7: makeNodeComponent("frame7"),
    deleteIcon: makeNodeComponent("deleteIcon"),
    frame8: makeNodeComponent("frame8"),
    formulaire: makeNodeComponent("formulaire"),
    textInput5: makeNodeComponent("textInput5"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    rue: makeNodeComponent("rue"),
    codePosteVille: makeNodeComponent("codePosteVille"),
    codePostal: makeNodeComponent("codePostal"),
    ville: makeNodeComponent("ville"),
    select6: makeNodeComponent("select6"),
    menuItem: makeNodeComponent("menuItem"),
    textInput6: makeNodeComponent("textInput6"),
    select3: makeNodeComponent("select3"),
    select5: makeNodeComponent("select5"),
    textInput4: makeNodeComponent("textInput4"),
    expandTab: makeNodeComponent("expandTab"),
    mobileNavbarBottom2: makeNodeComponent("mobileNavbarBottom2"),

    // Metadata about props expected for PlasmicParametresEmployeur
    internalVariantProps: PlasmicParametresEmployeur__VariantProps,
    internalArgProps: PlasmicParametresEmployeur__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicParametresEmployeur;
/* prettier-ignore-end */
