/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: g2Wsra2qxoMV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import MobileNavbarBottom from "../../MobileNavbarBottom"; // plasmic-import: BIS-N7QZzUVV/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import DeleteAccount from "../../DeleteAccount"; // plasmic-import: KdtWnTG_vDHe/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicMesAlertes.module.css"; // plasmic-import: g2Wsra2qxoMV/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import NotificationBellSvgrepoComSvgIcon from "./icons/PlasmicIcon__NotificationBellSvgrepoComSvg"; // plasmic-import: dIeWzMIIc5ij/icon
import Vector20Icon from "./icons/PlasmicIcon__Vector20"; // plasmic-import: 3oXUWH4aUqgx/icon
import Vector21Icon from "./icons/PlasmicIcon__Vector21"; // plasmic-import: 4EUB4wFLEPEm/icon
import IconPhClockCountdownIcon from "./icons/PlasmicIcon__IconPhClockCountdown"; // plasmic-import: ZcpjJL-rRIkk/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import PencilSimpleLineIcon from "./icons/PlasmicIcon__PencilSimpleLine"; // plasmic-import: l9xLeGEs7UWH/icon
import IconPhBriefcaseIcon from "./icons/PlasmicIcon__IconPhBriefcase"; // plasmic-import: E-c3RGwvaig6/icon
import IconPhCoinsLightIcon from "./icons/PlasmicIcon__IconPhCoinsLight"; // plasmic-import: _nES3m4j5H0g/icon
import AlertCircleIcon from "./icons/PlasmicIcon__AlertCircle"; // plasmic-import: wmiG3ar5cZJO/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicMesAlertes__VariantMembers = {};
export type PlasmicMesAlertes__VariantsArgs = {};
type VariantPropType = keyof PlasmicMesAlertes__VariantsArgs;
export const PlasmicMesAlertes__VariantProps = new Array<VariantPropType>();

export type PlasmicMesAlertes__ArgsType = {};
type ArgPropType = keyof PlasmicMesAlertes__ArgsType;
export const PlasmicMesAlertes__ArgProps = new Array<ArgPropType>();

export type PlasmicMesAlertes__OverridesType = {
  mesAlertes?: Flex__<"div">;
  sidebar?: Flex__<typeof Sidebar>;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  main?: Flex__<"main">;
  h1?: Flex__<"h1">;
  alerts?: Flex__<"div">;
  loading?: Flex__<"div">;
  noAnnonce?: Flex__<"div">;
  featuredIcon2?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  text6?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  jobTitle?: Flex__<"h2">;
  department?: Flex__<"div">;
  tags?: Flex__<"div">;
  deleteEdit?: Flex__<"div">;
  mobileNavbarBottom?: Flex__<typeof MobileNavbarBottom>;
  createAlert?: Flex__<typeof Modal>;
  button?: Flex__<typeof JamButton>;
  alerteModal?: Flex__<"div">;
  modalTitle?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  select?: Flex__<typeof AntdSelect>;
  select4?: Flex__<typeof AntdSelect>;
  select2?: Flex__<typeof AntdSelect>;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  deleteAlert?: Flex__<typeof Modal>;
  modal3?: Flex__<"div">;
  content?: Flex__<"div">;
  featuredIcon?: Flex__<"div">;
  textAndSupportingText?: Flex__<"div">;
  text?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  frame1437254298?: Flex__<"div">;
  button4?: Flex__<typeof Button>;
  deleteAccount?: Flex__<typeof DeleteAccount>;
};

export interface DefaultMesAlertesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMesAlertes__RenderFunc(props: {
  variants: PlasmicMesAlertes__VariantsArgs;
  args: PlasmicMesAlertes__ArgsType;
  overrides: PlasmicMesAlertes__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "createAlert.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteAlert.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "currentAlert",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "jobName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCriteria: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "3c8bdc4e-677f-4634-aaef-8a13e1973a95",
        userArgs: {},
        cacheKey: `plasmic.$.3c8bdc4e-677f-4634-aaef-8a13e1973a95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getAlerts: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "51cfa6ad-54c7-439f-ad10-406a19a5bdf9",
        userArgs: {
          filters: [$ctx.SupabaseUser?.user?.id]
        },
        cacheKey: `plasmic.$.51cfa6ad-54c7-439f-ad10-406a19a5bdf9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJobOffersByJobName: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "ddc50872-b953-4597-bc64-96561ba6c1ce",
        userArgs: {
          query: [$state.form?.value?.job_title]
        },
        cacheKey: `plasmic.$.ddc50872-b953-4597-bc64-96561ba6c1ce.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCoordinates: usePlasmicDataOp(() => {
      return {
        sourceId: "3fRequBPthJKGmQ2njgcZi",
        opId: "aa010057-e02c-4841-8097-37c029a66625",
        userArgs: {
          headers: [$state.form.value.city]
        },
        cacheKey: `plasmic.$.aa010057-e02c-4841-8097-37c029a66625.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mesAlertes"}
          data-plasmic-override={overrides.mesAlertes}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mesAlertes
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance")}
          />

          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Stack__
            as={"main"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__kohVn)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Mes alertes"}
              </h1>
              {(() => {
                try {
                  return $queries.getAlerts?.data?.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Button
                  className={classNames("__wab_instance", sty.button__a9Gtr)}
                  end={
                    <GroupIcon
                      className={classNames(projectcss.all, sty.svg__kh3Ee)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n8SHv
                      )}
                    >
                      {"Cr\u00e9er une alerte"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["resetCurrentAlert"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentAlert"]
                            },
                            operation: 0,
                            value: {}
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["resetCurrentAlert"] != null &&
                      typeof $steps["resetCurrentAlert"] === "object" &&
                      typeof $steps["resetCurrentAlert"].then === "function"
                    ) {
                      $steps["resetCurrentAlert"] = await $steps[
                        "resetCurrentAlert"
                      ];
                    }

                    $steps["updateModalIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["createAlert", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalIsOpen"] != null &&
                      typeof $steps["updateModalIsOpen"] === "object" &&
                      typeof $steps["updateModalIsOpen"].then === "function"
                    ) {
                      $steps["updateModalIsOpen"] = await $steps[
                        "updateModalIsOpen"
                      ];
                    }
                  }}
                />
              ) : null}
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"alerts"}
              data-plasmic-override={overrides.alerts}
              hasGap={true}
              className={classNames(projectcss.all, sty.alerts)}
            >
              {(() => {
                try {
                  return $queries.getAlerts.isLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"loading"}
                  data-plasmic-override={overrides.loading}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.loading
                  )}
                >
                  {"Chargement..."}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return $queries.getAlerts.data.length == 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          $queries.getAlerts.data.length == 0 &&
                          $queries.getAlerts.isLoading == false
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"noAnnonce"}
                  data-plasmic-override={overrides.noAnnonce}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.noAnnonce)}
                >
                  <div
                    data-plasmic-name={"featuredIcon2"}
                    data-plasmic-override={overrides.featuredIcon2}
                    className={classNames(projectcss.all, sty.featuredIcon2)}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? NotificationBellSvgrepoComSvgIcon
                          : NotificationBellSvgrepoComSvgIcon
                      }
                      className={classNames(projectcss.all, sty.svg__aq2Ug)}
                      role={"img"}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textAndSupportingText2"}
                    data-plasmic-override={overrides.textAndSupportingText2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText2
                    )}
                  >
                    <div
                      data-plasmic-name={"text6"}
                      data-plasmic-override={overrides.text6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text6
                      )}
                    >
                      {"Vous n'avez pas encore d'alerte"}
                    </div>
                    <div
                      data-plasmic-name={"supportingText2"}
                      data-plasmic-override={overrides.supportingText2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText2
                      )}
                    >
                      {
                        "Cr\u00e9ez des alertes et recevez des notifications pour les offres d'emploi qui vous int\u00e9ressent."
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__seaXf
                      )}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__crfqi)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___29COm
                          )}
                        >
                          {"cr\u00e9er une alerte"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateCurrentAlert"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["currentAlert"]
                                },
                                operation: 0,
                                value: {}
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateCurrentAlert"] != null &&
                          typeof $steps["updateCurrentAlert"] === "object" &&
                          typeof $steps["updateCurrentAlert"].then ===
                            "function"
                        ) {
                          $steps["updateCurrentAlert"] = await $steps[
                            "updateCurrentAlert"
                          ];
                        }

                        $steps["goToAccueil"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["createAlert", "isOpen"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToAccueil"] != null &&
                          typeof $steps["goToAccueil"] === "object" &&
                          typeof $steps["goToAccueil"].then === "function"
                        ) {
                          $steps["goToAccueil"] = await $steps["goToAccueil"];
                        }
                      }}
                    />
                  </Stack__>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return !$queries.getAlerts.isLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
                ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.getAlerts.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mclch
                        )}
                        key={currentIndex}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jhZr
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aqUr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0SL6W
                              )}
                            >
                              <h2
                                data-plasmic-name={"jobTitle"}
                                data-plasmic-override={overrides.jobTitle}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h2,
                                  projectcss.__wab_text,
                                  sty.jobTitle
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.search_criteria
                                        .job_title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </h2>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"department"}
                                data-plasmic-override={overrides.department}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.department
                                )}
                              >
                                <Vector20Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__avZck
                                  )}
                                  role={"img"}
                                />

                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__t7QTp
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.search_criteria
                                          .department;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </p>
                              </Stack__>
                            </div>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"tags"}
                              data-plasmic-override={overrides.tags}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.tags)}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return currentItem.search_criteria
                                      .contract_types;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__qVgy
                                    )}
                                    key={currentIndex}
                                  >
                                    {(() => {
                                      try {
                                        return (
                                          $queries.getJobOffersByJobName.data[0]
                                            .job_title != ""
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__r7NoV)}
                                        displayHeight={"10px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"10px"}
                                        loading={"lazy"}
                                        src={{
                                          src: "/plasmic/jam_production_🚀/images/image7.svg",
                                          fullWidth: 20,
                                          fullHeight: 20,
                                          aspectRatio: 1
                                        }}
                                      />
                                    ) : null}
                                    <p
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.p,
                                        projectcss.__wab_text,
                                        sty.p__yUB7
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </p>
                                  </Stack__>
                                );
                              })}
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return currentItem.search_criteria
                                      .min_salary;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__rTtQc
                                    )}
                                    key={currentIndex}
                                  >
                                    <Vector21Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__hrmaM
                                      )}
                                      role={"img"}
                                    />

                                    <p
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.p,
                                        projectcss.__wab_text,
                                        sty.p__oMvra
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </p>
                                  </Stack__>
                                );
                              })}
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return currentItem.search_criteria
                                      .work_times;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ta0VM
                                    )}
                                    key={currentIndex}
                                  >
                                    <IconPhClockCountdownIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__j4AcK
                                      )}
                                      role={"img"}
                                    />

                                    <p
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.p,
                                        projectcss.__wab_text,
                                        sty.p__wdb69
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </p>
                                  </Stack__>
                                );
                              })}
                            </Stack__>
                          </Stack__>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___8NnKb
                            )}
                            color={"white"}
                            end={
                              <GroupIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fhRz0
                                )}
                                role={"img"}
                              />
                            }
                            iconEnd={true}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v05Ta
                                )}
                              >
                                {"Voir les offres"}
                              </div>
                            }
                            onClick={async event => {
                              const $steps = {};

                              $steps["goToPage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: (() => {
                                        try {
                                          return (
                                            "/?name=" +
                                            currentItem.search_criteria
                                              .job_title +
                                            "&city=" +
                                            currentItem.search_criteria
                                              .department +
                                            "&work_times=" +
                                            currentItem.search_criteria
                                              .work_times +
                                            "&contract_types=" +
                                            currentItem.search_criteria
                                              .contract_types +
                                            "&min_salary=" +
                                            currentItem.search_criteria
                                              .min_salary
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }
                            }}
                            type={"bordered"}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"deleteEdit"}
                          data-plasmic-override={overrides.deleteEdit}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.deleteEdit)}
                        >
                          <PhTrashIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__iVl8M
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateDeleteAlertIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["deleteAlert", "isOpen"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDeleteAlertIsOpen"] != null &&
                                typeof $steps["updateDeleteAlertIsOpen"] ===
                                  "object" &&
                                typeof $steps["updateDeleteAlertIsOpen"]
                                  .then === "function"
                              ) {
                                $steps["updateDeleteAlertIsOpen"] =
                                  await $steps["updateDeleteAlertIsOpen"];
                              }

                              $steps["updateCurrentAlert"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentAlert"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentAlert"] != null &&
                                typeof $steps["updateCurrentAlert"] ===
                                  "object" &&
                                typeof $steps["updateCurrentAlert"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentAlert"] = await $steps[
                                  "updateCurrentAlert"
                                ];
                              }
                            }}
                            role={"img"}
                          />

                          <PencilSimpleLineIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___1Nx5J
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateModalIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["createAlert", "isOpen"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalIsOpen"] != null &&
                                typeof $steps["updateModalIsOpen"] ===
                                  "object" &&
                                typeof $steps["updateModalIsOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateModalIsOpen"] = await $steps[
                                  "updateModalIsOpen"
                                ];
                              }

                              $steps["updateModalIsOpen2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentAlert"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalIsOpen2"] != null &&
                                typeof $steps["updateModalIsOpen2"] ===
                                  "object" &&
                                typeof $steps["updateModalIsOpen2"].then ===
                                  "function"
                              ) {
                                $steps["updateModalIsOpen2"] = await $steps[
                                  "updateModalIsOpen2"
                                ];
                              }
                            }}
                            role={"img"}
                          />
                        </Stack__>
                      </Stack__>
                    );
                  })
                : null}
            </Stack__>
          </Stack__>
          <MobileNavbarBottom
            data-plasmic-name={"mobileNavbarBottom"}
            data-plasmic-override={overrides.mobileNavbarBottom}
            className={classNames("__wab_instance", sty.mobileNavbarBottom)}
          />

          <Modal
            data-plasmic-name={"createAlert"}
            data-plasmic-override={overrides.createAlert}
            className={classNames("__wab_instance", sty.createAlert)}
            closeOnBackdropClick={false}
            content={
              <Stack__
                as={"div"}
                data-plasmic-name={"alerteModal"}
                data-plasmic-override={overrides.alerteModal}
                hasGap={true}
                className={classNames(projectcss.all, sty.alerteModal)}
              >
                <div
                  data-plasmic-name={"modalTitle"}
                  data-plasmic-override={overrides.modalTitle}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.modalTitle
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.currentAlert.id
                          ? "Modifier l'alerte"
                          : "Créez une alerte";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Cr\u00e9ez une alerte";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [],
                    initialValues: (() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["createCriteria"] = !$queries.getAlerts.data.some(
                        alert => alert.id === $state.currentAlert.id
                      )
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "845a7636-7df4-4005-bd44-88719c502044",
                                userArgs: {
                                  variables: [
                                    $state.form.value,
                                    $ctx.SupabaseUser.user.id
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "51cfa6ad-54c7-439f-ad10-406a19a5bdf9"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["createCriteria"] != null &&
                        typeof $steps["createCriteria"] === "object" &&
                        typeof $steps["createCriteria"].then === "function"
                      ) {
                        $steps["createCriteria"] = await $steps[
                          "createCriteria"
                        ];
                      }

                      $steps["updateCriteriaById"] =
                        $state.currentAlert.id !== undefined
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "1136a77c-6f83-4fbf-9d8d-8e8d51da6282",
                                  userArgs: {
                                    keys: [$state.currentAlert.id],
                                    variables: [
                                      $state?.form.value,
                                      $state.currentAlert?.user_id
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [
                                    "51cfa6ad-54c7-439f-ad10-406a19a5bdf9"
                                  ],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateCriteriaById"] != null &&
                        typeof $steps["updateCriteriaById"] === "object" &&
                        typeof $steps["updateCriteriaById"].then === "function"
                      ) {
                        $steps["updateCriteriaById"] = await $steps[
                          "updateCriteriaById"
                        ];
                      }

                      $steps["updateModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["createAlert", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalIsOpen"] != null &&
                        typeof $steps["updateModalIsOpen"] === "object" &&
                        typeof $steps["updateModalIsOpen"].then === "function"
                      ) {
                        $steps["updateModalIsOpen"] = await $steps[
                          "updateModalIsOpen"
                        ];
                      }

                      $steps["updateModalIsOpen2"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                (() => {
                                  try {
                                    return !$queries.getAlerts.data.some(
                                      alert =>
                                        alert.id === $state.currentAlert.id
                                    )
                                      ? "Votre alerte a bien été créée"
                                      : "Votre alerte a bien été modifiée";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalIsOpen2"] != null &&
                        typeof $steps["updateModalIsOpen2"] === "object" &&
                        typeof $steps["updateModalIsOpen2"].then === "function"
                      ) {
                        $steps["updateModalIsOpen2"] = await $steps[
                          "updateModalIsOpen2"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__fgi0Z
                        )}
                        initialValue={
                          $state.currentAlert.search_criteria?.job_title ?? ""
                        }
                        label={"Intitul\u00e9 du poste"}
                        name={"job_title"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput
                          )}
                          defaultValue={(() => {
                            try {
                              return (
                                $state.currentAlert.search_criteria
                                  ?.job_title ?? ""
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          inputType={"text"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Ex : D\u00e9veloppeur"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__p9DDn
                        )}
                        initialValue={
                          $state.currentAlert.search_criteria?.department ?? ""
                        }
                        label={"Ville"}
                        name={"city"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput2"}
                          data-plasmic-override={overrides.textInput2}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput2
                          )}
                          defaultValue={(() => {
                            try {
                              return (
                                $state.currentAlert.search_criteria
                                  ?.department ?? ""
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          inputType={"text"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput2",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Ex : Paris"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__a1X2X
                        )}
                        hidden={false}
                        initialValue={(() => {
                          try {
                            return (
                              $state.currentAlert?.search_criteria
                                ?.work_times ?? undefined
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Temps de travail"}
                        name={"work_times"}
                        preserve={true}
                        validateTrigger={[]}
                      >
                        <AntdSelect
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          autoFocus={false}
                          bordered={false}
                          className={classNames("__wab_instance", sty.select)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ]).apply(null, eventArgs);

                            (async (value, option) => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return undefined;
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getCriteria.data
                                .filter(item => item.type === "working_time")
                                .map(item => ({
                                  label: item.name,
                                  value: item.name
                                }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lbmq
                              )}
                            >
                              <IconPhClockCountdownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___5AhZb
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6Pv1Z
                                )}
                              >
                                {"Select..."}
                              </div>
                            </Stack__>
                          }
                          popupScopeClassName={sty["select__popup"]}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__luBtz
                        )}
                        initialValue={(() => {
                          try {
                            return (
                              $state.currentAlert?.search_criteria
                                ?.contract_types ?? undefined
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Type de contrat"}
                        name={"contract_types"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select4"}
                          data-plasmic-override={overrides.select4}
                          bordered={false}
                          className={classNames("__wab_instance", sty.select4)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select4",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getCriteria.data
                                .filter(item => item.type === "contract_type")
                                .map(item => ({
                                  label: item.name,
                                  value: item.name
                                }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__m20Pl
                              )}
                            >
                              <IconPhBriefcaseIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sqGqk
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yMl9V
                                )}
                              >
                                {"Select..."}
                              </div>
                            </Stack__>
                          }
                          popupScopeClassName={sty["select4__popup"]}
                          value={generateStateValueProp($state, [
                            "select4",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__sHjY
                        )}
                        initialValue={(() => {
                          try {
                            return (
                              $state.currentAlert?.search_criteria
                                ?.min_salary ?? undefined
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Salaire minimum"}
                        name={"min_salary"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select2"}
                          data-plasmic-override={overrides.select2}
                          bordered={false}
                          className={classNames("__wab_instance", sty.select2)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select2",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getCriteria.data
                                .filter(item => item.type === "salary")
                                .map(item => ({
                                  label: item.name,
                                  value: item.name
                                }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0ZRE
                              )}
                            >
                              <IconPhCoinsLightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__eFsXw
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v4Vt7
                                )}
                              >
                                {"Select..."}
                              </div>
                            </Stack__>
                          }
                          popupScopeClassName={sty["select2__popup"]}
                          value={generateStateValueProp($state, [
                            "select2",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ifGQx
                        )}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mviUc
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fpDjg
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.currentAlert.id
                                    ? "Modifier l'alerte"
                                    : "Enregistrer l'alerte";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "enregistrer l'alerte";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        submitsForm={true}
                      />

                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__ecb3C
                        )}
                        hidden={true}
                        initialValue={
                          $queries.getCoordinates?.data?.response?.features[0]
                            ?.geometry?.coordinates[1]
                        }
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7Qidm
                            )}
                          >
                            {"Label"}
                          </div>
                        }
                        name={"latitude"}
                        noLabel={true}
                      >
                        <TextInput
                          data-plasmic-name={"textInput3"}
                          data-plasmic-override={overrides.textInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput3
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.getCoordinates?.data?.response
                                ?.features[0]?.geometry?.coordinates[1];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput3",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___0B
                        )}
                        hidden={true}
                        initialValue={
                          $queries.getCoordinates?.data?.response?.features[0]
                            ?.geometry?.coordinates[0]
                        }
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vsQFv
                            )}
                          >
                            {"Label"}
                          </div>
                        }
                        name={"longitude"}
                        noLabel={true}
                      >
                        <TextInput
                          data-plasmic-name={"textInput4"}
                          data-plasmic-override={overrides.textInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput4
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.getCoordinates?.data?.response
                                ?.features[0]?.geometry?.coordinates[0];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        />
                      </FormItemWrapper>
                    </FormWrapper>
                  );
                })()}
              </Stack__>
            }
            footer={null}
            heading={
              <React.Fragment>
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__g8Ju1
                  )}
                >
                  {"Heading"}
                </h3>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : (() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__eB7An)}
                    displayHeight={"17px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"17px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCreateAlertIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["createAlert", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCreateAlertIsOpen"] != null &&
                        typeof $steps["updateCreateAlertIsOpen"] === "object" &&
                        typeof $steps["updateCreateAlertIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateCreateAlertIsOpen"] = await $steps[
                          "updateCreateAlertIsOpen"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/jam_production_🚀/images/close3.svg",
                      fullWidth: 17,
                      fullHeight: 17,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
              </React.Fragment>
            }
            isOpen={generateStateValueProp($state, ["createAlert", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "createAlert",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={true}
            trigger={
              <JamButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                icon={"none"}
              />
            }
          />

          <Modal
            data-plasmic-name={"deleteAlert"}
            data-plasmic-override={overrides.deleteAlert}
            className={classNames("__wab_instance", sty.deleteAlert)}
            content={
              <Stack__
                as={"div"}
                data-plasmic-name={"modal3"}
                data-plasmic-override={overrides.modal3}
                hasGap={true}
                className={classNames(projectcss.all, sty.modal3)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content)}
                >
                  <div
                    data-plasmic-name={"featuredIcon"}
                    data-plasmic-override={overrides.featuredIcon}
                    className={classNames(projectcss.all, sty.featuredIcon)}
                  >
                    <AlertCircleIcon
                      className={classNames(projectcss.all, sty.svg__wYxNy)}
                      role={"img"}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textAndSupportingText"}
                    data-plasmic-override={overrides.textAndSupportingText}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText
                    )}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Supprimer l'alerte"}
                    </div>
                    <div
                      data-plasmic-name={"supportingText"}
                      data-plasmic-override={overrides.supportingText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText
                      )}
                    >
                      {
                        "\u00cates-vous s\u00fbr de vouloir supprimer cette alerte ? \nCette action est irr\u00e9versible."
                      }
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437254298"}
                  data-plasmic-override={overrides.frame1437254298}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437254298)}
                >
                  <Button
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames("__wab_instance", sty.button4)}
                    color={"white"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a3CiL
                        )}
                      >
                        {"ANNULER"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDeleteAlertIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteAlert", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDeleteAlertIsOpen"] != null &&
                        typeof $steps["updateDeleteAlertIsOpen"] === "object" &&
                        typeof $steps["updateDeleteAlertIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateDeleteAlertIsOpen"] = await $steps[
                          "updateDeleteAlertIsOpen"
                        ];
                      }
                    }}
                    size={"small"}
                    type={"bordered"}
                  />

                  <DeleteAccount
                    data-plasmic-name={"deleteAccount"}
                    data-plasmic-override={overrides.deleteAccount}
                    className={classNames("__wab_instance", sty.deleteAccount)}
                    color={"errorDestructive"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dWvV
                        )}
                      >
                        {"Supprimer"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["postgresDeleteMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "b2458529-b780-480c-beaa-7efe20e05b43",
                                userArgs: {
                                  conditions: [$state.currentAlert?.id]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "51cfa6ad-54c7-439f-ad10-406a19a5bdf9"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresDeleteMany"] != null &&
                        typeof $steps["postgresDeleteMany"] === "object" &&
                        typeof $steps["postgresDeleteMany"].then === "function"
                      ) {
                        $steps["postgresDeleteMany"] = await $steps[
                          "postgresDeleteMany"
                        ];
                      }

                      $steps["updateDeleteAlertIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteAlert", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDeleteAlertIsOpen"] != null &&
                        typeof $steps["updateDeleteAlertIsOpen"] === "object" &&
                        typeof $steps["updateDeleteAlertIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateDeleteAlertIsOpen"] = await $steps[
                          "updateDeleteAlertIsOpen"
                        ];
                      }
                    }}
                  />
                </Stack__>
              </Stack__>
            }
            heading={
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3___11Jsa
                )}
              >
                {"Heading"}
              </h3>
            }
            isOpen={generateStateValueProp($state, ["deleteAlert", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "deleteAlert",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mesAlertes: [
    "mesAlertes",
    "sidebar",
    "mobileNavbarTop",
    "main",
    "h1",
    "alerts",
    "loading",
    "noAnnonce",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2",
    "jobTitle",
    "department",
    "tags",
    "deleteEdit",
    "mobileNavbarBottom",
    "createAlert",
    "button",
    "alerteModal",
    "modalTitle",
    "form",
    "textInput",
    "textInput2",
    "select",
    "select4",
    "select2",
    "textInput3",
    "textInput4",
    "deleteAlert",
    "modal3",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame1437254298",
    "button4",
    "deleteAccount"
  ],
  sidebar: ["sidebar"],
  mobileNavbarTop: ["mobileNavbarTop"],
  main: [
    "main",
    "h1",
    "alerts",
    "loading",
    "noAnnonce",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2",
    "jobTitle",
    "department",
    "tags",
    "deleteEdit"
  ],
  h1: ["h1"],
  alerts: [
    "alerts",
    "loading",
    "noAnnonce",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2",
    "jobTitle",
    "department",
    "tags",
    "deleteEdit"
  ],
  loading: ["loading"],
  noAnnonce: [
    "noAnnonce",
    "featuredIcon2",
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  featuredIcon2: ["featuredIcon2"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text6",
    "supportingText2"
  ],
  text6: ["text6"],
  supportingText2: ["supportingText2"],
  jobTitle: ["jobTitle"],
  department: ["department"],
  tags: ["tags"],
  deleteEdit: ["deleteEdit"],
  mobileNavbarBottom: ["mobileNavbarBottom"],
  createAlert: [
    "createAlert",
    "button",
    "alerteModal",
    "modalTitle",
    "form",
    "textInput",
    "textInput2",
    "select",
    "select4",
    "select2",
    "textInput3",
    "textInput4"
  ],
  button: ["button"],
  alerteModal: [
    "alerteModal",
    "modalTitle",
    "form",
    "textInput",
    "textInput2",
    "select",
    "select4",
    "select2",
    "textInput3",
    "textInput4"
  ],
  modalTitle: ["modalTitle"],
  form: [
    "form",
    "textInput",
    "textInput2",
    "select",
    "select4",
    "select2",
    "textInput3",
    "textInput4"
  ],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  select: ["select"],
  select4: ["select4"],
  select2: ["select2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  deleteAlert: [
    "deleteAlert",
    "modal3",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame1437254298",
    "button4",
    "deleteAccount"
  ],
  modal3: [
    "modal3",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame1437254298",
    "button4",
    "deleteAccount"
  ],
  content: [
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text",
    "supportingText"
  ],
  featuredIcon: ["featuredIcon"],
  textAndSupportingText: ["textAndSupportingText", "text", "supportingText"],
  text: ["text"],
  supportingText: ["supportingText"],
  frame1437254298: ["frame1437254298", "button4", "deleteAccount"],
  button4: ["button4"],
  deleteAccount: ["deleteAccount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mesAlertes: "div";
  sidebar: typeof Sidebar;
  mobileNavbarTop: typeof MobileNavbarTop;
  main: "main";
  h1: "h1";
  alerts: "div";
  loading: "div";
  noAnnonce: "div";
  featuredIcon2: "div";
  textAndSupportingText2: "div";
  text6: "div";
  supportingText2: "div";
  jobTitle: "h2";
  department: "div";
  tags: "div";
  deleteEdit: "div";
  mobileNavbarBottom: typeof MobileNavbarBottom;
  createAlert: typeof Modal;
  button: typeof JamButton;
  alerteModal: "div";
  modalTitle: "div";
  form: typeof FormWrapper;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  select: typeof AntdSelect;
  select4: typeof AntdSelect;
  select2: typeof AntdSelect;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  deleteAlert: typeof Modal;
  modal3: "div";
  content: "div";
  featuredIcon: "div";
  textAndSupportingText: "div";
  text: "div";
  supportingText: "div";
  frame1437254298: "div";
  button4: typeof Button;
  deleteAccount: typeof DeleteAccount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMesAlertes__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMesAlertes__VariantsArgs;
    args?: PlasmicMesAlertes__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMesAlertes__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMesAlertes__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMesAlertes__ArgProps,
          internalVariantPropNames: PlasmicMesAlertes__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMesAlertes__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mesAlertes") {
    func.displayName = "PlasmicMesAlertes";
  } else {
    func.displayName = `PlasmicMesAlertes.${nodeName}`;
  }
  return func;
}

export const PlasmicMesAlertes = Object.assign(
  // Top-level PlasmicMesAlertes renders the root element
  makeNodeComponent("mesAlertes"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    main: makeNodeComponent("main"),
    h1: makeNodeComponent("h1"),
    alerts: makeNodeComponent("alerts"),
    loading: makeNodeComponent("loading"),
    noAnnonce: makeNodeComponent("noAnnonce"),
    featuredIcon2: makeNodeComponent("featuredIcon2"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text6: makeNodeComponent("text6"),
    supportingText2: makeNodeComponent("supportingText2"),
    jobTitle: makeNodeComponent("jobTitle"),
    department: makeNodeComponent("department"),
    tags: makeNodeComponent("tags"),
    deleteEdit: makeNodeComponent("deleteEdit"),
    mobileNavbarBottom: makeNodeComponent("mobileNavbarBottom"),
    createAlert: makeNodeComponent("createAlert"),
    button: makeNodeComponent("button"),
    alerteModal: makeNodeComponent("alerteModal"),
    modalTitle: makeNodeComponent("modalTitle"),
    form: makeNodeComponent("form"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    select: makeNodeComponent("select"),
    select4: makeNodeComponent("select4"),
    select2: makeNodeComponent("select2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    deleteAlert: makeNodeComponent("deleteAlert"),
    modal3: makeNodeComponent("modal3"),
    content: makeNodeComponent("content"),
    featuredIcon: makeNodeComponent("featuredIcon"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text: makeNodeComponent("text"),
    supportingText: makeNodeComponent("supportingText"),
    frame1437254298: makeNodeComponent("frame1437254298"),
    button4: makeNodeComponent("button4"),
    deleteAccount: makeNodeComponent("deleteAccount"),

    // Metadata about props expected for PlasmicMesAlertes
    internalVariantProps: PlasmicMesAlertes__VariantProps,
    internalArgProps: PlasmicMesAlertes__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMesAlertes;
/* prettier-ignore-end */
