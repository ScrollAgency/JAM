/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: -xst-G3CRLYp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicAlertCard.module.css"; // plasmic-import: -xst-G3CRLYp/css

import Vector20Icon from "./icons/PlasmicIcon__Vector20"; // plasmic-import: 3oXUWH4aUqgx/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import PencilSimpleLineIcon from "./icons/PlasmicIcon__PencilSimpleLine"; // plasmic-import: l9xLeGEs7UWH/icon
import Vector21Icon from "./icons/PlasmicIcon__Vector21"; // plasmic-import: 4EUB4wFLEPEm/icon
import IconPhClockIcon from "./icons/PlasmicIcon__IconPhClock"; // plasmic-import: vCpr2sLhwGJi/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon

createPlasmicElementProxy;

export type PlasmicAlertCard__VariantMembers = {};
export type PlasmicAlertCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicAlertCard__VariantsArgs;
export const PlasmicAlertCard__VariantProps = new Array<VariantPropType>();

export type PlasmicAlertCard__ArgsType = {
  getAlerts?: any;
  currentItem?: any;
  onClickEdit?: (event: any) => void;
  onClickDelete?: (event: any) => void;
};
type ArgPropType = keyof PlasmicAlertCard__ArgsType;
export const PlasmicAlertCard__ArgProps = new Array<ArgPropType>(
  "getAlerts",
  "currentItem",
  "onClickEdit",
  "onClickDelete"
);

export type PlasmicAlertCard__OverridesType = {
  root?: Flex__<"div">;
  jobTitle?: Flex__<"h2">;
  ville?: Flex__<"div">;
  deleteEdit?: Flex__<"div">;
  tags?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
  text?: Flex__<"div">;
};

export interface DefaultAlertCardProps {
  getAlerts?: any;
  currentItem?: any;
  onClickEdit?: (event: any) => void;
  onClickDelete?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAlertCard__RenderFunc(props: {
  variants: PlasmicAlertCard__VariantsArgs;
  args: PlasmicAlertCard__ArgsType;
  overrides: PlasmicAlertCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__fzEIh)}>
        <div className={classNames(projectcss.all, sty.freeBox___83SLy)}>
          <div className={classNames(projectcss.all, sty.freeBox__msr2K)}>
            <h2
              data-plasmic-name={"jobTitle"}
              data-plasmic-override={overrides.jobTitle}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.jobTitle
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.currentItem.search_criteria.job_title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h2>
            <div
              data-plasmic-name={"ville"}
              data-plasmic-override={overrides.ville}
              className={classNames(projectcss.all, sty.ville)}
            >
              <Vector20Icon
                className={classNames(projectcss.all, sty.svg__odCvg)}
                role={"img"}
              />

              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__jahnS
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.currentItem.search_criteria.city;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </p>
            </div>
          </div>
          <div
            data-plasmic-name={"deleteEdit"}
            data-plasmic-override={overrides.deleteEdit}
            className={classNames(projectcss.all, sty.deleteEdit)}
          >
            <PhTrashIcon
              className={classNames(projectcss.all, sty.svg__l0Zs3)}
              onClick={args.onClickDelete}
              role={"img"}
            />

            <PencilSimpleLineIcon
              className={classNames(projectcss.all, sty.svg___6Uf4S)}
              onClick={args.onClickEdit}
              role={"img"}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"tags"}
          data-plasmic-override={overrides.tags}
          className={classNames(projectcss.all, sty.tags)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.currentItem.search_criteria.contract_types;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__ywP6)}
                key={currentIndex}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"14px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"14px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/jam_production_ðŸš€/images/image7.svg",
                    fullWidth: 20,
                    fullHeight: 20,
                    aspectRatio: 1
                  }}
                />

                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__skJcg
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </p>
              </div>
            );
          })}
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.currentItem.search_criteria.min_salary;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__wZofj)}
                key={currentIndex}
              >
                <Vector21Icon
                  className={classNames(projectcss.all, sty.svg___2W09M)}
                  role={"img"}
                />

                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p___5QocY
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </p>
              </div>
            );
          })}
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.currentItem.search_criteria.work_times;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__kvPir)}
                key={currentIndex}
              >
                <IconPhClockIcon
                  className={classNames(projectcss.all, sty.svg__woS9I)}
                  role={"img"}
                />

                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__lLhrp
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </p>
              </div>
            );
          })}
        </div>
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        color={"white"}
        end={
          <GroupIcon
            className={classNames(projectcss.all, sty.svg__smNm6)}
            role={"img"}
          />
        }
        iconEnd={true}
        label={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Voir les offres"}
          </div>
        }
        onClick={async event => {
          const $steps = {};

          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return (
                        "/?name=" +
                        $props.currentItem.search_criteria.job_title +
                        "&city=" +
                        $props.currentItem.search_criteria.city +
                        "&work_times=" +
                        $props.currentItem.search_criteria.work_times +
                        "&contract_types=" +
                        $props.currentItem.search_criteria.contract_types +
                        "&min_salary=" +
                        $props.currentItem.search_criteria.min_salary
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }
        }}
        type={"bordered"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "jobTitle",
    "ville",
    "deleteEdit",
    "tags",
    "img",
    "button",
    "text"
  ],
  jobTitle: ["jobTitle"],
  ville: ["ville"],
  deleteEdit: ["deleteEdit"],
  tags: ["tags", "img"],
  img: ["img"],
  button: ["button", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  jobTitle: "h2";
  ville: "div";
  deleteEdit: "div";
  tags: "div";
  img: typeof PlasmicImg__;
  button: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAlertCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAlertCard__VariantsArgs;
    args?: PlasmicAlertCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAlertCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAlertCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAlertCard__ArgProps,
          internalVariantPropNames: PlasmicAlertCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAlertCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAlertCard";
  } else {
    func.displayName = `PlasmicAlertCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAlertCard = Object.assign(
  // Top-level PlasmicAlertCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    jobTitle: makeNodeComponent("jobTitle"),
    ville: makeNodeComponent("ville"),
    deleteEdit: makeNodeComponent("deleteEdit"),
    tags: makeNodeComponent("tags"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicAlertCard
    internalVariantProps: PlasmicAlertCard__VariantProps,
    internalArgProps: PlasmicAlertCard__ArgProps
  }
);

export default PlasmicAlertCard;
/* prettier-ignore-end */
