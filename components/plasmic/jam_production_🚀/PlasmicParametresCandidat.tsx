/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: urNyxs5aX-pA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import Switch from "../../Switch"; // plasmic-import: 5AuMkYqOTdqa/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { PhoneSelector } from "../../forms/PhoneSelector/PhoneSelector"; // plasmic-import: sOyePdANTQ6t/codeComponent
import Select from "../../Select"; // plasmic-import: ZMB-SB-xJDyQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: plmAgyhhAdMc/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: nVAUbPc6gpoz/component
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import { ResetPassword } from "../../../plasmic-library/authentication/ResetPassword"; // plasmic-import: Ju3qM8OwHoNT/codeComponent
import DeleteAccount2 from "../../DeleteAccount2"; // plasmic-import: Aiz3LwUBdbOf/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import DeleteAccount from "../../DeleteAccount"; // plasmic-import: KdtWnTG_vDHe/component
import MobileNavbarBottom from "../../MobileNavbarBottom"; // plasmic-import: BIS-N7QZzUVV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicParametresCandidat.module.css"; // plasmic-import: urNyxs5aX-pA/css

import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import ChevronDown2Icon from "./icons/PlasmicIcon__ChevronDown2"; // plasmic-import: ImRzoqJkNumw/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: I5WL24ilJ3LK/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: yud1FH0Ox1FR/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import ReshotIconAlert7T6Wum8VleSvgIcon from "./icons/PlasmicIcon__ReshotIconAlert7T6Wum8VleSvg"; // plasmic-import: I2J7nwYmWkrC/icon
import SolarLogoutOutlineIcon from "./icons/PlasmicIcon__SolarLogoutOutline"; // plasmic-import: UZfkN-2mqbQ1/icon

createPlasmicElementProxy;

export type PlasmicParametresCandidat__VariantMembers = {};
export type PlasmicParametresCandidat__VariantsArgs = {};
type VariantPropType = keyof PlasmicParametresCandidat__VariantsArgs;
export const PlasmicParametresCandidat__VariantProps =
  new Array<VariantPropType>();

export type PlasmicParametresCandidat__ArgsType = {};
type ArgPropType = keyof PlasmicParametresCandidat__ArgsType;
export const PlasmicParametresCandidat__ArgProps = new Array<ArgPropType>();

export type PlasmicParametresCandidat__OverridesType = {
  parametresDeCompte?: Flex__<"div">;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  sidebar?: Flex__<typeof Sidebar>;
  main?: Flex__<"main">;
  heading?: Flex__<"h1">;
  container?: Flex__<"div">;
  informationsPersonnelles?: Flex__<"div">;
  frame1437254343?: Flex__<"div">;
  upload2?: Flex__<typeof UploadWrapper>;
  editIcon?: Flex__<"div">;
  frame7?: Flex__<"div">;
  deleteIcon?: Flex__<"div">;
  frame8?: Flex__<"div">;
  tableCell?: Flex__<"div">;
  _switch?: Flex__<typeof Switch>;
  text6?: Flex__<"div">;
  textInputBase6?: Flex__<"div">;
  hintText6?: Flex__<"div">;
  formulaire?: Flex__<typeof FormWrapper>;
  prenomNom?: Flex__<"div">;
  firstName?: Flex__<typeof TextInput>;
  lastName?: Flex__<typeof TextInput>;
  textInput3?: Flex__<typeof TextInput>;
  telephone?: Flex__<"div">;
  phoneSelector?: Flex__<typeof PhoneSelector>;
  textInput5?: Flex__<typeof TextInput>;
  rue?: Flex__<typeof TextInput>;
  codePosteVille?: Flex__<"div">;
  codePostal?: Flex__<typeof TextInput>;
  ville?: Flex__<typeof TextInput>;
  select4?: Flex__<typeof Select>;
  modeOfTransportSelect?: Flex__<typeof AntdSelect>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  select3?: Flex__<typeof AntdSelect>;
  select8?: Flex__<typeof AntdSelect>;
  select?: Flex__<typeof Select>;
  textInput4?: Flex__<typeof TextInput>;
  cvModificationDuMdp?: Flex__<"div">;
  uploadCvLdm?: Flex__<"div">;
  frame10?: Flex__<"div">;
  email?: Flex__<"div">;
  cvnoUpload?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  content?: Flex__<"div">;
  cvUpload?: Flex__<"div">;
  content5?: Flex__<"div">;
  frame11?: Flex__<"div">;
  email2?: Flex__<"div">;
  lmNoUpload?: Flex__<"div">;
  upload3?: Flex__<typeof UploadWrapper>;
  lmUpload?: Flex__<"div">;
  content3?: Flex__<"div">;
  reinitialisationDuMdp?: Flex__<"div">;
  card3?: Flex__<"div">;
  resetPassword?: Flex__<typeof ResetPassword>;
  form?: Flex__<typeof FormWrapper>;
  card4?: Flex__<"div">;
  deleteAccount2?: Flex__<typeof DeleteAccount2>;
  supprCompte?: Flex__<typeof Modal>;
  e?: Flex__<"div">;
  deleteAccount?: Flex__<typeof DeleteAccount>;
  expandTab?: Flex__<"div">;
  mobileNavbarBottom?: Flex__<typeof MobileNavbarBottom>;
};

export interface DefaultParametresCandidatProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicParametresCandidat__RenderFunc(props: {
  variants: PlasmicParametresCandidat__VariantsArgs;
  args: PlasmicParametresCandidat__ArgsType;
  overrides: PlasmicParametresCandidat__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "mdp1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mdp2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "formulaire.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formulaire",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formulaire.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formulaire",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "firstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lastName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "resetPassword.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "resetPassword.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload3.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "isJobSearchActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "_switch.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getMe.data[0].is_active_search;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "supprCompte.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "coordinates",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "countries",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "Afghanistan",
          "Afrique du Sud",
          "Albanie",
          "Alg\u00e9rie",
          "Allemagne",
          "Andorre",
          "Angola",
          "Antigua-et-Barbuda",
          "Arabie saoudite",
          "Argentine",
          "Arm\u00e9nie",
          "Australie",
          "Autriche",
          "Azerba\u00efdjan",
          "Bahamas",
          "Bahre\u00efn",
          "Bangladesh",
          "Barbade",
          "Belgique",
          "Belize",
          "B\u00e9nin",
          "Bhoutan",
          "Bi\u00e9lorussie",
          "Birmanie (Myanmar)",
          "Bolivie",
          "Bosnie-Herz\u00e9govine",
          "Botswana",
          "Br\u00e9sil",
          "Brunei",
          "Bulgarie",
          "Burkina Faso",
          "Burundi",
          "Cambodge",
          "Cameroun",
          "Canada",
          "Cap-Vert",
          "Centrafrique (R\u00e9publique)",
          "Chili",
          "Chine",
          "Chypre",
          "Colombie",
          "Comores",
          "Congo (R\u00e9publique d\u00e9mocratique du)",
          "Congo (R\u00e9publique du)",
          "Cor\u00e9e du Nord",
          "Cor\u00e9e du Sud",
          "Costa Rica",
          "C\u00f4te d'Ivoire",
          "Croatie",
          "Cuba",
          "Danemark",
          "Djibouti",
          "Dominique",
          "\u00c9gypte",
          "\u00c9mirats arabes unis",
          "\u00c9quateur",
          "\u00c9rythr\u00e9e",
          "Espagne",
          "Estonie",
          "Eswatini",
          "\u00c9tats-Unis",
          "\u00c9thiopie",
          "Fidji",
          "Finlande",
          "France",
          "Gabon",
          "Gambie",
          "G\u00e9orgie",
          "Ghana",
          "Gr\u00e8ce",
          "Grenade",
          "Guatemala",
          "Guin\u00e9e",
          "Guin\u00e9e-Bissau",
          "Guin\u00e9e \u00e9quatoriale",
          "Guyana",
          "Ha\u00efti",
          "Honduras",
          "Hongrie",
          "\u00celes Marshall",
          "\u00celes Salomon",
          "Inde",
          "Indon\u00e9sie",
          "Irak",
          "Iran",
          "Irlande",
          "Islande",
          "Isra\u00ebl",
          "Italie",
          "Jama\u00efque",
          "Japon",
          "Jordanie",
          "Kazakhstan",
          "Kenya",
          "Kirghizistan",
          "Kiribati",
          "Kosovo",
          "Kowe\u00eft",
          "Laos",
          "Lesotho",
          "Lettonie",
          "Liban",
          "Liberia",
          "Libye",
          "Liechtenstein",
          "Lituanie",
          "Luxembourg",
          "Mac\u00e9doine du Nord",
          "Madagascar",
          "Malaisie",
          "Malawi",
          "Maldives",
          "Mali",
          "Malte",
          "Maroc",
          "Maurice",
          "Mauritanie",
          "Mexique",
          "Micron\u00e9sie",
          "Moldavie",
          "Monaco",
          "Mongolie",
          "Mont\u00e9n\u00e9gro",
          "Mozambique",
          "Namibie",
          "Nauru",
          "N\u00e9pal",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Norv\u00e8ge",
          "Nouvelle-Z\u00e9lande",
          "Oman",
          "Ouganda",
          "Ouzb\u00e9kistan",
          "Pakistan",
          "Palaos",
          "Palestine",
          "Panama",
          "Papouasie-Nouvelle-Guin\u00e9e",
          "Paraguay",
          "Pays-Bas",
          "P\u00e9rou",
          "Philippines",
          "Pologne",
          "Portugal",
          "Qatar",
          "R\u00e9publique dominicaine",
          "R\u00e9publique tch\u00e8que",
          "Roumanie",
          "Royaume-Uni",
          "Russie",
          "Rwanda",
          "Saint-Christophe-et-Ni\u00e9v\u00e8s",
          "Sainte-Lucie",
          "Saint-Marin",
          "Saint-Vincent-et-les-Grenadines",
          "Salvador",
          "Samoa",
          "Sao Tom\u00e9-et-Principe",
          "S\u00e9n\u00e9gal",
          "Serbie",
          "Seychelles",
          "Sierra Leone",
          "Singapour",
          "Slovaquie",
          "Slov\u00e9nie",
          "Somalie",
          "Soudan",
          "Soudan du Sud",
          "Sri Lanka",
          "Su\u00e8de",
          "Suisse",
          "Suriname",
          "Syrie",
          "Tadjikistan",
          "Ta\u00efwan",
          "Tanzanie",
          "Tchad",
          "Tha\u00eflande",
          "Timor oriental",
          "Togo",
          "Tonga",
          "Trinit\u00e9-et-Tobago",
          "Tunisie",
          "Turkm\u00e9nistan",
          "Turquie",
          "Tuvalu",
          "Ukraine",
          "Uruguay",
          "Vanuatu",
          "Vatican",
          "Venezuela",
          "Vi\u00eat Nam",
          "Y\u00e9men",
          "Zambie",
          "Zimbabwe"
        ]
      },
      {
        path: "modeOfTransportSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "errorMsg",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getMe: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "9c25c922-f186-4ed9-850f-6ded6b307e4e",
        userArgs: {
          keys: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.9c25c922-f186-4ed9-850f-6ded6b307e4e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "b0990d74-47ad-4ed0-bba9-345bcb6b0c9a",
        userArgs: {
          path: [
            $queries.getMe.data[0].id +
              "/" +
              $queries.getMe.data[0].profile_photo
          ]
        },
        cacheKey: `plasmic.$.b0990d74-47ad-4ed0-bba9-345bcb6b0c9a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getTransportModes: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "ec594f6d-c410-4ab6-b4c2-40e0b46bb731",
        userArgs: {},
        cacheKey: `plasmic.$.ec594f6d-c410-4ab6-b4c2-40e0b46bb731.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSoftSkill: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "782fb4f4-ec90-41a0-a2e9-7e5a5135d08c",
        userArgs: {},
        cacheKey: `plasmic.$.782fb4f4-ec90-41a0-a2e9-7e5a5135d08c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getXpLevel: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "84622454-c999-4af7-b04e-2330ef994ec9",
        userArgs: {},
        cacheKey: `plasmic.$.84622454-c999-4af7-b04e-2330ef994ec9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchUserCoordinates: usePlasmicDataOp(() => {
      return {
        sourceId: "3fRequBPthJKGmQ2njgcZi",
        opId: "a959325a-ec89-4471-ad6c-93b5787025fc",
        userArgs: {
          params: [
            $state.formulaire.value.address,
            $state.formulaire.value.postal_code,
            $state.formulaire.value.country,
            $state.formulaire.value.city
          ]
        },
        cacheKey: `plasmic.$.a959325a-ec89-4471-ad6c-93b5787025fc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"parametresDeCompte"}
          data-plasmic-override={overrides.parametresDeCompte}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.parametresDeCompte
          )}
        >
          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <Stack__
            as={"main"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <h1
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.heading
              )}
            >
              {"Param\u00e8tres de compte"}
            </h1>
            <Stack__
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(projectcss.all, sty.container)}
            >
              <div
                data-plasmic-name={"informationsPersonnelles"}
                data-plasmic-override={overrides.informationsPersonnelles}
                className={classNames(
                  projectcss.all,
                  sty.informationsPersonnelles
                )}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame1437254343"}
                  data-plasmic-override={overrides.frame1437254343}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1437254343)}
                >
                  <UploadWrapper
                    data-plasmic-name={"upload2"}
                    data-plasmic-override={overrides.upload2}
                    accept={""}
                    className={classNames("__wab_instance", sty.upload2)}
                    files={generateStateValueProp($state, ["upload2", "files"])}
                    maxCount={1}
                    onFilesChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "upload2",
                        "files"
                      ]).apply(null, eventArgs);

                      (async files => {
                        const $steps = {};

                        $steps["supabaseUploadFile"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                  userArgs: {
                                    path: [
                                      $ctx.SupabaseUser.user.id,
                                      $state.upload2.files[0].name
                                    ],
                                    content: [$state.upload2.files[0].contents],
                                    contentType: [$state.upload2.files[0].type]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["supabaseUploadFile"] != null &&
                          typeof $steps["supabaseUploadFile"] === "object" &&
                          typeof $steps["supabaseUploadFile"].then ===
                            "function"
                        ) {
                          $steps["supabaseUploadFile"] = await $steps[
                            "supabaseUploadFile"
                          ];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "ca8056ed-4ec7-4218-bb8b-d4f4da770307",
                                  userArgs: {
                                    keys: [$ctx.SupabaseUser.user.id],
                                    variables: [
                                      $steps.supabaseUploadFile?.path.split(
                                        "/"
                                      )[1]
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    showUploadList={false}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__yE9QY)}
                      displayHeight={"132px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"132px"}
                      loading={"lazy"}
                      src={
                        $queries.getPp.signedUrl
                          ? $queries.getPp.signedUrl
                          : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png"
                      }
                    />

                    <div
                      data-plasmic-name={"editIcon"}
                      data-plasmic-override={overrides.editIcon}
                      className={classNames(projectcss.all, sty.editIcon)}
                    >
                      <div
                        data-plasmic-name={"frame7"}
                        data-plasmic-override={overrides.frame7}
                        className={classNames(projectcss.all, sty.frame7)}
                      />

                      <PhPencilSimpleIcon
                        className={classNames(projectcss.all, sty.svg___5XUxq)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"deleteIcon"}
                      data-plasmic-override={overrides.deleteIcon}
                      className={classNames(projectcss.all, sty.deleteIcon)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateUpload2Files"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["upload2", "files"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUpload2Files"] != null &&
                          typeof $steps["updateUpload2Files"] === "object" &&
                          typeof $steps["updateUpload2Files"].then ===
                            "function"
                        ) {
                          $steps["updateUpload2Files"] = await $steps[
                            "updateUpload2Files"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return event.stopPropagation();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["postgresUpdateMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "00154d6f-41ac-4e44-8d5a-da12df8e7c56",
                                  userArgs: {
                                    variables: [null],
                                    conditions: [$ctx.SupabaseUser.user.id]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateMany"] != null &&
                          typeof $steps["postgresUpdateMany"] === "object" &&
                          typeof $steps["postgresUpdateMany"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateMany"] = await $steps[
                            "postgresUpdateMany"
                          ];
                        }
                      }}
                    >
                      <div
                        data-plasmic-name={"frame8"}
                        data-plasmic-override={overrides.frame8}
                        className={classNames(projectcss.all, sty.frame8)}
                      />

                      <PhTrashIcon
                        className={classNames(projectcss.all, sty.svg__rF5F)}
                        role={"img"}
                      />
                    </div>
                  </UploadWrapper>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"tableCell"}
                    data-plasmic-override={overrides.tableCell}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.tableCell)}
                  >
                    <Switch
                      data-plasmic-name={"_switch"}
                      data-plasmic-override={overrides._switch}
                      autoFocus={false}
                      className={classNames("__wab_instance", sty._switch)}
                      isSelected={generateStateValueProp($state, [
                        "_switch",
                        "isSelected"
                      ])}
                      label={
                        <div
                          data-plasmic-name={"text6"}
                          data-plasmic-override={overrides.text6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text6
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state._switch.isSelected
                                  ? "En recherche active"
                                  : "Pas en recherche";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "En recherche active";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "_switch",
                          "isSelected"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async val => {
                          const $steps = {};

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                    opId: "d9daea55-b1a9-4e05-aa41-e2d6803f96d8",
                                    userArgs: {
                                      keys: [$ctx.SupabaseUser.user.id],
                                      variables: [
                                        $state._switch.isSelected,
                                        $state._switch.isSelected
                                          ? new Date(Date.now() + 60000)
                                          : new Date()
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"textInputBase6"}
                    data-plasmic-override={overrides.textInputBase6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.textInputBase6)}
                  >
                    <div
                      data-plasmic-name={"hintText6"}
                      data-plasmic-override={overrides.hintText6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.hintText6
                      )}
                    >
                      {
                        'Votre statut "En recherche active" sera d\u00e9sactiv\u00e9 apr\u00e8s 48h. R\u00e9activez-le si vous \u00eates toujours en recherche active.'
                      }
                    </div>
                  </Stack__>
                </Stack__>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.formulaire),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["formulaire", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: undefined,
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["updateUser"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "95866b48-3695-471e-94b6-e2a448369b0b",
                                userArgs: {
                                  keys: [$ctx.SupabaseUser.user.id],
                                  variables: [
                                    $queries.fetchUserCoordinates.data.response
                                      .features[0].geometry.coordinates[1],
                                    $queries.fetchUserCoordinates.data.response
                                      .features[0].geometry.coordinates[0],
                                    $state.formulaire.value.address,
                                    $state.formulaire.value.city,
                                    $state.formulaire.value.country,
                                    $state.formulaire.value.email,
                                    $state.formulaire.value.first_name,
                                    $ctx.SupabaseUser.user.id,
                                    $state.formulaire.value.last_name,
                                    $state.formulaire.value.level,
                                    $state.formulaire.value.linkedin_url,
                                    $state.formulaire.value.short_presentation,
                                    JSON.stringify(
                                      $state.formulaire.value.skill
                                    ),
                                    JSON.stringify(
                                      $state.formulaire.value.transport_mode
                                    ),
                                    $state.formulaire.value.phone_number,
                                    $state.formulaire.value.postal_code
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "9c25c922-f186-4ed9-850f-6ded6b307e4e"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUser"] != null &&
                        typeof $steps["updateUser"] === "object" &&
                        typeof $steps["updateUser"].then === "function"
                      ) {
                        $steps["updateUser"] = await $steps["updateUser"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                "Votre profil a bien \u00e9t\u00e9 mis \u00e0 jour !"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["formulaire", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["formulaire"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "formulaire.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "formulaire.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"formulaire"}
                      data-plasmic-override={overrides.formulaire}
                      {...child$Props}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"prenomNom"}
                        data-plasmic-override={overrides.prenomNom}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.prenomNom)}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__gu1TP
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jcv5C
                              )}
                            >
                              {"Pr\u00e9nom*"}
                            </div>
                          }
                          name={"first_name"}
                        >
                          <TextInput
                            data-plasmic-name={"firstName"}
                            data-plasmic-override={overrides.firstName}
                            className={classNames(
                              "__wab_instance",
                              sty.firstName
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getMe?.data[0]?.first_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "firstName",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pr\u00e9nom"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___4ZPYl
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aw3GJ
                              )}
                            >
                              {"Nom*"}
                            </div>
                          }
                          name={"last_name"}
                        >
                          <TextInput
                            data-plasmic-name={"lastName"}
                            data-plasmic-override={overrides.lastName}
                            className={classNames(
                              "__wab_instance",
                              sty.lastName
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getMe.data[0].last_name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "lastName",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Nom"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__y2STw
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wDbQt
                            )}
                          >
                            {"Email*"}
                          </div>
                        }
                        name={"email"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput3"}
                          data-plasmic-override={overrides.textInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput3
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.getMe.data[0].email;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          disabled={true}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput3",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Email"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"telephone"}
                        data-plasmic-override={overrides.telephone}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.telephone)}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__auHds
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jM6R
                              )}
                            >
                              {"T\u00e9l\u00e9phone"}
                            </div>
                          }
                          name={"countryCode"}
                        >
                          <PhoneSelector
                            data-plasmic-name={"phoneSelector"}
                            data-plasmic-override={overrides.phoneSelector}
                            className={classNames(
                              "__wab_instance",
                              sty.phoneSelector
                            )}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__mP1Tq
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wsoid
                              )}
                            >
                              {""}
                            </div>
                          }
                          name={"phone_number"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput5"}
                            data-plasmic-override={overrides.textInput5}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput5
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getMe.data[0].phone_number;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            inputType={"tel"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput5",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"0606060606"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__cAjBw
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xComo
                            )}
                          >
                            {"Adresse"}
                          </div>
                        }
                        name={"address"}
                      >
                        <TextInput
                          data-plasmic-name={"rue"}
                          data-plasmic-override={overrides.rue}
                          autoComplete={["off"]}
                          className={classNames("__wab_instance", sty.rue)}
                          defaultValue={(() => {
                            try {
                              return $queries.getMe.data[0].address;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "rue",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Rue"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"codePosteVille"}
                        data-plasmic-override={overrides.codePosteVille}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.codePosteVille
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__r239
                          )}
                          hidden={false}
                          label={""}
                          name={"postal_code"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"codePostal"}
                            data-plasmic-override={overrides.codePostal}
                            className={classNames(
                              "__wab_instance",
                              sty.codePostal
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getMe.data[0].postal_code;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "codePostal",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Code postal"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__u1Dml
                          )}
                          label={"Adresse*"}
                          name={"city"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"ville"}
                            data-plasmic-override={overrides.ville}
                            className={classNames("__wab_instance", sty.ville)}
                            defaultValue={(() => {
                              try {
                                return $queries.getMe.data[0].city;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "ville",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Ville"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__ttUxH
                        )}
                        label={"Adresse*"}
                        name={"country"}
                        noLabel={true}
                      >
                        <Select
                          data-plasmic-name={"select4"}
                          data-plasmic-override={overrides.select4}
                          className={classNames("__wab_instance", sty.select4)}
                          initialSelectedValue={(() => {
                            try {
                              return $queries.getMe.data[0].country;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.countries;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.menuItem___08SP
                                )}
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pays"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__aGgNa
                        )}
                        initialValue={(() => {
                          try {
                            return (() => {
                              const selectedTransportModes =
                                $queries.getMe.data?.[0]?.transport_mode || [];
                              const selectedIds =
                                $queries.getTransportModes.data
                                  .filter(mode =>
                                    selectedTransportModes.includes(mode.id)
                                  )
                                  .map(mode => mode.id);
                              return selectedIds;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gj9T
                            )}
                          >
                            {"Moyens de transport"}
                          </div>
                        }
                        name={"transport_mode"}
                        noLabel={false}
                        preserve={false}
                      >
                        <AntdSelect
                          data-plasmic-name={"modeOfTransportSelect"}
                          data-plasmic-override={
                            overrides.modeOfTransportSelect
                          }
                          allowClear={true}
                          autoFocus={false}
                          bordered={false}
                          className={classNames(
                            "__wab_instance",
                            sty.modeOfTransportSelect
                          )}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          disabled={false}
                          dropdownMatchSelectWidth={false}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "modeOfTransportSelect",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return (() => {
                                const selectedTransportModes =
                                  $queries.getMe.data?.[0]?.transport_mode ||
                                  [];
                                return $queries.getTransportModes.data.map(
                                  mode => ({
                                    value: mode.id,
                                    label: mode.mode,
                                    selected: selectedTransportModes.includes(
                                      mode.id
                                    )
                                  })
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__i5V8N
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__szn5Q
                                )}
                              >
                                {"Moyens de transport"}
                              </div>
                            </Stack__>
                          }
                          popupScopeClassName={
                            sty["modeOfTransportSelect__popup"]
                          }
                          showSearch={false}
                          size={"large"}
                          suffixIcon={
                            <ChevronDown2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7ARQ
                              )}
                              role={"img"}
                            />
                          }
                          useChildren={false}
                          value={generateStateValueProp($state, [
                            "modeOfTransportSelect",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___2RAap
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eh9HC
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rgfup
                              )}
                            >
                              {"Pr\u00e9sentation courte"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dRa08
                              )}
                            >
                              {
                                "D\u00e9crivez le type de poste que vous cherchez, les missions que vous souhaitez effectuer. Ajouter les mots-cl\u00e9s qui vous semblent les plus pertinents pour trouver les jobs qui correspondent \u00e0 votre recherche.\r\n\r"
                              }
                            </div>
                          </div>
                        }
                        name={"short_presentation"}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput"}
                          data-plasmic-override={overrides.textAreaInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.getMe.data[0].short_presentation;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pr\u00e9sentation"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__cpEfl
                        )}
                        hidden={false}
                        initialValue={(() => {
                          const selectedSkills =
                            $queries.getMe.data?.[0]?.skill || [];
                          return $queries.getSoftSkill.data
                            .filter(skill => selectedSkills.includes(skill.id))
                            .map(skill => ({
                              value: skill.id,
                              label: skill.skill
                            }));
                        })()}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lGeBc
                            )}
                          >
                            {"Comp\u00e9tences"}
                          </div>
                        }
                        name={"skill"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select3"}
                          data-plasmic-override={overrides.select3}
                          allowClear={true}
                          bordered={false}
                          className={classNames("__wab_instance", sty.select3)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          dropdownMatchSelectWidth={false}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select3",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getSoftSkill.data.map(skill => ({
                                value: skill.id,
                                label: skill.skill
                              }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__fubWb
                              )}
                            >
                              <PlusIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__t52Yn
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4SVtn
                                )}
                              >
                                {"Ajouter"}
                              </div>
                            </Stack__>
                          }
                          popupScopeClassName={sty["select3__popup"]}
                          showSearch={false}
                          size={"large"}
                          suffixIcon={
                            <ChevronDown2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0Bqzq
                              )}
                              role={"img"}
                            />
                          }
                          value={generateStateValueProp($state, [
                            "select3",
                            "value"
                          ])}
                        />

                        <AntdSelect
                          data-plasmic-name={"select8"}
                          data-plasmic-override={overrides.select8}
                          allowClear={true}
                          autoFocus={false}
                          className={classNames("__wab_instance", sty.select8)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select8",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getSoftSkill.data.map(skill => ({
                                value: skill.skill,
                                label: skill.skill
                              }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xU0H
                              )}
                            >
                              {"Ajouter"}
                            </div>
                          }
                          popupScopeClassName={sty["select8__popup"]}
                          size={"large"}
                          suffixIcon={
                            <ChevronDownIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iv9X7
                              )}
                              role={"img"}
                            />
                          }
                          value={generateStateValueProp($state, [
                            "select8",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___5YLjM
                        )}
                        hidden={false}
                        initialValue={$queries.getMe?.data[0]?.level}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mtCAv
                            )}
                          >
                            {"Niveau d'exp\u00e9rience"}
                          </div>
                        }
                        name={"level"}
                      >
                        <Select
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          className={classNames("__wab_instance", sty.select)}
                          initialSelectedValue={(() => {
                            try {
                              return $queries.getMe.data[0].level;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getXpLevel.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem.level;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"S\u00e9l\u00e9ctionner"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__vvnjx
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tTve0
                            )}
                          >
                            {"Linkedin"}
                          </div>
                        }
                        name={"linkedin_url"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput4"}
                          data-plasmic-override={overrides.textInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput4
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.getMe.data[0].linkedin_url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"https://"}
                        />
                      </FormItemWrapper>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___2IaMi
                        )}
                        color={"white"}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ga8Yf
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xnogZ
                            )}
                          >
                            {"Enregistrer"}
                          </div>
                        }
                        submitsForm={true}
                        type={"bordered"}
                      />
                    </FormWrapper>
                  );
                })()}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"cvModificationDuMdp"}
                data-plasmic-override={overrides.cvModificationDuMdp}
                hasGap={true}
                className={classNames(projectcss.all, sty.cvModificationDuMdp)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"uploadCvLdm"}
                  data-plasmic-override={overrides.uploadCvLdm}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.uploadCvLdm)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame10"}
                    data-plasmic-override={overrides.frame10}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame10)}
                  >
                    <div
                      data-plasmic-name={"email"}
                      data-plasmic-override={overrides.email}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.email
                      )}
                    >
                      {"CV"}
                    </div>
                    {(() => {
                      try {
                        return $queries.getMe.data[0].cv_file === null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"cvnoUpload"}
                        data-plasmic-override={overrides.cvnoUpload}
                        className={classNames(projectcss.all, sty.cvnoUpload)}
                      >
                        <UploadWrapper
                          data-plasmic-name={"upload"}
                          data-plasmic-override={overrides.upload}
                          accept={""}
                          className={classNames("__wab_instance", sty.upload)}
                          files={generateStateValueProp($state, [
                            "upload",
                            "files"
                          ])}
                          maxCount={1}
                          onFilesChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "upload",
                              "files"
                            ]).apply(null, eventArgs);

                            (async files => {
                              const $steps = {};

                              $steps["updateErrorMsg"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["errorMsg"]
                                      },
                                      operation: 0,
                                      value: []
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateErrorMsg"] != null &&
                                typeof $steps["updateErrorMsg"] === "object" &&
                                typeof $steps["updateErrorMsg"].then ===
                                  "function"
                              ) {
                                $steps["updateErrorMsg"] = await $steps[
                                  "updateErrorMsg"
                                ];
                              }

                              $steps["supabaseUploadFile"] = (() => {
                                const files = $state.upload.files;
                                if (
                                  !Array.isArray(files) ||
                                  files.length === 0
                                ) {
                                  return false;
                                }
                                const file = files[0];
                                const maxSize = 2 * 1024 * 1024;
                                const allowedTypes = [
                                  "application/pdf",
                                  "application/msword",
                                  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                  "image/jpeg",
                                  "image/png"
                                ];

                                const allowedExtensions = [
                                  ".pdf",
                                  ".doc",
                                  ".docx",
                                  ".jpg",
                                  ".jpeg",
                                  ".png"
                                ];

                                const fileTypeOk = allowedTypes.includes(
                                  file.type
                                );
                                const fileName = file.name?.toLowerCase() || "";
                                const fileExtensionOk = allowedExtensions.some(
                                  ext => fileName.endsWith(ext)
                                );
                                if (file.size > maxSize) {
                                  $state.errorMsg.push({
                                    fichier: "cv",
                                    title: "Fichier trop volumineux",
                                    description:
                                      "Le CV ne doit pas dépasser 2 Mo."
                                  });
                                  return false;
                                }
                                if (!fileTypeOk && !fileExtensionOk) {
                                  $state.errorMsg.push({
                                    fichier: "cv",
                                    title: "Format de fichier invalide",
                                    description:
                                      "Le format du CV n'est pas accepté."
                                  });
                                  return false;
                                }
                                return true;
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                        opId: "2c27e5ea-862c-480e-bff8-3da6871e0b04",
                                        userArgs: {
                                          path: [
                                            $ctx.SupabaseUser.user.id,
                                            (() => {
                                              const file =
                                                $state.upload.files[0];
                                              if (file) {
                                                const formattedName = file.name
                                                  .trim()
                                                  .toLowerCase()
                                                  .replace(
                                                    /[^a-z0-9.\-_]/g,
                                                    "_"
                                                  )
                                                  .replace(/_+/g, "_")
                                                  .replace(/^_+|_+$/g, "");
                                                return formattedName;
                                              }
                                            })()
                                          ],
                                          content: [
                                            $state.upload.files[0].contents
                                          ],
                                          contentType: [
                                            $state.upload.files[0].type
                                          ],
                                          upsert: [true]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["supabaseUploadFile"] != null &&
                                typeof $steps["supabaseUploadFile"] ===
                                  "object" &&
                                typeof $steps["supabaseUploadFile"].then ===
                                  "function"
                              ) {
                                $steps["supabaseUploadFile"] = await $steps[
                                  "supabaseUploadFile"
                                ];
                              }

                              $steps["postgresUpdateById"] =
                                $state.errorMsg.length == 0
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                          opId: "1d316c45-4c3c-4fdb-88bb-e87b178387e4",
                                          userArgs: {
                                            keys: [$ctx.SupabaseUser.user.id],
                                            variables: [
                                              $steps.supabaseUploadFile?.path.split(
                                                "/"
                                              )[1],
                                              (() => {})()
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "9c25c922-f186-4ed9-850f-6ded6b307e4e"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          showUploadList={false}
                        >
                          <div
                            data-plasmic-name={"content"}
                            data-plasmic-override={overrides.content}
                            className={classNames(projectcss.all, sty.content)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mrjhl
                              )}
                            >
                              <Stack__
                                as={PlasmicImg__}
                                hasGap={true}
                                alt={""}
                                className={classNames(sty.img__liyK)}
                                displayHeight={"25px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"25px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/jam_production_🚀/images/attachementJpg.jpg",
                                  fullWidth: 512,
                                  fullHeight: 512,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ccA9
                              )}
                            >
                              {"Importer ou d\u00e9poser un fichier"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a8Q0B
                              )}
                            >
                              {"PDF (max. 2Mo)"}
                            </div>
                          </div>
                        </UploadWrapper>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $state.errorMsg &&
                          $state.errorMsg.length > 0 &&
                          $state.errorMsg[0].fichier == "cv"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ptXCo
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a87C8
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.errorMsg[0].title + " :";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qo27D
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.errorMsg[0].description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $queries.getMe.data[0].cv_file !== null;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"cvUpload"}
                        data-plasmic-override={overrides.cvUpload}
                        className={classNames(projectcss.all, sty.cvUpload)}
                      >
                        <PhTrashIcon
                          className={classNames(projectcss.all, sty.svg__eOmVd)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["postgresUpdateMany"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "1d26c89c-b999-4426-9e24-85aec7f766ef",
                                      userArgs: {
                                        conditions: [$ctx.SupabaseUser.user.id],
                                        variables: [null]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "9c25c922-f186-4ed9-850f-6ded6b307e4e"
                                      ],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateMany"] != null &&
                              typeof $steps["postgresUpdateMany"] ===
                                "object" &&
                              typeof $steps["postgresUpdateMany"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateMany"] = await $steps[
                                "postgresUpdateMany"
                              ];
                            }

                            $steps["updateUploadFiles"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["upload", "files"]
                                    },
                                    operation: 0,
                                    value: []
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateUploadFiles"] != null &&
                              typeof $steps["updateUploadFiles"] === "object" &&
                              typeof $steps["updateUploadFiles"].then ===
                                "function"
                            ) {
                              $steps["updateUploadFiles"] = await $steps[
                                "updateUploadFiles"
                              ];
                            }
                          }}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"content5"}
                          data-plasmic-override={overrides.content5}
                          className={classNames(projectcss.all, sty.content5)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cmIex
                            )}
                          >
                            <Stack__
                              as={PlasmicImg__}
                              hasGap={true}
                              alt={""}
                              className={classNames(sty.img__jin6E)}
                              displayHeight={"25px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"25px"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/jam_production_🚀/images/attachementJpg.jpg",
                                fullWidth: 512,
                                fullHeight: 512,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m8XXb
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $queries.getMe.data[0].cv_file;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Importer ou d\u00e9poser un fichier";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame11"}
                    data-plasmic-override={overrides.frame11}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame11)}
                  >
                    <div
                      data-plasmic-name={"email2"}
                      data-plasmic-override={overrides.email2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.email2
                      )}
                    >
                      {"Lettre de motivation"}
                    </div>
                    {(() => {
                      try {
                        return (
                          $queries.getMe.data[0].cover_letter_file === null
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"lmNoUpload"}
                        data-plasmic-override={overrides.lmNoUpload}
                        className={classNames(projectcss.all, sty.lmNoUpload)}
                      >
                        <UploadWrapper
                          data-plasmic-name={"upload3"}
                          data-plasmic-override={overrides.upload3}
                          accept={""}
                          className={classNames("__wab_instance", sty.upload3)}
                          dragAndDropFiles={false}
                          files={generateStateValueProp($state, [
                            "upload3",
                            "files"
                          ])}
                          maxCount={1}
                          onFilesChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "upload3",
                              "files"
                            ]).apply(null, eventArgs);

                            (async files => {
                              const $steps = {};

                              $steps["errorMsg"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["errorMsg"]
                                      },
                                      operation: 0,
                                      value: []
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["errorMsg"] != null &&
                                typeof $steps["errorMsg"] === "object" &&
                                typeof $steps["errorMsg"].then === "function"
                              ) {
                                $steps["errorMsg"] = await $steps["errorMsg"];
                              }

                              $steps["supabaseUploadFile"] = (() => {
                                const files = $state.upload3.files;
                                if (
                                  !Array.isArray(files) ||
                                  files.length === 0
                                ) {
                                  return false;
                                }
                                const file = files[0];
                                const maxSize = 2 * 1024 * 1024;
                                const allowedTypes = [
                                  "application/pdf",
                                  "application/msword",
                                  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                  "image/jpeg",
                                  "image/png"
                                ];

                                const allowedExtensions = [
                                  ".pdf",
                                  ".doc",
                                  ".docx",
                                  ".jpg",
                                  ".jpeg",
                                  ".png"
                                ];

                                const fileTypeOk = allowedTypes.includes(
                                  file.type
                                );
                                const fileName = file.name?.toLowerCase() || "";
                                const fileExtensionOk = allowedExtensions.some(
                                  ext => fileName.endsWith(ext)
                                );
                                if (file.size > maxSize) {
                                  $state.errorMsg.push({
                                    fichier: "ldm",
                                    title: "Fichier trop volumineux",
                                    description:
                                      "La lettre de motivation ne doit pas dépasser 2 Mo."
                                  });
                                  return false;
                                }
                                if (!fileTypeOk && !fileExtensionOk) {
                                  $state.errorMsg.push({
                                    fichier: "ldm",
                                    title: "Format de fichier invalide",
                                    description:
                                      "Le format de la lettre de motivation n'est pas accepté."
                                  });
                                  return false;
                                }
                                return true;
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                        opId: "2c27e5ea-862c-480e-bff8-3da6871e0b04",
                                        userArgs: {
                                          path: [
                                            $ctx.SupabaseUser.user.id,
                                            $state.upload3.files[0].name
                                          ],
                                          content: [
                                            $state.upload3.files[0].contents
                                          ],
                                          contentType: [
                                            $state.upload3.files[0].type
                                          ],
                                          upsert: [true]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["supabaseUploadFile"] != null &&
                                typeof $steps["supabaseUploadFile"] ===
                                  "object" &&
                                typeof $steps["supabaseUploadFile"].then ===
                                  "function"
                              ) {
                                $steps["supabaseUploadFile"] = await $steps[
                                  "supabaseUploadFile"
                                ];
                              }

                              $steps["postgresUpdateById"] =
                                $state.errorMsg.length == 0
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                          opId: "1d316c45-4c3c-4fdb-88bb-e87b178387e4",
                                          userArgs: {
                                            keys: [$ctx.SupabaseUser.user.id],
                                            variables: [
                                              (() => {})(),
                                              $steps.supabaseUploadFile?.path.split(
                                                "/"
                                              )[1]
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "9c25c922-f186-4ed9-850f-6ded6b307e4e"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          showUploadList={false}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ywp0V
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__oWGo
                              )}
                            >
                              <Stack__
                                as={PlasmicImg__}
                                hasGap={true}
                                alt={""}
                                className={classNames(sty.img__hAnWf)}
                                displayHeight={"25px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"25px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/jam_production_🚀/images/attachementJpg.jpg",
                                  fullWidth: 512,
                                  fullHeight: 512,
                                  aspectRatio: undefined
                                }}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cpLcg
                              )}
                            >
                              {"Importer ou d\u00e9poser un fichier"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pprMa
                              )}
                            >
                              {"PDF (max. 2Mo)"}
                            </div>
                          </div>
                        </UploadWrapper>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $state.errorMsg &&
                          $state.errorMsg.length > 0 &&
                          $state.errorMsg[0].fichier == "ldm"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eJdi2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bV4H
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.errorMsg[0].title + " :";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qobQf
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.errorMsg[0].description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $queries.getMe.data[0].cover_letter_file !== null
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"lmUpload"}
                        data-plasmic-override={overrides.lmUpload}
                        className={classNames(projectcss.all, sty.lmUpload)}
                      >
                        <PhTrashIcon
                          className={classNames(projectcss.all, sty.svg__y9Q64)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["postgresUpdateMany"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                                      userArgs: {
                                        conditions: [$ctx.SupabaseUser.user.id],
                                        variables: [null]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "9c25c922-f186-4ed9-850f-6ded6b307e4e"
                                      ],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateMany"] != null &&
                              typeof $steps["postgresUpdateMany"] ===
                                "object" &&
                              typeof $steps["postgresUpdateMany"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateMany"] = await $steps[
                                "postgresUpdateMany"
                              ];
                            }
                          }}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"content3"}
                          data-plasmic-override={overrides.content3}
                          className={classNames(projectcss.all, sty.content3)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ksiuw
                            )}
                          >
                            <Stack__
                              as={PlasmicImg__}
                              hasGap={true}
                              alt={""}
                              className={classNames(sty.img__zf67Z)}
                              displayHeight={"25px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"25px"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/jam_production_🚀/images/attachementJpg.jpg",
                                fullWidth: 512,
                                fullHeight: 512,
                                aspectRatio: undefined
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qkgUb
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $queries.getMe.data[0]
                                    .cover_letter_file;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Importer ou d\u00e9poser un fichier";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </Stack__>
                </Stack__>
                <div
                  data-plasmic-name={"reinitialisationDuMdp"}
                  data-plasmic-override={overrides.reinitialisationDuMdp}
                  className={classNames(
                    projectcss.all,
                    sty.reinitialisationDuMdp
                  )}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"card3"}
                    data-plasmic-override={overrides.card3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.card3)}
                  >
                    <ResetPassword
                      data-plasmic-name={"resetPassword"}
                      data-plasmic-override={overrides.resetPassword}
                      alertPosition={"top"}
                      cancelButtonStyle={"tertiary"}
                      cancelButtonText={"Annuler"}
                      className={classNames(
                        "__wab_instance",
                        sty.resetPassword
                      )}
                      confirmPassword={generateStateValueProp($state, [
                        "resetPassword",
                        "confirmPassword"
                      ])}
                      confirmPasswordLabel={
                        "R\u00e9p\u00e9tez le mot de passe*"
                      }
                      confirmPasswordPlaceholder={
                        "Confirmez votre mot de passe"
                      }
                      eyeIconColor={"#666"}
                      inputStyle={"simple"}
                      maxAlerts={3}
                      onConfirmPasswordChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "resetPassword",
                          "confirmPassword"
                        ]).apply(null, eventArgs);
                      }}
                      onPasswordChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "resetPassword",
                          "password"
                        ]).apply(null, eventArgs);
                      }}
                      onSubmit={async event => {
                        const $steps = {};

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return $state.resetPassword
                                        .confirmPassword;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "SupabaseUserGlobalContext.updateUserPassword"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }}
                      password={generateStateValueProp($state, [
                        "resetPassword",
                        "password"
                      ])}
                      passwordLabel={"Nouveau mot de passe*"}
                      passwordPlaceholder={"Entrez votre nouveau mot de passe"}
                      resetSuccessMessage={
                        "Votre mot de passe a été réinitialisé avec succès!"
                      }
                      showAlerts={true}
                      showPasswordStrength={true}
                      showPasswordToggle={true}
                      submitButtonStyle={"primary"}
                      submitButtonText={"Réinitialiser"}
                      title={``}
                      titleHeading={"h1"}
                      wrapperStyle={"card"}
                    />

                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return $state.resetPassword
                                          .confirmPassword;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "SupabaseUserGlobalContext.updateUserPassword"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          {...child$Props}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__z6Bk1
                            )}
                            color={"white"}
                            end={
                              <GroupIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gnFr
                                )}
                                role={"img"}
                              />
                            }
                            iconEnd={true}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3Ie04
                                )}
                              >
                                {"enregistrer"}
                              </div>
                            }
                            submitsForm={true}
                            type={"bordered"}
                          />
                        </FormWrapper>
                      );
                    })()}
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"card4"}
                      data-plasmic-override={overrides.card4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.card4)}
                    >
                      <DeleteAccount2
                        data-plasmic-name={"deleteAccount2"}
                        data-plasmic-override={overrides.deleteAccount2}
                        className={classNames(
                          "__wab_instance",
                          sty.deleteAccount2
                        )}
                        color={"white"}
                        iconStart={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sk2Jw
                            )}
                          >
                            {"supprimer le compte"}
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSupprCompteIsOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["supprCompte", "isOpen"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSupprCompteIsOpen"] != null &&
                            typeof $steps["updateSupprCompteIsOpen"] ===
                              "object" &&
                            typeof $steps["updateSupprCompteIsOpen"].then ===
                              "function"
                          ) {
                            $steps["updateSupprCompteIsOpen"] = await $steps[
                              "updateSupprCompteIsOpen"
                            ];
                          }
                        }}
                        start={
                          <PhTrashIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__o4Hmo
                            )}
                            role={"img"}
                          />
                        }
                      />
                    </Stack__>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
            <Modal
              data-plasmic-name={"supprCompte"}
              data-plasmic-override={overrides.supprCompte}
              className={classNames("__wab_instance", sty.supprCompte)}
              content={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cgtlR)}
                >
                  <ReshotIconAlert7T6Wum8VleSvgIcon
                    className={classNames(projectcss.all, sty.svg__a3Ceg)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["postgresUpdateMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                                userArgs: {
                                  conditions: [$ctx.SupabaseUser.user.id],
                                  variables: [null]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateMany"] != null &&
                        typeof $steps["postgresUpdateMany"] === "object" &&
                        typeof $steps["postgresUpdateMany"].then === "function"
                      ) {
                        $steps["postgresUpdateMany"] = await $steps[
                          "postgresUpdateMany"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zLnT
                    )}
                  >
                    {"Supprimer le compte"}
                  </div>
                  <div
                    data-plasmic-name={"e"}
                    data-plasmic-override={overrides.e}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.e
                    )}
                  >
                    {
                      "\u00cates-vous s\u00fbr de vouloir supprimer le compte?\nCette action est irr\u00e9versible."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iRVws)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__qbMpH
                      )}
                      color={"white"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l2Rn8
                          )}
                        >
                          {"Annuler"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSupprCompteIsOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["supprCompte", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSupprCompteIsOpen"] != null &&
                          typeof $steps["updateSupprCompteIsOpen"] ===
                            "object" &&
                          typeof $steps["updateSupprCompteIsOpen"].then ===
                            "function"
                        ) {
                          $steps["updateSupprCompteIsOpen"] = await $steps[
                            "updateSupprCompteIsOpen"
                          ];
                        }
                      }}
                      type={"bordered"}
                    />

                    <DeleteAccount
                      data-plasmic-name={"deleteAccount"}
                      data-plasmic-override={overrides.deleteAccount}
                      className={classNames(
                        "__wab_instance",
                        sty.deleteAccount
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6T4XP
                          )}
                        >
                          {"Supprimer"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["postgresDeleteMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "e4bd9ed9-80bc-49ab-a767-fc37dc7c41a9",
                                  userArgs: {
                                    conditions: [$ctx.SupabaseUser.user.id]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresDeleteMany"] != null &&
                          typeof $steps["postgresDeleteMany"] === "object" &&
                          typeof $steps["postgresDeleteMany"].then ===
                            "function"
                        ) {
                          $steps["postgresDeleteMany"] = await $steps[
                            "postgresDeleteMany"
                          ];
                        }

                        $steps["goToAccueil"] = true
                          ? (() => {
                              const actionArgs = { destination: `/` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToAccueil"] != null &&
                          typeof $steps["goToAccueil"] === "object" &&
                          typeof $steps["goToAccueil"].then === "function"
                        ) {
                          $steps["goToAccueil"] = await $steps["goToAccueil"];
                        }
                      }}
                    />
                  </div>
                </Stack__>
              }
              footer={null}
              heading={null}
              isOpen={generateStateValueProp($state, ["supprCompte", "isOpen"])}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "supprCompte",
                  "isOpen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showFooter={false}
              showHeader={false}
              trigger={
                <div
                  className={classNames(projectcss.all, sty.freeBox__t4AIu)}
                />
              }
            />

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"expandTab"}
                data-plasmic-override={overrides.expandTab}
                hasGap={true}
                className={classNames(projectcss.all, sty.expandTab)}
                onClick={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = { args: ["/"] };
                        return $globalActions[
                          "SupabaseUserGlobalContext.logout"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
              >
                <SolarLogoutOutlineIcon
                  className={classNames(projectcss.all, sty.svg__itDrT)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Dkjd
                  )}
                >
                  {"D\u00e9connexion"}
                </div>
              </Stack__>
            ) : null}
          </Stack__>
          <MobileNavbarBottom
            data-plasmic-name={"mobileNavbarBottom"}
            data-plasmic-override={overrides.mobileNavbarBottom}
            className={classNames("__wab_instance", sty.mobileNavbarBottom)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parametresDeCompte: [
    "parametresDeCompte",
    "mobileNavbarTop",
    "sidebar",
    "main",
    "heading",
    "container",
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "tableCell",
    "_switch",
    "text6",
    "textInputBase6",
    "hintText6",
    "formulaire",
    "prenomNom",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput5",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select4",
    "modeOfTransportSelect",
    "textAreaInput",
    "select3",
    "select8",
    "select",
    "textInput4",
    "cvModificationDuMdp",
    "uploadCvLdm",
    "frame10",
    "email",
    "cvnoUpload",
    "upload",
    "content",
    "cvUpload",
    "content5",
    "frame11",
    "email2",
    "lmNoUpload",
    "upload3",
    "lmUpload",
    "content3",
    "reinitialisationDuMdp",
    "card3",
    "resetPassword",
    "form",
    "card4",
    "deleteAccount2",
    "supprCompte",
    "e",
    "deleteAccount",
    "expandTab",
    "mobileNavbarBottom"
  ],
  mobileNavbarTop: ["mobileNavbarTop"],
  sidebar: ["sidebar"],
  main: [
    "main",
    "heading",
    "container",
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "tableCell",
    "_switch",
    "text6",
    "textInputBase6",
    "hintText6",
    "formulaire",
    "prenomNom",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput5",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select4",
    "modeOfTransportSelect",
    "textAreaInput",
    "select3",
    "select8",
    "select",
    "textInput4",
    "cvModificationDuMdp",
    "uploadCvLdm",
    "frame10",
    "email",
    "cvnoUpload",
    "upload",
    "content",
    "cvUpload",
    "content5",
    "frame11",
    "email2",
    "lmNoUpload",
    "upload3",
    "lmUpload",
    "content3",
    "reinitialisationDuMdp",
    "card3",
    "resetPassword",
    "form",
    "card4",
    "deleteAccount2",
    "supprCompte",
    "e",
    "deleteAccount",
    "expandTab"
  ],
  heading: ["heading"],
  container: [
    "container",
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "tableCell",
    "_switch",
    "text6",
    "textInputBase6",
    "hintText6",
    "formulaire",
    "prenomNom",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput5",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select4",
    "modeOfTransportSelect",
    "textAreaInput",
    "select3",
    "select8",
    "select",
    "textInput4",
    "cvModificationDuMdp",
    "uploadCvLdm",
    "frame10",
    "email",
    "cvnoUpload",
    "upload",
    "content",
    "cvUpload",
    "content5",
    "frame11",
    "email2",
    "lmNoUpload",
    "upload3",
    "lmUpload",
    "content3",
    "reinitialisationDuMdp",
    "card3",
    "resetPassword",
    "form",
    "card4",
    "deleteAccount2"
  ],
  informationsPersonnelles: [
    "informationsPersonnelles",
    "frame1437254343",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "tableCell",
    "_switch",
    "text6",
    "textInputBase6",
    "hintText6",
    "formulaire",
    "prenomNom",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput5",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select4",
    "modeOfTransportSelect",
    "textAreaInput",
    "select3",
    "select8",
    "select",
    "textInput4"
  ],
  frame1437254343: [
    "frame1437254343",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "tableCell",
    "_switch",
    "text6",
    "textInputBase6",
    "hintText6"
  ],
  upload2: ["upload2", "editIcon", "frame7", "deleteIcon", "frame8"],
  editIcon: ["editIcon", "frame7"],
  frame7: ["frame7"],
  deleteIcon: ["deleteIcon", "frame8"],
  frame8: ["frame8"],
  tableCell: ["tableCell", "_switch", "text6"],
  _switch: ["_switch", "text6"],
  text6: ["text6"],
  textInputBase6: ["textInputBase6", "hintText6"],
  hintText6: ["hintText6"],
  formulaire: [
    "formulaire",
    "prenomNom",
    "firstName",
    "lastName",
    "textInput3",
    "telephone",
    "phoneSelector",
    "textInput5",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select4",
    "modeOfTransportSelect",
    "textAreaInput",
    "select3",
    "select8",
    "select",
    "textInput4"
  ],
  prenomNom: ["prenomNom", "firstName", "lastName"],
  firstName: ["firstName"],
  lastName: ["lastName"],
  textInput3: ["textInput3"],
  telephone: ["telephone", "phoneSelector", "textInput5"],
  phoneSelector: ["phoneSelector"],
  textInput5: ["textInput5"],
  rue: ["rue"],
  codePosteVille: ["codePosteVille", "codePostal", "ville"],
  codePostal: ["codePostal"],
  ville: ["ville"],
  select4: ["select4"],
  modeOfTransportSelect: ["modeOfTransportSelect"],
  textAreaInput: ["textAreaInput"],
  select3: ["select3"],
  select8: ["select8"],
  select: ["select"],
  textInput4: ["textInput4"],
  cvModificationDuMdp: [
    "cvModificationDuMdp",
    "uploadCvLdm",
    "frame10",
    "email",
    "cvnoUpload",
    "upload",
    "content",
    "cvUpload",
    "content5",
    "frame11",
    "email2",
    "lmNoUpload",
    "upload3",
    "lmUpload",
    "content3",
    "reinitialisationDuMdp",
    "card3",
    "resetPassword",
    "form",
    "card4",
    "deleteAccount2"
  ],
  uploadCvLdm: [
    "uploadCvLdm",
    "frame10",
    "email",
    "cvnoUpload",
    "upload",
    "content",
    "cvUpload",
    "content5",
    "frame11",
    "email2",
    "lmNoUpload",
    "upload3",
    "lmUpload",
    "content3"
  ],
  frame10: [
    "frame10",
    "email",
    "cvnoUpload",
    "upload",
    "content",
    "cvUpload",
    "content5"
  ],
  email: ["email"],
  cvnoUpload: ["cvnoUpload", "upload", "content"],
  upload: ["upload", "content"],
  content: ["content"],
  cvUpload: ["cvUpload", "content5"],
  content5: ["content5"],
  frame11: [
    "frame11",
    "email2",
    "lmNoUpload",
    "upload3",
    "lmUpload",
    "content3"
  ],
  email2: ["email2"],
  lmNoUpload: ["lmNoUpload", "upload3"],
  upload3: ["upload3"],
  lmUpload: ["lmUpload", "content3"],
  content3: ["content3"],
  reinitialisationDuMdp: [
    "reinitialisationDuMdp",
    "card3",
    "resetPassword",
    "form",
    "card4",
    "deleteAccount2"
  ],
  card3: ["card3", "resetPassword", "form", "card4", "deleteAccount2"],
  resetPassword: ["resetPassword"],
  form: ["form"],
  card4: ["card4", "deleteAccount2"],
  deleteAccount2: ["deleteAccount2"],
  supprCompte: ["supprCompte", "e", "deleteAccount"],
  e: ["e"],
  deleteAccount: ["deleteAccount"],
  expandTab: ["expandTab"],
  mobileNavbarBottom: ["mobileNavbarBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  parametresDeCompte: "div";
  mobileNavbarTop: typeof MobileNavbarTop;
  sidebar: typeof Sidebar;
  main: "main";
  heading: "h1";
  container: "div";
  informationsPersonnelles: "div";
  frame1437254343: "div";
  upload2: typeof UploadWrapper;
  editIcon: "div";
  frame7: "div";
  deleteIcon: "div";
  frame8: "div";
  tableCell: "div";
  _switch: typeof Switch;
  text6: "div";
  textInputBase6: "div";
  hintText6: "div";
  formulaire: typeof FormWrapper;
  prenomNom: "div";
  firstName: typeof TextInput;
  lastName: typeof TextInput;
  textInput3: typeof TextInput;
  telephone: "div";
  phoneSelector: typeof PhoneSelector;
  textInput5: typeof TextInput;
  rue: typeof TextInput;
  codePosteVille: "div";
  codePostal: typeof TextInput;
  ville: typeof TextInput;
  select4: typeof Select;
  modeOfTransportSelect: typeof AntdSelect;
  textAreaInput: typeof TextAreaInput;
  select3: typeof AntdSelect;
  select8: typeof AntdSelect;
  select: typeof Select;
  textInput4: typeof TextInput;
  cvModificationDuMdp: "div";
  uploadCvLdm: "div";
  frame10: "div";
  email: "div";
  cvnoUpload: "div";
  upload: typeof UploadWrapper;
  content: "div";
  cvUpload: "div";
  content5: "div";
  frame11: "div";
  email2: "div";
  lmNoUpload: "div";
  upload3: typeof UploadWrapper;
  lmUpload: "div";
  content3: "div";
  reinitialisationDuMdp: "div";
  card3: "div";
  resetPassword: typeof ResetPassword;
  form: typeof FormWrapper;
  card4: "div";
  deleteAccount2: typeof DeleteAccount2;
  supprCompte: typeof Modal;
  e: "div";
  deleteAccount: typeof DeleteAccount;
  expandTab: "div";
  mobileNavbarBottom: typeof MobileNavbarBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicParametresCandidat__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicParametresCandidat__VariantsArgs;
    args?: PlasmicParametresCandidat__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicParametresCandidat__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicParametresCandidat__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicParametresCandidat__ArgProps,
          internalVariantPropNames: PlasmicParametresCandidat__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicParametresCandidat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "parametresDeCompte") {
    func.displayName = "PlasmicParametresCandidat";
  } else {
    func.displayName = `PlasmicParametresCandidat.${nodeName}`;
  }
  return func;
}

export const PlasmicParametresCandidat = Object.assign(
  // Top-level PlasmicParametresCandidat renders the root element
  makeNodeComponent("parametresDeCompte"),
  {
    // Helper components rendering sub-elements
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    heading: makeNodeComponent("heading"),
    container: makeNodeComponent("container"),
    informationsPersonnelles: makeNodeComponent("informationsPersonnelles"),
    frame1437254343: makeNodeComponent("frame1437254343"),
    upload2: makeNodeComponent("upload2"),
    editIcon: makeNodeComponent("editIcon"),
    frame7: makeNodeComponent("frame7"),
    deleteIcon: makeNodeComponent("deleteIcon"),
    frame8: makeNodeComponent("frame8"),
    tableCell: makeNodeComponent("tableCell"),
    _switch: makeNodeComponent("_switch"),
    text6: makeNodeComponent("text6"),
    textInputBase6: makeNodeComponent("textInputBase6"),
    hintText6: makeNodeComponent("hintText6"),
    formulaire: makeNodeComponent("formulaire"),
    prenomNom: makeNodeComponent("prenomNom"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    textInput3: makeNodeComponent("textInput3"),
    telephone: makeNodeComponent("telephone"),
    phoneSelector: makeNodeComponent("phoneSelector"),
    textInput5: makeNodeComponent("textInput5"),
    rue: makeNodeComponent("rue"),
    codePosteVille: makeNodeComponent("codePosteVille"),
    codePostal: makeNodeComponent("codePostal"),
    ville: makeNodeComponent("ville"),
    select4: makeNodeComponent("select4"),
    modeOfTransportSelect: makeNodeComponent("modeOfTransportSelect"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    select3: makeNodeComponent("select3"),
    select8: makeNodeComponent("select8"),
    select: makeNodeComponent("select"),
    textInput4: makeNodeComponent("textInput4"),
    cvModificationDuMdp: makeNodeComponent("cvModificationDuMdp"),
    uploadCvLdm: makeNodeComponent("uploadCvLdm"),
    frame10: makeNodeComponent("frame10"),
    email: makeNodeComponent("email"),
    cvnoUpload: makeNodeComponent("cvnoUpload"),
    upload: makeNodeComponent("upload"),
    content: makeNodeComponent("content"),
    cvUpload: makeNodeComponent("cvUpload"),
    content5: makeNodeComponent("content5"),
    frame11: makeNodeComponent("frame11"),
    email2: makeNodeComponent("email2"),
    lmNoUpload: makeNodeComponent("lmNoUpload"),
    upload3: makeNodeComponent("upload3"),
    lmUpload: makeNodeComponent("lmUpload"),
    content3: makeNodeComponent("content3"),
    reinitialisationDuMdp: makeNodeComponent("reinitialisationDuMdp"),
    card3: makeNodeComponent("card3"),
    resetPassword: makeNodeComponent("resetPassword"),
    form: makeNodeComponent("form"),
    card4: makeNodeComponent("card4"),
    deleteAccount2: makeNodeComponent("deleteAccount2"),
    supprCompte: makeNodeComponent("supprCompte"),
    e: makeNodeComponent("e"),
    deleteAccount: makeNodeComponent("deleteAccount"),
    expandTab: makeNodeComponent("expandTab"),
    mobileNavbarBottom: makeNodeComponent("mobileNavbarBottom"),

    // Metadata about props expected for PlasmicParametresCandidat
    internalVariantProps: PlasmicParametresCandidat__VariantProps,
    internalArgProps: PlasmicParametresCandidat__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicParametresCandidat;
/* prettier-ignore-end */
