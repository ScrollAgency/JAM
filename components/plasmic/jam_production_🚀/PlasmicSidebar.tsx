/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: M06HuWMcBQV2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import SideBarButton from "../../SideBarButton"; // plasmic-import: QWOZXZk1eTc0/component
import { Separator } from "../../../plasmic-library/others/Separator/Separator"; // plasmic-import: DY1R_wd6WfSn/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: M06HuWMcBQV2/css

import Pictogram2Icon from "./icons/PlasmicIcon__Pictogram2"; // plasmic-import: 6mBt3D9w7c35/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: PEpkd9PswE7k/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import GridFourIcon from "./icons/PlasmicIcon__GridFour"; // plasmic-import: KzAe7cfwmhYT/icon
import HeartStraightIcon from "./icons/PlasmicIcon__HeartStraight"; // plasmic-import: 2A8amxR7FAse/icon
import EnvelopeSimple2Icon from "./icons/PlasmicIcon__EnvelopeSimple2"; // plasmic-import: 44ROc7g2Vqof/icon
import PhGearFillIcon from "./icons/PlasmicIcon__PhGearFill"; // plasmic-import: M0oN64eO6n3z/icon
import IconPhFileTextIcon from "./icons/PlasmicIcon__IconPhFileText"; // plasmic-import: FeEx4DkPe8hp/icon
import IconPhUsersThreeIcon from "./icons/PlasmicIcon__IconPhUsersThree"; // plasmic-import: 9cl-NgfR2fAr/icon
import SolarLogoutOutlineIcon from "./icons/PlasmicIcon__SolarLogoutOutline"; // plasmic-import: UZfkN-2mqbQ1/icon

createPlasmicElementProxy;

export type PlasmicSidebar__VariantMembers = {};
export type PlasmicSidebar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>();

export type PlasmicSidebar__ArgsType = {
  disableLinks?: boolean;
  onDisableLinksChange?: (val: string) => void;
  role?: string;
  onRoleChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>(
  "disableLinks",
  "onDisableLinksChange",
  "role",
  "onRoleChange"
);

export type PlasmicSidebar__OverridesType = {
  sidebar?: Flex__<"nav">;
  logoWrapper?: Flex__<"a"> & Partial<LinkProps>;
  candidat?: Flex__<"div">;
  employer?: Flex__<"div">;
  company?: Flex__<"div">;
  credits?: Flex__<"div">;
  admin?: Flex__<"div">;
  disconnectButton?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultSidebarProps {
  disableLinks?: boolean;
  onDisableLinksChange?: (val: string) => void;
  role?: string;
  onRoleChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "disableLinks",
        type: "writable",
        variableType: "boolean",

        valueProp: "disableLinks",
        onChangeProp: "onDisableLinksChange"
      },
      {
        path: "role",
        type: "writable",
        variableType: "text",

        valueProp: "role",
        onChangeProp: "onRoleChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    sidebarGetUserStripeInfos: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "1284f981-03a5-4aae-9f90-4a9eb18e1c6b",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.1284f981-03a5-4aae-9f90-4a9eb18e1c6b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    sidebarUserMonthlyRecharge: usePlasmicDataOp(() => {
      return {
        sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
        opId: "9258b35e-6135-4ba7-8ce4-fe23b60361d6",
        userArgs: {
          params: [$queries.sidebarGetUserStripeInfos.data?.[0].customer_id]
        },
        cacheKey: `plasmic.$.9258b35e-6135-4ba7-8ce4-fe23b60361d6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <nav
      data-plasmic-name={"sidebar"}
      data-plasmic-override={overrides.sidebar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.sidebar
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"logoWrapper"}
        data-plasmic-override={overrides.logoWrapper}
        className={classNames(projectcss.all, projectcss.a, sty.logoWrapper)}
        component={Link}
        onClick={async event => {
          const $steps = {};

          $steps["goToAccueil"] = true
            ? (() => {
                const actionArgs = { destination: `/` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToAccueil"] != null &&
            typeof $steps["goToAccueil"] === "object" &&
            typeof $steps["goToAccueil"].then === "function"
          ) {
            $steps["goToAccueil"] = await $steps["goToAccueil"];
          }
        }}
        platform={"nextjs"}
      >
        <Pictogram2Icon
          className={classNames(projectcss.all, sty.svg__uPc3B)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vpz1D
          )}
        >
          {"JOB AROUND ME"}
        </div>
      </PlasmicLink__>
      <div className={classNames(projectcss.all, sty.freeBox__flPpg)}>
        {(() => {
          try {
            return $state.role == "candidat";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"candidat"}
            data-plasmic-override={overrides.candidat}
            className={classNames(projectcss.all, sty.candidat)}
          >
            <SideBarButton
              className={classNames("__wab_instance", sty.sideBarButton__ybHin)}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pYn1Z
                  )}
                >
                  {"Recherche job"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToAccueil"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAccueil"] != null &&
                  typeof $steps["goToAccueil"] === "object" &&
                  typeof $steps["goToAccueil"].then === "function"
                ) {
                  $steps["goToAccueil"] = await $steps["goToAccueil"];
                }
              }}
              start={
                <SearchIcon
                  className={classNames(projectcss.all, sty.svg__szCwB)}
                  role={"img"}
                />
              }
              type={(() => {
                try {
                  return $ctx.pagePath === "/" ? "actif" : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "actif";
                  }
                  throw e;
                }
              })()}
            />

            <SideBarButton
              className={classNames("__wab_instance", sty.sideBarButton__eQp4)}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mXn1A
                  )}
                >
                  {"Mes candidatures"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToMesCandidatures"] = true
                  ? (() => {
                      const actionArgs = { destination: `/candidatures` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToMesCandidatures"] != null &&
                  typeof $steps["goToMesCandidatures"] === "object" &&
                  typeof $steps["goToMesCandidatures"].then === "function"
                ) {
                  $steps["goToMesCandidatures"] = await $steps[
                    "goToMesCandidatures"
                  ];
                }
              }}
              start={
                <GridFourIcon
                  className={classNames(projectcss.all, sty.svg__onoj8)}
                  role={"img"}
                />
              }
              type={(() => {
                try {
                  return $ctx.pagePath === "/candidatures" ? "actif" : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "actif";
                  }
                  throw e;
                }
              })()}
            />

            <SideBarButton
              className={classNames("__wab_instance", sty.sideBarButton__unDnB)}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yj6GY
                  )}
                >
                  {"Mes annonces"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToMesAnnonces"] = true
                  ? (() => {
                      const actionArgs = { destination: `/annonces` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToMesAnnonces"] != null &&
                  typeof $steps["goToMesAnnonces"] === "object" &&
                  typeof $steps["goToMesAnnonces"].then === "function"
                ) {
                  $steps["goToMesAnnonces"] = await $steps["goToMesAnnonces"];
                }
              }}
              start={
                <HeartStraightIcon
                  className={classNames(projectcss.all, sty.svg__xNuo3)}
                  role={"img"}
                />
              }
              type={(() => {
                try {
                  return $ctx.pagePath === "/annonces" ? "actif" : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "actif";
                  }
                  throw e;
                }
              })()}
            />

            <SideBarButton
              className={classNames("__wab_instance", sty.sideBarButton__xlKVn)}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lb6Xu
                  )}
                >
                  {"mes alertes"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToMesAlertes"] = true
                  ? (() => {
                      const actionArgs = { destination: `/alertes` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToMesAlertes"] != null &&
                  typeof $steps["goToMesAlertes"] === "object" &&
                  typeof $steps["goToMesAlertes"].then === "function"
                ) {
                  $steps["goToMesAlertes"] = await $steps["goToMesAlertes"];
                }
              }}
              start={
                <EnvelopeSimple2Icon
                  className={classNames(projectcss.all, sty.svg__x4G2D)}
                  role={"img"}
                />
              }
              type={(() => {
                try {
                  return $ctx.pagePath === "/alertes" ? "actif" : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "actif";
                  }
                  throw e;
                }
              })()}
            />

            <SideBarButton
              className={classNames("__wab_instance", sty.sideBarButton__uGb2)}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nghUf
                  )}
                >
                  {"parametres"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["goToParametresDeCompte"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: `/parametres-candidat`
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToParametresDeCompte"] != null &&
                  typeof $steps["goToParametresDeCompte"] === "object" &&
                  typeof $steps["goToParametresDeCompte"].then === "function"
                ) {
                  $steps["goToParametresDeCompte"] = await $steps[
                    "goToParametresDeCompte"
                  ];
                }
              }}
              start={
                <PhGearFillIcon
                  className={classNames(projectcss.all, sty.svg___7PPcX)}
                  role={"img"}
                />
              }
              type={(() => {
                try {
                  return $ctx.pagePath === "/parametres-candidat"
                    ? "actif"
                    : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "actif";
                  }
                  throw e;
                }
              })()}
            />
          </div>
        ) : null}
        {(() => {
          try {
            return $state.role == "employer";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"employer"}
            data-plasmic-override={overrides.employer}
            className={classNames(projectcss.all, sty.employer)}
          >
            <div
              data-plasmic-name={"company"}
              data-plasmic-override={overrides.company}
              className={classNames(projectcss.all, sty.company)}
            >
              <SideBarButton
                className={classNames(
                  "__wab_instance",
                  sty.sideBarButton__lL8JE
                )}
                disabled={(() => {
                  try {
                    return $state.disableLinks;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                iconStart={true}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8YwHh
                    )}
                  >
                    {"MES OFFRES"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["goToOffreEmployeur"] = true
                    ? (() => {
                        const actionArgs = { destination: `/offre-employeur` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToOffreEmployeur"] != null &&
                    typeof $steps["goToOffreEmployeur"] === "object" &&
                    typeof $steps["goToOffreEmployeur"].then === "function"
                  ) {
                    $steps["goToOffreEmployeur"] = await $steps[
                      "goToOffreEmployeur"
                    ];
                  }
                }}
                start={
                  <GridFourIcon
                    className={classNames(projectcss.all, sty.svg___6CsA)}
                    role={"img"}
                  />
                }
                type={(() => {
                  try {
                    return $ctx.pagePath === "/offre-employeur" ||
                      $ctx.pagePath === "/candidatures-employeur/[job_id]"
                      ? "actif"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "actif";
                    }
                    throw e;
                  }
                })()}
              />

              <SideBarButton
                className={classNames(
                  "__wab_instance",
                  sty.sideBarButton__nGyEt
                )}
                disabled={(() => {
                  try {
                    return $state.disableLinks;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                iconStart={true}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dao91
                    )}
                  >
                    {"Recherche Candidat"}
                  </div>
                }
                linkTo={`/recherche-candidat`}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToAccueil"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/recherche-candidat`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToAccueil"] != null &&
                    typeof $steps["goToAccueil"] === "object" &&
                    typeof $steps["goToAccueil"].then === "function"
                  ) {
                    $steps["goToAccueil"] = await $steps["goToAccueil"];
                  }
                }}
                start={
                  <SearchIcon
                    className={classNames(projectcss.all, sty.svg__etOs9)}
                    role={"img"}
                  />
                }
                type={(() => {
                  try {
                    return $ctx.pagePath === "/recherche-candidat"
                      ? "actif"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "actif";
                    }
                    throw e;
                  }
                })()}
              />

              <SideBarButton
                className={classNames(
                  "__wab_instance",
                  sty.sideBarButton___54H2X
                )}
                disabled={(() => {
                  try {
                    return $state.disableLinks;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                iconStart={true}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fLt0T
                    )}
                  >
                    {"parametres"}
                  </div>
                }
                linkTo={`/parametres-employeur`}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToParametresEmployeur"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/parametres-employeur`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToParametresEmployeur"] != null &&
                    typeof $steps["goToParametresEmployeur"] === "object" &&
                    typeof $steps["goToParametresEmployeur"].then === "function"
                  ) {
                    $steps["goToParametresEmployeur"] = await $steps[
                      "goToParametresEmployeur"
                    ];
                  }
                }}
                start={
                  <PhGearFillIcon
                    className={classNames(projectcss.all, sty.svg__xLfno)}
                    role={"img"}
                  />
                }
                type={(() => {
                  try {
                    return $ctx.pagePath === "/parametres-employeur" ||
                      $ctx.pagePath === "/parametres-abonnement"
                      ? "actif"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "actif";
                    }
                    throw e;
                  }
                })()}
              />

              {(() => {
                try {
                  return $ctx.pagePath === "/parametres-employeur" ||
                    $ctx.pagePath === "parametres-abonnement"
                    ? ($state.showButton = true)
                    : $state.showButton;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <SideBarButton
                  className={classNames(
                    "__wab_instance",
                    sty.sideBarButton___6BJNu
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c7TJv
                      )}
                    >
                      {"Mon compte"}
                    </div>
                  }
                  linkTo={`/parametres-employeur`}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToParametresDeCompte"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/parametres-employeur`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToParametresDeCompte"] != null &&
                      typeof $steps["goToParametresDeCompte"] === "object" &&
                      typeof $steps["goToParametresDeCompte"].then ===
                        "function"
                    ) {
                      $steps["goToParametresDeCompte"] = await $steps[
                        "goToParametresDeCompte"
                      ];
                    }
                  }}
                  start={null}
                  type={(() => {
                    try {
                      return $ctx.pagePath === "/parametres-employeur"
                        ? "actif"
                        : "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "actif";
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              {(() => {
                try {
                  return $ctx.pagePath === "/parametres-abonnement" ||
                    $ctx.pagePath === "parametres-employeur"
                    ? ($state.showButton = true)
                    : $state.showButton;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <SideBarButton
                  className={classNames(
                    "__wab_instance",
                    sty.sideBarButton__szFlz
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ocyzT
                      )}
                    >
                      {"Mon abonnement"}
                    </div>
                  }
                  linkTo={`/parametres-abonnement`}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToParametresDeCompte"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/parametres-abonnement`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToParametresDeCompte"] != null &&
                      typeof $steps["goToParametresDeCompte"] === "object" &&
                      typeof $steps["goToParametresDeCompte"].then ===
                        "function"
                    ) {
                      $steps["goToParametresDeCompte"] = await $steps[
                        "goToParametresDeCompte"
                      ];
                    }
                  }}
                  start={null}
                  type={(() => {
                    try {
                      return $ctx.pagePath === "/parametres-abonnement"
                        ? "actif"
                        : "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "actif";
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </div>
            <div
              data-plasmic-name={"credits"}
              data-plasmic-override={overrides.credits}
              className={classNames(projectcss.all, sty.credits)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zoKt
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 600 }}
                  >
                    {"VOS ANNONCES"}
                  </span>
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__m0CJu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bkGa9
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 500 }}
                    >
                      {"Classiques :"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ic0Wd,
                    (() => {
                      try {
                        return $queries.sidebarUserMonthlyRecharge?.data
                          ?.response?.solde?.totalClassic == 0
                          ? "grey-600"
                          : "green-500";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $queries.sidebarUserMonthlyRecharge.data?.response
                            ?.solde?.totalClassic || 0 // + "/" + ($queries.sidebarUserMonthlyRecharge.data?.response?.total?.totalClassic || 0)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <Separator
                className={
                  "" + " " + classNames("__wab_instance", sty.separateur__usu6B)
                }
                decorative={false}
                orientation={"horizontal"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__ttH)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fFlxo
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 500 }}
                    >
                      {"Last Minute :"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ucbk9,
                    (() => {
                      try {
                        return $queries.sidebarUserMonthlyRecharge.data
                          ?.response?.solde?.totalLastMinute == 0
                          ? "grey-600"
                          : "green-500";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $queries.sidebarUserMonthlyRecharge.data?.response
                            ?.solde?.totalLastMinute || 0 // + "/" + ($queries.sidebarUserMonthlyRecharge.data?.response?.total?.totalLastMinute || 0)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <Separator
                className={
                  "" +
                  " " +
                  classNames("__wab_instance", sty.separateur___33Zas)
                }
                decorative={false}
                orientation={"horizontal"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__coPh9)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dJbUf
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 500 }}
                    >
                      {"Boost\u00e9es :"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vuK4E,
                    (() => {
                      try {
                        return $queries.sidebarUserMonthlyRecharge.data
                          ?.response?.solde?.totalBoost == 0
                          ? "grey-600"
                          : "green-500";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $queries.sidebarUserMonthlyRecharge.data?.response
                            ?.solde?.totalBoost || 0 // + "/" + ($queries.sidebarUserMonthlyRecharge.data?.response?.total?.totalBoost || 0)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <Separator
                className={
                  "" + " " + classNames("__wab_instance", sty.separateur__lOvhJ)
                }
                decorative={false}
                orientation={"horizontal"}
              />
            </div>
          </div>
        ) : null}
        {(() => {
          try {
            return $state.role == "admin";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"admin"}
            data-plasmic-override={overrides.admin}
            className={classNames(projectcss.all, sty.admin)}
          >
            <SideBarButton
              className={classNames(
                "__wab_instance",
                sty.sideBarButton___6A8E5
              )}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tyMmm
                  )}
                >
                  {"Gestion des offres"}
                </div>
              }
              linkTo={`/offre_admin`}
              onClick={async event => {
                const $steps = {};

                $steps["goToOffreAdmin"] = true
                  ? (() => {
                      const actionArgs = { destination: `/offre_admin` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToOffreAdmin"] != null &&
                  typeof $steps["goToOffreAdmin"] === "object" &&
                  typeof $steps["goToOffreAdmin"].then === "function"
                ) {
                  $steps["goToOffreAdmin"] = await $steps["goToOffreAdmin"];
                }
              }}
              start={
                <IconPhFileTextIcon
                  className={classNames(projectcss.all, sty.svg__oik43)}
                  role={"img"}
                />
              }
              type={(() => {
                try {
                  return $ctx.pagePath === "/offre_admin" ? "actif" : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "actif";
                  }
                  throw e;
                }
              })()}
            />

            <SideBarButton
              className={classNames("__wab_instance", sty.sideBarButton__xh4Xg)}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9HeY
                  )}
                >
                  {"gestion des users"}
                </div>
              }
              linkTo={`/user_admin`}
              onClick={async event => {
                const $steps = {};

                $steps["goToAccueil"] = true
                  ? (() => {
                      const actionArgs = { destination: `/user_admin` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAccueil"] != null &&
                  typeof $steps["goToAccueil"] === "object" &&
                  typeof $steps["goToAccueil"].then === "function"
                ) {
                  $steps["goToAccueil"] = await $steps["goToAccueil"];
                }
              }}
              start={
                <IconPhUsersThreeIcon
                  className={classNames(projectcss.all, sty.svg___5Xej7)}
                  role={"img"}
                />
              }
              type={(() => {
                try {
                  return $ctx.pagePath === "/user_admin" ? "actif" : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "actif";
                  }
                  throw e;
                }
              })()}
            />

            {(() => {
              try {
                return $ctx.pagePath === "/parametres-employeur" ||
                  $ctx.pagePath === "parametres-abonnement"
                  ? ($state.showButton = true)
                  : $state.showButton;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <SideBarButton
                className={classNames(
                  "__wab_instance",
                  sty.sideBarButton__ncJxO
                )}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ilW
                    )}
                  >
                    {"Mon compte"}
                  </div>
                }
                linkTo={`/parametres-employeur`}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToParametresDeCompte"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/parametres-candidat`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToParametresDeCompte"] != null &&
                    typeof $steps["goToParametresDeCompte"] === "object" &&
                    typeof $steps["goToParametresDeCompte"].then === "function"
                  ) {
                    $steps["goToParametresDeCompte"] = await $steps[
                      "goToParametresDeCompte"
                    ];
                  }
                }}
                start={null}
                type={(() => {
                  try {
                    return $ctx.pagePath === "/parametres-employeur"
                      ? "actif"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "actif";
                    }
                    throw e;
                  }
                })()}
              />
            ) : null}
            {(() => {
              try {
                return $ctx.pagePath === "/parametres-abonnement" ||
                  $ctx.pagePath === "parametres-employeur"
                  ? ($state.showButton = true)
                  : $state.showButton;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <SideBarButton
                className={classNames(
                  "__wab_instance",
                  sty.sideBarButton__brRvD
                )}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cMtud
                    )}
                  >
                    {"Mon abonnement"}
                  </div>
                }
                linkTo={`/parametres-abonnement`}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToParametresDeCompte"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/parametres-candidat`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToParametresDeCompte"] != null &&
                    typeof $steps["goToParametresDeCompte"] === "object" &&
                    typeof $steps["goToParametresDeCompte"].then === "function"
                  ) {
                    $steps["goToParametresDeCompte"] = await $steps[
                      "goToParametresDeCompte"
                    ];
                  }
                }}
                start={null}
                type={(() => {
                  try {
                    return $ctx.pagePath === "/parametres-abonnement"
                      ? "actif"
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "actif";
                    }
                    throw e;
                  }
                })()}
              />
            ) : null}
          </div>
        ) : null}
        <div
          data-plasmic-name={"disconnectButton"}
          data-plasmic-override={overrides.disconnectButton}
          className={classNames(projectcss.all, sty.disconnectButton)}
        >
          <SolarLogoutOutlineIcon
            className={classNames(projectcss.all, sty.svg__qm6FN)}
            role={"img"}
          />

          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link
            )}
            component={Link}
            href={""}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = { args: ["/login"] };
                    return $globalActions[
                      "SupabaseUserGlobalContext.logout"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
            platform={"nextjs"}
          >
            {"D\u00e9connexion"}
          </PlasmicLink__>
          <SideBarButton
            className={classNames("__wab_instance", sty.sideBarButton__bG6GX)}
            iconStart={true}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jJnT7
                )}
              >
                {"D\u00e9connexion"}
              </div>
            }
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = { args: ["/"] };
                    return $globalActions[
                      "SupabaseUserGlobalContext.logout"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
            start={
              <SolarLogoutOutlineIcon
                className={classNames(projectcss.all, sty.svg__jHbiR)}
                role={"img"}
              />
            }
            type={(() => {
              try {
                return $ctx.pagePath === "/" ? "actif" : "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "actif";
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </nav>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sidebar: [
    "sidebar",
    "logoWrapper",
    "candidat",
    "employer",
    "company",
    "credits",
    "admin",
    "disconnectButton",
    "link"
  ],
  logoWrapper: ["logoWrapper"],
  candidat: ["candidat"],
  employer: ["employer", "company", "credits"],
  company: ["company"],
  credits: ["credits"],
  admin: ["admin"],
  disconnectButton: ["disconnectButton", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  sidebar: "nav";
  logoWrapper: "a";
  candidat: "div";
  employer: "div";
  company: "div";
  credits: "div";
  admin: "div";
  disconnectButton: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebar__ArgProps,
          internalVariantPropNames: PlasmicSidebar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sidebar") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("sidebar"),
  {
    // Helper components rendering sub-elements
    logoWrapper: makeNodeComponent("logoWrapper"),
    candidat: makeNodeComponent("candidat"),
    employer: makeNodeComponent("employer"),
    company: makeNodeComponent("company"),
    credits: makeNodeComponent("credits"),
    admin: makeNodeComponent("admin"),
    disconnectButton: makeNodeComponent("disconnectButton"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
