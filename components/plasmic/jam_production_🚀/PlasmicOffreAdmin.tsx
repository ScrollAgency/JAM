/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: dhaHjohJR0Z5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import { DataGridOffre } from "../../others/DataGridOffre/DataGridOffre"; // plasmic-import: xkvR5y_rqfm4/codeComponent
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import DeleteAccount from "../../DeleteAccount"; // plasmic-import: KdtWnTG_vDHe/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicOffreAdmin.module.css"; // plasmic-import: dhaHjohJR0Z5/css

import PhMapPin2Icon from "./icons/PlasmicIcon__PhMapPin2"; // plasmic-import: hGRa__J54hta/icon
import PhFileTextIcon from "./icons/PlasmicIcon__PhFileText"; // plasmic-import: kuV0Q3xSw_jm/icon
import PhClockIcon from "./icons/PlasmicIcon__PhClock"; // plasmic-import: r6dP5yPLK2Mb/icon
import PhCoinsLightIcon from "./icons/PlasmicIcon__PhCoinsLight"; // plasmic-import: 4H-jk36Nk9q0/icon
import PhClockCountdownIcon from "./icons/PlasmicIcon__PhClockCountdown"; // plasmic-import: EKdA7LX61Arw/icon
import ReshotIconAlert7T6Wum8VleSvgIcon from "./icons/PlasmicIcon__ReshotIconAlert7T6Wum8VleSvg"; // plasmic-import: I2J7nwYmWkrC/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicOffreAdmin__VariantMembers = {};
export type PlasmicOffreAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicOffreAdmin__VariantsArgs;
export const PlasmicOffreAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicOffreAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicOffreAdmin__ArgsType;
export const PlasmicOffreAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicOffreAdmin__OverridesType = {
  root?: Flex__<"div">;
  sidebar?: Flex__<typeof Sidebar>;
  main?: Flex__<"div">;
  h1?: Flex__<"h1">;
  dataGridOffre?: Flex__<typeof DataGridOffre>;
  offre?: Flex__<typeof Modal>;
  img?: Flex__<typeof PlasmicImg__>;
  jobListing?: Flex__<"div">;
  jobDetail?: Flex__<"div">;
  location?: Flex__<"div">;
  frame46?: Flex__<"div">;
  frame47?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame49?: Flex__<"div">;
  frame50?: Flex__<"div">;
  frame51?: Flex__<"div">;
  jobDescriptionContainer?: Flex__<"div">;
  benefits?: Flex__<"div">;
  expectedProfileContainer?: Flex__<"div">;
  companyContainer?: Flex__<"div">;
  logoContainer?: Flex__<"div">;
  _delete?: Flex__<typeof Modal>;
  e2?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  deleteAccount?: Flex__<typeof DeleteAccount>;
};

export interface DefaultOffreAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOffreAdmin__RenderFunc(props: {
  variants: PlasmicOffreAdmin__VariantsArgs;
  args: PlasmicOffreAdmin__ArgsType;
  overrides: PlasmicOffreAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "page",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "offre.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "_delete.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "offreId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "offre2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "sidebar.disableLinks",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sidebar.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "admin"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    adminGetOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "e38cc2f4-cfb6-40a3-bc90-0b9ce2786a30",
        userArgs: {},
        cacheKey: `plasmic.$.e38cc2f4-cfb6-40a3-bc90-0b9ce2786a30.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicOffreAdmin.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicOffreAdmin.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicOffreAdmin.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
            disableLinks={generateStateValueProp($state, [
              "sidebar",
              "disableLinks"
            ])}
            onDisableLinksChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebar",
                "disableLinks"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sidebar", "role"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, ["sidebar", "role"])}
          />

          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dZ8Cx
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Gestion des offres"}
                  </h1>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <DataGridOffre
              data-plasmic-name={"dataGridOffre"}
              data-plasmic-override={overrides.dataGridOffre}
              className={classNames("__wab_instance", sty.dataGridOffre)}
              columnLabels={{
                job_name: "Titre",
                description: "Description",
                company_name: "Entreprise",
                created_at_formatted: "Date de publication",
                job_location: "Lieu",
                actions: "Actions"
              }}
              currentPage={(() => {
                try {
                  return $state.page;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 1;
                  }
                  throw e;
                }
              })()}
              emptyStateMessage={"Aucune offre disponible"}
              isLoading={false}
              offres={(() => {
                try {
                  return $queries.adminGetOffers.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onDelete={async offreId => {
                const $steps = {};

                $steps["updateOffreId"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["offreId"]
                        },
                        operation: 0,
                        value: offreId
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateOffreId"] != null &&
                  typeof $steps["updateOffreId"] === "object" &&
                  typeof $steps["updateOffreId"].then === "function"
                ) {
                  $steps["updateOffreId"] = await $steps["updateOffreId"];
                }

                $steps["updateDeleteIsOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["_delete", "isOpen"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteIsOpen"] != null &&
                  typeof $steps["updateDeleteIsOpen"] === "object" &&
                  typeof $steps["updateDeleteIsOpen"].then === "function"
                ) {
                  $steps["updateDeleteIsOpen"] = await $steps[
                    "updateDeleteIsOpen"
                  ];
                }
              }}
              onPageChange={async page => {
                const $steps = {};

                $steps["updatePage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["page"]
                        },
                        operation: 0,
                        value: page
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePage"] != null &&
                  typeof $steps["updatePage"] === "object" &&
                  typeof $steps["updatePage"].then === "function"
                ) {
                  $steps["updatePage"] = await $steps["updatePage"];
                }
              }}
              onViewDetails={async (offreId, offre) => {
                const $steps = {};

                $steps["updateOffre2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["offre2"]
                        },
                        operation: 0,
                        value: offre
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateOffre2"] != null &&
                  typeof $steps["updateOffre2"] === "object" &&
                  typeof $steps["updateOffre2"].then === "function"
                ) {
                  $steps["updateOffre2"] = await $steps["updateOffre2"];
                }

                $steps["updateOffreIsOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["offre", "isOpen"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateOffreIsOpen"] != null &&
                  typeof $steps["updateOffreIsOpen"] === "object" &&
                  typeof $steps["updateOffreIsOpen"].then === "function"
                ) {
                  $steps["updateOffreIsOpen"] = await $steps[
                    "updateOffreIsOpen"
                  ];
                }
              }}
              pageSize={10}
              statusConfig={{
                active: { label: "Active", color: "#D1FAE5" },
                inactive: { label: "Inactive", color: "#FEE2E2" },
                en_attente: { label: "En attente", color: "#FEF3C7" }
              }}
              theme={{
                headerBgColor: "#F3F4F6",
                rowBgColor: "#ffffff",
                hoverBgColor: "#E5E7EB",
                borderColor: "#E5E7EB",
                textColor: "#4B5563"
              }}
              visibleColumns={[
                "job_name",
                "company_name",
                "description",
                "job_location",
                "created_at_formatted"
              ]}
            />

            <Modal
              data-plasmic-name={"offre"}
              data-plasmic-override={overrides.offre}
              className={classNames("__wab_instance", sty.offre)}
              content={
                <div
                  data-plasmic-name={"jobListing"}
                  data-plasmic-override={overrides.jobListing}
                  className={classNames(projectcss.all, sty.jobListing)}
                >
                  <div
                    data-plasmic-name={"jobDetail"}
                    data-plasmic-override={overrides.jobDetail}
                    className={classNames(projectcss.all, sty.jobDetail)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oSsmz)}
                    >
                      <div
                        data-plasmic-name={"location"}
                        data-plasmic-override={overrides.location}
                        className={classNames(projectcss.all, sty.location)}
                      >
                        <PhMapPin2Icon
                          className={classNames(projectcss.all, sty.svg__yUmcp)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0WsNs
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.offre2.job_location;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3BKl
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.offre2.created_at_formatted;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame46"}
                      data-plasmic-override={overrides.frame46}
                      className={classNames(projectcss.all, sty.frame46)}
                    >
                      <div
                        data-plasmic-name={"frame47"}
                        data-plasmic-override={overrides.frame47}
                        className={classNames(projectcss.all, sty.frame47)}
                      >
                        <div
                          data-plasmic-name={"frame48"}
                          data-plasmic-override={overrides.frame48}
                          className={classNames(projectcss.all, sty.frame48)}
                        >
                          <PhFileTextIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pflfg
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tvXAx
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.offre2.contract_type;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame49"}
                          data-plasmic-override={overrides.frame49}
                          className={classNames(projectcss.all, sty.frame49)}
                        >
                          <PhClockIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qe3J8
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gHpCq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.offre2.working_time;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame50"}
                          data-plasmic-override={overrides.frame50}
                          className={classNames(projectcss.all, sty.frame50)}
                        >
                          <PhCoinsLightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__a9B16
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__akSj7
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.offre2.salary;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame51"}
                          data-plasmic-override={overrides.frame51}
                          className={classNames(projectcss.all, sty.frame51)}
                        >
                          <PhClockCountdownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__oxjs9
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__otlji
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.offre2.availability_status;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"jobDescriptionContainer"}
                    data-plasmic-override={overrides.jobDescriptionContainer}
                    className={classNames(
                      projectcss.all,
                      sty.jobDescriptionContainer
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tB8FW
                      )}
                    >
                      {"Description du poste"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pWQn
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.offre2.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      data-plasmic-name={"benefits"}
                      data-plasmic-override={overrides.benefits}
                      className={classNames(projectcss.all, sty.benefits)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        []
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__byVDa
                            )}
                            key={currentIndex}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"expectedProfileContainer"}
                    data-plasmic-override={overrides.expectedProfileContainer}
                    className={classNames(
                      projectcss.all,
                      sty.expectedProfileContainer
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xiR
                      )}
                    >
                      {"Profil attendu"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Fb2U
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.offre2.requirements;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"companyContainer"}
                    data-plasmic-override={overrides.companyContainer}
                    className={classNames(projectcss.all, sty.companyContainer)}
                  >
                    <div
                      data-plasmic-name={"logoContainer"}
                      data-plasmic-override={overrides.logoContainer}
                      className={classNames(projectcss.all, sty.logoContainer)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n48UG
                        )}
                      >
                        {"L\u2019entreprise"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__epD7F)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jpE4L
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.offre2.company_name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h3F40
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.offre2.company_description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              }
              footer={null}
              heading={
                (
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : (() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"17px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"17px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateOffreIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["offre", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateOffreIsOpen"] != null &&
                        typeof $steps["updateOffreIsOpen"] === "object" &&
                        typeof $steps["updateOffreIsOpen"].then === "function"
                      ) {
                        $steps["updateOffreIsOpen"] = await $steps[
                          "updateOffreIsOpen"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/jam_production_🚀/images/close3.svg",
                      fullWidth: 17,
                      fullHeight: 17,
                      aspectRatio: 1
                    }}
                  />
                ) : null
              }
              isOpen={generateStateValueProp($state, ["offre", "isOpen"])}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["offre", "isOpen"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showFooter={false}
              showHeader={true}
              trigger={null}
            />

            <Modal
              data-plasmic-name={"_delete"}
              data-plasmic-override={overrides._delete}
              className={classNames("__wab_instance", sty._delete)}
              content={
                <div className={classNames(projectcss.all, sty.freeBox__rnh3F)}>
                  <ReshotIconAlert7T6Wum8VleSvgIcon
                    className={classNames(projectcss.all, sty.svg__sW7Sg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lhHn
                    )}
                  >
                    {"Voulez-vous supprimer cette offre ?"}
                  </div>
                  <div
                    data-plasmic-name={"e2"}
                    data-plasmic-override={overrides.e2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.e2
                    )}
                  >
                    {
                      "Attention : cette action est irr\u00e9versible. L\u2019offre sera d\u00e9finitivement supprim\u00e9e."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eRqVk)}
                  >
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      color={"white"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iNu6
                          )}
                        >
                          {"retour"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDeleteIsOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["_delete", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDeleteIsOpen"] != null &&
                          typeof $steps["updateDeleteIsOpen"] === "object" &&
                          typeof $steps["updateDeleteIsOpen"].then ===
                            "function"
                        ) {
                          $steps["updateDeleteIsOpen"] = await $steps[
                            "updateDeleteIsOpen"
                          ];
                        }
                      }}
                      type={"bordered"}
                    />

                    <DeleteAccount
                      data-plasmic-name={"deleteAccount"}
                      data-plasmic-override={overrides.deleteAccount}
                      className={classNames(
                        "__wab_instance",
                        sty.deleteAccount
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__neUMx
                          )}
                        >
                          {"supprimer"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["postgresDeleteMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "1dac4760-8007-474e-a008-760fab400325",
                                  userArgs: {
                                    conditions: [$state.offreId]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresDeleteMany"] != null &&
                          typeof $steps["postgresDeleteMany"] === "object" &&
                          typeof $steps["postgresDeleteMany"].then ===
                            "function"
                        ) {
                          $steps["postgresDeleteMany"] = await $steps[
                            "postgresDeleteMany"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "success",
                                  "L'offre a bien \u00e9t\u00e9 supprim\u00e9e !"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateDeleteIsOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["_delete", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDeleteIsOpen"] != null &&
                          typeof $steps["updateDeleteIsOpen"] === "object" &&
                          typeof $steps["updateDeleteIsOpen"].then ===
                            "function"
                        ) {
                          $steps["updateDeleteIsOpen"] = await $steps[
                            "updateDeleteIsOpen"
                          ];
                        }
                      }}
                    />
                  </div>
                </div>
              }
              footer={null}
              heading={null}
              isOpen={generateStateValueProp($state, ["_delete", "isOpen"])}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["_delete", "isOpen"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showFooter={false}
              showHeader={false}
              trigger={null}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "main",
    "h1",
    "dataGridOffre",
    "offre",
    "img",
    "jobListing",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer",
    "_delete",
    "e2",
    "button",
    "deleteAccount"
  ],
  sidebar: ["sidebar"],
  main: [
    "main",
    "h1",
    "dataGridOffre",
    "offre",
    "img",
    "jobListing",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer",
    "_delete",
    "e2",
    "button",
    "deleteAccount"
  ],
  h1: ["h1"],
  dataGridOffre: ["dataGridOffre"],
  offre: [
    "offre",
    "img",
    "jobListing",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer"
  ],
  img: ["img"],
  jobListing: [
    "jobListing",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer"
  ],
  jobDetail: [
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51"
  ],
  location: ["location"],
  frame46: ["frame46", "frame47", "frame48", "frame49", "frame50", "frame51"],
  frame47: ["frame47", "frame48", "frame49", "frame50", "frame51"],
  frame48: ["frame48"],
  frame49: ["frame49"],
  frame50: ["frame50"],
  frame51: ["frame51"],
  jobDescriptionContainer: ["jobDescriptionContainer", "benefits"],
  benefits: ["benefits"],
  expectedProfileContainer: ["expectedProfileContainer"],
  companyContainer: ["companyContainer", "logoContainer"],
  logoContainer: ["logoContainer"],
  _delete: ["_delete", "e2", "button", "deleteAccount"],
  e2: ["e2"],
  button: ["button"],
  deleteAccount: ["deleteAccount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  main: "div";
  h1: "h1";
  dataGridOffre: typeof DataGridOffre;
  offre: typeof Modal;
  img: typeof PlasmicImg__;
  jobListing: "div";
  jobDetail: "div";
  location: "div";
  frame46: "div";
  frame47: "div";
  frame48: "div";
  frame49: "div";
  frame50: "div";
  frame51: "div";
  jobDescriptionContainer: "div";
  benefits: "div";
  expectedProfileContainer: "div";
  companyContainer: "div";
  logoContainer: "div";
  _delete: typeof Modal;
  e2: "div";
  button: typeof Button;
  deleteAccount: typeof DeleteAccount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOffreAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOffreAdmin__VariantsArgs;
    args?: PlasmicOffreAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOffreAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOffreAdmin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOffreAdmin__ArgProps,
          internalVariantPropNames: PlasmicOffreAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOffreAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOffreAdmin";
  } else {
    func.displayName = `PlasmicOffreAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicOffreAdmin = Object.assign(
  // Top-level PlasmicOffreAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    h1: makeNodeComponent("h1"),
    dataGridOffre: makeNodeComponent("dataGridOffre"),
    offre: makeNodeComponent("offre"),
    img: makeNodeComponent("img"),
    jobListing: makeNodeComponent("jobListing"),
    jobDetail: makeNodeComponent("jobDetail"),
    location: makeNodeComponent("location"),
    frame46: makeNodeComponent("frame46"),
    frame47: makeNodeComponent("frame47"),
    frame48: makeNodeComponent("frame48"),
    frame49: makeNodeComponent("frame49"),
    frame50: makeNodeComponent("frame50"),
    frame51: makeNodeComponent("frame51"),
    jobDescriptionContainer: makeNodeComponent("jobDescriptionContainer"),
    benefits: makeNodeComponent("benefits"),
    expectedProfileContainer: makeNodeComponent("expectedProfileContainer"),
    companyContainer: makeNodeComponent("companyContainer"),
    logoContainer: makeNodeComponent("logoContainer"),
    _delete: makeNodeComponent("_delete"),
    e2: makeNodeComponent("e2"),
    button: makeNodeComponent("button"),
    deleteAccount: makeNodeComponent("deleteAccount"),

    // Metadata about props expected for PlasmicOffreAdmin
    internalVariantProps: PlasmicOffreAdmin__VariantProps,
    internalArgProps: PlasmicOffreAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Espace administrateur",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOffreAdmin;
/* prettier-ignore-end */
