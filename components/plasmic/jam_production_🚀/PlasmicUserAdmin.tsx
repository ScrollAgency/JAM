/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: tvp-rSXbKvIx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import { DataGridUser } from "../../others/DataGridUser/DataGridUser"; // plasmic-import: HXtz_l-PfcN1/codeComponent
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import DeleteAccount from "../../DeleteAccount"; // plasmic-import: KdtWnTG_vDHe/component
import MobileNavbarBottomAdmin from "../../MobileNavbarBottomAdmin"; // plasmic-import: m4jmCbHtDuQ4/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from ""; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicUserAdmin.module.css"; // plasmic-import: tvp-rSXbKvIx/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import ReshotIconAlert7T6Wum8VleSvgIcon from "./icons/PlasmicIcon__ReshotIconAlert7T6Wum8VleSvg"; // plasmic-import: I2J7nwYmWkrC/icon

createPlasmicElementProxy;

export type PlasmicUserAdmin__VariantMembers = {};
export type PlasmicUserAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserAdmin__VariantsArgs;
export const PlasmicUserAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicUserAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicUserAdmin__ArgsType;
export const PlasmicUserAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicUserAdmin__OverridesType = {
  root?: Flex__<"div">;
  sidebar?: Flex__<typeof Sidebar>;
  main?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  h1?: Flex__<"h1">;
  supprUser?: Flex__<typeof Modal>;
  svg?: Flex__<"svg">;
  e2?: Flex__<"div">;
  deleteAccount?: Flex__<typeof DeleteAccount>;
  mobileNavbarBottomAdmin?: Flex__<typeof MobileNavbarBottomAdmin>;
};

export interface DefaultUserAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserAdmin__RenderFunc(props: {
  variants: PlasmicUserAdmin__VariantsArgs;
  args: PlasmicUserAdmin__ArgsType;
  overrides: PlasmicUserAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showCandidat",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "showCompany",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pageUser",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "pageCompany",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "supprUser.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "idUser",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "sidebar.disableLinks",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sidebar.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "admin"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCompany: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "feb2da73-e5d2-48a0-bd42-51a3ea83eeb7",
        userArgs: {},
        cacheKey: `plasmic.$.feb2da73-e5d2-48a0-bd42-51a3ea83eeb7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramAdminGetCandidat: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "bb945d86-82c9-4e29-8e20-a93fd544ce10",
        userArgs: {},
        cacheKey: `plasmic.$.bb945d86-82c9-4e29-8e20-a93fd544ce10.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramAdminGetCompany2: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "263223b7-4d44-44fe-9673-2df25060ea1d",
        userArgs: {},
        cacheKey: `plasmic.$.263223b7-4d44-44fe-9673-2df25060ea1d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
            disableLinks={generateStateValueProp($state, [
              "sidebar",
              "disableLinks"
            ])}
            onDisableLinksChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebar",
                "disableLinks"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sidebar", "role"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, ["sidebar", "role"])}
          />

          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: [
                          "bb945d86-82c9-4e29-8e20-a93fd544ce10",
                          "263223b7-4d44-44fe-9673-2df25060ea1d"
                        ]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Ba4Z
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Gestion des users"}
                  </h1>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__lg6T6)}>
              <div className={classNames(projectcss.all, sty.freeBox__vJiyM)}>
                <Button
                  className={classNames("__wab_instance", sty.button__bnOxe)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vl9It
                      )}
                    >
                      {"Candidat"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateShowCandidat"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showCandidat"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShowCandidat"] != null &&
                      typeof $steps["updateShowCandidat"] === "object" &&
                      typeof $steps["updateShowCandidat"].then === "function"
                    ) {
                      $steps["updateShowCandidat"] = await $steps[
                        "updateShowCandidat"
                      ];
                    }

                    $steps["updateShowCandidat2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showCompany"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShowCandidat2"] != null &&
                      typeof $steps["updateShowCandidat2"] === "object" &&
                      typeof $steps["updateShowCandidat2"].then === "function"
                    ) {
                      $steps["updateShowCandidat2"] = await $steps[
                        "updateShowCandidat2"
                      ];
                    }
                  }}
                  type={"bordered"}
                />

                <Button
                  className={classNames("__wab_instance", sty.button__xOMc)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eHpxc
                      )}
                    >
                      {"Company"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateShowCompany"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showCompany"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShowCompany"] != null &&
                      typeof $steps["updateShowCompany"] === "object" &&
                      typeof $steps["updateShowCompany"].then === "function"
                    ) {
                      $steps["updateShowCompany"] = await $steps[
                        "updateShowCompany"
                      ];
                    }

                    $steps["updateShowCandidat"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showCandidat"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShowCandidat"] != null &&
                      typeof $steps["updateShowCandidat"] === "object" &&
                      typeof $steps["updateShowCandidat"].then === "function"
                    ) {
                      $steps["updateShowCandidat"] = await $steps[
                        "updateShowCandidat"
                      ];
                    }
                  }}
                  type={"bordered"}
                />
              </div>
              {(() => {
                try {
                  return $state.showCandidat;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__cewrk)}>
                  <DataGridUser
                    className={classNames(
                      "__wab_instance",
                      sty.dataGridUser__oVczU
                    )}
                    columnLabels={{
                      name: "Nom",
                      email: "Email",
                      role: "R\u00f4le",
                      created_at: "Date d'inscription"
                    }}
                    currentPage={(() => {
                      try {
                        return $state.pageUser;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return 1;
                        }
                        throw e;
                      }
                    })()}
                    emptyStateMessage={"Aucun utilisateur disponible"}
                    isLoading={false}
                    onDelete={async userId => {
                      const $steps = {};

                      $steps["updateUserId"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["idUser"]
                              },
                              operation: 0,
                              value: userId
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUserId"] != null &&
                        typeof $steps["updateUserId"] === "object" &&
                        typeof $steps["updateUserId"].then === "function"
                      ) {
                        $steps["updateUserId"] = await $steps["updateUserId"];
                      }

                      $steps["updateModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["supprUser", "isOpen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalIsOpen"] != null &&
                        typeof $steps["updateModalIsOpen"] === "object" &&
                        typeof $steps["updateModalIsOpen"].then === "function"
                      ) {
                        $steps["updateModalIsOpen"] = await $steps[
                          "updateModalIsOpen"
                        ];
                      }
                    }}
                    onPageChange={async page => {
                      const $steps = {};

                      $steps["updatePage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageUser"]
                              },
                              operation: 0,
                              value: page
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePage"] != null &&
                        typeof $steps["updatePage"] === "object" &&
                        typeof $steps["updatePage"].then === "function"
                      ) {
                        $steps["updatePage"] = await $steps["updatePage"];
                      }
                    }}
                    pageSize={10}
                    statusConfig={{
                      actif: { label: "Actif", color: "#D1FAE5" },
                      inactif: { label: "Inactif", color: "#FEE2E2" },
                      suspendu: { label: "Suspendu", color: "#FEF3C7" }
                    }}
                    theme={{
                      headerBgColor: "#F3F4F6",
                      rowBgColor: "#ffffff",
                      hoverBgColor: "#E5E7EB",
                      borderColor: "#E5E7EB",
                      textColor: "#4B5563"
                    }}
                    users={(() => {
                      try {
                        return $queries.paramAdminGetCandidat.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    visibleColumns={["name", "email", "role", "created_at"]}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.showCompany;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__zefOy)}>
                  <DataGridUser
                    className={classNames(
                      "__wab_instance",
                      sty.dataGridUser__tgwQc
                    )}
                    columnLabels={{
                      name: "Nom",
                      email: "Email",
                      role: "R\u00f4le",
                      created_at_formatted: "Date d'inscription",
                      siren: "Siren"
                    }}
                    currentPage={(() => {
                      try {
                        return $state.pageCompany;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return 1;
                        }
                        throw e;
                      }
                    })()}
                    emptyStateMessage={"Aucun utilisateur disponible"}
                    isLoading={false}
                    onDelete={async userId => {
                      const $steps = {};

                      $steps["updateUserId"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["idUser"]
                              },
                              operation: 0,
                              value: userId
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUserId"] != null &&
                        typeof $steps["updateUserId"] === "object" &&
                        typeof $steps["updateUserId"].then === "function"
                      ) {
                        $steps["updateUserId"] = await $steps["updateUserId"];
                      }

                      $steps["updateModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["supprUser", "isOpen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalIsOpen"] != null &&
                        typeof $steps["updateModalIsOpen"] === "object" &&
                        typeof $steps["updateModalIsOpen"].then === "function"
                      ) {
                        $steps["updateModalIsOpen"] = await $steps[
                          "updateModalIsOpen"
                        ];
                      }
                    }}
                    onPageChange={async page => {
                      const $steps = {};

                      $steps["updatePage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pageCompany"]
                              },
                              operation: 0,
                              value: page
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePage"] != null &&
                        typeof $steps["updatePage"] === "object" &&
                        typeof $steps["updatePage"].then === "function"
                      ) {
                        $steps["updatePage"] = await $steps["updatePage"];
                      }
                    }}
                    pageSize={10}
                    statusConfig={{
                      actif: { label: "Actif", color: "#D1FAE5" },
                      inactif: { label: "Inactif", color: "#FEE2E2" },
                      suspendu: { label: "Suspendu", color: "#FEF3C7" }
                    }}
                    theme={{
                      headerBgColor: "#F3F4F6",
                      rowBgColor: "#ffffff",
                      hoverBgColor: "#E5E7EB",
                      borderColor: "#E5E7EB",
                      textColor: "#4B5563"
                    }}
                    users={(() => {
                      try {
                        return $queries.paramAdminGetCompany2.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    visibleColumns={[
                      "name",
                      "email",
                      "role",
                      "created_at_formatted",
                      "siren"
                    ]}
                  />
                </div>
              ) : null}
            </div>
            <Modal
              data-plasmic-name={"supprUser"}
              data-plasmic-override={overrides.supprUser}
              className={classNames("__wab_instance", sty.supprUser)}
              content={
                <div className={classNames(projectcss.all, sty.freeBox__ibQn9)}>
                  <ReshotIconAlert7T6Wum8VleSvgIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5TXc
                    )}
                  >
                    {"Voulez-vous supprimer ce user ?"}
                  </div>
                  <div
                    data-plasmic-name={"e2"}
                    data-plasmic-override={overrides.e2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.e2
                    )}
                  >
                    {
                      "Attention : cette action est irr\u00e9versible. Le user sera d\u00e9finitivement supprim\u00e9."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7Lbwn)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__phMvE
                      )}
                      color={"white"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mWtW2
                          )}
                        >
                          {"retour"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateModalIsOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["supprUser", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalIsOpen"] != null &&
                          typeof $steps["updateModalIsOpen"] === "object" &&
                          typeof $steps["updateModalIsOpen"].then === "function"
                        ) {
                          $steps["updateModalIsOpen"] = await $steps[
                            "updateModalIsOpen"
                          ];
                        }
                      }}
                      type={"bordered"}
                    />

                    <DeleteAccount
                      data-plasmic-name={"deleteAccount"}
                      data-plasmic-override={overrides.deleteAccount}
                      className={classNames(
                        "__wab_instance",
                        sty.deleteAccount
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rBlbh
                          )}
                        >
                          {"supprimer"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["postgresDeleteMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "78979320-35e7-4bf7-9b84-8f975cd2f4dc",
                                  userArgs: {
                                    conditions: [$state.idUser]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: null,
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresDeleteMany"] != null &&
                          typeof $steps["postgresDeleteMany"] === "object" &&
                          typeof $steps["postgresDeleteMany"].then ===
                            "function"
                        ) {
                          $steps["postgresDeleteMany"] = await $steps[
                            "postgresDeleteMany"
                          ];
                        }

                        $steps["updateSupprUserIsOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["supprUser", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSupprUserIsOpen"] != null &&
                          typeof $steps["updateSupprUserIsOpen"] === "object" &&
                          typeof $steps["updateSupprUserIsOpen"].then ===
                            "function"
                        ) {
                          $steps["updateSupprUserIsOpen"] = await $steps[
                            "updateSupprUserIsOpen"
                          ];
                        }
                      }}
                    />
                  </div>
                </div>
              }
              footer={null}
              heading={null}
              isOpen={generateStateValueProp($state, ["supprUser", "isOpen"])}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "supprUser",
                  "isOpen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showFooter={false}
              showHeader={false}
              trigger={null}
            />
          </div>
          <MobileNavbarBottomAdmin
            data-plasmic-name={"mobileNavbarBottomAdmin"}
            data-plasmic-override={overrides.mobileNavbarBottomAdmin}
            className={classNames(
              "__wab_instance",
              sty.mobileNavbarBottomAdmin
            )}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "main",
    "sideEffect",
    "h1",
    "supprUser",
    "svg",
    "e2",
    "deleteAccount",
    "mobileNavbarBottomAdmin"
  ],
  sidebar: ["sidebar"],
  main: ["main", "sideEffect", "h1", "supprUser", "svg", "e2", "deleteAccount"],
  sideEffect: ["sideEffect"],
  h1: ["h1"],
  supprUser: ["supprUser", "svg", "e2", "deleteAccount"],
  svg: ["svg"],
  e2: ["e2"],
  deleteAccount: ["deleteAccount"],
  mobileNavbarBottomAdmin: ["mobileNavbarBottomAdmin"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  main: "div";
  sideEffect: typeof SideEffect;
  h1: "h1";
  supprUser: typeof Modal;
  svg: "svg";
  e2: "div";
  deleteAccount: typeof DeleteAccount;
  mobileNavbarBottomAdmin: typeof MobileNavbarBottomAdmin;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserAdmin__VariantsArgs;
    args?: PlasmicUserAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserAdmin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserAdmin__ArgProps,
          internalVariantPropNames: PlasmicUserAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserAdmin";
  } else {
    func.displayName = `PlasmicUserAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicUserAdmin = Object.assign(
  // Top-level PlasmicUserAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    sideEffect: makeNodeComponent("sideEffect"),
    h1: makeNodeComponent("h1"),
    supprUser: makeNodeComponent("supprUser"),
    svg: makeNodeComponent("svg"),
    e2: makeNodeComponent("e2"),
    deleteAccount: makeNodeComponent("deleteAccount"),
    mobileNavbarBottomAdmin: makeNodeComponent("mobileNavbarBottomAdmin"),

    // Metadata about props expected for PlasmicUserAdmin
    internalVariantProps: PlasmicUserAdmin__VariantProps,
    internalArgProps: PlasmicUserAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserAdmin;
/* prettier-ignore-end */
