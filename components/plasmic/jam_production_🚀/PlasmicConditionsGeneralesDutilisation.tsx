/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: p2d3YOzpDm1z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import Footer from "../../Footer"; // plasmic-import: ZOpOgPOAiAAY/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicConditionsGeneralesDutilisation.module.css"; // plasmic-import: p2d3YOzpDm1z/css

import Group9Icon from "./icons/PlasmicIcon__Group9"; // plasmic-import: ms6q7ryQNArM/icon
import Vector12Icon from "./icons/PlasmicIcon__Vector12"; // plasmic-import: 5U7jknIbCE_j/icon
import BurgerMenuSvgrepoComSvgIcon from "./icons/PlasmicIcon__BurgerMenuSvgrepoComSvg"; // plasmic-import: gRAQlG3nZIRq/icon
import DeleteSvgrepoComSvgIcon from "./icons/PlasmicIcon__DeleteSvgrepoComSvg"; // plasmic-import: un50fnKIt1qA/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon

createPlasmicElementProxy;

export type PlasmicConditionsGeneralesDutilisation__VariantMembers = {};
export type PlasmicConditionsGeneralesDutilisation__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicConditionsGeneralesDutilisation__VariantsArgs;
export const PlasmicConditionsGeneralesDutilisation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicConditionsGeneralesDutilisation__ArgsType = {};
type ArgPropType = keyof PlasmicConditionsGeneralesDutilisation__ArgsType;
export const PlasmicConditionsGeneralesDutilisation__ArgProps =
  new Array<ArgPropType>();

export type PlasmicConditionsGeneralesDutilisation__OverridesType = {
  root?: Flex__<"div">;
  structureLp?: Flex__<"div">;
  navbar?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  frame21?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  frame24?: Flex__<"div">;
  frame25?: Flex__<"div">;
  jamLogo2?: Flex__<"div">;
  frame30?: Flex__<"div">;
  frame31?: Flex__<"div">;
  frame32?: Flex__<"div">;
  frame33?: Flex__<"div">;
  header3?: Flex__<"header">;
  jamLogo?: Flex__<"div">;
  frame26?: Flex__<"div">;
  frame27?: Flex__<"div">;
  frame28?: Flex__<"div">;
  frame29?: Flex__<"div">;
  menuItems2?: Flex__<"div">;
  benefices?: Flex__<"div">;
  container?: Flex__<"div">;
  content2?: Flex__<"div">;
  headingAndSupportingText?: Flex__<"div">;
  headingAndBadge?: Flex__<"div">;
  badgeGroup2?: Flex__<"div">;
  content3?: Flex__<"div">;
  message2?: Flex__<"div">;
  heading?: Flex__<"div">;
  item7?: Flex__<"div">;
  headingAndSupportingText8?: Flex__<"div">;
  supportingText12?: Flex__<"div">;
  item8?: Flex__<"div">;
  headingAndSupportingText9?: Flex__<"div">;
  heading11?: Flex__<"div">;
  supportingText13?: Flex__<"div">;
  item9?: Flex__<"div">;
  headingAndSupportingText10?: Flex__<"div">;
  heading12?: Flex__<"div">;
  supportingText14?: Flex__<"div">;
  item10?: Flex__<"div">;
  headingAndSupportingText11?: Flex__<"div">;
  heading13?: Flex__<"div">;
  supportingText15?: Flex__<"div">;
  item11?: Flex__<"div">;
  headingAndSupportingText12?: Flex__<"div">;
  heading14?: Flex__<"div">;
  supportingText16?: Flex__<"div">;
  item12?: Flex__<"div">;
  headingAndSupportingText13?: Flex__<"div">;
  heading15?: Flex__<"div">;
  supportingText17?: Flex__<"div">;
  item13?: Flex__<"div">;
  headingAndSupportingText14?: Flex__<"div">;
  heading16?: Flex__<"div">;
  supportingText18?: Flex__<"div">;
  item14?: Flex__<"div">;
  headingAndSupportingText15?: Flex__<"div">;
  heading17?: Flex__<"div">;
  supportingText19?: Flex__<"div">;
  item15?: Flex__<"div">;
  headingAndSupportingText16?: Flex__<"div">;
  heading18?: Flex__<"div">;
  supportingText20?: Flex__<"div">;
  item16?: Flex__<"div">;
  headingAndSupportingText17?: Flex__<"div">;
  heading19?: Flex__<"div">;
  supportingText21?: Flex__<"div">;
  item17?: Flex__<"div">;
  headingAndSupportingText18?: Flex__<"div">;
  heading20?: Flex__<"div">;
  supportingText22?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultConditionsGeneralesDutilisationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConditionsGeneralesDutilisation__RenderFunc(props: {
  variants: PlasmicConditionsGeneralesDutilisation__VariantsArgs;
  args: PlasmicConditionsGeneralesDutilisation__ArgsType;
  overrides: PlasmicConditionsGeneralesDutilisation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicConditionsGeneralesDutilisation.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicConditionsGeneralesDutilisation.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicConditionsGeneralesDutilisation.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"structureLp"}
            data-plasmic-override={overrides.structureLp}
            className={classNames(projectcss.all, sty.structureLp)}
          >
            <div
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames(projectcss.all, sty.navbar)}
            >
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__oOwfh
                      )}
                      component={Link}
                      href={"#"}
                      platform={"nextjs"}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___7My0F)}
                        displayHeight={"40px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={
                          "https://static1.plasmic.app/nav-logo-placeholder.svg"
                        }
                      />
                    </PlasmicLink__>
                    <div
                      data-plasmic-name={"frame21"}
                      data-plasmic-override={overrides.frame21}
                      className={classNames(projectcss.all, sty.frame21)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToAccueil"] = true
                          ? (() => {
                              const actionArgs = { destination: `/` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToAccueil"] != null &&
                          typeof $steps["goToAccueil"] === "object" &&
                          typeof $steps["goToAccueil"].then === "function"
                        ) {
                          $steps["goToAccueil"] = await $steps["goToAccueil"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pARqp
                        )}
                      >
                        <Group9Icon
                          className={classNames(projectcss.all, sty.svg__eeACq)}
                          role={"img"}
                        />
                      </div>
                      <div
                        data-plasmic-name={"frame22"}
                        data-plasmic-override={overrides.frame22}
                        className={classNames(projectcss.all, sty.frame22)}
                      >
                        <div
                          data-plasmic-name={"frame23"}
                          data-plasmic-override={overrides.frame23}
                          className={classNames(projectcss.all, sty.frame23)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oeWnq
                            )}
                          >
                            {"JOB"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame24"}
                          data-plasmic-override={overrides.frame24}
                          className={classNames(projectcss.all, sty.frame24)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6E7Mt
                            )}
                          >
                            {"AROUND"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame25"}
                          data-plasmic-override={overrides.frame25}
                          className={classNames(projectcss.all, sty.frame25)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rLcKm
                            )}
                          >
                            {"ME"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"jamLogo2"}
                      data-plasmic-override={overrides.jamLogo2}
                      className={classNames(projectcss.all, sty.jamLogo2)}
                    >
                      <Vector12Icon
                        className={classNames(projectcss.all, sty.svg__dEv9D)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"frame30"}
                        data-plasmic-override={overrides.frame30}
                        className={classNames(projectcss.all, sty.frame30)}
                      >
                        <div
                          data-plasmic-name={"frame31"}
                          data-plasmic-override={overrides.frame31}
                          className={classNames(projectcss.all, sty.frame31)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wzO5H
                            )}
                          >
                            {"JOB"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame32"}
                          data-plasmic-override={overrides.frame32}
                          className={classNames(projectcss.all, sty.frame32)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8Hm7
                            )}
                          >
                            {"AROUND"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame33"}
                          data-plasmic-override={overrides.frame33}
                          className={classNames(projectcss.all, sty.frame33)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__n5AJu
                            )}
                          >
                            {"ME"}
                          </div>
                        </div>
                      </div>
                    </div>
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <React.Fragment>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bXeEe)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={"https://static1.plasmic.app/close.svg"}
                    />

                    <DeleteSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__p1Oh6)}
                      role={"img"}
                    />
                  </React.Fragment>
                }
                itemsGap={8}
                menuItems={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__ri9At
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"Home"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__qm2RO
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"About"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__pFqJs
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"Contact"}
                    </PlasmicLink__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hfSCu
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return "/accueil-employeur#services";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      {"Services"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kIayC
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return "/accueil-employeur#offres";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      {"Offres"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n4Z95
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return "/accueil-employeur#faq";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      {"FAQ"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__dAtNj
                      )}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__t4Qia)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zPzCn
                          )}
                        >
                          {"Connexion"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToConnexion"] = true
                          ? (() => {
                              const actionArgs = { destination: `/login` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToConnexion"] != null &&
                          typeof $steps["goToConnexion"] === "object" &&
                          typeof $steps["goToConnexion"].then === "function"
                        ) {
                          $steps["goToConnexion"] = await $steps[
                            "goToConnexion"
                          ];
                        }
                      }}
                    />
                  </React.Fragment>
                }
                openButton={
                  <React.Fragment>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__sTkNq)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={"https://static1.plasmic.app/menu.svg"}
                    />

                    <BurgerMenuSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__c6QM5)}
                      role={"img"}
                    />
                  </React.Fragment>
                }
                responsiveBreakpoint={768}
              />

              <header
                data-plasmic-name={"header3"}
                data-plasmic-override={overrides.header3}
                className={classNames(projectcss.all, sty.header3)}
              >
                <div
                  data-plasmic-name={"jamLogo"}
                  data-plasmic-override={overrides.jamLogo}
                  className={classNames(projectcss.all, sty.jamLogo)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToAccueil"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToAccueil"] != null &&
                      typeof $steps["goToAccueil"] === "object" &&
                      typeof $steps["goToAccueil"].then === "function"
                    ) {
                      $steps["goToAccueil"] = await $steps["goToAccueil"];
                    }
                  }}
                >
                  <Vector12Icon
                    className={classNames(projectcss.all, sty.svg__rur2G)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"frame26"}
                    data-plasmic-override={overrides.frame26}
                    className={classNames(projectcss.all, sty.frame26)}
                  >
                    <div
                      data-plasmic-name={"frame27"}
                      data-plasmic-override={overrides.frame27}
                      className={classNames(projectcss.all, sty.frame27)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__alqSz
                        )}
                      >
                        {"JOB"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame28"}
                      data-plasmic-override={overrides.frame28}
                      className={classNames(projectcss.all, sty.frame28)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__md9Ux
                        )}
                      >
                        {"AROUND"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame29"}
                      data-plasmic-override={overrides.frame29}
                      className={classNames(projectcss.all, sty.frame29)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1CuIk
                        )}
                      >
                        {"ME"}
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"menuItems2"}
                  data-plasmic-override={overrides.menuItems2}
                  className={classNames(projectcss.all, sty.menuItems2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oOtkw
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return "/accueil-employeur#services";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    {"Services"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wTuO3
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return "/accueil-employeur#offres";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    {"Offres"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uWzLn
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return "/accueil-employeur#faq";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    {"FAQ"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox___3JCa)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__pbNfH)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__prgg0)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Ur42
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.SupabaseUser.user
                                ? "Voir mon compte"
                                : "Connexion";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Connexion";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToConnexion"] = true
                        ? (() => {
                            const actionArgs = { destination: `/login` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToConnexion"] != null &&
                        typeof $steps["goToConnexion"] === "object" &&
                        typeof $steps["goToConnexion"].then === "function"
                      ) {
                        $steps["goToConnexion"] = await $steps["goToConnexion"];
                      }
                    }}
                  />
                </div>
              </header>
            </div>
            <div
              data-plasmic-name={"benefices"}
              data-plasmic-override={overrides.benefices}
              className={classNames(projectcss.all, sty.benefices)}
            >
              <div
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                className={classNames(projectcss.all, sty.container)}
              >
                <div
                  data-plasmic-name={"content2"}
                  data-plasmic-override={overrides.content2}
                  className={classNames(projectcss.all, sty.content2)}
                >
                  <div
                    data-plasmic-name={"headingAndSupportingText"}
                    data-plasmic-override={overrides.headingAndSupportingText}
                    className={classNames(
                      projectcss.all,
                      sty.headingAndSupportingText
                    )}
                  >
                    <div
                      data-plasmic-name={"headingAndBadge"}
                      data-plasmic-override={overrides.headingAndBadge}
                      className={classNames(
                        projectcss.all,
                        sty.headingAndBadge
                      )}
                    >
                      <div
                        data-plasmic-name={"badgeGroup2"}
                        data-plasmic-override={overrides.badgeGroup2}
                        className={classNames(projectcss.all, sty.badgeGroup2)}
                      >
                        <div
                          data-plasmic-name={"content3"}
                          data-plasmic-override={overrides.content3}
                          className={classNames(projectcss.all, sty.content3)}
                        >
                          <div
                            data-plasmic-name={"message2"}
                            data-plasmic-override={overrides.message2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.message2
                            )}
                          >
                            {
                              "Conditions g\u00e9n\u00e9rales d\u2019utilisation (CGU)"
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"heading"}
                        data-plasmic-override={overrides.heading}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.heading
                        )}
                      >
                        {
                          "Conditions g\u00e9n\u00e9rales d\u2019utilisation (CGU) \u2013 Job Around Me"
                        }
                      </div>
                      <div
                        data-plasmic-name={"item7"}
                        data-plasmic-override={overrides.item7}
                        className={classNames(projectcss.all, sty.item7)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText8"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText8
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText8
                          )}
                        >
                          <div
                            data-plasmic-name={"supportingText12"}
                            data-plasmic-override={overrides.supportingText12}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText12
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "L\u2019utilisation de l\u2019application Job Around Me est soumise \u00e0 l\u2019acceptation de nos Conditions G\u00e9n\u00e9rales d\u2019Utilisation, accessibles depuis l\u2019application et le site web\r  Politique de confidentialit\u00e9 \u2013 Job Around Me\r\n\r\n"
                                  }
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{
                                    fontStyle: "italic",
                                    color: "var(--token-KO-_a_AX48hg)"
                                  }}
                                >
                                  {
                                    "Derni\u00e8re mise \u00e0 jour : 19/06/2025"
                                  }
                                </span>
                                <React.Fragment>
                                  {
                                    "\n\r\n\r\nChez Job Around Me, la protection de vos donn\u00e9es personnelles est une priorit\u00e9. Cette politique explique quelles donn\u00e9es nous collectons, comment nous les utilisons, et quels sont vos droits."
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "L\u2019utilisation de l\u2019application Job Around Me est soumise \u00e0 l\u2019acceptation de nos Conditions G\u00e9n\u00e9rales d\u2019Utilisation, accessibles depuis l\u2019application et le site web\r  Politique de confidentialit\u00e9 \u2013 Job Around Me\r\n\r\n"
                                  }
                                </React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{
                                    fontStyle: "italic",
                                    color: "var(--token-KO-_a_AX48hg)"
                                  }}
                                >
                                  {
                                    "Derni\u00e8re mise \u00e0 jour : 19/06/2025"
                                  }
                                </span>
                                <React.Fragment>
                                  {
                                    "\n\r\n\r\nChez Job Around Me, la protection de vos donn\u00e9es personnelles est une priorit\u00e9. Cette politique explique quelles donn\u00e9es nous collectons, comment nous les utilisons, et quels sont vos droits.\n"
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item8"}
                        data-plasmic-override={overrides.item8}
                        className={classNames(projectcss.all, sty.item8)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText9"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText9
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText9
                          )}
                        >
                          <div
                            data-plasmic-name={"heading11"}
                            data-plasmic-override={overrides.heading11}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading11
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"Qui sommes-nous ?"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText13"}
                            data-plasmic-override={overrides.supportingText13}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText13
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Job Around Me est \u00e9dit\u00e9 par la soci\u00e9t\u00e9 JobAroundMe S\u00e0rl-S, dont le si\u00e8ge est situ\u00e9 \u00e0 5 rue Nelson Mandela\r\n\r\nL-4035 , immatricul\u00e9e sous le num\u00e9ro B297124."
                              : "Job Around Me est \u00e9dit\u00e9 par la soci\u00e9t\u00e9 JobAroundMe S\u00e0rl-S, dont le si\u00e8ge est situ\u00e9 \u00e0 5 rue Nelson Mandela\r\n\r\nL-4035 , immatricul\u00e9e sous le num\u00e9ro B297124.\n"}
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item9"}
                        data-plasmic-override={overrides.item9}
                        className={classNames(projectcss.all, sty.item9)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText10"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText10
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText10
                          )}
                        >
                          <div
                            data-plasmic-name={"heading12"}
                            data-plasmic-override={overrides.heading12}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading12
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"Quelles donn\u00e9es collectons-nous ?"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText14"}
                            data-plasmic-override={overrides.supportingText14}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText14
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Nous collectons les donn\u00e9es suivantes, selon votre utilisation de l\u2019application :\r\n"
                                }
                              </React.Fragment>
                              {
                                <ul
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.ul,
                                    sty.ul__g5XCr
                                  )}
                                >
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__xcy2O
                                    )}
                                  >
                                    {
                                      "\r\n Donn\u00e9es d\u2019identification : nom, pr\u00e9nom, adresse email, mot de passe"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__gbxaB
                                    )}
                                  >
                                    {
                                      "Donn\u00e9es de profil : photo, CV, exp\u00e9rience, secteur d\u2019activit\u00e9, pr\u00e9f\u00e9rences"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__cAuA7
                                    )}
                                  >
                                    {
                                      "Donn\u00e9es de g\u00e9olocalisation (si vous l\u2019avez autoris\u00e9e)"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__bCdju
                                    )}
                                  >
                                    {
                                      "Historique des recherches et candidatures"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__dQzTg
                                    )}
                                  >
                                    {
                                      "Donn\u00e9es de paiement (le cas \u00e9ch\u00e9ant pour certains services)"
                                    }
                                  </li>
                                </ul>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item10"}
                        data-plasmic-override={overrides.item10}
                        className={classNames(projectcss.all, sty.item10)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText11"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText11
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText11
                          )}
                        >
                          <div
                            data-plasmic-name={"heading13"}
                            data-plasmic-override={overrides.heading13}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading13
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"Comment utilisons-nous vos donn\u00e9es ?"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText15"}
                            data-plasmic-override={overrides.supportingText15}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText15
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Nous utilisons vos donn\u00e9es pour :\r\n\r\n"
                                }
                              </React.Fragment>
                              {
                                <ul
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.ul,
                                    sty.ul__himBd
                                  )}
                                >
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__mP3Oo
                                    )}
                                  >
                                    {
                                      "\r\nVous permettre d\u2019utiliser l\u2019application et ses fonctionnalit\u00e9s"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li___2KgJz
                                    )}
                                  >
                                    {
                                      "Mettre en relation les employeurs et les candidats selon les crit\u00e8res et la localisation"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li___016SN
                                    )}
                                  >
                                    {
                                      "Vous proposer des offres pertinentes en fonction de votre profil et de votre position"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__tQy0C
                                    )}
                                  >
                                    {
                                      "Vous envoyer des alertes, notifications ou messages li\u00e9s \u00e0 l\u2019emploi"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__l8U7R
                                    )}
                                  >
                                    {
                                      " Am\u00e9liorer nos services et assurer la s\u00e9curit\u00e9 de la plateforme"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__qb0X
                                    )}
                                  >
                                    {"Respecter nos obligations l\u00e9gales"}
                                  </li>
                                </ul>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item11"}
                        data-plasmic-override={overrides.item11}
                        className={classNames(projectcss.all, sty.item11)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText12"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText12
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText12
                          )}
                        >
                          <div
                            data-plasmic-name={"heading14"}
                            data-plasmic-override={overrides.heading14}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading14
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"Partage de vos donn\u00e9es"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText16"}
                            data-plasmic-override={overrides.supportingText16}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText16
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Vos donn\u00e9es personnelles ne sont jamais vendues. Elles peuvent \u00eatre partag\u00e9es :\r\n\r\n\r\n"
                                }
                              </React.Fragment>
                              {
                                <ul
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.ul,
                                    sty.ul__yiVeG
                                  )}
                                >
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__cfUVf
                                    )}
                                  >
                                    {
                                      "\r\nAvec les employeurs lorsque vous postulez \u00e0 une offre"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__ndYr7
                                    )}
                                  >
                                    {
                                      "Avec nos prestataires techniques (h\u00e9bergeurs, fournisseurs de paiement, etc.) sous contrat"
                                    }
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__chBa3
                                    )}
                                  >
                                    {
                                      "Avec les autorit\u00e9s si la loi nous l\u2019impose"
                                    }
                                  </li>
                                </ul>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item12"}
                        data-plasmic-override={overrides.item12}
                        className={classNames(projectcss.all, sty.item12)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText13"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText13
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText13
                          )}
                        >
                          <div
                            data-plasmic-name={"heading15"}
                            data-plasmic-override={overrides.heading15}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading15
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"G\u00e9olocalisation"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText17"}
                            data-plasmic-override={overrides.supportingText17}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText17
                            )}
                          >
                            {
                              "Avec votre consentement, nous utilisons votre position pour vous proposer des offres pr\u00e8s de chez vous. Vous pouvez retirer ce consentement \u00e0 tout moment dans les r\u00e9glages de votre t\u00e9l\u00e9phone."
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item13"}
                        data-plasmic-override={overrides.item13}
                        className={classNames(projectcss.all, sty.item13)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText14"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText14
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText14
                          )}
                        >
                          <div
                            data-plasmic-name={"heading16"}
                            data-plasmic-override={overrides.heading16}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading16
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {
                                  "Combien de temps conservons-nous vos donn\u00e9es ?"
                                }
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText18"}
                            data-plasmic-override={overrides.supportingText18}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText18
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {"Nous conservons vos donn\u00e9es :\r\n\r\n"}
                              </React.Fragment>
                              {
                                <ul
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.ul,
                                    sty.ul__wDWp6
                                  )}
                                >
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__hDYe
                                    )}
                                  >
                                    {"Tant que votre compte est actif"}
                                  </li>
                                  <li
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.li,
                                      projectcss.__wab_text,
                                      sty.li__zjw3J
                                    )}
                                  >
                                    {
                                      "Jusqu\u2019\u00e0 2 ans apr\u00e8s la derni\u00e8re activit\u00e9, sauf obligation l\u00e9gale contraire\r"
                                    }
                                  </li>
                                </ul>
                              }
                              <React.Fragment>
                                {
                                  "Vous pouvez demander la suppression de votre compte \u00e0 tout moment."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item14"}
                        data-plasmic-override={overrides.item14}
                        className={classNames(projectcss.all, sty.item14)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText15"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText15
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText15
                          )}
                        >
                          <div
                            data-plasmic-name={"heading17"}
                            data-plasmic-override={overrides.heading17}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading17
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"Vos droits"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText19"}
                            data-plasmic-override={overrides.supportingText19}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText19
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "Conform\u00e9ment au RGPD, vous disposez des droits suivants :\r\n\r\n\r\n"
                                  }
                                </React.Fragment>
                                {
                                  <ul
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.ul,
                                      sty.ul__cvLc6
                                    )}
                                  >
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__xPYuq
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? " Acc\u00e8s \u00e0 vos donn\u00e9es"
                                        : " Acc\u00e8s \u00e0 vos donn\u00e9es"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__hirMn
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Rectification ou mise \u00e0 jour"
                                        : "Rectification ou mise \u00e0 jour"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__ykB5T
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Suppression (\u201cdroit \u00e0 l\u2019oubli\u201d)"
                                        : "Suppression (\u201cdroit \u00e0 l\u2019oubli\u201d)"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__ilAfr
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Opposition \u00e0 certains traitements"
                                        : "Opposition \u00e0 certains traitements"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__iU5U
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Portabilit\u00e9 de vos donn\u00e9es"
                                        : "Portabilit\u00e9 de vos donn\u00e9es"}
                                    </li>
                                  </ul>
                                }
                                <React.Fragment>
                                  {
                                    "Pour exercer vos droits, \u00e9crivez \u00e0 contact@job-around-me.com"
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "Conform\u00e9ment au RGPD, vous disposez des droits suivants :\r\n\r\n\r\n"
                                  }
                                </React.Fragment>
                                {
                                  <ul
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.ul,
                                      sty.ul__cvLc6
                                    )}
                                  >
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__xPYuq
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? " Acc\u00e8s \u00e0 vos donn\u00e9es"
                                        : " Acc\u00e8s \u00e0 vos donn\u00e9es"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__hirMn
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Rectification ou mise \u00e0 jour"
                                        : "Rectification ou mise \u00e0 jour"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__ykB5T
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Suppression (\u201cdroit \u00e0 l\u2019oubli\u201d)"
                                        : "Suppression (\u201cdroit \u00e0 l\u2019oubli\u201d)"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__ilAfr
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Opposition \u00e0 certains traitements"
                                        : "Opposition \u00e0 certains traitements"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__iU5U
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "Portabilit\u00e9 de vos donn\u00e9es"
                                        : "Portabilit\u00e9 de vos donn\u00e9es"}
                                    </li>
                                  </ul>
                                }
                                <React.Fragment>
                                  {
                                    "Pour exercer vos droits, \u00e9crivez \u00e0 [:contact@job-around-me.com](mailto::contact@job-around-me.com)"
                                  }
                                </React.Fragment>
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item15"}
                        data-plasmic-override={overrides.item15}
                        className={classNames(projectcss.all, sty.item15)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText16"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText16
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText16
                          )}
                        >
                          <div
                            data-plasmic-name={"heading18"}
                            data-plasmic-override={overrides.heading18}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading18
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"S\u00e9curit\u00e9"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText20"}
                            data-plasmic-override={overrides.supportingText20}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText20
                            )}
                          >
                            {
                              "Nous mettons en \u0153uvre toutes les mesures techniques et organisationnelles appropri\u00e9es pour prot\u00e9ger vos donn\u00e9es contre tout acc\u00e8s non autoris\u00e9, perte ou alt\u00e9ration."
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item16"}
                        data-plasmic-override={overrides.item16}
                        className={classNames(projectcss.all, sty.item16)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText17"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText17
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText17
                          )}
                        >
                          <div
                            data-plasmic-name={"heading19"}
                            data-plasmic-override={overrides.heading19}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading19
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"Modifications"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText21"}
                            data-plasmic-override={overrides.supportingText21}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText21
                            )}
                          >
                            {
                              "Cette politique peut \u00eatre mise \u00e0 jour. Nous vous informerons en cas de modification importante."
                            }
                          </div>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"item17"}
                        data-plasmic-override={overrides.item17}
                        className={classNames(projectcss.all, sty.item17)}
                      >
                        <div
                          data-plasmic-name={"headingAndSupportingText18"}
                          data-plasmic-override={
                            overrides.headingAndSupportingText18
                          }
                          className={classNames(
                            projectcss.all,
                            sty.headingAndSupportingText18
                          )}
                        >
                          <div
                            data-plasmic-name={"heading20"}
                            data-plasmic-override={overrides.heading20}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.heading20
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                              >
                                {"Contact"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"supportingText22"}
                            data-plasmic-override={overrides.supportingText22}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText22
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "Pour toute question ou r\u00e9clamation li\u00e9e \u00e0 vos donn\u00e9es :\r\n\r\n"
                                  }
                                </React.Fragment>
                                {
                                  <ul
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.ul,
                                      sty.ul__aY8Dx
                                    )}
                                  >
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__quncG
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "contact@job-around-me.com"
                                        : "\ud83d\udce7contact@job-around-me.com"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__wP7Bv
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "\r\n\r\nJob Around Me S\u00e0rl-S \u2013 5 rue nelson Mandela L-4035"
                                        : "\r\n\r\n\ud83d\udccd JobAroundMe S\u00e0rl-S \u2013 5 rue nelson Mandela L-4035"}
                                    </li>
                                  </ul>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <React.Fragment>
                                  {
                                    "Pour toute question ou r\u00e9clamation li\u00e9e \u00e0 vos donn\u00e9es :\r\n\r\n"
                                  }
                                </React.Fragment>
                                {
                                  <ul
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.ul,
                                      sty.ul__aY8Dx
                                    )}
                                  >
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__quncG
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "contact@job-around-me.com"
                                        : "\ud83d\udce7contact@job-around-me.com"}
                                    </li>
                                    <li
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.li,
                                        projectcss.__wab_text,
                                        sty.li__wP7Bv
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "\r\n\r\nJob Around Me S\u00e0rl-S \u2013 5 rue nelson Mandela L-4035"
                                        : "\r\n\r\n\ud83d\udccd JobAroundMe S\u00e0rl-S \u2013 5 rue nelson Mandela L-4035"}
                                    </li>
                                  </ul>
                                }
                                <React.Fragment>{""}</React.Fragment>
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "structureLp",
    "navbar",
    "navigationBar",
    "frame21",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "jamLogo2",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header3",
    "jamLogo",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "menuItems2",
    "benefices",
    "container",
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "item7",
    "headingAndSupportingText8",
    "supportingText12",
    "item8",
    "headingAndSupportingText9",
    "heading11",
    "supportingText13",
    "item9",
    "headingAndSupportingText10",
    "heading12",
    "supportingText14",
    "item10",
    "headingAndSupportingText11",
    "heading13",
    "supportingText15",
    "item11",
    "headingAndSupportingText12",
    "heading14",
    "supportingText16",
    "item12",
    "headingAndSupportingText13",
    "heading15",
    "supportingText17",
    "item13",
    "headingAndSupportingText14",
    "heading16",
    "supportingText18",
    "item14",
    "headingAndSupportingText15",
    "heading17",
    "supportingText19",
    "item15",
    "headingAndSupportingText16",
    "heading18",
    "supportingText20",
    "item16",
    "headingAndSupportingText17",
    "heading19",
    "supportingText21",
    "item17",
    "headingAndSupportingText18",
    "heading20",
    "supportingText22",
    "footer"
  ],
  structureLp: [
    "structureLp",
    "navbar",
    "navigationBar",
    "frame21",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "jamLogo2",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header3",
    "jamLogo",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "menuItems2",
    "benefices",
    "container",
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "item7",
    "headingAndSupportingText8",
    "supportingText12",
    "item8",
    "headingAndSupportingText9",
    "heading11",
    "supportingText13",
    "item9",
    "headingAndSupportingText10",
    "heading12",
    "supportingText14",
    "item10",
    "headingAndSupportingText11",
    "heading13",
    "supportingText15",
    "item11",
    "headingAndSupportingText12",
    "heading14",
    "supportingText16",
    "item12",
    "headingAndSupportingText13",
    "heading15",
    "supportingText17",
    "item13",
    "headingAndSupportingText14",
    "heading16",
    "supportingText18",
    "item14",
    "headingAndSupportingText15",
    "heading17",
    "supportingText19",
    "item15",
    "headingAndSupportingText16",
    "heading18",
    "supportingText20",
    "item16",
    "headingAndSupportingText17",
    "heading19",
    "supportingText21",
    "item17",
    "headingAndSupportingText18",
    "heading20",
    "supportingText22",
    "footer"
  ],
  navbar: [
    "navbar",
    "navigationBar",
    "frame21",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "jamLogo2",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "header3",
    "jamLogo",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "menuItems2"
  ],
  navigationBar: [
    "navigationBar",
    "frame21",
    "frame22",
    "frame23",
    "frame24",
    "frame25",
    "jamLogo2",
    "frame30",
    "frame31",
    "frame32",
    "frame33"
  ],
  frame21: ["frame21", "frame22", "frame23", "frame24", "frame25"],
  frame22: ["frame22", "frame23", "frame24", "frame25"],
  frame23: ["frame23"],
  frame24: ["frame24"],
  frame25: ["frame25"],
  jamLogo2: ["jamLogo2", "frame30", "frame31", "frame32", "frame33"],
  frame30: ["frame30", "frame31", "frame32", "frame33"],
  frame31: ["frame31"],
  frame32: ["frame32"],
  frame33: ["frame33"],
  header3: [
    "header3",
    "jamLogo",
    "frame26",
    "frame27",
    "frame28",
    "frame29",
    "menuItems2"
  ],
  jamLogo: ["jamLogo", "frame26", "frame27", "frame28", "frame29"],
  frame26: ["frame26", "frame27", "frame28", "frame29"],
  frame27: ["frame27"],
  frame28: ["frame28"],
  frame29: ["frame29"],
  menuItems2: ["menuItems2"],
  benefices: [
    "benefices",
    "container",
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "item7",
    "headingAndSupportingText8",
    "supportingText12",
    "item8",
    "headingAndSupportingText9",
    "heading11",
    "supportingText13",
    "item9",
    "headingAndSupportingText10",
    "heading12",
    "supportingText14",
    "item10",
    "headingAndSupportingText11",
    "heading13",
    "supportingText15",
    "item11",
    "headingAndSupportingText12",
    "heading14",
    "supportingText16",
    "item12",
    "headingAndSupportingText13",
    "heading15",
    "supportingText17",
    "item13",
    "headingAndSupportingText14",
    "heading16",
    "supportingText18",
    "item14",
    "headingAndSupportingText15",
    "heading17",
    "supportingText19",
    "item15",
    "headingAndSupportingText16",
    "heading18",
    "supportingText20",
    "item16",
    "headingAndSupportingText17",
    "heading19",
    "supportingText21",
    "item17",
    "headingAndSupportingText18",
    "heading20",
    "supportingText22"
  ],
  container: [
    "container",
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "item7",
    "headingAndSupportingText8",
    "supportingText12",
    "item8",
    "headingAndSupportingText9",
    "heading11",
    "supportingText13",
    "item9",
    "headingAndSupportingText10",
    "heading12",
    "supportingText14",
    "item10",
    "headingAndSupportingText11",
    "heading13",
    "supportingText15",
    "item11",
    "headingAndSupportingText12",
    "heading14",
    "supportingText16",
    "item12",
    "headingAndSupportingText13",
    "heading15",
    "supportingText17",
    "item13",
    "headingAndSupportingText14",
    "heading16",
    "supportingText18",
    "item14",
    "headingAndSupportingText15",
    "heading17",
    "supportingText19",
    "item15",
    "headingAndSupportingText16",
    "heading18",
    "supportingText20",
    "item16",
    "headingAndSupportingText17",
    "heading19",
    "supportingText21",
    "item17",
    "headingAndSupportingText18",
    "heading20",
    "supportingText22"
  ],
  content2: [
    "content2",
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "item7",
    "headingAndSupportingText8",
    "supportingText12",
    "item8",
    "headingAndSupportingText9",
    "heading11",
    "supportingText13",
    "item9",
    "headingAndSupportingText10",
    "heading12",
    "supportingText14",
    "item10",
    "headingAndSupportingText11",
    "heading13",
    "supportingText15",
    "item11",
    "headingAndSupportingText12",
    "heading14",
    "supportingText16",
    "item12",
    "headingAndSupportingText13",
    "heading15",
    "supportingText17",
    "item13",
    "headingAndSupportingText14",
    "heading16",
    "supportingText18",
    "item14",
    "headingAndSupportingText15",
    "heading17",
    "supportingText19",
    "item15",
    "headingAndSupportingText16",
    "heading18",
    "supportingText20",
    "item16",
    "headingAndSupportingText17",
    "heading19",
    "supportingText21",
    "item17",
    "headingAndSupportingText18",
    "heading20",
    "supportingText22"
  ],
  headingAndSupportingText: [
    "headingAndSupportingText",
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "item7",
    "headingAndSupportingText8",
    "supportingText12",
    "item8",
    "headingAndSupportingText9",
    "heading11",
    "supportingText13",
    "item9",
    "headingAndSupportingText10",
    "heading12",
    "supportingText14",
    "item10",
    "headingAndSupportingText11",
    "heading13",
    "supportingText15",
    "item11",
    "headingAndSupportingText12",
    "heading14",
    "supportingText16",
    "item12",
    "headingAndSupportingText13",
    "heading15",
    "supportingText17",
    "item13",
    "headingAndSupportingText14",
    "heading16",
    "supportingText18",
    "item14",
    "headingAndSupportingText15",
    "heading17",
    "supportingText19",
    "item15",
    "headingAndSupportingText16",
    "heading18",
    "supportingText20",
    "item16",
    "headingAndSupportingText17",
    "heading19",
    "supportingText21",
    "item17",
    "headingAndSupportingText18",
    "heading20",
    "supportingText22"
  ],
  headingAndBadge: [
    "headingAndBadge",
    "badgeGroup2",
    "content3",
    "message2",
    "heading",
    "item7",
    "headingAndSupportingText8",
    "supportingText12",
    "item8",
    "headingAndSupportingText9",
    "heading11",
    "supportingText13",
    "item9",
    "headingAndSupportingText10",
    "heading12",
    "supportingText14",
    "item10",
    "headingAndSupportingText11",
    "heading13",
    "supportingText15",
    "item11",
    "headingAndSupportingText12",
    "heading14",
    "supportingText16",
    "item12",
    "headingAndSupportingText13",
    "heading15",
    "supportingText17",
    "item13",
    "headingAndSupportingText14",
    "heading16",
    "supportingText18",
    "item14",
    "headingAndSupportingText15",
    "heading17",
    "supportingText19",
    "item15",
    "headingAndSupportingText16",
    "heading18",
    "supportingText20",
    "item16",
    "headingAndSupportingText17",
    "heading19",
    "supportingText21",
    "item17",
    "headingAndSupportingText18",
    "heading20",
    "supportingText22"
  ],
  badgeGroup2: ["badgeGroup2", "content3", "message2"],
  content3: ["content3", "message2"],
  message2: ["message2"],
  heading: ["heading"],
  item7: ["item7", "headingAndSupportingText8", "supportingText12"],
  headingAndSupportingText8: ["headingAndSupportingText8", "supportingText12"],
  supportingText12: ["supportingText12"],
  item8: [
    "item8",
    "headingAndSupportingText9",
    "heading11",
    "supportingText13"
  ],
  headingAndSupportingText9: [
    "headingAndSupportingText9",
    "heading11",
    "supportingText13"
  ],
  heading11: ["heading11"],
  supportingText13: ["supportingText13"],
  item9: [
    "item9",
    "headingAndSupportingText10",
    "heading12",
    "supportingText14"
  ],
  headingAndSupportingText10: [
    "headingAndSupportingText10",
    "heading12",
    "supportingText14"
  ],
  heading12: ["heading12"],
  supportingText14: ["supportingText14"],
  item10: [
    "item10",
    "headingAndSupportingText11",
    "heading13",
    "supportingText15"
  ],
  headingAndSupportingText11: [
    "headingAndSupportingText11",
    "heading13",
    "supportingText15"
  ],
  heading13: ["heading13"],
  supportingText15: ["supportingText15"],
  item11: [
    "item11",
    "headingAndSupportingText12",
    "heading14",
    "supportingText16"
  ],
  headingAndSupportingText12: [
    "headingAndSupportingText12",
    "heading14",
    "supportingText16"
  ],
  heading14: ["heading14"],
  supportingText16: ["supportingText16"],
  item12: [
    "item12",
    "headingAndSupportingText13",
    "heading15",
    "supportingText17"
  ],
  headingAndSupportingText13: [
    "headingAndSupportingText13",
    "heading15",
    "supportingText17"
  ],
  heading15: ["heading15"],
  supportingText17: ["supportingText17"],
  item13: [
    "item13",
    "headingAndSupportingText14",
    "heading16",
    "supportingText18"
  ],
  headingAndSupportingText14: [
    "headingAndSupportingText14",
    "heading16",
    "supportingText18"
  ],
  heading16: ["heading16"],
  supportingText18: ["supportingText18"],
  item14: [
    "item14",
    "headingAndSupportingText15",
    "heading17",
    "supportingText19"
  ],
  headingAndSupportingText15: [
    "headingAndSupportingText15",
    "heading17",
    "supportingText19"
  ],
  heading17: ["heading17"],
  supportingText19: ["supportingText19"],
  item15: [
    "item15",
    "headingAndSupportingText16",
    "heading18",
    "supportingText20"
  ],
  headingAndSupportingText16: [
    "headingAndSupportingText16",
    "heading18",
    "supportingText20"
  ],
  heading18: ["heading18"],
  supportingText20: ["supportingText20"],
  item16: [
    "item16",
    "headingAndSupportingText17",
    "heading19",
    "supportingText21"
  ],
  headingAndSupportingText17: [
    "headingAndSupportingText17",
    "heading19",
    "supportingText21"
  ],
  heading19: ["heading19"],
  supportingText21: ["supportingText21"],
  item17: [
    "item17",
    "headingAndSupportingText18",
    "heading20",
    "supportingText22"
  ],
  headingAndSupportingText18: [
    "headingAndSupportingText18",
    "heading20",
    "supportingText22"
  ],
  heading20: ["heading20"],
  supportingText22: ["supportingText22"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  structureLp: "div";
  navbar: "div";
  navigationBar: typeof NavigationBar;
  frame21: "div";
  frame22: "div";
  frame23: "div";
  frame24: "div";
  frame25: "div";
  jamLogo2: "div";
  frame30: "div";
  frame31: "div";
  frame32: "div";
  frame33: "div";
  header3: "header";
  jamLogo: "div";
  frame26: "div";
  frame27: "div";
  frame28: "div";
  frame29: "div";
  menuItems2: "div";
  benefices: "div";
  container: "div";
  content2: "div";
  headingAndSupportingText: "div";
  headingAndBadge: "div";
  badgeGroup2: "div";
  content3: "div";
  message2: "div";
  heading: "div";
  item7: "div";
  headingAndSupportingText8: "div";
  supportingText12: "div";
  item8: "div";
  headingAndSupportingText9: "div";
  heading11: "div";
  supportingText13: "div";
  item9: "div";
  headingAndSupportingText10: "div";
  heading12: "div";
  supportingText14: "div";
  item10: "div";
  headingAndSupportingText11: "div";
  heading13: "div";
  supportingText15: "div";
  item11: "div";
  headingAndSupportingText12: "div";
  heading14: "div";
  supportingText16: "div";
  item12: "div";
  headingAndSupportingText13: "div";
  heading15: "div";
  supportingText17: "div";
  item13: "div";
  headingAndSupportingText14: "div";
  heading16: "div";
  supportingText18: "div";
  item14: "div";
  headingAndSupportingText15: "div";
  heading17: "div";
  supportingText19: "div";
  item15: "div";
  headingAndSupportingText16: "div";
  heading18: "div";
  supportingText20: "div";
  item16: "div";
  headingAndSupportingText17: "div";
  heading19: "div";
  supportingText21: "div";
  item17: "div";
  headingAndSupportingText18: "div";
  heading20: "div";
  supportingText22: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConditionsGeneralesDutilisation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConditionsGeneralesDutilisation__VariantsArgs;
    args?: PlasmicConditionsGeneralesDutilisation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicConditionsGeneralesDutilisation__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicConditionsGeneralesDutilisation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicConditionsGeneralesDutilisation__ArgProps,
          internalVariantPropNames:
            PlasmicConditionsGeneralesDutilisation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConditionsGeneralesDutilisation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConditionsGeneralesDutilisation";
  } else {
    func.displayName = `PlasmicConditionsGeneralesDutilisation.${nodeName}`;
  }
  return func;
}

export const PlasmicConditionsGeneralesDutilisation = Object.assign(
  // Top-level PlasmicConditionsGeneralesDutilisation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    structureLp: makeNodeComponent("structureLp"),
    navbar: makeNodeComponent("navbar"),
    navigationBar: makeNodeComponent("navigationBar"),
    frame21: makeNodeComponent("frame21"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    frame24: makeNodeComponent("frame24"),
    frame25: makeNodeComponent("frame25"),
    jamLogo2: makeNodeComponent("jamLogo2"),
    frame30: makeNodeComponent("frame30"),
    frame31: makeNodeComponent("frame31"),
    frame32: makeNodeComponent("frame32"),
    frame33: makeNodeComponent("frame33"),
    header3: makeNodeComponent("header3"),
    jamLogo: makeNodeComponent("jamLogo"),
    frame26: makeNodeComponent("frame26"),
    frame27: makeNodeComponent("frame27"),
    frame28: makeNodeComponent("frame28"),
    frame29: makeNodeComponent("frame29"),
    menuItems2: makeNodeComponent("menuItems2"),
    benefices: makeNodeComponent("benefices"),
    container: makeNodeComponent("container"),
    content2: makeNodeComponent("content2"),
    headingAndSupportingText: makeNodeComponent("headingAndSupportingText"),
    headingAndBadge: makeNodeComponent("headingAndBadge"),
    badgeGroup2: makeNodeComponent("badgeGroup2"),
    content3: makeNodeComponent("content3"),
    message2: makeNodeComponent("message2"),
    heading: makeNodeComponent("heading"),
    item7: makeNodeComponent("item7"),
    headingAndSupportingText8: makeNodeComponent("headingAndSupportingText8"),
    supportingText12: makeNodeComponent("supportingText12"),
    item8: makeNodeComponent("item8"),
    headingAndSupportingText9: makeNodeComponent("headingAndSupportingText9"),
    heading11: makeNodeComponent("heading11"),
    supportingText13: makeNodeComponent("supportingText13"),
    item9: makeNodeComponent("item9"),
    headingAndSupportingText10: makeNodeComponent("headingAndSupportingText10"),
    heading12: makeNodeComponent("heading12"),
    supportingText14: makeNodeComponent("supportingText14"),
    item10: makeNodeComponent("item10"),
    headingAndSupportingText11: makeNodeComponent("headingAndSupportingText11"),
    heading13: makeNodeComponent("heading13"),
    supportingText15: makeNodeComponent("supportingText15"),
    item11: makeNodeComponent("item11"),
    headingAndSupportingText12: makeNodeComponent("headingAndSupportingText12"),
    heading14: makeNodeComponent("heading14"),
    supportingText16: makeNodeComponent("supportingText16"),
    item12: makeNodeComponent("item12"),
    headingAndSupportingText13: makeNodeComponent("headingAndSupportingText13"),
    heading15: makeNodeComponent("heading15"),
    supportingText17: makeNodeComponent("supportingText17"),
    item13: makeNodeComponent("item13"),
    headingAndSupportingText14: makeNodeComponent("headingAndSupportingText14"),
    heading16: makeNodeComponent("heading16"),
    supportingText18: makeNodeComponent("supportingText18"),
    item14: makeNodeComponent("item14"),
    headingAndSupportingText15: makeNodeComponent("headingAndSupportingText15"),
    heading17: makeNodeComponent("heading17"),
    supportingText19: makeNodeComponent("supportingText19"),
    item15: makeNodeComponent("item15"),
    headingAndSupportingText16: makeNodeComponent("headingAndSupportingText16"),
    heading18: makeNodeComponent("heading18"),
    supportingText20: makeNodeComponent("supportingText20"),
    item16: makeNodeComponent("item16"),
    headingAndSupportingText17: makeNodeComponent("headingAndSupportingText17"),
    heading19: makeNodeComponent("heading19"),
    supportingText21: makeNodeComponent("supportingText21"),
    item17: makeNodeComponent("item17"),
    headingAndSupportingText18: makeNodeComponent("headingAndSupportingText18"),
    heading20: makeNodeComponent("heading20"),
    supportingText22: makeNodeComponent("supportingText22"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicConditionsGeneralesDutilisation
    internalVariantProps: PlasmicConditionsGeneralesDutilisation__VariantProps,
    internalArgProps: PlasmicConditionsGeneralesDutilisation__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Conditions générales d'utilisation",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConditionsGeneralesDutilisation;
/* prettier-ignore-end */
