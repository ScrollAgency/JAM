/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: x8mEiwhu6Vco

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import ClearBtn from "../../ClearBtn"; // plasmic-import: w2sS9PPQXQ_k/component
import JobCard20 from "../../JobCard20"; // plasmic-import: VbqA3KvJ940Z/component
import LoadingComponent from "../../LoadingComponent"; // plasmic-import: H7nb8l13ZEyx/component
import { MapBox } from "../../../plasmic-library/others/Map/Map"; // plasmic-import: LQF6pcE1iukm/codeComponent
import SectionCard from "../../SectionCard"; // plasmic-import: nbNWFt-vOCjr/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { PhoneSelector } from "../../forms/PhoneSelector/PhoneSelector"; // plasmic-import: sOyePdANTQ6t/codeComponent
import Select from "../../Select"; // plasmic-import: ZMB-SB-xJDyQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: plmAgyhhAdMc/component
import MenuSection from "../../MenuSection"; // plasmic-import: MUvYPH7rZO6i/component
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: nVAUbPc6gpoz/component
import { FileUploader } from "../../others/FileUploader/FileUploader"; // plasmic-import: RpVDoPZzyXH3/codeComponent
import { Login } from "../../../plasmic-library/authentication/Login"; // plasmic-import: DTfpuarR8FPx/codeComponent
import Footer from "../../Footer"; // plasmic-import: ZOpOgPOAiAAY/component
import { PageLoader } from "../../others/PageLoader/PageLoader"; // plasmic-import: FHDrnDhA4DZe/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicAccueil.module.css"; // plasmic-import: x8mEiwhu6Vco/css

import Vector12Icon from "./icons/PlasmicIcon__Vector12"; // plasmic-import: 5U7jknIbCE_j/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: kgRF6ZcqTTcO/icon
import Vector22Icon from "./icons/PlasmicIcon__Vector22"; // plasmic-import: Ykfk_-VFlaKp/icon
import Vector18Icon from "./icons/PlasmicIcon__Vector18"; // plasmic-import: JUKb9Zc4HfIz/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import Vector19Icon from "./icons/PlasmicIcon__Vector19"; // plasmic-import: x-e3wkzQ4xVg/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: yCa_tEPZRIxr/icon
import HeartStraightStreamlinePhosphorSvgIcon from "./icons/PlasmicIcon__HeartStraightStreamlinePhosphorSvg"; // plasmic-import: TgoKIDr5z3En/icon
import HeartStraightIcon from "./icons/PlasmicIcon__HeartStraight"; // plasmic-import: 2A8amxR7FAse/icon
import PhClockCountdownFill3Icon from "./icons/PlasmicIcon__PhClockCountdownFill3"; // plasmic-import: j8TopiIYLYKn/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: 7N6Suhwryqlm/icon
import LikeIconIcon from "./icons/PlasmicIcon__LikeIcon"; // plasmic-import: _YvBX6QjT3en/icon
import PhMapPin2Icon from "./icons/PlasmicIcon__PhMapPin2"; // plasmic-import: hGRa__J54hta/icon
import PhFileTextIcon from "./icons/PlasmicIcon__PhFileText"; // plasmic-import: kuV0Q3xSw_jm/icon
import PhClockIcon from "./icons/PlasmicIcon__PhClock"; // plasmic-import: r6dP5yPLK2Mb/icon
import PhCoinsLightIcon from "./icons/PlasmicIcon__PhCoinsLight"; // plasmic-import: 4H-jk36Nk9q0/icon
import PhClockCountdownIcon from "./icons/PlasmicIcon__PhClockCountdown"; // plasmic-import: EKdA7LX61Arw/icon
import PhCheckBoldIcon from "./icons/PlasmicIcon__PhCheckBold"; // plasmic-import: SpNcYHveG8zb/icon
import IconPhBriefcase2Icon from "./icons/PlasmicIcon__IconPhBriefcase2"; // plasmic-import: QT5tozis-7ZJ/icon
import PhUsersThreeIcon from "./icons/PlasmicIcon__PhUsersThree"; // plasmic-import: 5hJF42npUKid/icon
import PhMapTrifoldFillIcon from "./icons/PlasmicIcon__PhMapTrifoldFill"; // plasmic-import: uZBfKa3cidgz/icon
import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import Line10Icon from "./icons/PlasmicIcon__Line10"; // plasmic-import: okDoJMf2ty5e/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: yud1FH0Ox1FR/icon
import PhClockCountdownFillIcon from "./icons/PlasmicIcon__PhClockCountdownFill"; // plasmic-import: GhtgoozaYTSb/icon
import IconPhBellFillIcon from "./icons/PlasmicIcon__IconPhBellFill"; // plasmic-import: unf2e-lexzfx/icon

createPlasmicElementProxy;

export type PlasmicAccueil__VariantMembers = {};
export type PlasmicAccueil__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccueil__VariantsArgs;
export const PlasmicAccueil__VariantProps = new Array<VariantPropType>();

export type PlasmicAccueil__ArgsType = {};
type ArgPropType = keyof PlasmicAccueil__ArgsType;
export const PlasmicAccueil__ArgProps = new Array<ArgPropType>();

export type PlasmicAccueil__OverridesType = {
  rechercheJob?: Flex__<"div">;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  screen?: Flex__<"div">;
  frame6?: Flex__<"div">;
  frame7?: Flex__<"div">;
  frame8?: Flex__<"div">;
  frame9?: Flex__<"div">;
  header?: Flex__<"header">;
  jamLogo?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame5?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  main?: Flex__<"main">;
  bgImage?: Flex__<typeof PlasmicImg__>;
  hero?: Flex__<"section">;
  heroLeft?: Flex__<"div">;
  badgeGroup?: Flex__<"div">;
  message?: Flex__<"div">;
  title?: Flex__<"div">;
  trouvezUnJobNaJamaisEteAussiSimple?: Flex__<"h1">;
  trouvezUnJobNaJamaisEteAussiSimple2?: Flex__<"p">;
  jobSearchSection?: Flex__<"div">;
  filtersDesk?: Flex__<"div">;
  formFilter?: Flex__<typeof FormWrapper>;
  wrapContent?: Flex__<"div">;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  select13?: Flex__<typeof AntdSelect>;
  select9?: Flex__<typeof AntdSelect>;
  select8?: Flex__<typeof AntdSelect>;
  select10?: Flex__<typeof AntdSelect>;
  select14?: Flex__<typeof AntdSelect>;
  select12?: Flex__<typeof AntdSelect>;
  button8?: Flex__<typeof Button>;
  resetFormBtn?: Flex__<"button">;
  mapJobs?: Flex__<"div">;
  joblistandbtn?: Flex__<"div">;
  btn?: Flex__<"div">;
  postes?: Flex__<"div">;
  button4?: Flex__<"div">;
  featuredIcon7?: Flex__<"div">;
  featuredIcon8?: Flex__<"div">;
  jobListContainer?: Flex__<"div">;
  jobsOnScroll?: Flex__<"div">;
  likeButtons?: Flex__<"div">;
  like2?: Flex__<"svg">;
  dislike?: Flex__<"svg">;
  jobCard20?: Flex__<typeof JobCard20>;
  loadingComponent?: Flex__<typeof LoadingComponent>;
  filtersMobile?: Flex__<"div">;
  formFilter3?: Flex__<typeof FormWrapper>;
  wrapContent3?: Flex__<"div">;
  input7?: Flex__<typeof AntdInput>;
  input8?: Flex__<typeof AntdInput>;
  select22?: Flex__<typeof AntdSelect>;
  select11?: Flex__<typeof AntdSelect>;
  select23?: Flex__<typeof AntdSelect>;
  select24?: Flex__<typeof AntdSelect>;
  select25?: Flex__<typeof AntdSelect>;
  select26?: Flex__<typeof AntdSelect>;
  button9?: Flex__<typeof Button>;
  resetFormBtn2?: Flex__<"button">;
  lastMinuteBtn?: Flex__<"div">;
  buttonLastMin2?: Flex__<"button">;
  text7?: Flex__<"div">;
  buttonLastMin3?: Flex__<"button">;
  text8?: Flex__<"div">;
  mapboxContainer?: Flex__<"div">;
  mapBox?: Flex__<typeof MapBox>;
  section2?: Flex__<"section">;
  headingAndSupportingText2?: Flex__<"header">;
  badgeGroup3?: Flex__<"div">;
  content8?: Flex__<"div">;
  message3?: Flex__<"div">;
  heading2?: Flex__<"h2">;
  supportingText5?: Flex__<"p">;
  supportingText9?: Flex__<"p">;
  section?: Flex__<"article">;
  sectionCard?: Flex__<typeof SectionCard>;
  sectionCard2?: Flex__<typeof SectionCard>;
  sectionCard3?: Flex__<typeof SectionCard>;
  verifyUserAuth?: Flex__<typeof Modal>;
  jobDetails?: Flex__<typeof Modal>;
  button5?: Flex__<typeof JamButton>;
  jobListing?: Flex__<"div">;
  jobDetail?: Flex__<"div">;
  frame38?: Flex__<"div">;
  jobName?: Flex__<"div">;
  likeBtn?: Flex__<"div">;
  like?: Flex__<"svg">;
  dislike3?: Flex__<"svg">;
  location?: Flex__<"div">;
  publicationDate?: Flex__<"div">;
  frame46?: Flex__<"div">;
  frame47?: Flex__<"div">;
  frame48?: Flex__<"div">;
  dkTrucksPark?: Flex__<"div">;
  frame49?: Flex__<"div">;
  dkTrucksPark2?: Flex__<"div">;
  frame50?: Flex__<"div">;
  dkTrucksPark3?: Flex__<"div">;
  frame51?: Flex__<"div">;
  dkTrucksPark4?: Flex__<"div">;
  frame?: Flex__<"div">;
  jobDescriptionContainer?: Flex__<"div">;
  jobDescription?: Flex__<"div">;
  benefits?: Flex__<"div">;
  expectedProfileContainer?: Flex__<"div">;
  expectedProfile?: Flex__<"div">;
  companyContainer?: Flex__<"div">;
  logoContainer?: Flex__<"div">;
  logo?: Flex__<typeof PlasmicImg__>;
  companyName?: Flex__<"div">;
  companyDetail?: Flex__<"div">;
  sectorActivity?: Flex__<"div">;
  dkTrucksPark5?: Flex__<"div">;
  companySize?: Flex__<"div">;
  dkTrucksPark6?: Flex__<"div">;
  companyLocation?: Flex__<"div">;
  companyDescription?: Flex__<"div">;
  signUpApplication?: Flex__<typeof Modal>;
  button6?: Flex__<typeof JamButton>;
  application?: Flex__<"div">;
  header2?: Flex__<"div">;
  frame67?: Flex__<"div">;
  frame68?: Flex__<"div">;
  frame69?: Flex__<"div">;
  frame74?: Flex__<"div">;
  frame75?: Flex__<"div">;
  frame76?: Flex__<"div">;
  dkTrucksPark7?: Flex__<"div">;
  frame77?: Flex__<"div">;
  dkTrucksPark8?: Flex__<"div">;
  frame16?: Flex__<"div">;
  dkTrucksPark9?: Flex__<"div">;
  frame17?: Flex__<"div">;
  dkTrucksPark10?: Flex__<"div">;
  frame18?: Flex__<"div">;
  frame78?: Flex__<"div">;
  frame79?: Flex__<"div">;
  frame80?: Flex__<"div">;
  frame81?: Flex__<"div">;
  dkTrucksPark11?: Flex__<"div">;
  frame82?: Flex__<"div">;
  dkTrucksPark12?: Flex__<"div">;
  frame83?: Flex__<"div">;
  frame84?: Flex__<"div">;
  frame85?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  upload2?: Flex__<typeof UploadWrapper>;
  editIcon2?: Flex__<"div">;
  frame19?: Flex__<"div">;
  deleteIcon2?: Flex__<"div">;
  frame20?: Flex__<"div">;
  nomPrenom?: Flex__<"div">;
  textInput1?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  telephone?: Flex__<"div">;
  phoneSelector?: Flex__<typeof PhoneSelector>;
  textInput3?: Flex__<typeof TextInput>;
  rue?: Flex__<typeof TextInput>;
  codePosteVille?: Flex__<"div">;
  codePostal?: Flex__<typeof TextInput>;
  ville?: Flex__<typeof TextInput>;
  textInput5?: Flex__<typeof TextInput>;
  select2?: Flex__<typeof Select>;
  select4?: Flex__<typeof Select>;
  select5?: Flex__<typeof AntdSelect>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  select7?: Flex__<typeof AntdSelect>;
  select?: Flex__<typeof Select>;
  frame13?: Flex__<"div">;
  frame14?: Flex__<"div">;
  email4?: Flex__<"div">;
  cvUpload?: Flex__<"div">;
  content5?: Flex__<"div">;
  fileUploader3?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  content?: Flex__<"div">;
  frame15?: Flex__<"div">;
  email5?: Flex__<"div">;
  cvUpload2?: Flex__<"div">;
  content6?: Flex__<"div">;
  fileUploader4?: Flex__<"div">;
  upload3?: Flex__<typeof UploadWrapper>;
  frame92?: Flex__<"div">;
  frame93?: Flex__<"div">;
  email3?: Flex__<"div">;
  fileUploader?: Flex__<typeof FileUploader>;
  frame94?: Flex__<"div">;
  email2?: Flex__<"div">;
  fileUploader2?: Flex__<typeof FileUploader>;
  textInput6?: Flex__<typeof TextInput>;
  notLoggued?: Flex__<"div">;
  loginForm2?: Flex__<typeof Login>;
  modal?: Flex__<typeof Modal>;
  button?: Flex__<typeof JamButton>;
  formFilter2?: Flex__<typeof FormWrapper>;
  wrapContent2?: Flex__<"div">;
  searchInput2?: Flex__<"div">;
  input5?: Flex__<typeof AntdInput>;
  locationInput2?: Flex__<"div">;
  input6?: Flex__<typeof AntdInput>;
  select15?: Flex__<typeof AntdSelect>;
  select16?: Flex__<typeof AntdSelect>;
  select17?: Flex__<typeof AntdSelect>;
  select18?: Flex__<typeof AntdSelect>;
  select19?: Flex__<typeof AntdSelect>;
  select20?: Flex__<typeof AntdSelect>;
  select21?: Flex__<typeof AntdSelect>;
  buttonLastMin?: Flex__<"button">;
  text5?: Flex__<"div">;
  textLinkBase?: Flex__<"a"> & Partial<LinkProps>;
  text6?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
  updateRoleForGoogleRegistration?: Flex__<typeof PageLoader>;
};

export interface DefaultAccueilProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccueil__RenderFunc(props: {
  variants: PlasmicAccueil__VariantsArgs;
  args: PlasmicAccueil__ArgsType;
  overrides: PlasmicAccueil__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "lieu",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "menuOnOff",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "city",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "critereBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput1.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jobDetails.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "signUpApplication.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isDiv1Visible",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "couleurLike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "jobId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "jobAvailability",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "jobDetais",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload3.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "formFilter.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formFilter",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formFilter.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formFilter",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.name || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.city || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "keyWords",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.input3.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "loginForm2.email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loginForm2.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showJobs",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "criteria",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "searchLocation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.input4.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "formFilter2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formFilter2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formFilter2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formFilter2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formFilter2Submited",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "jobObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getJobByAlertId.data[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "locationData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "verifyUserAuth.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jobCard20[].name",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].city",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].campany",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].sector",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].contractType",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].availability",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].workingTime",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].salary",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].workMode",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].companyLogo",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].isLastMinute",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "jobCard20[].isNew",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "jobCard20[].isApplied",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "isLastMinute",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "gpsCoordinates",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                latitude:
                  $queries.fetchUserCoordinates.data.response.features[0]
                    .geometry.coordinates[1],
                longitude:
                  $queries.fetchUserCoordinates.data.response.features[0]
                    .geometry.coordinates[0]
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "countries",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "Afghanistan",
          "Afrique du Sud",
          "Albanie",
          "Alg\u00e9rie",
          "Allemagne",
          "Andorre",
          "Angola",
          "Antigua-et-Barbuda",
          "Arabie saoudite",
          "Argentine",
          "Arm\u00e9nie",
          "Australie",
          "Autriche",
          "Azerba\u00efdjan",
          "Bahamas",
          "Bahre\u00efn",
          "Bangladesh",
          "Barbade",
          "Belgique",
          "Belize",
          "B\u00e9nin",
          "Bhoutan",
          "Bi\u00e9lorussie",
          "Birmanie (Myanmar)",
          "Bolivie",
          "Bosnie-Herz\u00e9govine",
          "Botswana",
          "Br\u00e9sil",
          "Brunei",
          "Bulgarie",
          "Burkina Faso",
          "Burundi",
          "Cambodge",
          "Cameroun",
          "Canada",
          "Cap-Vert",
          "Centrafrique (R\u00e9publique)",
          "Chili",
          "Chine",
          "Chypre",
          "Colombie",
          "Comores",
          "Congo (R\u00e9publique d\u00e9mocratique du)",
          "Congo (R\u00e9publique du)",
          "Cor\u00e9e du Nord",
          "Cor\u00e9e du Sud",
          "Costa Rica",
          "C\u00f4te d'Ivoire",
          "Croatie",
          "Cuba",
          "Danemark",
          "Djibouti",
          "Dominique",
          "\u00c9gypte",
          "\u00c9mirats arabes unis",
          "\u00c9quateur",
          "\u00c9rythr\u00e9e",
          "Espagne",
          "Estonie",
          "Eswatini",
          "\u00c9tats-Unis",
          "\u00c9thiopie",
          "Fidji",
          "Finlande",
          "France",
          "Gabon",
          "Gambie",
          "G\u00e9orgie",
          "Ghana",
          "Gr\u00e8ce",
          "Grenade",
          "Guatemala",
          "Guin\u00e9e",
          "Guin\u00e9e-Bissau",
          "Guin\u00e9e \u00e9quatoriale",
          "Guyana",
          "Ha\u00efti",
          "Honduras",
          "Hongrie",
          "\u00celes Marshall",
          "\u00celes Salomon",
          "Inde",
          "Indon\u00e9sie",
          "Irak",
          "Iran",
          "Irlande",
          "Islande",
          "Isra\u00ebl",
          "Italie",
          "Jama\u00efque",
          "Japon",
          "Jordanie",
          "Kazakhstan",
          "Kenya",
          "Kirghizistan",
          "Kiribati",
          "Kosovo",
          "Kowe\u00eft",
          "Laos",
          "Lesotho",
          "Lettonie",
          "Liban",
          "Liberia",
          "Libye",
          "Liechtenstein",
          "Lituanie",
          "Luxembourg",
          "Mac\u00e9doine du Nord",
          "Madagascar",
          "Malaisie",
          "Malawi",
          "Maldives",
          "Mali",
          "Malte",
          "Maroc",
          "Maurice",
          "Mauritanie",
          "Mexique",
          "Micron\u00e9sie",
          "Moldavie",
          "Monaco",
          "Mongolie",
          "Mont\u00e9n\u00e9gro",
          "Mozambique",
          "Namibie",
          "Nauru",
          "N\u00e9pal",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Norv\u00e8ge",
          "Nouvelle-Z\u00e9lande",
          "Oman",
          "Ouganda",
          "Ouzb\u00e9kistan",
          "Pakistan",
          "Palaos",
          "Palestine",
          "Panama",
          "Papouasie-Nouvelle-Guin\u00e9e",
          "Paraguay",
          "Pays-Bas",
          "P\u00e9rou",
          "Philippines",
          "Pologne",
          "Portugal",
          "Qatar",
          "R\u00e9publique dominicaine",
          "R\u00e9publique tch\u00e8que",
          "Roumanie",
          "Royaume-Uni",
          "Russie",
          "Rwanda",
          "Saint-Christophe-et-Ni\u00e9v\u00e8s",
          "Sainte-Lucie",
          "Saint-Marin",
          "Saint-Vincent-et-les-Grenadines",
          "Salvador",
          "Samoa",
          "Sao Tom\u00e9-et-Principe",
          "S\u00e9n\u00e9gal",
          "Serbie",
          "Seychelles",
          "Sierra Leone",
          "Singapour",
          "Slovaquie",
          "Slov\u00e9nie",
          "Somalie",
          "Soudan",
          "Soudan du Sud",
          "Sri Lanka",
          "Su\u00e8de",
          "Suisse",
          "Suriname",
          "Syrie",
          "Tadjikistan",
          "Ta\u00efwan",
          "Tanzanie",
          "Tchad",
          "Tha\u00eflande",
          "Timor oriental",
          "Togo",
          "Tonga",
          "Trinit\u00e9-et-Tobago",
          "Tunisie",
          "Turkm\u00e9nistan",
          "Turquie",
          "Tuvalu",
          "Ukraine",
          "Uruguay",
          "Vanuatu",
          "Vatican",
          "Venezuela",
          "Vi\u00eat Nam",
          "Y\u00e9men",
          "Zambie",
          "Zimbabwe"
        ]
      },
      {
        path: "messages",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          postuler:
            "Veuillez vous connecter pour pouvoir postuler \u00e0 cette offre.",
          favoris:
            "Veuillez vous connecter pour pouvoir mettre en favoris cette offre."
        })
      },
      {
        path: "errorMsg",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sectionCard.icon",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "img1"
      },
      {
        path: "sectionCard.title",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "Il suffit de traverser la rue"
      },
      {
        path: "sectionCard.description",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "Gr\u00e2ce \u00e0 la carte, rep\u00e9rez les jobs \u00e0 pourvoir pr\u00e8s de chez vous."
      },
      {
        path: "sectionCard2.icon",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "img2"
      },
      {
        path: "sectionCard2.title",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "Ne manquez aucune offre"
      },
      {
        path: "sectionCard2.description",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "Soyez inform\u00e9 en temps r\u00e9el lorsqu'une nouvelle offre d'emploi correspond \u00e0 vos crit\u00e8res de recherche."
      },
      {
        path: "sectionCard3.icon",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "img3"
      },
      {
        path: "sectionCard3.title",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Last Minute"
      },
      {
        path: "sectionCard3.description",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "Avoir l\u2018acc\u00e8s aux jobs \u00e0 pourvoir imm\u00e9diatement. Offres urgentes, besoin imm\u00e9diat."
      },
      {
        path: "isMobile",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.innerWidth < 768;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "sectorActivity2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.formFilter?.value?.sector_activity ??
                $state.formFilter2.value?.sector_activity ??
                ""
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "availabilityStatus",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.formFilter.value.availability_status ??
                $state.formFilter2?.value?.availability_status ??
                []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "contractType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.formFilter?.value?.contract_type ??
                $state.formFilter2?.value?.contract_type ??
                []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "workingTime",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.formFilter?.value?.working_time ??
                $state.formFilter2?.value?.working_time ??
                []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "workMode",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.formFilter?.value?.work_mode ??
                $state.formFilter2?.value?.work_mode ??
                []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "salary",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.formFilter?.value?.salary ??
                $state.formFilter2?.value?.salary ??
                []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "formFilter3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formFilter3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formFilter3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formFilter3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.name || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.city || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select25.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    userLikedJobs: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
        userArgs: {
          filters: [$ctx.SupabaseUser?.user?.id]
        },
        cacheKey: `plasmic.$.24ab9e7e-7e19-4ab2-82fc-82df12596da0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCurrentUser: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "9c25c922-f186-4ed9-850f-6ded6b307e4e",
        userArgs: {
          keys: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.9c25c922-f186-4ed9-850f-6ded6b307e4e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getXpLevel: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "b2a4d57d-9e60-42ef-90a4-3c0c39a3cc9e",
        userArgs: {},
        cacheKey: `plasmic.$.b2a4d57d-9e60-42ef-90a4-3c0c39a3cc9e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSoftSkill: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "782fb4f4-ec90-41a0-a2e9-7e5a5135d08c",
        userArgs: {},
        cacheKey: `plasmic.$.782fb4f4-ec90-41a0-a2e9-7e5a5135d08c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getTransportModes: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "1cc686aa-ff11-4cb1-a24c-a37863ba8378",
        userArgs: {},
        cacheKey: `plasmic.$.1cc686aa-ff11-4cb1-a24c-a37863ba8378.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
        userArgs: {
          path: [
            $queries.getCurrentUser?.data[0]?.id +
              "/" +
              $queries.getCurrentUser?.data[0]?.profile_photo
          ]
        },
        cacheKey: `plasmic.$.8be05618-e3eb-4b37-889a-c18c2902bc93.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCriteria: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "3c8bdc4e-677f-4634-aaef-8a13e1973a95",
        userArgs: {},
        cacheKey: `plasmic.$.3c8bdc4e-677f-4634-aaef-8a13e1973a95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJobByAlertId: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "43adfa1c-e51d-4d59-86cb-4e2c2456c3f6",
        userArgs: {
          query: [$ctx.query.job_id]
        },
        cacheKey: `plasmic.$.43adfa1c-e51d-4d59-86cb-4e2c2456c3f6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getApplication: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "a3e4c858-0549-4f80-9f4b-d2e2d7018c4e",
        userArgs: {
          filters: [$ctx.SupabaseUser?.user?.id]
        },
        cacheKey: `plasmic.$.a3e4c858-0549-4f80-9f4b-d2e2d7018c4e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchUserCoordinates: usePlasmicDataOp(() => {
      return {
        sourceId: "3fRequBPthJKGmQ2njgcZi",
        opId: "1d2724c3-c310-4508-9bcd-f622ed61d005",
        userArgs: {
          params: [
            $state.form?.value?.postal_code ||
              $queries.getCurrentUser?.data[0]?.postal_code ||
              "75000",

            $state.form?.value?.address ||
              $queries.getCurrentUser?.data[0]?.address ||
              "",

            $state.form?.value?.city ||
              $queries.getCurrentUser?.data[0]?.city ||
              "paris"
          ]
        },
        cacheKey: `plasmic.$.1d2724c3-c310-4508-9bcd-f622ed61d005.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    jobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "09c18e19-f24f-4bbd-891f-3c8b83e5f1cc",
        userArgs: {
          query: [
            $state.contractType,

            $state.contractType.length == 0,

            $state.salary,

            $state.salary.length == 0,

            $state.availabilityStatus,

            $state.availabilityStatus.length == 0,

            $state.workingTime,

            $state.workingTime.length == 0,

            $state.workMode,

            $state.workMode.length == 0,

            $state.sectorActivity2,

            $state.sectorActivity2 == "",

            $state.keyWords,

            $state.keyWords,

            $state.searchLocation,

            $state.isLastMinute
          ]
        },
        cacheKey: `plasmic.$.09c18e19-f24f-4bbd-891f-3c8b83e5f1cc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicAccueil.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAccueil.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAccueil.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"rechercheJob"}
          data-plasmic-override={overrides.rechercheJob}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.rechercheJob,
            {
              [sty.rechercheJobglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
        >
          <LoadingBoundary
            data-plasmic-name={"loadingBoundary"}
            data-plasmic-override={overrides.loadingBoundary}
            loadingState={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    data-plasmic-name={"screen"}
                    data-plasmic-override={overrides.screen}
                    className={classNames(projectcss.all, sty.screen)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__teVqI, "pulse-animation")}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"70px"}
                      loading={"eager"}
                      src={{
                        src: "/plasmic/jam_production_🚀/images/pictogramSvg.svg",
                        fullWidth: 95,
                        fullHeight: 115,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      data-plasmic-name={"frame6"}
                      data-plasmic-override={overrides.frame6}
                      className={classNames(projectcss.all, sty.frame6)}
                    >
                      <div
                        data-plasmic-name={"frame7"}
                        data-plasmic-override={overrides.frame7}
                        className={classNames(projectcss.all, sty.frame7)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wr8A
                          )}
                        >
                          {"JOB"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame8"}
                        data-plasmic-override={overrides.frame8}
                        className={classNames(projectcss.all, sty.frame8)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gyPR
                          )}
                        >
                          {"AROUND"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame9"}
                        data-plasmic-override={overrides.frame9}
                        className={classNames(projectcss.all, sty.frame9)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jpBvo
                          )}
                        >
                          {"ME"}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            }
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <header
                    data-plasmic-name={"header"}
                    data-plasmic-override={overrides.header}
                    className={classNames(projectcss.all, sty.header)}
                  >
                    <div
                      data-plasmic-name={"jamLogo"}
                      data-plasmic-override={overrides.jamLogo}
                      className={classNames(projectcss.all, sty.jamLogo)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToAccueil"] = true
                          ? (() => {
                              const actionArgs = { destination: `/` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToAccueil"] != null &&
                          typeof $steps["goToAccueil"] === "object" &&
                          typeof $steps["goToAccueil"].then === "function"
                        ) {
                          $steps["goToAccueil"] = await $steps["goToAccueil"];
                        }
                      }}
                    >
                      <Vector12Icon
                        className={classNames(projectcss.all, sty.svg___5Qs48)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"frame2"}
                        data-plasmic-override={overrides.frame2}
                        className={classNames(projectcss.all, sty.frame2)}
                      >
                        <div
                          data-plasmic-name={"frame3"}
                          data-plasmic-override={overrides.frame3}
                          className={classNames(projectcss.all, sty.frame3)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vpFC
                            )}
                          >
                            {"JOB"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame4"}
                          data-plasmic-override={overrides.frame4}
                          className={classNames(projectcss.all, sty.frame4)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sawvN
                            )}
                          >
                            {"AROUND"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"frame5"}
                          data-plasmic-override={overrides.frame5}
                          className={classNames(projectcss.all, sty.frame5)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rxVy
                            )}
                          >
                            {"ME"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cWnZj)}
                    >
                      <PlasmicLink__
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link
                        )}
                        component={Link}
                        href={`/accueil-employeur`}
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        {"Pour les employeurs"}
                      </PlasmicLink__>
                      {false ? (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__c3Lr
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jtEt
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nkEml
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.SupabaseUser.user
                                      ? "Voir mon compte"
                                      : "Connexion";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Connexion";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToLogin"] = !!!$ctx.SupabaseUser.user
                              ? (() => {
                                  const actionArgs = { destination: `/login` };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToLogin"] != null &&
                              typeof $steps["goToLogin"] === "object" &&
                              typeof $steps["goToLogin"].then === "function"
                            ) {
                              $steps["goToLogin"] = await $steps["goToLogin"];
                            }

                            $steps["goToCandidateSettings"] =
                              !!$ctx.SupabaseUser.user &&
                              $ctx.SupabaseUser.user.user_metadata.role ===
                                "User"
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/parametres-candidat`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToCandidateSettings"] != null &&
                              typeof $steps["goToCandidateSettings"] ===
                                "object" &&
                              typeof $steps["goToCandidateSettings"].then ===
                                "function"
                            ) {
                              $steps["goToCandidateSettings"] = await $steps[
                                "goToCandidateSettings"
                              ];
                            }

                            $steps["goToEmployerSettings"] =
                              !!$ctx.SupabaseUser.user &&
                              $ctx.SupabaseUser.user.user_metadata.role ==
                                "Company"
                                ? (() => {
                                    const actionArgs = {};
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToEmployerSettings"] != null &&
                              typeof $steps["goToEmployerSettings"] ===
                                "object" &&
                              typeof $steps["goToEmployerSettings"].then ===
                                "function"
                            ) {
                              $steps["goToEmployerSettings"] = await $steps[
                                "goToEmployerSettings"
                              ];
                            }

                            $steps["goToAdminSettings"] =
                              !!$ctx.SupabaseUser.user &&
                              $ctx.SupabaseUser.user.user_metadata.role ==
                                "Admin"
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/offre_admin`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToAdminSettings"] != null &&
                              typeof $steps["goToAdminSettings"] === "object" &&
                              typeof $steps["goToAdminSettings"].then ===
                                "function"
                            ) {
                              $steps["goToAdminSettings"] = await $steps[
                                "goToAdminSettings"
                              ];
                            }
                          }}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return !!!$ctx.SupabaseUser.user;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__nl8Ey
                          )}
                          end={
                            <PlasmicIcon__
                              PlasmicIconType={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? UserIcon
                                  : GroupIcon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__skm8V
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lyl4Z
                              )}
                            >
                              {"Connexion"}
                            </div>
                          }
                          linkTo={`/login`}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return !!$ctx.SupabaseUser.user;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__vw0Rd
                          )}
                          end={
                            <UserIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wqlja
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yEAp5
                              )}
                            >
                              {"Voir mon compte"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToRegisterValidation"] =
                              !!$ctx.SupabaseUser.user &&
                              $ctx.SupabaseUser.user.user_metadata.role ===
                                "google"
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/register-validation`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToRegisterValidation"] != null &&
                              typeof $steps["goToRegisterValidation"] ===
                                "object" &&
                              typeof $steps["goToRegisterValidation"].then ===
                                "function"
                            ) {
                              $steps["goToRegisterValidation"] = await $steps[
                                "goToRegisterValidation"
                              ];
                            }

                            $steps["goToCandidateSettings"] =
                              !!$ctx.SupabaseUser.user &&
                              $ctx.SupabaseUser.user.user_metadata.role ===
                                "User"
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/parametres-candidat`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToCandidateSettings"] != null &&
                              typeof $steps["goToCandidateSettings"] ===
                                "object" &&
                              typeof $steps["goToCandidateSettings"].then ===
                                "function"
                            ) {
                              $steps["goToCandidateSettings"] = await $steps[
                                "goToCandidateSettings"
                              ];
                            }

                            $steps["goToEmployerSettings"] =
                              !!$ctx.SupabaseUser.user &&
                              $ctx.SupabaseUser.user.user_metadata.role ===
                                "Company"
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/parametres-employeur`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToEmployerSettings"] != null &&
                              typeof $steps["goToEmployerSettings"] ===
                                "object" &&
                              typeof $steps["goToEmployerSettings"].then ===
                                "function"
                            ) {
                              $steps["goToEmployerSettings"] = await $steps[
                                "goToEmployerSettings"
                              ];
                            }

                            $steps["goToAdminSettings"] =
                              !!$ctx.SupabaseUser.user &&
                              $ctx.SupabaseUser.user.user_metadata.role ===
                                "Admin"
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/offre_admin`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToAdminSettings"] != null &&
                              typeof $steps["goToAdminSettings"] === "object" &&
                              typeof $steps["goToAdminSettings"].then ===
                                "function"
                            ) {
                              $steps["goToAdminSettings"] = await $steps[
                                "goToAdminSettings"
                              ];
                            }
                          }}
                        />
                      ) : null}
                    </div>
                  </header>
                  <main
                    data-plasmic-name={"main"}
                    data-plasmic-override={overrides.main}
                    className={classNames(projectcss.all, sty.main)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"bgImage"}
                      data-plasmic-override={overrides.bgImage}
                      alt={""}
                      className={classNames(sty.bgImage)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "582px"
                          : "auto"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/jam_production_🚀/images/bgImage.jpg",
                        fullWidth: 2904,
                        fullHeight: 4356,
                        aspectRatio: undefined
                      }}
                    />

                    <section
                      data-plasmic-name={"hero"}
                      data-plasmic-override={overrides.hero}
                      className={classNames(projectcss.all, sty.hero)}
                    >
                      <div
                        data-plasmic-name={"heroLeft"}
                        data-plasmic-override={overrides.heroLeft}
                        className={classNames(projectcss.all, sty.heroLeft)}
                      >
                        <div
                          data-plasmic-name={"badgeGroup"}
                          data-plasmic-override={overrides.badgeGroup}
                          className={classNames(projectcss.all, sty.badgeGroup)}
                        >
                          <div
                            data-plasmic-name={"message"}
                            data-plasmic-override={overrides.message}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.message
                            )}
                          >
                            {"Get ready to find a job"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v7K4A
                          )}
                        >
                          <div
                            data-plasmic-name={"title"}
                            data-plasmic-override={overrides.title}
                            className={classNames(projectcss.all, sty.title)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___0Chyr
                              )}
                            >
                              <h1
                                data-plasmic-name={
                                  "trouvezUnJobNaJamaisEteAussiSimple"
                                }
                                data-plasmic-override={
                                  overrides.trouvezUnJobNaJamaisEteAussiSimple
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h1,
                                  projectcss.__wab_text,
                                  sty.trouvezUnJobNaJamaisEteAussiSimple,
                                  "isDynamicForTranslate"
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>
                                    {
                                      "Trouver un job n\u2019a jamais \u00e9t\u00e9 aussi "
                                    }
                                  </React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "#BBFE68",
                                      fontWeight: 600
                                    }}
                                  >
                                    {"simple"}
                                  </span>
                                </React.Fragment>
                              </h1>
                              <p
                                data-plasmic-name={
                                  "trouvezUnJobNaJamaisEteAussiSimple2"
                                }
                                data-plasmic-override={
                                  overrides.trouvezUnJobNaJamaisEteAussiSimple2
                                }
                                className={classNames(
                                  projectcss.all,
                                  projectcss.p,
                                  projectcss.__wab_text,
                                  sty.trouvezUnJobNaJamaisEteAussiSimple2
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 300 }}
                                  >
                                    {
                                      "Trouvez facilement un emploi pr\u00e8s de chez vous et connectez-vous aux employeurs locaux."
                                    }
                                  </span>
                                </React.Fragment>
                              </p>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"jobSearchSection"}
                            data-plasmic-override={overrides.jobSearchSection}
                            className={classNames(
                              projectcss.all,
                              sty.jobSearchSection
                            )}
                          >
                            <div
                              data-plasmic-name={"filtersDesk"}
                              data-plasmic-override={overrides.filtersDesk}
                              className={classNames(
                                projectcss.all,
                                sty.filtersDesk
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.formFilter
                                  ),
                                  extendedOnValuesChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["formFilter", "value"],
                                      FormWrapper_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  formItems: [
                                    {
                                      label: "Name",
                                      name: "name",
                                      inputType: "Text"
                                    },
                                    {
                                      label: "Message",
                                      name: "message",
                                      inputType: "Text Area"
                                    }
                                  ],
                                  labelCol: { span: 8, horizontalOnly: true },
                                  layout: "vertical",
                                  mode: "advanced",
                                  onIsSubmittingChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "isSubmitting",
                                      ["formFilter", "isSubmitting"],
                                      FormWrapper_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  ref: ref => {
                                    $refs["formFilter"] = ref;
                                  },
                                  submitSlot: null,
                                  wrapperCol: { span: 16, horizontalOnly: true }
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "formFilter.value"
                                    },
                                    {
                                      name: "isSubmitting",
                                      plasmicStateName:
                                        "formFilter.isSubmitting"
                                    }
                                  ],
                                  [],
                                  FormWrapper_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <FormWrapper
                                    data-plasmic-name={"formFilter"}
                                    data-plasmic-override={overrides.formFilter}
                                    {...child$Props}
                                  >
                                    <div
                                      data-plasmic-name={"wrapContent"}
                                      data-plasmic-override={
                                        overrides.wrapContent
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.wrapContent
                                      )}
                                    >
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField___6Jwam
                                        )}
                                        initialValue={""}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___7WSaY
                                            )}
                                          >
                                            {"Label"}
                                          </div>
                                        }
                                        name={"key_words"}
                                        noLabel={true}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__rOqAn
                                          )}
                                        >
                                          {(() => {
                                            const child$Props = {
                                              allowClear: true,
                                              className: classNames(
                                                "__wab_instance",
                                                sty.input3
                                              ),
                                              onChange: async (
                                                ...eventArgs: any
                                              ) => {
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "value",
                                                  ["input3", "value"],
                                                  AntdInput_Helpers
                                                ).apply(null, eventArgs);

                                                (async event => {
                                                  const $steps = {};

                                                  $steps["updateKeyWords"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "keyWords"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $state.input3
                                                                .value
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["updateKeyWords"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "updateKeyWords"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateKeyWords"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["updateKeyWords"] =
                                                      await $steps[
                                                        "updateKeyWords"
                                                      ];
                                                  }
                                                }).apply(null, eventArgs);
                                              },
                                              placeholder:
                                                "Mot-cl\u00e9, job, entreprise",
                                              prefix: (
                                                <PlasmicImg__
                                                  alt={""}
                                                  className={classNames(
                                                    sty.img__bgjoy
                                                  )}
                                                  displayHeight={"20px"}
                                                  displayMaxHeight={"none"}
                                                  displayMaxWidth={"none"}
                                                  displayMinHeight={"0"}
                                                  displayMinWidth={"0"}
                                                  displayWidth={"20px"}
                                                  loading={"lazy"}
                                                  src={{
                                                    src: "/plasmic/jam_production_🚀/images/image10.svg",
                                                    fullWidth: 21,
                                                    fullHeight: 20,
                                                    aspectRatio: 1.05
                                                  }}
                                                />
                                              ),

                                              size: "large",
                                              value: generateStateValueProp(
                                                $state,
                                                ["input3", "value"]
                                              )
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName:
                                                    "input3.value"
                                                }
                                              ],
                                              [],
                                              AntdInput_Helpers ?? {},
                                              child$Props
                                            );
                                            initializePlasmicStates(
                                              $state,
                                              [
                                                {
                                                  name: "input3.value",
                                                  initFunc: ({
                                                    $props,
                                                    $state,
                                                    $queries
                                                  }) =>
                                                    (() => {
                                                      try {
                                                        return (
                                                          $ctx.query.name || ""
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                }
                                              ],
                                              []
                                            );
                                            return (
                                              <AntdInput
                                                data-plasmic-name={"input3"}
                                                data-plasmic-override={
                                                  overrides.input3
                                                }
                                                {...child$Props}
                                              />
                                            );
                                          })()}
                                        </div>
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField__zKiqa
                                        )}
                                        initialValue={""}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ipMk7
                                            )}
                                          >
                                            {"Label"}
                                          </div>
                                        }
                                        name={"location"}
                                        noLabel={true}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__r7PSa
                                          )}
                                        >
                                          {(() => {
                                            const child$Props = {
                                              allowClear: true,
                                              className: classNames(
                                                "__wab_instance",
                                                sty.input4
                                              ),
                                              onChange: async (
                                                ...eventArgs: any
                                              ) => {
                                                generateStateOnChangePropForCodeComponents(
                                                  $state,
                                                  "value",
                                                  ["input4", "value"],
                                                  AntdInput_Helpers
                                                ).apply(null, eventArgs);

                                                (async event => {
                                                  const $steps = {};

                                                  $steps[
                                                    "updateSearchLocation"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "searchLocation"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value:
                                                            $state.input4.value
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateSearchLocation"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateSearchLocation"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateSearchLocation"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateSearchLocation"
                                                    ] = await $steps[
                                                      "updateSearchLocation"
                                                    ];
                                                  }
                                                }).apply(null, eventArgs);
                                              },
                                              placeholder: "Localisation",
                                              prefix: (
                                                <PlasmicImg__
                                                  alt={""}
                                                  className={classNames(
                                                    sty.img__wMeId
                                                  )}
                                                  displayHeight={"18px"}
                                                  displayMaxHeight={"none"}
                                                  displayMaxWidth={"100%"}
                                                  displayMinHeight={"0"}
                                                  displayMinWidth={"0"}
                                                  displayWidth={"18px"}
                                                  loading={"lazy"}
                                                  src={{
                                                    src: "/plasmic/jam_production_🚀/images/locationPinSvgrepoComSvg.svg",
                                                    fullWidth: 800,
                                                    fullHeight: 800,
                                                    aspectRatio: undefined
                                                  }}
                                                />
                                              ),

                                              size: "large",
                                              value: generateStateValueProp(
                                                $state,
                                                ["input4", "value"]
                                              )
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName:
                                                    "input4.value"
                                                }
                                              ],
                                              [],
                                              AntdInput_Helpers ?? {},
                                              child$Props
                                            );
                                            initializePlasmicStates(
                                              $state,
                                              [
                                                {
                                                  name: "input4.value",
                                                  initFunc: ({
                                                    $props,
                                                    $state,
                                                    $queries
                                                  }) =>
                                                    (() => {
                                                      try {
                                                        return (
                                                          $ctx.query.city || ""
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                }
                                              ],
                                              []
                                            );
                                            return (
                                              <AntdInput
                                                data-plasmic-name={"input4"}
                                                data-plasmic-override={
                                                  overrides.input4
                                                }
                                                {...child$Props}
                                              />
                                            );
                                          })()}
                                        </div>
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField__tdjl9
                                        )}
                                        label={"Name"}
                                        name={"sector_activity"}
                                        noLabel={true}
                                      >
                                        <AntdSelect
                                          data-plasmic-name={"select13"}
                                          data-plasmic-override={
                                            overrides.select13
                                          }
                                          allowClear={true}
                                          autoFocus={false}
                                          bordered={false}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.select13
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            styleTokensClassNames,
                                            styleTokensClassNames_antd_5_hostless,
                                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                            styleTokensClassNames_plasmic_rich_components
                                          )}
                                          dropdownMatchSelectWidth={true}
                                          mode={"single"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "select13",
                                              "value"
                                            ]).apply(null, eventArgs);
                                          }}
                                          optionClassName={classNames({
                                            [sty["pcls_TulvYrdlFkLz"]]: true
                                          })}
                                          options={(() => {
                                            try {
                                              return $queries.getCriteria.data
                                                .filter(
                                                  item =>
                                                    item.type ===
                                                    "sector_activity"
                                                )
                                                .map(item => ({
                                                  value: item.name,
                                                  label: item.name
                                                }));
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()}
                                          placeholder={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__cepRq
                                              )}
                                            >
                                              <PlasmicImg__
                                                alt={""}
                                                className={classNames(
                                                  sty.img__noDyM
                                                )}
                                                displayHeight={"18px"}
                                                displayMaxHeight={"none"}
                                                displayMaxWidth={"100%"}
                                                displayMinHeight={"0"}
                                                displayMinWidth={"0"}
                                                displayWidth={"18px"}
                                                loading={"lazy"}
                                                src={{
                                                  src: "/plasmic/jam_production_🚀/images/image2.svg",
                                                  fullWidth: 20,
                                                  fullHeight: 20,
                                                  aspectRatio: 1
                                                }}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__cIt50
                                                )}
                                              >
                                                {"Secteur d'activit\u00e9"}
                                              </div>
                                            </div>
                                          }
                                          popupScopeClassName={
                                            sty["select13__popup"]
                                          }
                                          showSearch={true}
                                          size={"large"}
                                          useChildren={false}
                                          value={generateStateValueProp(
                                            $state,
                                            ["select13", "value"]
                                          )}
                                        />
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField__dm5ZL
                                        )}
                                        label={"Name"}
                                        name={"availability_status"}
                                        noLabel={true}
                                        preserve={false}
                                      >
                                        <AntdSelect
                                          data-plasmic-name={"select9"}
                                          data-plasmic-override={
                                            overrides.select9
                                          }
                                          allowClear={true}
                                          bordered={false}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.select9
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            styleTokensClassNames,
                                            styleTokensClassNames_antd_5_hostless,
                                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                            styleTokensClassNames_plasmic_rich_components
                                          )}
                                          mode={"multiple"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "select9",
                                              "value"
                                            ]).apply(null, eventArgs);
                                          }}
                                          optionClassName={classNames({
                                            [sty["pcls_dj7ANnXN0yWv"]]: true
                                          })}
                                          options={(() => {
                                            try {
                                              return $queries.getCriteria.data
                                                .filter(
                                                  item =>
                                                    item.type ===
                                                    "availability_status"
                                                )
                                                .map(item => ({
                                                  value: item.name,
                                                  label: item.name
                                                }));
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()}
                                          placeholder={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___1O30W
                                              )}
                                            >
                                              <PlasmicImg__
                                                alt={""}
                                                className={classNames(
                                                  sty.img__nzBml
                                                )}
                                                displayHeight={"18px"}
                                                displayMaxHeight={"none"}
                                                displayMaxWidth={"100%"}
                                                displayMinHeight={"0"}
                                                displayMinWidth={"0"}
                                                displayWidth={"18px"}
                                                loading={"lazy"}
                                                src={{
                                                  src: "/plasmic/jam_production_🚀/images/image3.svg",
                                                  fullWidth: 20,
                                                  fullHeight: 20,
                                                  aspectRatio: 1
                                                }}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___6OmLu
                                                )}
                                              >
                                                {"Disponibilit\u00e9"}
                                              </div>
                                            </div>
                                          }
                                          popupScopeClassName={
                                            sty["select9__popup"]
                                          }
                                          showSearch={true}
                                          size={"large"}
                                          value={generateStateValueProp(
                                            $state,
                                            ["select9", "value"]
                                          )}
                                        />
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField___2W6T
                                        )}
                                        hidden={false}
                                        initialValue={(() => {
                                          try {
                                            return $ctx.query?.contract_types ==
                                              ""
                                              ? undefined
                                              : $ctx.query?.contract_types?.split(
                                                  ","
                                                );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        label={"Name"}
                                        name={"contract_type"}
                                        noLabel={true}
                                        preserve={false}
                                        shouldUpdate={false}
                                      >
                                        <AntdSelect
                                          data-plasmic-name={"select8"}
                                          data-plasmic-override={
                                            overrides.select8
                                          }
                                          allowClear={true}
                                          bordered={false}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.select8
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            styleTokensClassNames,
                                            styleTokensClassNames_antd_5_hostless,
                                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                            styleTokensClassNames_plasmic_rich_components
                                          )}
                                          dropdownMatchSelectWidth={false}
                                          mode={"multiple"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "select8",
                                              "value"
                                            ]).apply(null, eventArgs);
                                          }}
                                          optionClassName={classNames({
                                            [sty["pcls_PaVAJpZUdheZ"]]: true
                                          })}
                                          options={(() => {
                                            try {
                                              return $queries.getCriteria.data
                                                .filter(
                                                  item =>
                                                    item.type ===
                                                    "contract_type"
                                                )
                                                .map(item => ({
                                                  value: item.name,
                                                  label: item.name
                                                }));
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()}
                                          placeholder={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__kNiQ
                                              )}
                                            >
                                              <PlasmicImg__
                                                alt={""}
                                                className={classNames(
                                                  sty.img__tuqV3
                                                )}
                                                displayHeight={"18px"}
                                                displayMaxHeight={"none"}
                                                displayMaxWidth={"100%"}
                                                displayMinHeight={"0"}
                                                displayMinWidth={"0"}
                                                displayWidth={"18px"}
                                                loading={"lazy"}
                                                src={{
                                                  src: "/plasmic/jam_production_🚀/images/image7.svg",
                                                  fullWidth: 20,
                                                  fullHeight: 20,
                                                  aspectRatio: 1
                                                }}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___3Kr4B
                                                )}
                                              >
                                                {"Type de contrat"}
                                              </div>
                                            </div>
                                          }
                                          popupScopeClassName={
                                            sty["select8__popup"]
                                          }
                                          showSearch={true}
                                          size={"large"}
                                          suffixIcon={null}
                                          value={generateStateValueProp(
                                            $state,
                                            ["select8", "value"]
                                          )}
                                        />
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField__eZlqS
                                        )}
                                        initialValue={(() => {
                                          try {
                                            return $ctx.query?.work_times == ""
                                              ? undefined
                                              : $ctx.query?.work_times?.split(
                                                  ","
                                                );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        label={"Name"}
                                        name={"working_time"}
                                        noLabel={true}
                                      >
                                        <AntdSelect
                                          data-plasmic-name={"select10"}
                                          data-plasmic-override={
                                            overrides.select10
                                          }
                                          allowClear={true}
                                          bordered={false}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.select10
                                          )}
                                          defaultOpen={false}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            styleTokensClassNames,
                                            styleTokensClassNames_antd_5_hostless,
                                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                            styleTokensClassNames_plasmic_rich_components
                                          )}
                                          mode={"multiple"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "select10",
                                              "value"
                                            ]).apply(null, eventArgs);
                                          }}
                                          optionClassName={classNames({
                                            [sty["pcls_tE82JyaC8VXE"]]: true
                                          })}
                                          options={(() => {
                                            try {
                                              return $queries.getCriteria.data
                                                .filter(
                                                  item =>
                                                    item.type === "working_time"
                                                )
                                                .map(item => ({
                                                  value: item.name,
                                                  label: item.name
                                                }));
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()}
                                          placeholder={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__uy0Tz
                                              )}
                                            >
                                              <Vector22Icon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__lvs5K
                                                )}
                                                role={"img"}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ni5N
                                                )}
                                              >
                                                {"Temps de travail"}
                                              </div>
                                            </div>
                                          }
                                          popupScopeClassName={
                                            sty["select10__popup"]
                                          }
                                          showSearch={true}
                                          size={"large"}
                                          value={generateStateValueProp(
                                            $state,
                                            ["select10", "value"]
                                          )}
                                        />
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField___9FKic
                                        )}
                                        label={"Name"}
                                        name={"work_mode"}
                                        noLabel={true}
                                      >
                                        <AntdSelect
                                          data-plasmic-name={"select14"}
                                          data-plasmic-override={
                                            overrides.select14
                                          }
                                          allowClear={true}
                                          autoFocus={false}
                                          bordered={false}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.select14
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            styleTokensClassNames,
                                            styleTokensClassNames_antd_5_hostless,
                                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                            styleTokensClassNames_plasmic_rich_components
                                          )}
                                          mode={"multiple"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "select14",
                                              "value"
                                            ]).apply(null, eventArgs);
                                          }}
                                          optionClassName={classNames({
                                            [sty["pcls_R9D3KUDsYzj1"]]: true
                                          })}
                                          options={(() => {
                                            try {
                                              return $queries.getCriteria.data
                                                .filter(
                                                  item =>
                                                    item.type === "work_mode"
                                                )
                                                .map(item => ({
                                                  value: item.name,
                                                  label: item.name
                                                }));
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()}
                                          placeholder={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__eKhDu
                                              )}
                                            >
                                              <PlasmicImg__
                                                alt={""}
                                                className={classNames(
                                                  sty.img__xkwQs
                                                )}
                                                displayHeight={"18px"}
                                                displayMaxHeight={"none"}
                                                displayMaxWidth={"100%"}
                                                displayMinHeight={"0"}
                                                displayMinWidth={"0"}
                                                displayWidth={"18px"}
                                                loading={"lazy"}
                                                src={{
                                                  src: "/plasmic/jam_production_🚀/images/image6.svg",
                                                  fullWidth: 20,
                                                  fullHeight: 20,
                                                  aspectRatio: 1
                                                }}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__rHt4A
                                                )}
                                              >
                                                {"Mode de travail"}
                                              </div>
                                            </div>
                                          }
                                          popupScopeClassName={
                                            sty["select14__popup"]
                                          }
                                          showSearch={true}
                                          size={"large"}
                                          value={generateStateValueProp(
                                            $state,
                                            ["select14", "value"]
                                          )}
                                        />
                                      </FormItemWrapper>
                                      <FormItemWrapper
                                        className={classNames(
                                          "__wab_instance",
                                          sty.formField___7Yt9
                                        )}
                                        initialValue={(() => {
                                          try {
                                            return $ctx.query?.min_salary == ""
                                              ? undefined
                                              : $ctx.query?.min_salary?.split(
                                                  ","
                                                );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        label={"Name"}
                                        name={"salary"}
                                        noLabel={true}
                                      >
                                        <AntdSelect
                                          data-plasmic-name={"select12"}
                                          data-plasmic-override={
                                            overrides.select12
                                          }
                                          allowClear={true}
                                          autoFocus={false}
                                          bordered={false}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.select12
                                          )}
                                          defaultStylesClassName={classNames(
                                            projectcss.root_reset,
                                            projectcss.plasmic_default_styles,
                                            projectcss.plasmic_mixins,
                                            styleTokensClassNames,
                                            styleTokensClassNames_antd_5_hostless,
                                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                            styleTokensClassNames_plasmic_rich_components
                                          )}
                                          mode={"multiple"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "select12",
                                              "value"
                                            ]).apply(null, eventArgs);

                                            (async (value, option) => {
                                              const $steps = {};

                                              $steps["updateSalary"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: ["salary"]
                                                      },
                                                      operation: 0,
                                                      value:
                                                        $state.select12.value
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateSalary"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateSalary"
                                                ] === "object" &&
                                                typeof $steps["updateSalary"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateSalary"] =
                                                  await $steps["updateSalary"];
                                              }
                                            }).apply(null, eventArgs);
                                          }}
                                          optionClassName={classNames({
                                            [sty["pcls_VB9_52Vd-eHG"]]: true
                                          })}
                                          options={(() => {
                                            try {
                                              return $queries.getCriteria.data
                                                .filter(
                                                  item => item.type === "salary"
                                                )
                                                .map(item => ({
                                                  value: item.name,
                                                  label: item.name
                                                }));
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()}
                                          placeholder={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__mTgel
                                              )}
                                            >
                                              <PlasmicImg__
                                                alt={""}
                                                className={classNames(
                                                  sty.img__uL0Eg
                                                )}
                                                displayHeight={"18px"}
                                                displayMaxHeight={"none"}
                                                displayMaxWidth={"100%"}
                                                displayMinHeight={"0"}
                                                displayMinWidth={"0"}
                                                displayWidth={"18px"}
                                                loading={"lazy"}
                                                src={{
                                                  src: "/plasmic/jam_production_🚀/images/image5.svg",
                                                  fullWidth: 20,
                                                  fullHeight: 20,
                                                  aspectRatio: 1
                                                }}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__aa97T
                                                )}
                                              >
                                                {"Salaire"}
                                              </div>
                                            </div>
                                          }
                                          popupScopeClassName={
                                            sty["select12__popup"]
                                          }
                                          showSearch={true}
                                          size={"large"}
                                          useChildren={false}
                                          value={generateStateValueProp(
                                            $state,
                                            ["select12", "value"]
                                          )}
                                        />
                                      </FormItemWrapper>
                                      <Button
                                        data-plasmic-name={"button8"}
                                        data-plasmic-override={
                                          overrides.button8
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button8
                                        )}
                                        color={"white"}
                                        iconStart={true}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__oaHWz
                                            )}
                                          >
                                            {"CRITERES"}
                                          </div>
                                        }
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateModalIsOpen"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "modal",
                                                      "isOpen"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateModalIsOpen"] !=
                                              null &&
                                            typeof $steps[
                                              "updateModalIsOpen"
                                            ] === "object" &&
                                            typeof $steps["updateModalIsOpen"]
                                              .then === "function"
                                          ) {
                                            $steps["updateModalIsOpen"] =
                                              await $steps["updateModalIsOpen"];
                                          }

                                          $steps["updateFormFilter2Submited"] =
                                            true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "formFilter2Submited"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: false
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps[
                                              "updateFormFilter2Submited"
                                            ] != null &&
                                            typeof $steps[
                                              "updateFormFilter2Submited"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateFormFilter2Submited"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateFormFilter2Submited"
                                            ] = await $steps[
                                              "updateFormFilter2Submited"
                                            ];
                                          }
                                        }}
                                        size={"large"}
                                        start={
                                          <Vector18Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__sgWoa
                                            )}
                                            role={"img"}
                                          />
                                        }
                                      />

                                      <ClearBtn
                                        className={classNames(
                                          "__wab_instance",
                                          sty.clearBtn__clXUb
                                        )}
                                        color={"transparent"}
                                        iconStart={true}
                                        label={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qjv9
                                            )}
                                          >
                                            {"R\u00e9initialiser les filtres"}
                                          </div>
                                        }
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["runActionOnFormFilter"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  tplRef: "formFilter",
                                                  action: "resetFields"
                                                };
                                                return (({
                                                  tplRef,
                                                  action,
                                                  args
                                                }) => {
                                                  return $refs?.[tplRef]?.[
                                                    action
                                                  ]?.(...(args ?? []));
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runActionOnFormFilter"] !=
                                              null &&
                                            typeof $steps[
                                              "runActionOnFormFilter"
                                            ] === "object" &&
                                            typeof $steps[
                                              "runActionOnFormFilter"
                                            ].then === "function"
                                          ) {
                                            $steps["runActionOnFormFilter"] =
                                              await $steps[
                                                "runActionOnFormFilter"
                                              ];
                                          }

                                          $steps["updateFormFilter2Submited"] =
                                            true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "formFilter2Submited"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: false
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps[
                                              "updateFormFilter2Submited"
                                            ] != null &&
                                            typeof $steps[
                                              "updateFormFilter2Submited"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateFormFilter2Submited"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateFormFilter2Submited"
                                            ] = await $steps[
                                              "updateFormFilter2Submited"
                                            ];
                                          }

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      $state.input3.value = "";
                                                      $state.input4.value = "";
                                                      $state.keyWords = "";
                                                      return ($state.searchLocation =
                                                        "");
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }
                                        }}
                                        resetsForm={
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? true
                                            : true
                                        }
                                        start={
                                          <Vector19Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__tsTyC
                                            )}
                                            role={"img"}
                                          />
                                        }
                                      />

                                      {(() => {
                                        try {
                                          return Object.values(
                                            $state.formFilter.value
                                          ).some(
                                            val =>
                                              val !== "" && val !== undefined
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <button
                                          data-plasmic-name={"resetFormBtn"}
                                          data-plasmic-override={
                                            overrides.resetFormBtn
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.button,
                                            sty.resetFormBtn
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return (() => {
                                                          $state.input3.value =
                                                            "";
                                                          $state.input4.value =
                                                            "";
                                                          $state.keyWords = "";
                                                          return ($state.searchLocation =
                                                            "");
                                                        })();
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }

                                            $steps["runActionOnFormFilter"] =
                                              true
                                                ? (() => {
                                                    const actionArgs = {
                                                      tplRef: "formFilter",
                                                      action: "clearFields"
                                                    };
                                                    return (({
                                                      tplRef,
                                                      action,
                                                      args
                                                    }) => {
                                                      return $refs?.[tplRef]?.[
                                                        action
                                                      ]?.(...(args ?? []));
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                            if (
                                              $steps["runActionOnFormFilter"] !=
                                                null &&
                                              typeof $steps[
                                                "runActionOnFormFilter"
                                              ] === "object" &&
                                              typeof $steps[
                                                "runActionOnFormFilter"
                                              ].then === "function"
                                            ) {
                                              $steps["runActionOnFormFilter"] =
                                                await $steps[
                                                  "runActionOnFormFilter"
                                                ];
                                            }

                                            $steps[
                                              "updateFormFilter2Submited"
                                            ] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "formFilter2Submited"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value: false
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps[
                                                "updateFormFilter2Submited"
                                              ] != null &&
                                              typeof $steps[
                                                "updateFormFilter2Submited"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updateFormFilter2Submited"
                                              ].then === "function"
                                            ) {
                                              $steps[
                                                "updateFormFilter2Submited"
                                              ] = await $steps[
                                                "updateFormFilter2Submited"
                                              ];
                                            }
                                          }}
                                          ref={ref => {
                                            $refs["resetFormBtn"] = ref;
                                          }}
                                        >
                                          <Vector19Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__qSfLf
                                            )}
                                            role={"img"}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__lWfpt
                                            )}
                                          >
                                            {"R\u00e9initialiser les filtres"}
                                          </div>
                                        </button>
                                      ) : null}
                                    </div>
                                  </FormWrapper>
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__v56E6
                              )}
                            >
                              <div
                                data-plasmic-name={"mapJobs"}
                                data-plasmic-override={overrides.mapJobs}
                                className={classNames(
                                  projectcss.all,
                                  sty.mapJobs
                                )}
                              >
                                <div
                                  data-plasmic-name={"joblistandbtn"}
                                  data-plasmic-override={
                                    overrides.joblistandbtn
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.joblistandbtn
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"btn"}
                                    data-plasmic-override={overrides.btn}
                                    className={classNames(
                                      projectcss.all,
                                      sty.btn
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"postes"}
                                      data-plasmic-override={overrides.postes}
                                      className={classNames(
                                        projectcss.all,
                                        sty.postes
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateIsDiv1Visible2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "isDiv1Visible"
                                                  ]
                                                },
                                                operation: 4
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                const oldValue = $stateGet(
                                                  objRoot,
                                                  variablePath
                                                );
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  !oldValue
                                                );
                                                return !oldValue;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateIsDiv1Visible2"] !=
                                            null &&
                                          typeof $steps[
                                            "updateIsDiv1Visible2"
                                          ] === "object" &&
                                          typeof $steps["updateIsDiv1Visible2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateIsDiv1Visible2"] =
                                            await $steps[
                                              "updateIsDiv1Visible2"
                                            ];
                                        }

                                        $steps["updateMenuOnOff"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["menuOnOff"]
                                                },
                                                operation: 4
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                const oldValue = $stateGet(
                                                  objRoot,
                                                  variablePath
                                                );
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  !oldValue
                                                );
                                                return !oldValue;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateMenuOnOff"] != null &&
                                          typeof $steps["updateMenuOnOff"] ===
                                            "object" &&
                                          typeof $steps["updateMenuOnOff"]
                                            .then === "function"
                                        ) {
                                          $steps["updateMenuOnOff"] =
                                            await $steps["updateMenuOnOff"];
                                        }
                                      }}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lUpz4
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        ) ? (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  if (
                                                    $state.isDiv1Visible ==
                                                    false
                                                  ) {
                                                    return "Afficher la liste des résultats";
                                                  } else if (
                                                    $queries.jobOffers.data
                                                      .length === 0
                                                  ) {
                                                    return "Aucun resultat";
                                                  } else if (
                                                    $queries.jobOffers === 0 &&
                                                    $state.formFilter2Submited
                                                  ) {
                                                    return "Aucun resultat";
                                                  } else {
                                                    return "Masquer la liste des résultats";
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Afficher la liste des r\u00e9sultats";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        ) : (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  if (
                                                    $state.isDiv1Visible ==
                                                      false &&
                                                    $queries.jobOffers?.data
                                                      ?.length > 0
                                                  ) {
                                                    return "Afficher la liste des résultats";
                                                  } else if (
                                                    $queries.jobOffers.data
                                                      .length === 0
                                                  ) {
                                                    return "Aucun resultat";
                                                  } else {
                                                    return "Masquer la liste des résultats";
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Afficher la liste des r\u00e9sultats";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        )}
                                      </div>
                                      <div
                                        data-plasmic-name={"button4"}
                                        data-plasmic-override={
                                          overrides.button4
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.button4
                                        )}
                                      >
                                        {(
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? (() => {
                                                try {
                                                  return $state.isDiv1Visible;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            : (() => {
                                                try {
                                                  return !$state.menuOnOff;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                        ) ? (
                                          <div
                                            data-plasmic-name={"featuredIcon7"}
                                            data-plasmic-override={
                                              overrides.featuredIcon7
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.featuredIcon7
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["updateIsDiv1Visible"] =
                                                true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "isDiv1Visible"
                                                          ]
                                                        },
                                                        operation: 4
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        const oldValue =
                                                          $stateGet(
                                                            objRoot,
                                                            variablePath
                                                          );
                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          !oldValue
                                                        );
                                                        return !oldValue;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["updateIsDiv1Visible"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateIsDiv1Visible"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateIsDiv1Visible"
                                                ].then === "function"
                                              ) {
                                                $steps["updateIsDiv1Visible"] =
                                                  await $steps[
                                                    "updateIsDiv1Visible"
                                                  ];
                                              }

                                              $steps["updateMenuOnOff"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "menuOnOff"
                                                        ]
                                                      },
                                                      operation: 4
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      const oldValue =
                                                        $stateGet(
                                                          objRoot,
                                                          variablePath
                                                        );
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        !oldValue
                                                      );
                                                      return !oldValue;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateMenuOnOff"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateMenuOnOff"
                                                ] === "object" &&
                                                typeof $steps["updateMenuOnOff"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateMenuOnOff"] =
                                                  await $steps[
                                                    "updateMenuOnOff"
                                                  ];
                                              }
                                            }}
                                          >
                                            <Icon8Icon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__ndq9R
                                              )}
                                              role={"img"}
                                            />
                                          </div>
                                        ) : null}
                                        {(
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? (() => {
                                                try {
                                                  return !$state.isDiv1Visible;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            : (() => {
                                                try {
                                                  return $state.menuOnOff;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                        ) ? (
                                          <div
                                            data-plasmic-name={"featuredIcon8"}
                                            data-plasmic-override={
                                              overrides.featuredIcon8
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.featuredIcon8
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["updateIsDiv1Visible"] =
                                                true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "isDiv1Visible"
                                                          ]
                                                        },
                                                        operation: 4
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        const oldValue =
                                                          $stateGet(
                                                            objRoot,
                                                            variablePath
                                                          );
                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          !oldValue
                                                        );
                                                        return !oldValue;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["updateIsDiv1Visible"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateIsDiv1Visible"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateIsDiv1Visible"
                                                ].then === "function"
                                              ) {
                                                $steps["updateIsDiv1Visible"] =
                                                  await $steps[
                                                    "updateIsDiv1Visible"
                                                  ];
                                              }

                                              $steps["updateMenuOnOff"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "menuOnOff"
                                                        ]
                                                      },
                                                      operation: 4
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      const oldValue =
                                                        $stateGet(
                                                          objRoot,
                                                          variablePath
                                                        );
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        !oldValue
                                                      );
                                                      return !oldValue;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateMenuOnOff"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateMenuOnOff"
                                                ] === "object" &&
                                                typeof $steps["updateMenuOnOff"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateMenuOnOff"] =
                                                  await $steps[
                                                    "updateMenuOnOff"
                                                  ];
                                              }
                                            }}
                                          >
                                            <Icon8Icon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__mts9A
                                              )}
                                              role={"img"}
                                            />
                                          </div>
                                        ) : null}
                                      </div>
                                    </div>
                                  </div>
                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? (() => {
                                          try {
                                            return $state.isDiv1Visible;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })()
                                      : (() => {
                                          try {
                                            return $state.isDiv1Visible;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return false;
                                            }
                                            throw e;
                                          }
                                        })()
                                  ) ? (
                                    <div
                                      data-plasmic-name={"jobListContainer"}
                                      data-plasmic-override={
                                        overrides.jobListContainer
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.jobListContainer
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return !$queries.jobOffers.isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })()
                                        ? (_par =>
                                            !_par
                                              ? []
                                              : Array.isArray(_par)
                                              ? _par
                                              : [_par])(
                                            (() => {
                                              try {
                                                return $queries.jobOffers.data;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                          ).map(
                                            (
                                              __plasmic_item_0,
                                              __plasmic_idx_0
                                            ) => {
                                              const currentItem =
                                                __plasmic_item_0;
                                              const currentIndex =
                                                __plasmic_idx_0;
                                              return (
                                                <div
                                                  data-plasmic-name={
                                                    "jobsOnScroll"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.jobsOnScroll
                                                  }
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.jobsOnScroll
                                                  )}
                                                  key={currentIndex}
                                                  onClick={async event => {
                                                    const $steps = {};
                                                  }}
                                                >
                                                  {(() => {
                                                    try {
                                                      return (() => {
                                                        if (
                                                          !!$ctx.SupabaseUser
                                                            .user &&
                                                          $ctx.SupabaseUser.user
                                                            .user_metadata
                                                            .role === "Company"
                                                        ) {
                                                          return false;
                                                        } else {
                                                          return true;
                                                        }
                                                      })();
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return true;
                                                      }
                                                      throw e;
                                                    }
                                                  })() ? (
                                                    <div
                                                      data-plasmic-name={
                                                        "likeButtons"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.likeButtons
                                                      }
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.likeButtons
                                                      )}
                                                      onClick={async event => {
                                                        const $steps = {};

                                                        $steps["runCode"] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  customFunction:
                                                                    async () => {
                                                                      return event?.stopPropagation();
                                                                    }
                                                                };
                                                              return (({
                                                                customFunction
                                                              }) => {
                                                                return customFunction();
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps["runCode"] !=
                                                            null &&
                                                          typeof $steps[
                                                            "runCode"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "runCode"
                                                          ].then === "function"
                                                        ) {
                                                          $steps["runCode"] =
                                                            await $steps[
                                                              "runCode"
                                                            ];
                                                        }

                                                        $steps["errorMsg"] =
                                                          true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    variable: {
                                                                      objRoot:
                                                                        $state,
                                                                      variablePath:
                                                                        [
                                                                          "errorMsg"
                                                                        ]
                                                                    },
                                                                    operation: 0,
                                                                    value:
                                                                      $state
                                                                        .messages
                                                                        .favoris
                                                                  };
                                                                return (({
                                                                  variable,
                                                                  value,
                                                                  startIndex,
                                                                  deleteCount
                                                                }) => {
                                                                  if (
                                                                    !variable
                                                                  ) {
                                                                    return;
                                                                  }
                                                                  const {
                                                                    objRoot,
                                                                    variablePath
                                                                  } = variable;

                                                                  $stateSet(
                                                                    objRoot,
                                                                    variablePath,
                                                                    value
                                                                  );
                                                                  return value;
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                        if (
                                                          $steps["errorMsg"] !=
                                                            null &&
                                                          typeof $steps[
                                                            "errorMsg"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "errorMsg"
                                                          ].then === "function"
                                                        ) {
                                                          $steps["errorMsg"] =
                                                            await $steps[
                                                              "errorMsg"
                                                            ];
                                                        }

                                                        $steps[
                                                          "userNotLogged"
                                                        ] =
                                                          $ctx.SupabaseUser
                                                            ?.user?.id ===
                                                          undefined
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    variable: {
                                                                      objRoot:
                                                                        $state,
                                                                      variablePath:
                                                                        [
                                                                          "verifyUserAuth",
                                                                          "isOpen"
                                                                        ]
                                                                    },
                                                                    operation: 0,
                                                                    value: true
                                                                  };
                                                                return (({
                                                                  variable,
                                                                  value,
                                                                  startIndex,
                                                                  deleteCount
                                                                }) => {
                                                                  if (
                                                                    !variable
                                                                  ) {
                                                                    return;
                                                                  }
                                                                  const {
                                                                    objRoot,
                                                                    variablePath
                                                                  } = variable;

                                                                  $stateSet(
                                                                    objRoot,
                                                                    variablePath,
                                                                    value
                                                                  );
                                                                  return value;
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                        if (
                                                          $steps[
                                                            "userNotLogged"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "userNotLogged"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "userNotLogged"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "userNotLogged"
                                                          ] = await $steps[
                                                            "userNotLogged"
                                                          ];
                                                        }
                                                      }}
                                                    >
                                                      {(() => {
                                                        try {
                                                          return !$queries.userLikedJobs.data.some(
                                                            like =>
                                                              like.job_id ===
                                                              currentItem.id
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })() ? (
                                                        <HeartStraightStreamlinePhosphorSvgIcon
                                                          data-plasmic-name={
                                                            "like2"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.like2
                                                          }
                                                          className={classNames(
                                                            projectcss.all,
                                                            sty.like2
                                                          )}
                                                          onClick={async event => {
                                                            const $steps = {};

                                                            $steps["updateDb"] =
                                                              $ctx.SupabaseUser
                                                                ?.user?.id &&
                                                              !$queries.userLikedJobs.data.some(
                                                                like =>
                                                                  like.job_id ===
                                                                  currentItem.id
                                                              )
                                                                ? (() => {
                                                                    const actionArgs =
                                                                      {
                                                                        dataOp:
                                                                          {
                                                                            sourceId:
                                                                              "kVSSe8ab4TtzwRPnTeEeUp",
                                                                            opId: "82374051-9814-414c-909c-d23851067d30",
                                                                            userArgs:
                                                                              {
                                                                                variables:
                                                                                  [
                                                                                    currentItem.id,

                                                                                    !$state.couleurLike,

                                                                                    $ctx
                                                                                      .SupabaseUser
                                                                                      ?.user
                                                                                      ?.id
                                                                                  ]
                                                                              },
                                                                            cacheKey:
                                                                              null,
                                                                            invalidatedKeys:
                                                                              [],
                                                                            roleId:
                                                                              null
                                                                          }
                                                                      };
                                                                    return (async ({
                                                                      dataOp,
                                                                      continueOnError
                                                                    }) => {
                                                                      try {
                                                                        const response =
                                                                          await executePlasmicDataOp(
                                                                            dataOp,
                                                                            {
                                                                              userAuthToken:
                                                                                dataSourcesCtx?.userAuthToken,
                                                                              user: dataSourcesCtx?.user
                                                                            }
                                                                          );
                                                                        await plasmicInvalidate(
                                                                          dataOp.invalidatedKeys
                                                                        );
                                                                        return response;
                                                                      } catch (e) {
                                                                        if (
                                                                          !continueOnError
                                                                        ) {
                                                                          throw e;
                                                                        }
                                                                        return e;
                                                                      }
                                                                    })?.apply(
                                                                      null,
                                                                      [
                                                                        actionArgs
                                                                      ]
                                                                    );
                                                                  })()
                                                                : undefined;
                                                            if (
                                                              $steps[
                                                                "updateDb"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "updateDb"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "updateDb"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "updateDb"
                                                              ] = await $steps[
                                                                "updateDb"
                                                              ];
                                                            }

                                                            $steps[
                                                              "refreshData"
                                                            ] = true
                                                              ? (() => {
                                                                  const actionArgs =
                                                                    {
                                                                      queryInvalidation:
                                                                        [
                                                                          "a6f75235-f527-45c2-93df-15fcf84a6820",
                                                                          "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                                                          "8b5c082f-d99a-4dae-bab9-7c91407a4070"
                                                                        ]
                                                                    };
                                                                  return (async ({
                                                                    queryInvalidation
                                                                  }) => {
                                                                    if (
                                                                      !queryInvalidation
                                                                    ) {
                                                                      return;
                                                                    }
                                                                    await plasmicInvalidate(
                                                                      queryInvalidation
                                                                    );
                                                                  })?.apply(
                                                                    null,
                                                                    [actionArgs]
                                                                  );
                                                                })()
                                                              : undefined;
                                                            if (
                                                              $steps[
                                                                "refreshData"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "refreshData"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "refreshData"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "refreshData"
                                                              ] = await $steps[
                                                                "refreshData"
                                                              ];
                                                            }

                                                            $steps[
                                                              "showToast"
                                                            ] =
                                                              $ctx.SupabaseUser
                                                                ?.user?.id &&
                                                              !$queries.userLikedJobs.data.some(
                                                                like =>
                                                                  like.job_id ===
                                                                  currentItem.id
                                                              )
                                                                ? (() => {
                                                                    const actionArgs =
                                                                      {
                                                                        args: [
                                                                          "success",
                                                                          (() => {
                                                                            try {
                                                                              return `L'annonce "${currentItem.title}" a bien été ajoutée de vos favoris`;
                                                                            } catch (e) {
                                                                              if (
                                                                                e instanceof
                                                                                  TypeError ||
                                                                                e?.plasmicType ===
                                                                                  "PlasmicUndefinedDataError"
                                                                              ) {
                                                                                return undefined;
                                                                              }
                                                                              throw e;
                                                                            }
                                                                          })()
                                                                        ]
                                                                      };
                                                                    return $globalActions[
                                                                      "plasmic-antd5-config-provider.showNotification"
                                                                    ]?.apply(
                                                                      null,
                                                                      [
                                                                        ...actionArgs.args
                                                                      ]
                                                                    );
                                                                  })()
                                                                : undefined;
                                                            if (
                                                              $steps[
                                                                "showToast"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "showToast"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "showToast"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "showToast"
                                                              ] = await $steps[
                                                                "showToast"
                                                              ];
                                                            }

                                                            $steps[
                                                              "updateVerifyUserAuthIsOpen"
                                                            ] =
                                                              $ctx.SupabaseUser
                                                                ?.user?.id ==
                                                              undefined
                                                                ? (() => {
                                                                    const actionArgs =
                                                                      {
                                                                        variable:
                                                                          {
                                                                            objRoot:
                                                                              $state,
                                                                            variablePath:
                                                                              [
                                                                                "verifyUserAuth",
                                                                                "isOpen"
                                                                              ]
                                                                          },
                                                                        operation: 0,
                                                                        value:
                                                                          true
                                                                      };
                                                                    return (({
                                                                      variable,
                                                                      value,
                                                                      startIndex,
                                                                      deleteCount
                                                                    }) => {
                                                                      if (
                                                                        !variable
                                                                      ) {
                                                                        return;
                                                                      }
                                                                      const {
                                                                        objRoot,
                                                                        variablePath
                                                                      } =
                                                                        variable;

                                                                      $stateSet(
                                                                        objRoot,
                                                                        variablePath,
                                                                        value
                                                                      );
                                                                      return value;
                                                                    })?.apply(
                                                                      null,
                                                                      [
                                                                        actionArgs
                                                                      ]
                                                                    );
                                                                  })()
                                                                : undefined;
                                                            if (
                                                              $steps[
                                                                "updateVerifyUserAuthIsOpen"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "updateVerifyUserAuthIsOpen"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "updateVerifyUserAuthIsOpen"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "updateVerifyUserAuthIsOpen"
                                                              ] = await $steps[
                                                                "updateVerifyUserAuthIsOpen"
                                                              ];
                                                            }

                                                            $steps[
                                                              "updateErrorMsg"
                                                            ] = true
                                                              ? (() => {
                                                                  const actionArgs =
                                                                    {
                                                                      variable:
                                                                        {
                                                                          objRoot:
                                                                            $state,
                                                                          variablePath:
                                                                            [
                                                                              "errorMsg"
                                                                            ]
                                                                        },
                                                                      operation: 0,
                                                                      value:
                                                                        $state
                                                                          .messages
                                                                          .favoris
                                                                    };
                                                                  return (({
                                                                    variable,
                                                                    value,
                                                                    startIndex,
                                                                    deleteCount
                                                                  }) => {
                                                                    if (
                                                                      !variable
                                                                    ) {
                                                                      return;
                                                                    }
                                                                    const {
                                                                      objRoot,
                                                                      variablePath
                                                                    } =
                                                                      variable;

                                                                    $stateSet(
                                                                      objRoot,
                                                                      variablePath,
                                                                      value
                                                                    );
                                                                    return value;
                                                                  })?.apply(
                                                                    null,
                                                                    [actionArgs]
                                                                  );
                                                                })()
                                                              : undefined;
                                                            if (
                                                              $steps[
                                                                "updateErrorMsg"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "updateErrorMsg"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "updateErrorMsg"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "updateErrorMsg"
                                                              ] = await $steps[
                                                                "updateErrorMsg"
                                                              ];
                                                            }
                                                          }}
                                                          role={"img"}
                                                        />
                                                      ) : null}
                                                      {(() => {
                                                        try {
                                                          return $queries.userLikedJobs.data.some(
                                                            like =>
                                                              like.job_id ===
                                                              currentItem.id
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })() ? (
                                                        <HeartStraightIcon
                                                          data-plasmic-name={
                                                            "dislike"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dislike
                                                          }
                                                          className={classNames(
                                                            projectcss.all,
                                                            sty.dislike
                                                          )}
                                                          onClick={async event => {
                                                            const $steps = {};

                                                            $steps["updateDb"] =
                                                              $ctx.SupabaseUser
                                                                ?.user?.id &&
                                                              $queries.userLikedJobs.data.some(
                                                                like =>
                                                                  like.job_id ===
                                                                  currentItem.id
                                                              )
                                                                ? (() => {
                                                                    const actionArgs =
                                                                      {
                                                                        dataOp:
                                                                          {
                                                                            sourceId:
                                                                              "kVSSe8ab4TtzwRPnTeEeUp",
                                                                            opId: "21389a04-150f-4bd5-bdca-85fbbce35635",
                                                                            userArgs:
                                                                              {
                                                                                conditions:
                                                                                  [
                                                                                    currentItem.id
                                                                                  ]
                                                                              },
                                                                            cacheKey:
                                                                              null,
                                                                            invalidatedKeys:
                                                                              [],
                                                                            roleId:
                                                                              null
                                                                          }
                                                                      };
                                                                    return (async ({
                                                                      dataOp,
                                                                      continueOnError
                                                                    }) => {
                                                                      try {
                                                                        const response =
                                                                          await executePlasmicDataOp(
                                                                            dataOp,
                                                                            {
                                                                              userAuthToken:
                                                                                dataSourcesCtx?.userAuthToken,
                                                                              user: dataSourcesCtx?.user
                                                                            }
                                                                          );
                                                                        await plasmicInvalidate(
                                                                          dataOp.invalidatedKeys
                                                                        );
                                                                        return response;
                                                                      } catch (e) {
                                                                        if (
                                                                          !continueOnError
                                                                        ) {
                                                                          throw e;
                                                                        }
                                                                        return e;
                                                                      }
                                                                    })?.apply(
                                                                      null,
                                                                      [
                                                                        actionArgs
                                                                      ]
                                                                    );
                                                                  })()
                                                                : undefined;
                                                            if (
                                                              $steps[
                                                                "updateDb"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "updateDb"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "updateDb"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "updateDb"
                                                              ] = await $steps[
                                                                "updateDb"
                                                              ];
                                                            }

                                                            $steps[
                                                              "refreshData"
                                                            ] = true
                                                              ? (() => {
                                                                  const actionArgs =
                                                                    {
                                                                      queryInvalidation:
                                                                        [
                                                                          "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                                                          "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                                                          "a6f75235-f527-45c2-93df-15fcf84a6820"
                                                                        ]
                                                                    };
                                                                  return (async ({
                                                                    queryInvalidation
                                                                  }) => {
                                                                    if (
                                                                      !queryInvalidation
                                                                    ) {
                                                                      return;
                                                                    }
                                                                    await plasmicInvalidate(
                                                                      queryInvalidation
                                                                    );
                                                                  })?.apply(
                                                                    null,
                                                                    [actionArgs]
                                                                  );
                                                                })()
                                                              : undefined;
                                                            if (
                                                              $steps[
                                                                "refreshData"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "refreshData"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "refreshData"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "refreshData"
                                                              ] = await $steps[
                                                                "refreshData"
                                                              ];
                                                            }

                                                            $steps[
                                                              "showToast"
                                                            ] = true
                                                              ? (() => {
                                                                  const actionArgs =
                                                                    {
                                                                      args: [
                                                                        "success",
                                                                        (() => {
                                                                          try {
                                                                            return `L'annonce "${currentItem.title}" a bien été retirée de vos favoris`;
                                                                          } catch (e) {
                                                                            if (
                                                                              e instanceof
                                                                                TypeError ||
                                                                              e?.plasmicType ===
                                                                                "PlasmicUndefinedDataError"
                                                                            ) {
                                                                              return undefined;
                                                                            }
                                                                            throw e;
                                                                          }
                                                                        })()
                                                                      ]
                                                                    };
                                                                  return $globalActions[
                                                                    "plasmic-antd5-config-provider.showNotification"
                                                                  ]?.apply(
                                                                    null,
                                                                    [
                                                                      ...actionArgs.args
                                                                    ]
                                                                  );
                                                                })()
                                                              : undefined;
                                                            if (
                                                              $steps[
                                                                "showToast"
                                                              ] != null &&
                                                              typeof $steps[
                                                                "showToast"
                                                              ] === "object" &&
                                                              typeof $steps[
                                                                "showToast"
                                                              ].then ===
                                                                "function"
                                                            ) {
                                                              $steps[
                                                                "showToast"
                                                              ] = await $steps[
                                                                "showToast"
                                                              ];
                                                            }
                                                          }}
                                                          role={"img"}
                                                        />
                                                      ) : null}
                                                    </div>
                                                  ) : null}
                                                  {(() => {
                                                    const child$Props = {
                                                      availability:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "availability"
                                                          ]
                                                        ),
                                                      campany:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "campany"
                                                          ]
                                                        ),
                                                      city: generateStateValueProp(
                                                        $state,
                                                        [
                                                          "jobCard20",
                                                          __plasmic_idx_0,
                                                          "city"
                                                        ]
                                                      ),
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.jobCard20
                                                      ),
                                                      companyLogo:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "companyLogo"
                                                          ]
                                                        ),
                                                      contractType:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "contractType"
                                                          ]
                                                        ),
                                                      isApplied:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "isApplied"
                                                          ]
                                                        ),
                                                      isLastMinute:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "isLastMinute"
                                                          ]
                                                        ),
                                                      isNew:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "isNew"
                                                          ]
                                                        ),
                                                      name: generateStateValueProp(
                                                        $state,
                                                        [
                                                          "jobCard20",
                                                          __plasmic_idx_0,
                                                          "name"
                                                        ]
                                                      ),
                                                      onAvailabilityChange:
                                                        async (
                                                          ...eventArgs: any
                                                        ) => {
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "jobCard20",
                                                              __plasmic_idx_0,
                                                              "availability"
                                                            ]
                                                          ).apply(
                                                            null,
                                                            eventArgs
                                                          );

                                                          if (
                                                            eventArgs.length >
                                                              1 &&
                                                            eventArgs[1] &&
                                                            eventArgs[1]
                                                              ._plasmic_state_init_
                                                          ) {
                                                            return;
                                                          }
                                                        },
                                                      onCampanyChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "campany"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );

                                                        if (
                                                          eventArgs.length >
                                                            1 &&
                                                          eventArgs[1] &&
                                                          eventArgs[1]
                                                            ._plasmic_state_init_
                                                        ) {
                                                          return;
                                                        }
                                                      },
                                                      onCityChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "city"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );

                                                        if (
                                                          eventArgs.length >
                                                            1 &&
                                                          eventArgs[1] &&
                                                          eventArgs[1]
                                                            ._plasmic_state_init_
                                                        ) {
                                                          return;
                                                        }
                                                      },
                                                      onClick: async event => {
                                                        const $steps = {};

                                                        $steps[
                                                          "updateJobObject"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "jobObject"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value:
                                                                    currentItem
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateJobObject"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateJobObject"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateJobObject"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateJobObject"
                                                          ] = await $steps[
                                                            "updateJobObject"
                                                          ];
                                                        }

                                                        $steps[
                                                          "updateJobDetailsIsOpen"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "jobDetails",
                                                                        "isOpen"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value: true
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateJobDetailsIsOpen"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateJobDetailsIsOpen"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateJobDetailsIsOpen"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateJobDetailsIsOpen"
                                                          ] = await $steps[
                                                            "updateJobDetailsIsOpen"
                                                          ];
                                                        }

                                                        $steps[
                                                          "updateJobCoordinates"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "gpsCoordinates"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value: {
                                                                    latitude:
                                                                      currentItem.latitude,
                                                                    longitude:
                                                                      currentItem.longitude
                                                                  }
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateJobCoordinates"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateJobCoordinates"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateJobCoordinates"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateJobCoordinates"
                                                          ] = await $steps[
                                                            "updateJobCoordinates"
                                                          ];
                                                        }
                                                      },
                                                      onCompanyLogoChange:
                                                        async (
                                                          ...eventArgs: any
                                                        ) => {
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "jobCard20",
                                                              __plasmic_idx_0,
                                                              "companyLogo"
                                                            ]
                                                          ).apply(
                                                            null,
                                                            eventArgs
                                                          );

                                                          if (
                                                            eventArgs.length >
                                                              1 &&
                                                            eventArgs[1] &&
                                                            eventArgs[1]
                                                              ._plasmic_state_init_
                                                          ) {
                                                            return;
                                                          }
                                                        },
                                                      onContractTypeChange:
                                                        async (
                                                          ...eventArgs: any
                                                        ) => {
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "jobCard20",
                                                              __plasmic_idx_0,
                                                              "contractType"
                                                            ]
                                                          ).apply(
                                                            null,
                                                            eventArgs
                                                          );

                                                          if (
                                                            eventArgs.length >
                                                              1 &&
                                                            eventArgs[1] &&
                                                            eventArgs[1]
                                                              ._plasmic_state_init_
                                                          ) {
                                                            return;
                                                          }
                                                        },
                                                      onIsAppliedChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "isApplied"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );

                                                        if (
                                                          eventArgs.length >
                                                            1 &&
                                                          eventArgs[1] &&
                                                          eventArgs[1]
                                                            ._plasmic_state_init_
                                                        ) {
                                                          return;
                                                        }
                                                      },
                                                      onIsLastMinuteChange:
                                                        async (
                                                          ...eventArgs: any
                                                        ) => {
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "jobCard20",
                                                              __plasmic_idx_0,
                                                              "isLastMinute"
                                                            ]
                                                          ).apply(
                                                            null,
                                                            eventArgs
                                                          );

                                                          if (
                                                            eventArgs.length >
                                                              1 &&
                                                            eventArgs[1] &&
                                                            eventArgs[1]
                                                              ._plasmic_state_init_
                                                          ) {
                                                            return;
                                                          }
                                                        },
                                                      onIsNewChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "isNew"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );

                                                        if (
                                                          eventArgs.length >
                                                            1 &&
                                                          eventArgs[1] &&
                                                          eventArgs[1]
                                                            ._plasmic_state_init_
                                                        ) {
                                                          return;
                                                        }
                                                      },
                                                      onNameChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "name"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );

                                                        if (
                                                          eventArgs.length >
                                                            1 &&
                                                          eventArgs[1] &&
                                                          eventArgs[1]
                                                            ._plasmic_state_init_
                                                        ) {
                                                          return;
                                                        }
                                                      },
                                                      onSalaryChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "salary"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );

                                                        if (
                                                          eventArgs.length >
                                                            1 &&
                                                          eventArgs[1] &&
                                                          eventArgs[1]
                                                            ._plasmic_state_init_
                                                        ) {
                                                          return;
                                                        }
                                                      },
                                                      onSectorChange2: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "sector"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );

                                                        if (
                                                          eventArgs.length >
                                                            1 &&
                                                          eventArgs[1] &&
                                                          eventArgs[1]
                                                            ._plasmic_state_init_
                                                        ) {
                                                          return;
                                                        }
                                                      },
                                                      onWorkModeChange: async (
                                                        ...eventArgs: any
                                                      ) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "workMode"
                                                          ]
                                                        ).apply(
                                                          null,
                                                          eventArgs
                                                        );

                                                        if (
                                                          eventArgs.length >
                                                            1 &&
                                                          eventArgs[1] &&
                                                          eventArgs[1]
                                                            ._plasmic_state_init_
                                                        ) {
                                                          return;
                                                        }
                                                      },
                                                      onWorkingTimeChange:
                                                        async (
                                                          ...eventArgs: any
                                                        ) => {
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "jobCard20",
                                                              __plasmic_idx_0,
                                                              "workingTime"
                                                            ]
                                                          ).apply(
                                                            null,
                                                            eventArgs
                                                          );

                                                          if (
                                                            eventArgs.length >
                                                              1 &&
                                                            eventArgs[1] &&
                                                            eventArgs[1]
                                                              ._plasmic_state_init_
                                                          ) {
                                                            return;
                                                          }
                                                        },
                                                      salary:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "salary"
                                                          ]
                                                        ),
                                                      sector:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "sector"
                                                          ]
                                                        ),
                                                      showCompanyLogo: false,
                                                      workMode:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "workMode"
                                                          ]
                                                        ),
                                                      workingTime:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "jobCard20",
                                                            __plasmic_idx_0,
                                                            "workingTime"
                                                          ]
                                                        )
                                                    };

                                                    initializePlasmicStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "jobCard20[].name",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.title;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].city",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return (
                                                                  currentItem.location +
                                                                  " (" +
                                                                  currentItem.postal_code.slice(
                                                                    0,
                                                                    2
                                                                  ) +
                                                                  ")"
                                                                );
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].campany",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.company_name;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].sector",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.sector_activity;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].contractType",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.contract_type;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].availability",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.availability_status;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].workingTime",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.working_time;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].salary",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.salary;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].workMode",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.work_mode;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].companyLogo",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.logo_file;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].isLastMinute",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return currentItem.is_last_minute;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return false;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].isNew",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return (
                                                                  new Date(
                                                                    currentItem.created_at
                                                                  ).toDateString() ===
                                                                  new Date().toDateString()
                                                                );
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return false;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        },
                                                        {
                                                          name: "jobCard20[].isApplied",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) =>
                                                            (() => {
                                                              try {
                                                                return (() => {
                                                                  return $queries.getApplication.data.some(
                                                                    application =>
                                                                      application.job_id ===
                                                                      currentItem.id
                                                                  );
                                                                })();
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return false;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                        }
                                                      ],
                                                      [__plasmic_idx_0]
                                                    );
                                                    return (
                                                      <JobCard20
                                                        data-plasmic-name={
                                                          "jobCard20"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.jobCard20
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()}
                                                </div>
                                              );
                                            }
                                          )
                                        : null}
                                      {(() => {
                                        try {
                                          return $queries.jobOffers.isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <LoadingComponent
                                          data-plasmic-name={"loadingComponent"}
                                          data-plasmic-override={
                                            overrides.loadingComponent
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.loadingComponent
                                          )}
                                        />
                                      ) : null}
                                    </div>
                                  ) : null}
                                </div>
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : false
                                ) ? (
                                  <div
                                    data-plasmic-name={"filtersMobile"}
                                    data-plasmic-override={
                                      overrides.filtersMobile
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.filtersMobile
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.formFilter3
                                        ),
                                        extendedOnValuesChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["formFilter3", "value"],
                                            FormWrapper_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        formItems: [
                                          {
                                            label: "Name",
                                            name: "name",
                                            inputType: "Text"
                                          },
                                          {
                                            label: "Message",
                                            name: "message",
                                            inputType: "Text Area"
                                          }
                                        ],
                                        labelCol: {
                                          span: 8,
                                          horizontalOnly: true
                                        },
                                        layout: "vertical",
                                        mode: "advanced",
                                        onIsSubmittingChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "isSubmitting",
                                            ["formFilter3", "isSubmitting"],
                                            FormWrapper_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        ref: ref => {
                                          $refs["formFilter3"] = ref;
                                        },
                                        submitSlot: null,
                                        wrapperCol: {
                                          span: 16,
                                          horizontalOnly: true
                                        }
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName:
                                              "formFilter3.value"
                                          },
                                          {
                                            name: "isSubmitting",
                                            plasmicStateName:
                                              "formFilter3.isSubmitting"
                                          }
                                        ],
                                        [],
                                        FormWrapper_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <FormWrapper
                                          data-plasmic-name={"formFilter3"}
                                          data-plasmic-override={
                                            overrides.formFilter3
                                          }
                                          {...child$Props}
                                        >
                                          <div
                                            data-plasmic-name={"wrapContent3"}
                                            data-plasmic-override={
                                              overrides.wrapContent3
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.wrapContent3
                                            )}
                                          >
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__uSodu
                                              )}
                                              initialValue={""}
                                              label={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__ns6G
                                                  )}
                                                >
                                                  {"Label"}
                                                </div>
                                              }
                                              name={"key_words"}
                                              noLabel={true}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__sBeLu
                                                )}
                                              >
                                                {(() => {
                                                  const child$Props = {
                                                    allowClear: true,
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.input7
                                                    ),
                                                    onChange: async (
                                                      ...eventArgs: any
                                                    ) => {
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        ["input7", "value"],
                                                        AntdInput_Helpers
                                                      ).apply(null, eventArgs);

                                                      (async event => {
                                                        const $steps = {};

                                                        $steps[
                                                          "updateKeyWords"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "keyWords"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value:
                                                                    $state
                                                                      .input7
                                                                      .value
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateKeyWords"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateKeyWords"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateKeyWords"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateKeyWords"
                                                          ] = await $steps[
                                                            "updateKeyWords"
                                                          ];
                                                        }
                                                      }).apply(null, eventArgs);
                                                    },
                                                    placeholder:
                                                      "Mot-cl\u00e9, job, entreprise",
                                                    prefix: (
                                                      <PlasmicImg__
                                                        alt={""}
                                                        className={classNames(
                                                          sty.img__dLUb8
                                                        )}
                                                        displayHeight={"20px"}
                                                        displayMaxHeight={
                                                          "none"
                                                        }
                                                        displayMaxWidth={"none"}
                                                        displayMinHeight={"0"}
                                                        displayMinWidth={"0"}
                                                        displayWidth={"20px"}
                                                        loading={"lazy"}
                                                        src={{
                                                          src: "/plasmic/jam_production_🚀/images/image10.svg",
                                                          fullWidth: 21,
                                                          fullHeight: 20,
                                                          aspectRatio: 1.05
                                                        }}
                                                      />
                                                    ),

                                                    size: "large",
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        ["input7", "value"]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "input7.value"
                                                      }
                                                    ],
                                                    [],
                                                    AntdInput_Helpers ?? {},
                                                    child$Props
                                                  );
                                                  initializePlasmicStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "input7.value",
                                                        initFunc: ({
                                                          $props,
                                                          $state,
                                                          $queries
                                                        }) =>
                                                          (() => {
                                                            try {
                                                              return (
                                                                $ctx.query
                                                                  .name || ""
                                                              );
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return undefined;
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                      }
                                                    ],
                                                    []
                                                  );
                                                  return (
                                                    <AntdInput
                                                      data-plasmic-name={
                                                        "input7"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.input7
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                              </div>
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__e188D
                                              )}
                                              initialValue={""}
                                              label={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__mjjJt
                                                  )}
                                                >
                                                  {"Label"}
                                                </div>
                                              }
                                              name={"location"}
                                              noLabel={true}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__nIavD
                                                )}
                                              >
                                                {(() => {
                                                  const child$Props = {
                                                    allowClear: true,
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.input8
                                                    ),
                                                    onChange: async (
                                                      ...eventArgs: any
                                                    ) => {
                                                      generateStateOnChangePropForCodeComponents(
                                                        $state,
                                                        "value",
                                                        ["input8", "value"],
                                                        AntdInput_Helpers
                                                      ).apply(null, eventArgs);

                                                      (async event => {
                                                        const $steps = {};

                                                        $steps[
                                                          "updateSearchLocation"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  variable: {
                                                                    objRoot:
                                                                      $state,
                                                                    variablePath:
                                                                      [
                                                                        "searchLocation"
                                                                      ]
                                                                  },
                                                                  operation: 0,
                                                                  value:
                                                                    $state
                                                                      .input8
                                                                      .value
                                                                };
                                                              return (({
                                                                variable,
                                                                value,
                                                                startIndex,
                                                                deleteCount
                                                              }) => {
                                                                if (!variable) {
                                                                  return;
                                                                }
                                                                const {
                                                                  objRoot,
                                                                  variablePath
                                                                } = variable;

                                                                $stateSet(
                                                                  objRoot,
                                                                  variablePath,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "updateSearchLocation"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "updateSearchLocation"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "updateSearchLocation"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "updateSearchLocation"
                                                          ] = await $steps[
                                                            "updateSearchLocation"
                                                          ];
                                                        }
                                                      }).apply(null, eventArgs);
                                                    },
                                                    placeholder: "Localisation",
                                                    prefix: (
                                                      <PlasmicImg__
                                                        alt={""}
                                                        className={classNames(
                                                          sty.img__refgq
                                                        )}
                                                        displayHeight={"18px"}
                                                        displayMaxHeight={
                                                          "none"
                                                        }
                                                        displayMaxWidth={"100%"}
                                                        displayMinHeight={"0"}
                                                        displayMinWidth={"0"}
                                                        displayWidth={"18px"}
                                                        loading={"lazy"}
                                                        src={{
                                                          src: "/plasmic/jam_production_🚀/images/locationPinSvgrepoComSvg.svg",
                                                          fullWidth: 800,
                                                          fullHeight: 800,
                                                          aspectRatio: undefined
                                                        }}
                                                      />
                                                    ),

                                                    size: "large",
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        ["input8", "value"]
                                                      )
                                                  };
                                                  initializeCodeComponentStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "value",
                                                        plasmicStateName:
                                                          "input8.value"
                                                      }
                                                    ],
                                                    [],
                                                    AntdInput_Helpers ?? {},
                                                    child$Props
                                                  );
                                                  initializePlasmicStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "input8.value",
                                                        initFunc: ({
                                                          $props,
                                                          $state,
                                                          $queries
                                                        }) =>
                                                          (() => {
                                                            try {
                                                              return (
                                                                $ctx.query
                                                                  .city || ""
                                                              );
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return undefined;
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                      }
                                                    ],
                                                    []
                                                  );
                                                  return (
                                                    <AntdInput
                                                      data-plasmic-name={
                                                        "input8"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.input8
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()}
                                              </div>
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField___6Xah6
                                              )}
                                              label={"Name"}
                                              name={"sector_activity"}
                                              noLabel={true}
                                            >
                                              <AntdSelect
                                                data-plasmic-name={"select22"}
                                                data-plasmic-override={
                                                  overrides.select22
                                                }
                                                allowClear={true}
                                                autoFocus={false}
                                                bordered={false}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.select22
                                                )}
                                                defaultStylesClassName={classNames(
                                                  projectcss.root_reset,
                                                  projectcss.plasmic_default_styles,
                                                  projectcss.plasmic_mixins,
                                                  styleTokensClassNames,
                                                  styleTokensClassNames_antd_5_hostless,
                                                  styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                                  styleTokensClassNames_plasmic_rich_components
                                                )}
                                                dropdownMatchSelectWidth={true}
                                                mode={"single"}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["select22", "value"]
                                                  ).apply(null, eventArgs);
                                                }}
                                                optionClassName={classNames({
                                                  [sty["pcls_MaADHDWmW8BZ"]]:
                                                    true
                                                })}
                                                options={(() => {
                                                  try {
                                                    return $queries.getCriteria.data
                                                      .filter(
                                                        item =>
                                                          item.type ===
                                                          "sector_activity"
                                                      )
                                                      .map(item => ({
                                                        value: item.name,
                                                        label: item.name
                                                      }));
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                placeholder={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__csD2K
                                                    )}
                                                  >
                                                    <PlasmicImg__
                                                      alt={""}
                                                      className={classNames(
                                                        sty.img__w8HOm
                                                      )}
                                                      displayHeight={"18px"}
                                                      displayMaxHeight={"none"}
                                                      displayMaxWidth={"100%"}
                                                      displayMinHeight={"0"}
                                                      displayMinWidth={"0"}
                                                      displayWidth={"18px"}
                                                      loading={"lazy"}
                                                      src={{
                                                        src: "/plasmic/jam_production_🚀/images/image2.svg",
                                                        fullWidth: 20,
                                                        fullHeight: 20,
                                                        aspectRatio: 1
                                                      }}
                                                    />

                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__mzf0
                                                      )}
                                                    >
                                                      {
                                                        "Secteur d'activit\u00e9"
                                                      }
                                                    </div>
                                                  </div>
                                                }
                                                popupScopeClassName={
                                                  sty["select22__popup"]
                                                }
                                                showSearch={true}
                                                size={"large"}
                                                useChildren={false}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["select22", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__hsJdM
                                              )}
                                              label={"Name"}
                                              name={"availability_status"}
                                              noLabel={true}
                                              preserve={false}
                                            >
                                              <AntdSelect
                                                data-plasmic-name={"select11"}
                                                data-plasmic-override={
                                                  overrides.select11
                                                }
                                                allowClear={true}
                                                bordered={false}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.select11
                                                )}
                                                defaultStylesClassName={classNames(
                                                  projectcss.root_reset,
                                                  projectcss.plasmic_default_styles,
                                                  projectcss.plasmic_mixins,
                                                  styleTokensClassNames,
                                                  styleTokensClassNames_antd_5_hostless,
                                                  styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                                  styleTokensClassNames_plasmic_rich_components
                                                )}
                                                mode={"multiple"}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["select11", "value"]
                                                  ).apply(null, eventArgs);
                                                }}
                                                optionClassName={classNames({
                                                  [sty["pcls_DR9zV_P4kC7B"]]:
                                                    true
                                                })}
                                                options={(() => {
                                                  try {
                                                    return $queries.getCriteria.data
                                                      .filter(
                                                        item =>
                                                          item.type ===
                                                          "availability_status"
                                                      )
                                                      .map(item => ({
                                                        value: item.name,
                                                        label: item.name
                                                      }));
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                placeholder={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__gcvMp
                                                    )}
                                                  >
                                                    <PlasmicImg__
                                                      alt={""}
                                                      className={classNames(
                                                        sty.img__m1Rtt
                                                      )}
                                                      displayHeight={"18px"}
                                                      displayMaxHeight={"none"}
                                                      displayMaxWidth={"100%"}
                                                      displayMinHeight={"0"}
                                                      displayMinWidth={"0"}
                                                      displayWidth={"18px"}
                                                      loading={"lazy"}
                                                      src={{
                                                        src: "/plasmic/jam_production_🚀/images/image3.svg",
                                                        fullWidth: 20,
                                                        fullHeight: 20,
                                                        aspectRatio: 1
                                                      }}
                                                    />

                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__qLzy0
                                                      )}
                                                    >
                                                      {"Disponibilit\u00e9"}
                                                    </div>
                                                  </div>
                                                }
                                                popupScopeClassName={
                                                  sty["select11__popup"]
                                                }
                                                showSearch={true}
                                                size={"large"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["select11", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField___8FJoB
                                              )}
                                              hidden={false}
                                              initialValue={(() => {
                                                try {
                                                  return $ctx.query
                                                    ?.contract_types == ""
                                                    ? undefined
                                                    : $ctx.query?.contract_types?.split(
                                                        ","
                                                      );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              label={"Name"}
                                              name={"contract_type"}
                                              noLabel={true}
                                              preserve={false}
                                              shouldUpdate={false}
                                            >
                                              <AntdSelect
                                                data-plasmic-name={"select23"}
                                                data-plasmic-override={
                                                  overrides.select23
                                                }
                                                allowClear={true}
                                                bordered={false}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.select23
                                                )}
                                                defaultStylesClassName={classNames(
                                                  projectcss.root_reset,
                                                  projectcss.plasmic_default_styles,
                                                  projectcss.plasmic_mixins,
                                                  styleTokensClassNames,
                                                  styleTokensClassNames_antd_5_hostless,
                                                  styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                                  styleTokensClassNames_plasmic_rich_components
                                                )}
                                                dropdownMatchSelectWidth={false}
                                                mode={"multiple"}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["select23", "value"]
                                                  ).apply(null, eventArgs);
                                                }}
                                                optionClassName={classNames({
                                                  [sty["pcls_VrCgV0PlZ2Hd"]]:
                                                    true
                                                })}
                                                options={(() => {
                                                  try {
                                                    return $queries.getCriteria.data
                                                      .filter(
                                                        item =>
                                                          item.type ===
                                                          "contract_type"
                                                      )
                                                      .map(item => ({
                                                        value: item.name,
                                                        label: item.name
                                                      }));
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                placeholder={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__byr95
                                                    )}
                                                  >
                                                    <PlasmicImg__
                                                      alt={""}
                                                      className={classNames(
                                                        sty.img__skFuh
                                                      )}
                                                      displayHeight={"18px"}
                                                      displayMaxHeight={"none"}
                                                      displayMaxWidth={"100%"}
                                                      displayMinHeight={"0"}
                                                      displayMinWidth={"0"}
                                                      displayWidth={"18px"}
                                                      loading={"lazy"}
                                                      src={{
                                                        src: "/plasmic/jam_production_🚀/images/image7.svg",
                                                        fullWidth: 20,
                                                        fullHeight: 20,
                                                        aspectRatio: 1
                                                      }}
                                                    />

                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text___9XsPk
                                                      )}
                                                    >
                                                      {"Type de contrat"}
                                                    </div>
                                                  </div>
                                                }
                                                popupScopeClassName={
                                                  sty["select23__popup"]
                                                }
                                                showSearch={true}
                                                size={"large"}
                                                suffixIcon={null}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["select23", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__bIhx
                                              )}
                                              initialValue={(() => {
                                                try {
                                                  return $ctx.query
                                                    ?.work_times == ""
                                                    ? undefined
                                                    : $ctx.query?.work_times?.split(
                                                        ","
                                                      );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              label={"Name"}
                                              name={"working_time"}
                                              noLabel={true}
                                            >
                                              <AntdSelect
                                                data-plasmic-name={"select24"}
                                                data-plasmic-override={
                                                  overrides.select24
                                                }
                                                allowClear={true}
                                                bordered={false}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.select24
                                                )}
                                                defaultOpen={false}
                                                defaultStylesClassName={classNames(
                                                  projectcss.root_reset,
                                                  projectcss.plasmic_default_styles,
                                                  projectcss.plasmic_mixins,
                                                  styleTokensClassNames,
                                                  styleTokensClassNames_antd_5_hostless,
                                                  styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                                  styleTokensClassNames_plasmic_rich_components
                                                )}
                                                mode={"multiple"}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["select24", "value"]
                                                  ).apply(null, eventArgs);
                                                }}
                                                optionClassName={classNames({
                                                  [sty["pcls_W8wioOuI_jEe"]]:
                                                    true
                                                })}
                                                options={(() => {
                                                  try {
                                                    return $queries.getCriteria.data
                                                      .filter(
                                                        item =>
                                                          item.type ===
                                                          "working_time"
                                                      )
                                                      .map(item => ({
                                                        value: item.name,
                                                        label: item.name
                                                      }));
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                placeholder={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__dz7S9
                                                    )}
                                                  >
                                                    <Vector22Icon
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.svg___7T9Qh
                                                      )}
                                                      role={"img"}
                                                    />

                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__mhcPf
                                                      )}
                                                    >
                                                      {"Temps de travail"}
                                                    </div>
                                                  </div>
                                                }
                                                popupScopeClassName={
                                                  sty["select24__popup"]
                                                }
                                                showSearch={true}
                                                size={"large"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["select24", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField__n5NnI
                                              )}
                                              label={"Name"}
                                              name={"work_mode"}
                                              noLabel={true}
                                            >
                                              <AntdSelect
                                                data-plasmic-name={"select25"}
                                                data-plasmic-override={
                                                  overrides.select25
                                                }
                                                allowClear={true}
                                                autoFocus={false}
                                                bordered={false}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.select25
                                                )}
                                                defaultStylesClassName={classNames(
                                                  projectcss.root_reset,
                                                  projectcss.plasmic_default_styles,
                                                  projectcss.plasmic_mixins,
                                                  styleTokensClassNames,
                                                  styleTokensClassNames_antd_5_hostless,
                                                  styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                                  styleTokensClassNames_plasmic_rich_components
                                                )}
                                                mode={"multiple"}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["select25", "value"]
                                                  ).apply(null, eventArgs);
                                                }}
                                                optionClassName={classNames({
                                                  [sty["pcls_ptEdEpoLsJe-"]]:
                                                    true
                                                })}
                                                options={(() => {
                                                  try {
                                                    return $queries.getCriteria.data
                                                      .filter(
                                                        item =>
                                                          item.type ===
                                                          "work_mode"
                                                      )
                                                      .map(item => ({
                                                        value: item.name,
                                                        label: item.name
                                                      }));
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                placeholder={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__dkJW
                                                    )}
                                                  >
                                                    <PlasmicImg__
                                                      alt={""}
                                                      className={classNames(
                                                        sty.img__eiVg8
                                                      )}
                                                      displayHeight={"18px"}
                                                      displayMaxHeight={"none"}
                                                      displayMaxWidth={"100%"}
                                                      displayMinHeight={"0"}
                                                      displayMinWidth={"0"}
                                                      displayWidth={"18px"}
                                                      loading={"lazy"}
                                                      src={{
                                                        src: "/plasmic/jam_production_🚀/images/image6.svg",
                                                        fullWidth: 20,
                                                        fullHeight: 20,
                                                        aspectRatio: 1
                                                      }}
                                                    />

                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text___3J32
                                                      )}
                                                    >
                                                      {"Mode de travail"}
                                                    </div>
                                                  </div>
                                                }
                                                popupScopeClassName={
                                                  sty["select25__popup"]
                                                }
                                                showSearch={true}
                                                size={"large"}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["select25", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <FormItemWrapper
                                              className={classNames(
                                                "__wab_instance",
                                                sty.formField___8Obfq
                                              )}
                                              initialValue={(() => {
                                                try {
                                                  return $ctx.query
                                                    ?.min_salary == ""
                                                    ? undefined
                                                    : $ctx.query?.min_salary?.split(
                                                        ","
                                                      );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              label={"Name"}
                                              name={"salary"}
                                              noLabel={true}
                                            >
                                              <AntdSelect
                                                data-plasmic-name={"select26"}
                                                data-plasmic-override={
                                                  overrides.select26
                                                }
                                                allowClear={true}
                                                autoFocus={false}
                                                bordered={false}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.select26
                                                )}
                                                defaultStylesClassName={classNames(
                                                  projectcss.root_reset,
                                                  projectcss.plasmic_default_styles,
                                                  projectcss.plasmic_mixins,
                                                  styleTokensClassNames,
                                                  styleTokensClassNames_antd_5_hostless,
                                                  styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                                  styleTokensClassNames_plasmic_rich_components
                                                )}
                                                mode={"multiple"}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["select26", "value"]
                                                  ).apply(null, eventArgs);

                                                  (async (value, option) => {
                                                    const $steps = {};

                                                    $steps["updateSalary"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "salary"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value:
                                                                $state.select26
                                                                  .value
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["updateSalary"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "updateSalary"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateSalary"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["updateSalary"] =
                                                        await $steps[
                                                          "updateSalary"
                                                        ];
                                                    }
                                                  }).apply(null, eventArgs);
                                                }}
                                                optionClassName={classNames({
                                                  [sty["pcls_VqilFIq1a5U3"]]:
                                                    true
                                                })}
                                                options={(() => {
                                                  try {
                                                    return $queries.getCriteria.data
                                                      .filter(
                                                        item =>
                                                          item.type === "salary"
                                                      )
                                                      .map(item => ({
                                                        value: item.name,
                                                        label: item.name
                                                      }));
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return [];
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                placeholder={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__viYop
                                                    )}
                                                  >
                                                    <PlasmicImg__
                                                      alt={""}
                                                      className={classNames(
                                                        sty.img__xImp8
                                                      )}
                                                      displayHeight={"18px"}
                                                      displayMaxHeight={"none"}
                                                      displayMaxWidth={"100%"}
                                                      displayMinHeight={"0"}
                                                      displayMinWidth={"0"}
                                                      displayWidth={"18px"}
                                                      loading={"lazy"}
                                                      src={{
                                                        src: "/plasmic/jam_production_🚀/images/image5.svg",
                                                        fullWidth: 20,
                                                        fullHeight: 20,
                                                        aspectRatio: 1
                                                      }}
                                                    />

                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__lcRpz
                                                      )}
                                                    >
                                                      {"Salaire"}
                                                    </div>
                                                  </div>
                                                }
                                                popupScopeClassName={
                                                  sty["select26__popup"]
                                                }
                                                showSearch={true}
                                                size={"large"}
                                                useChildren={false}
                                                value={generateStateValueProp(
                                                  $state,
                                                  ["select26", "value"]
                                                )}
                                              />
                                            </FormItemWrapper>
                                            <Button
                                              data-plasmic-name={"button9"}
                                              data-plasmic-override={
                                                overrides.button9
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button9
                                              )}
                                              color={"white"}
                                              iconStart={true}
                                              label={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___8BIjB
                                                  )}
                                                >
                                                  {"CRITERES"}
                                                </div>
                                              }
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateModalIsOpen"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "modal",
                                                              "isOpen"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: true
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateModalIsOpen"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateModalIsOpen"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateModalIsOpen"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateModalIsOpen"] =
                                                    await $steps[
                                                      "updateModalIsOpen"
                                                    ];
                                                }

                                                $steps[
                                                  "updateFormFilter2Submited"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "formFilter2Submited"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: false
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateFormFilter2Submited"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateFormFilter2Submited"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateFormFilter2Submited"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateFormFilter2Submited"
                                                  ] = await $steps[
                                                    "updateFormFilter2Submited"
                                                  ];
                                                }
                                              }}
                                              size={"large"}
                                              start={
                                                <Vector18Icon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg___6L2Zq
                                                  )}
                                                  role={"img"}
                                                />
                                              }
                                            />

                                            <ClearBtn
                                              className={classNames(
                                                "__wab_instance",
                                                sty.clearBtn__wfAg0
                                              )}
                                              color={"transparent"}
                                              iconStart={true}
                                              label={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___2XlTz
                                                  )}
                                                >
                                                  {
                                                    "R\u00e9initialiser les filtres"
                                                  }
                                                </div>
                                              }
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps[
                                                  "runActionOnFormFilter"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        tplRef: "formFilter",
                                                        action: "resetFields"
                                                      };
                                                      return (({
                                                        tplRef,
                                                        action,
                                                        args
                                                      }) => {
                                                        return $refs?.[
                                                          tplRef
                                                        ]?.[action]?.(
                                                          ...(args ?? [])
                                                        );
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "runActionOnFormFilter"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "runActionOnFormFilter"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "runActionOnFormFilter"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "runActionOnFormFilter"
                                                  ] = await $steps[
                                                    "runActionOnFormFilter"
                                                  ];
                                                }

                                                $steps[
                                                  "updateFormFilter2Submited"
                                                ] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "formFilter2Submited"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: false
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps[
                                                    "updateFormFilter2Submited"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateFormFilter2Submited"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateFormFilter2Submited"
                                                  ].then === "function"
                                                ) {
                                                  $steps[
                                                    "updateFormFilter2Submited"
                                                  ] = await $steps[
                                                    "updateFormFilter2Submited"
                                                  ];
                                                }

                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return (() => {
                                                              $state.input7.value =
                                                                "";
                                                              $state.input8.value =
                                                                "";
                                                              $state.keyWords =
                                                                "";
                                                              return ($state.searchLocation =
                                                                "");
                                                            })();
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                              }}
                                              resetsForm={
                                                hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? true
                                                  : true
                                              }
                                              start={
                                                <Vector19Icon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__jdgJi
                                                  )}
                                                  role={"img"}
                                                />
                                              }
                                            />

                                            {(() => {
                                              try {
                                                return Object.values(
                                                  $state.formFilter3.value
                                                ).some(
                                                  val =>
                                                    val !== "" &&
                                                    val !== undefined
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <button
                                                data-plasmic-name={
                                                  "resetFormBtn2"
                                                }
                                                data-plasmic-override={
                                                  overrides.resetFormBtn2
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.button,
                                                  sty.resetFormBtn2
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["runCode"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return (() => {
                                                                $state.input7.value =
                                                                  "";
                                                                $state.input8.value =
                                                                  "";
                                                                $state.keyWords =
                                                                  "";
                                                                return ($state.searchLocation =
                                                                  "");
                                                              })();
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["runCode"] != null &&
                                                    typeof $steps["runCode"] ===
                                                      "object" &&
                                                    typeof $steps["runCode"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode"] =
                                                      await $steps["runCode"];
                                                  }

                                                  $steps[
                                                    "runActionOnFormFilter"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          tplRef: "formFilter",
                                                          action: "clearFields"
                                                        };
                                                        return (({
                                                          tplRef,
                                                          action,
                                                          args
                                                        }) => {
                                                          return $refs?.[
                                                            tplRef
                                                          ]?.[action]?.(
                                                            ...(args ?? [])
                                                          );
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "runActionOnFormFilter"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "runActionOnFormFilter"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "runActionOnFormFilter"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "runActionOnFormFilter"
                                                    ] = await $steps[
                                                      "runActionOnFormFilter"
                                                    ];
                                                  }

                                                  $steps[
                                                    "updateFormFilter2Submited"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "formFilter2Submited"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: false
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateFormFilter2Submited"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateFormFilter2Submited"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateFormFilter2Submited"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateFormFilter2Submited"
                                                    ] = await $steps[
                                                      "updateFormFilter2Submited"
                                                    ];
                                                  }
                                                }}
                                                ref={ref => {
                                                  $refs["resetFormBtn2"] = ref;
                                                }}
                                              >
                                                <Vector19Icon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__wfJu
                                                  )}
                                                  role={"img"}
                                                />

                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___4U3V
                                                  )}
                                                >
                                                  {
                                                    "R\u00e9initialiser les filtres"
                                                  }
                                                </div>
                                              </button>
                                            ) : null}
                                          </div>
                                        </FormWrapper>
                                      );
                                    })()}
                                  </div>
                                ) : null}
                                <div
                                  data-plasmic-name={"lastMinuteBtn"}
                                  data-plasmic-override={
                                    overrides.lastMinuteBtn
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.lastMinuteBtn
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return $state.isLastMinute == false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <button
                                      data-plasmic-name={"buttonLastMin2"}
                                      data-plasmic-override={
                                        overrides.buttonLastMin2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.button,
                                        sty.buttonLastMin2
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateIsLastMinute"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["isLastMinute"]
                                                },
                                                operation: 4
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                const oldValue = $stateGet(
                                                  objRoot,
                                                  variablePath
                                                );
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  !oldValue
                                                );
                                                return !oldValue;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateIsLastMinute"] !=
                                            null &&
                                          typeof $steps[
                                            "updateIsLastMinute"
                                          ] === "object" &&
                                          typeof $steps["updateIsLastMinute"]
                                            .then === "function"
                                        ) {
                                          $steps["updateIsLastMinute"] =
                                            await $steps["updateIsLastMinute"];
                                        }
                                      }}
                                      ref={ref => {
                                        $refs["buttonLastMin2"] = ref;
                                      }}
                                    >
                                      <PhClockCountdownFill3Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___6TKkr
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        data-plasmic-name={"text7"}
                                        data-plasmic-override={overrides.text7}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text7
                                        )}
                                      >
                                        {"LAST MINUTE"}
                                      </div>
                                    </button>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return $state.isLastMinute === true;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <button
                                      data-plasmic-name={"buttonLastMin3"}
                                      data-plasmic-override={
                                        overrides.buttonLastMin3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.button,
                                        sty.buttonLastMin3
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateIsLastMinute"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["isLastMinute"]
                                                },
                                                operation: 4
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                const oldValue = $stateGet(
                                                  objRoot,
                                                  variablePath
                                                );
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  !oldValue
                                                );
                                                return !oldValue;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateIsLastMinute"] !=
                                            null &&
                                          typeof $steps[
                                            "updateIsLastMinute"
                                          ] === "object" &&
                                          typeof $steps["updateIsLastMinute"]
                                            .then === "function"
                                        ) {
                                          $steps["updateIsLastMinute"] =
                                            await $steps["updateIsLastMinute"];
                                        }
                                      }}
                                      ref={ref => {
                                        $refs["buttonLastMin3"] = ref;
                                      }}
                                    >
                                      <PhClockCountdownFill3Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__numZh
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        data-plasmic-name={"text8"}
                                        data-plasmic-override={overrides.text8}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text8
                                        )}
                                      >
                                        {"LAST MINUTE"}
                                      </div>
                                    </button>
                                  ) : null}
                                </div>
                                <div
                                  data-plasmic-name={"mapboxContainer"}
                                  data-plasmic-override={
                                    overrides.mapboxContainer
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.mapboxContainer
                                  )}
                                >
                                  <MapBox
                                    data-plasmic-name={"mapBox"}
                                    data-plasmic-override={overrides.mapBox}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.mapBox
                                    )}
                                    latitude={(() => {
                                      try {
                                        return $state.gpsCoordinates.latitude;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 48.8575;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    longitude={(() => {
                                      try {
                                        return $state.gpsCoordinates.longitude;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 2.3514;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    mapStyle={
                                      "mapbox://styles/scroll/cm6gi9ljw003t01s36b0jfl80"
                                    }
                                    markers={(() => {
                                      try {
                                        return (() => {
                                          const jobOffers =
                                            $queries.jobOffers.data ?? [];
                                          const applications =
                                            $queries.getApplication.data ?? [];
                                          const userLikes =
                                            $queries.userLikedJobs.data ?? [];
                                          const appliedJobIds = new Set(
                                            applications.map(app => app.job_id)
                                          );
                                          const likedJobIds = new Set(
                                            userLikes.map(like => like.job_id)
                                          );
                                          const enrichedJobOffers =
                                            jobOffers.map(offer => ({
                                              ...offer,
                                              is_applied: appliedJobIds.has(
                                                offer.id
                                              ),
                                              is_liked: likedJobIds.has(
                                                offer.id
                                              )
                                            }));
                                          return enrichedJobOffers;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    onPopupClick={async markerData => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return ($state.jobObject =
                                                  markerData);
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }

                                      $steps["updateJobDetailsIsOpen"] =
                                        $state.jobObject &&
                                        Object.keys($state.jobObject).length > 0
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "jobDetails",
                                                    "isOpen"
                                                  ]
                                                },
                                                operation: 4,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                const oldValue = $stateGet(
                                                  objRoot,
                                                  variablePath
                                                );
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  !oldValue
                                                );
                                                return !oldValue;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateJobDetailsIsOpen"] !=
                                          null &&
                                        typeof $steps[
                                          "updateJobDetailsIsOpen"
                                        ] === "object" &&
                                        typeof $steps["updateJobDetailsIsOpen"]
                                          .then === "function"
                                      ) {
                                        $steps["updateJobDetailsIsOpen"] =
                                          await $steps[
                                            "updateJobDetailsIsOpen"
                                          ];
                                      }
                                    }}
                                    searchAddress={(() => {
                                      try {
                                        return $state.searchLocation;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    showLogoInPopup={true}
                                    zoom={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? 12
                                        : 15
                                    }
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </section>
                    <section
                      data-plasmic-name={"section2"}
                      data-plasmic-override={overrides.section2}
                      className={classNames(projectcss.all, sty.section2)}
                    >
                      <header
                        data-plasmic-name={"headingAndSupportingText2"}
                        data-plasmic-override={
                          overrides.headingAndSupportingText2
                        }
                        className={classNames(
                          projectcss.all,
                          sty.headingAndSupportingText2
                        )}
                      >
                        <div
                          data-plasmic-name={"badgeGroup3"}
                          data-plasmic-override={overrides.badgeGroup3}
                          className={classNames(
                            projectcss.all,
                            sty.badgeGroup3
                          )}
                        >
                          <div
                            data-plasmic-name={"content8"}
                            data-plasmic-override={overrides.content8}
                            className={classNames(projectcss.all, sty.content8)}
                          >
                            <div
                              data-plasmic-name={"message3"}
                              data-plasmic-override={overrides.message3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.message3
                              )}
                            >
                              {"Notre solution"}
                            </div>
                          </div>
                        </div>
                        <h2
                          data-plasmic-name={"heading2"}
                          data-plasmic-override={overrides.heading2}
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.heading2
                          )}
                        >
                          {"Pourquoi chercher sur Job Around Me\u00a0?"}
                        </h2>
                        <p
                          data-plasmic-name={"supportingText5"}
                          data-plasmic-override={overrides.supportingText5}
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.supportingText5
                          )}
                        >
                          {
                            "Trouvez un job pr\u00e8s de chez vous, facilement et rapidement !"
                          }
                        </p>
                        <p
                          data-plasmic-name={"supportingText9"}
                          data-plasmic-override={overrides.supportingText9}
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.supportingText9
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "Parce qu\u2019on est les seuls \u00e0 se sp\u00e9cialiser dans les jobs de derni\u00e8re minute sous forme de g\u00e9olocalisation, vous trouvez un job pr\u00e8s de chez vous, sans perdre de temps dans les transports.\nJob Around Me\u00a0connecte instantan\u00e9ment les employeurs en urgence avec des personnes motiv\u00e9es et disponibles tout de suite.\nDes opportunit\u00e9s express, mais aussi des jobs \u00e0 long terme.\n"
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-XkcIRFBUIQDs)" }}
                            >
                              {"Ce\u00a0qui nous diff\u00e9rencie ?"}
                            </span>
                            <React.Fragment>
                              {
                                " Le bon plan de derni\u00e8re minute, l\u00e0 o\u00f9 vous \u00eates"
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </p>
                      </header>
                      <article
                        data-plasmic-name={"section"}
                        data-plasmic-override={overrides.section}
                        className={classNames(projectcss.all, sty.section)}
                      >
                        <SectionCard
                          data-plasmic-name={"sectionCard"}
                          data-plasmic-override={overrides.sectionCard}
                          className={classNames(
                            "__wab_instance",
                            sty.sectionCard
                          )}
                          description={generateStateValueProp($state, [
                            "sectionCard",
                            "description"
                          ])}
                          icon={generateStateValueProp($state, [
                            "sectionCard",
                            "icon"
                          ])}
                          onDescriptionChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard",
                              "description"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onIconChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard",
                              "icon"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTitleChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard",
                              "title"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          title={generateStateValueProp($state, [
                            "sectionCard",
                            "title"
                          ])}
                        />

                        <SectionCard
                          data-plasmic-name={"sectionCard2"}
                          data-plasmic-override={overrides.sectionCard2}
                          className={classNames(
                            "__wab_instance",
                            sty.sectionCard2
                          )}
                          description={generateStateValueProp($state, [
                            "sectionCard2",
                            "description"
                          ])}
                          icon={generateStateValueProp($state, [
                            "sectionCard2",
                            "icon"
                          ])}
                          onDescriptionChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard2",
                              "description"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onIconChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard2",
                              "icon"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTitleChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard2",
                              "title"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          title={generateStateValueProp($state, [
                            "sectionCard2",
                            "title"
                          ])}
                        />

                        <SectionCard
                          data-plasmic-name={"sectionCard3"}
                          data-plasmic-override={overrides.sectionCard3}
                          className={classNames(
                            "__wab_instance",
                            sty.sectionCard3
                          )}
                          description={generateStateValueProp($state, [
                            "sectionCard3",
                            "description"
                          ])}
                          icon={generateStateValueProp($state, [
                            "sectionCard3",
                            "icon"
                          ])}
                          onDescriptionChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard3",
                              "description"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onIconChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard3",
                              "icon"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTitleChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sectionCard3",
                              "title"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          title={generateStateValueProp($state, [
                            "sectionCard3",
                            "title"
                          ])}
                        />
                      </article>
                    </section>
                  </main>
                  <Modal
                    data-plasmic-name={"verifyUserAuth"}
                    data-plasmic-override={overrides.verifyUserAuth}
                    className={classNames("__wab_instance", sty.verifyUserAuth)}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0N4QT
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oj5Wl
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.errorMsg;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Veuillez vous connecter pour pouvoir postuler \u00e0 cette offre.";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__vLswu
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__scp8E
                              )}
                              role={"img"}
                            />
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wZ8F1
                              )}
                            >
                              {"JE M'INSCRIS"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToConnexion"] = true
                              ? (() => {
                                  const actionArgs = { destination: `/login` };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToConnexion"] != null &&
                              typeof $steps["goToConnexion"] === "object" &&
                              typeof $steps["goToConnexion"].then === "function"
                            ) {
                              $steps["goToConnexion"] = await $steps[
                                "goToConnexion"
                              ];
                            }
                          }}
                        />
                      </div>
                    }
                    footer={null}
                    heading={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ohC5T
                          )}
                        >
                          <XIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ewiG3
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateVerifyUserAuthIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "verifyUserAuth",
                                          "isOpen"
                                        ]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateVerifyUserAuthIsOpen"] != null &&
                                typeof $steps["updateVerifyUserAuthIsOpen"] ===
                                  "object" &&
                                typeof $steps["updateVerifyUserAuthIsOpen"]
                                  .then === "function"
                              ) {
                                $steps["updateVerifyUserAuthIsOpen"] =
                                  await $steps["updateVerifyUserAuthIsOpen"];
                              }
                            }}
                            role={"img"}
                          />
                        </div>
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__lGrux
                          )}
                        >
                          {"Connexion requise"}
                        </h3>
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__zrtCd
                          )}
                        >
                          {
                            "Pour postuler \u00e0 cette offre d'emploi, veuillez vous cr\u00e9er un compte"
                          }
                        </h3>
                      </React.Fragment>
                    }
                    isOpen={generateStateValueProp($state, [
                      "verifyUserAuth",
                      "isOpen"
                    ])}
                    noTrigger={true}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "verifyUserAuth",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showFooter={false}
                    showHeader={true}
                  />

                  <Modal
                    data-plasmic-name={"jobDetails"}
                    data-plasmic-override={overrides.jobDetails}
                    className={classNames("__wab_instance", sty.jobDetails)}
                    closeOnBackdropClick={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : true
                    }
                    content={
                      <div
                        data-plasmic-name={"jobListing"}
                        data-plasmic-override={overrides.jobListing}
                        className={classNames(projectcss.all, sty.jobListing)}
                      >
                        <div
                          data-plasmic-name={"jobDetail"}
                          data-plasmic-override={overrides.jobDetail}
                          className={classNames(projectcss.all, sty.jobDetail)}
                        >
                          <div
                            data-plasmic-name={"frame38"}
                            data-plasmic-override={overrides.frame38}
                            className={classNames(projectcss.all, sty.frame38)}
                          >
                            <div
                              data-plasmic-name={"jobName"}
                              data-plasmic-override={overrides.jobName}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.jobName
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.jobObject.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Assistant designer graphique";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : (() => {
                                    try {
                                      return (() => {
                                        if (
                                          !!$ctx.SupabaseUser.user &&
                                          $ctx.SupabaseUser.user.user_metadata
                                            .role === "Company"
                                        ) {
                                          return false;
                                        } else {
                                          return true;
                                        }
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            ) ? (
                              <div
                                data-plasmic-name={"likeBtn"}
                                data-plasmic-override={overrides.likeBtn}
                                className={classNames(
                                  projectcss.all,
                                  sty.likeBtn
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["errorMsg"] =
                                    $ctx.SupabaseUser?.user?.id === undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["errorMsg"]
                                            },
                                            operation: 0,
                                            value: $state.messages.favoris
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["errorMsg"] != null &&
                                    typeof $steps["errorMsg"] === "object" &&
                                    typeof $steps["errorMsg"].then ===
                                      "function"
                                  ) {
                                    $steps["errorMsg"] = await $steps[
                                      "errorMsg"
                                    ];
                                  }

                                  $steps["closeModal"] =
                                    $ctx.SupabaseUser?.user?.id === undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "jobDetails",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["closeModal"] != null &&
                                    typeof $steps["closeModal"] === "object" &&
                                    typeof $steps["closeModal"].then ===
                                      "function"
                                  ) {
                                    $steps["closeModal"] = await $steps[
                                      "closeModal"
                                    ];
                                  }

                                  $steps["userNotLogged"] =
                                    $ctx.SupabaseUser?.user?.id === undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "verifyUserAuth",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["userNotLogged"] != null &&
                                    typeof $steps["userNotLogged"] ===
                                      "object" &&
                                    typeof $steps["userNotLogged"].then ===
                                      "function"
                                  ) {
                                    $steps["userNotLogged"] = await $steps[
                                      "userNotLogged"
                                    ];
                                  }
                                }}
                              >
                                {(() => {
                                  try {
                                    return !$queries.userLikedJobs.data.some(
                                      like =>
                                        like.job_id === $state.jobObject.id
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <LikeIconIcon
                                    data-plasmic-name={"like"}
                                    data-plasmic-override={overrides.like}
                                    className={classNames(
                                      projectcss.all,
                                      sty.like
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["postgresUpdateMany"] =
                                        $ctx.SupabaseUser?.user?.id !=
                                          undefined &&
                                        !$queries.userLikedJobs.data.some(
                                          like =>
                                            like.job_id === $state.jobObject.id
                                        )
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "kVSSe8ab4TtzwRPnTeEeUp",
                                                  opId: "9227d6f1-2755-4824-9d71-68d2b8ad2fa6",
                                                  userArgs: {
                                                    variables: [
                                                      !$state.couleurLike,

                                                      $ctx.SupabaseUser?.user
                                                        ?.id,

                                                      $state.jobObject?.id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                                    "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                                    "a6f75235-f527-45c2-93df-15fcf84a6820"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["postgresUpdateMany"] != null &&
                                        typeof $steps["postgresUpdateMany"] ===
                                          "object" &&
                                        typeof $steps["postgresUpdateMany"]
                                          .then === "function"
                                      ) {
                                        $steps["postgresUpdateMany"] =
                                          await $steps["postgresUpdateMany"];
                                      }

                                      $steps["invokeGlobalAction"] =
                                        $ctx.SupabaseUser?.user?.id !=
                                          undefined &&
                                        !$queries.userLikedJobs.data.some(
                                          like =>
                                            like.job_id === $state.jobObject.id
                                        )
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "success",
                                                  (() => {
                                                    try {
                                                      return "l'annonce ${$state.jobObject.title} a bien été ajoutée à vos favoris";
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "plasmic-antd5-config-provider.showNotification"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["invokeGlobalAction"] != null &&
                                        typeof $steps["invokeGlobalAction"] ===
                                          "object" &&
                                        typeof $steps["invokeGlobalAction"]
                                          .then === "function"
                                      ) {
                                        $steps["invokeGlobalAction"] =
                                          await $steps["invokeGlobalAction"];
                                      }

                                      $steps["updateVerifyUserAuthIsOpen"] =
                                        $ctx.SupabaseUser?.user?.id == undefined
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "verifyUserAuth",
                                                    "isOpen"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateVerifyUserAuthIsOpen"] !=
                                          null &&
                                        typeof $steps[
                                          "updateVerifyUserAuthIsOpen"
                                        ] === "object" &&
                                        typeof $steps[
                                          "updateVerifyUserAuthIsOpen"
                                        ].then === "function"
                                      ) {
                                        $steps["updateVerifyUserAuthIsOpen"] =
                                          await $steps[
                                            "updateVerifyUserAuthIsOpen"
                                          ];
                                      }

                                      $steps["updateErrorMsg"] =
                                        $ctx.SupabaseUser?.user?.id == undefined
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["errorMsg"]
                                                },
                                                operation: 0,
                                                value: $state.messages.favoris
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateErrorMsg"] != null &&
                                        typeof $steps["updateErrorMsg"] ===
                                          "object" &&
                                        typeof $steps["updateErrorMsg"].then ===
                                          "function"
                                      ) {
                                        $steps["updateErrorMsg"] = await $steps[
                                          "updateErrorMsg"
                                        ];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                ) : null}
                                {(() => {
                                  try {
                                    return $queries.userLikedJobs.data.some(
                                      like =>
                                        like.job_id === $state.jobObject.id
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <HeartStraightIcon
                                    data-plasmic-name={"dislike3"}
                                    data-plasmic-override={overrides.dislike3}
                                    className={classNames(
                                      projectcss.all,
                                      sty.dislike3
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["postgresUpdateMany"] =
                                        $queries.userLikedJobs.data.some(
                                          like =>
                                            like.job_id === $state.jobObject.id
                                        )
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "kVSSe8ab4TtzwRPnTeEeUp",
                                                  opId: "21389a04-150f-4bd5-bdca-85fbbce35635",
                                                  userArgs: {
                                                    conditions: [
                                                      $state.jobObject.id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                                    "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                                    "a6f75235-f527-45c2-93df-15fcf84a6820"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["postgresUpdateMany"] != null &&
                                        typeof $steps["postgresUpdateMany"] ===
                                          "object" &&
                                        typeof $steps["postgresUpdateMany"]
                                          .then === "function"
                                      ) {
                                        $steps["postgresUpdateMany"] =
                                          await $steps["postgresUpdateMany"];
                                      }

                                      $steps["invokeGlobalAction"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "success",
                                                (() => {
                                                  try {
                                                    return "l'annonce ${$state.jobObject.title} a bien été retirée à vos favoris";
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["invokeGlobalAction"] != null &&
                                        typeof $steps["invokeGlobalAction"] ===
                                          "object" &&
                                        typeof $steps["invokeGlobalAction"]
                                          .then === "function"
                                      ) {
                                        $steps["invokeGlobalAction"] =
                                          await $steps["invokeGlobalAction"];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                            ) : null}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__quAxx
                            )}
                          >
                            <div
                              data-plasmic-name={"location"}
                              data-plasmic-override={overrides.location}
                              className={classNames(
                                projectcss.all,
                                sty.location
                              )}
                            >
                              <PhMapPin2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ii0So
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rWxGh
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return `${
                                        $state.jobObject.location
                                      } (${$state.jobObject.company_postal_code.substring(
                                        0,
                                        2
                                      )})`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Paris (75)";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"publicationDate"}
                              data-plasmic-override={overrides.publicationDate}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.publicationDate
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "Publié le " +
                                      new Date(
                                        $state.jobObject.created_at
                                      ).toLocaleDateString("fr-FR")
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Publi\u00e9 le 18/12/2023";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"frame46"}
                            data-plasmic-override={overrides.frame46}
                            className={classNames(projectcss.all, sty.frame46)}
                          >
                            <div
                              data-plasmic-name={"frame47"}
                              data-plasmic-override={overrides.frame47}
                              className={classNames(
                                projectcss.all,
                                sty.frame47
                              )}
                            >
                              <div
                                data-plasmic-name={"frame48"}
                                data-plasmic-override={overrides.frame48}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame48
                                )}
                              >
                                <PhFileTextIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__puRmk
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"dkTrucksPark"}
                                  data-plasmic-override={overrides.dkTrucksPark}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.dkTrucksPark
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.jobObject.contract_type;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "CDI";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"frame49"}
                                data-plasmic-override={overrides.frame49}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame49
                                )}
                              >
                                <PhClockIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__aiXq7
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"dkTrucksPark2"}
                                  data-plasmic-override={
                                    overrides.dkTrucksPark2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.dkTrucksPark2
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.jobObject.working_time;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "25h";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"frame50"}
                                data-plasmic-override={overrides.frame50}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame50
                                )}
                              >
                                <PhCoinsLightIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ig7W
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"dkTrucksPark3"}
                                  data-plasmic-override={
                                    overrides.dkTrucksPark3
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.dkTrucksPark3
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.jobObject.salary;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "2000\u20ac";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"frame51"}
                                data-plasmic-override={overrides.frame51}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame51
                                )}
                              >
                                <PhClockCountdownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__jEyBi
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"dkTrucksPark4"}
                                  data-plasmic-override={
                                    overrides.dkTrucksPark4
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.dkTrucksPark4
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.jobObject
                                          .availability_status;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Imm\u00e9diat";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? (() => {
                                    try {
                                      return (() => {
                                        if (
                                          !!$ctx.SupabaseUser.user &&
                                          $ctx.SupabaseUser.user.user_metadata
                                            .role === "Company"
                                        ) {
                                          return false;
                                        } else {
                                          return $queries.getApplication.data.some(
                                            application =>
                                              application.job_id ==
                                              $state.jobObject.id
                                          )
                                            ? false
                                            : true;
                                        }
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()
                                : (() => {
                                    try {
                                      return (() => {
                                        if (
                                          !!$ctx.SupabaseUser.user &&
                                          $ctx.SupabaseUser.user.user_metadata
                                            .role === "Company"
                                        ) {
                                          return false;
                                        } else {
                                          return $queries.getApplication.data.some(
                                            application =>
                                              application.job_id ==
                                              $state.jobObject.id
                                          )
                                            ? false
                                            : true;
                                        }
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            ) ? (
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__yJeC
                                )}
                                end={
                                  <GroupIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__dzbTy
                                    )}
                                    role={"img"}
                                  />
                                }
                                iconEnd={true}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cNwVu
                                    )}
                                  >
                                    {"postuler"}
                                  </div>
                                }
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateMessage2"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["messages"]
                                          },
                                          operation: 0,
                                          value:
                                            "Veuillez vous connecter pour pouvoir postuler à cette offre."
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateMessage2"] != null &&
                                    typeof $steps["updateMessage2"] ===
                                      "object" &&
                                    typeof $steps["updateMessage2"].then ===
                                      "function"
                                  ) {
                                    $steps["updateMessage2"] = await $steps[
                                      "updateMessage2"
                                    ];
                                  }

                                  $steps["updateVerifyUserAuthIsOpen"] =
                                    $ctx.SupabaseUser?.user?.id == undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "verifyUserAuth",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateVerifyUserAuthIsOpen"] !=
                                      null &&
                                    typeof $steps[
                                      "updateVerifyUserAuthIsOpen"
                                    ] === "object" &&
                                    typeof $steps["updateVerifyUserAuthIsOpen"]
                                      .then === "function"
                                  ) {
                                    $steps["updateVerifyUserAuthIsOpen"] =
                                      await $steps[
                                        "updateVerifyUserAuthIsOpen"
                                      ];
                                  }

                                  $steps["runCode"] = $ctx.SupabaseUser?.user
                                    ?.id
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return ($state.signUpApplication.isOpen =
                                              true);
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["updateDetailsDeLoffreIsOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "jobDetails",
                                              "isOpen"
                                            ]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateDetailsDeLoffreIsOpen"] !=
                                      null &&
                                    typeof $steps[
                                      "updateDetailsDeLoffreIsOpen"
                                    ] === "object" &&
                                    typeof $steps["updateDetailsDeLoffreIsOpen"]
                                      .then === "function"
                                  ) {
                                    $steps["updateDetailsDeLoffreIsOpen"] =
                                      await $steps[
                                        "updateDetailsDeLoffreIsOpen"
                                      ];
                                  }
                                }}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $queries.getApplication.data.some(
                                  application =>
                                    application.job_id == $state.jobObject?.id
                                )
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"frame"}
                                data-plasmic-override={overrides.frame}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame
                                )}
                              >
                                <PhCheckBoldIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__bx0Wr
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__g3BKz
                                  )}
                                >
                                  {"Postul\u00e9"}
                                </div>
                              </div>
                            ) : null}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"jobDescriptionContainer"}
                          data-plasmic-override={
                            overrides.jobDescriptionContainer
                          }
                          className={classNames(
                            projectcss.all,
                            sty.jobDescriptionContainer
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nzb0W
                            )}
                          >
                            {"Description du poste"}
                          </div>
                          <div
                            data-plasmic-name={"jobDescription"}
                            data-plasmic-override={overrides.jobDescription}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.jobDescription
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.description;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Le STUDIO ASENS\u00d2 recherche un(e) talentueux(SE) ASSISTANT(E) DESIGNER GRAPHIQUE, recrutement en CDD de 10 mois, \u00e0 mi-temps (21 heures par semaine).\n\nAssurer l'ensemble de la coh\u00e9rence graphique de l'identit\u00e9 d'ANOZR WAY via la cr\u00e9ation, l'entretien, le renouvellement de tous les \u00e9l\u00e9ments graphiques qui la compose.\nContribuer \u00e0 la direction artistique (benchmark, moodboards, maquettes, recommandations, key visual...), d\u00e9velopper l'identit\u00e9 visuelle et \"digitaliser\" la charte graphique.\nMise en forme des contenus, cr\u00e9ation de templates et kits graphiques : infographies, brochures, sales deck, livre blanc, cas client etc. d\u00e9clin\u00e9 en format digital et print\nR\u00e9seaux sociaux : visuels des posts Linkedin/Twitter, des Ads / publicit\u00e9s (images statiques, carrousels, vid\u00e9os etc.)\nSite internet : r\u00e9alisation de maquettes, int\u00e9gration Wordpress via un th\u00e8me, cr\u00e9ation de landing pages, de visuels\nShooting et retouche photo (\u00e9v\u00e9nementiel, marque employeur)\nCaptation et montage vid\u00e9o : explainer video, t\u00e9moignages clients, \u00e9v\u00e9nementiel, formats courts pour r\u00e9seaux sociaux etc. La ma\u00eetrise du motion design est un plus !\nSalon/\u00e9v\u00e9nementiel : habillage et sc\u00e9nographie de stand, PLV, roll-up goodies, v\u00eatements personnalis\u00e9s, brochures/flyers,";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"benefits"}
                            data-plasmic-override={overrides.benefits}
                            className={classNames(projectcss.all, sty.benefits)}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.jobObject.benefits
                                    .replace(/{/g, "")
                                    .replace(/}/g, "")
                                    .replace(/"/g, "")
                                    .split(",");
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8MYwb
                                  )}
                                  key={currentIndex}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"expectedProfileContainer"}
                          data-plasmic-override={
                            overrides.expectedProfileContainer
                          }
                          className={classNames(
                            projectcss.all,
                            sty.expectedProfileContainer
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kTadj
                            )}
                          >
                            {"Profil attendu"}
                          </div>
                          <div
                            data-plasmic-name={"expectedProfile"}
                            data-plasmic-override={overrides.expectedProfile}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.expectedProfile
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.requirements;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Vous aimez votre m\u00e9tier, en particulier passer de la conception \u00e0 la r\u00e9alisation de vos id\u00e9es mais \u00e9galement d\u00e9cliner/ ex\u00e9cuter des concepts cr\u00e9atifs pens\u00e9s en \u00e9quipe. Votre culture graphique vous permet d'aborder avec autant d'aisance communications de petites entreprises, corporate, institutionnelle ou publique. \nVous ma\u00eetrisez et affectionnez particuli\u00e8rement la conception d'identit\u00e9 visuelle et de maquettes \u00e9ditoriales (magazines, rapports d'activit\u00e9s, etc.). Force de propositions construites et cr\u00e9atives, vous \u00eates en capacit\u00e9 d'argumenter vos pr\u00e9conisations \u00e0 l'\u00e9crit comme \u00e0 l'oral. ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"companyContainer"}
                          data-plasmic-override={overrides.companyContainer}
                          className={classNames(
                            projectcss.all,
                            sty.companyContainer
                          )}
                        >
                          <div
                            data-plasmic-name={"logoContainer"}
                            data-plasmic-override={overrides.logoContainer}
                            className={classNames(
                              projectcss.all,
                              sty.logoContainer
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__m6E17
                              )}
                            >
                              {"L\u2019entreprise"}
                            </div>
                            <PlasmicImg__
                              data-plasmic-name={"logo"}
                              data-plasmic-override={overrides.logo}
                              alt={""}
                              className={classNames(sty.logo)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"none"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100px"}
                              loading={"lazy"}
                              src={(() => {
                                try {
                                  return $state.jobObject.logo_file;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iOsT5
                            )}
                          >
                            <div
                              data-plasmic-name={"companyName"}
                              data-plasmic-override={overrides.companyName}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.companyName
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.jobObject.company_name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Impact.com";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              data-plasmic-name={"companyDetail"}
                              data-plasmic-override={overrides.companyDetail}
                              className={classNames(
                                projectcss.all,
                                sty.companyDetail
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $state.jobObject.company_sector !== null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"sectorActivity"}
                                  data-plasmic-override={
                                    overrides.sectorActivity
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.sectorActivity
                                  )}
                                >
                                  <IconPhBriefcase2Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__x2Ev5
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    data-plasmic-name={"dkTrucksPark5"}
                                    data-plasmic-override={
                                      overrides.dkTrucksPark5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.dkTrucksPark5
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.jobObject
                                            .company_sector;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Design";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return $state.jobObject.company_size !== null;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"companySize"}
                                  data-plasmic-override={overrides.companySize}
                                  className={classNames(
                                    projectcss.all,
                                    sty.companySize
                                  )}
                                >
                                  <PhUsersThreeIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__dpSE
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    data-plasmic-name={"dkTrucksPark6"}
                                    data-plasmic-override={
                                      overrides.dkTrucksPark6
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.dkTrucksPark6
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.jobObject.company_size;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "450";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return (
                                    $state.jobObject.company_address !== null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"companyLocation"}
                                  data-plasmic-override={
                                    overrides.companyLocation
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.companyLocation
                                  )}
                                >
                                  <PhMapTrifoldFillIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__uq5EX
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ozaHn
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.jobObject
                                            .company_address;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "11 rue des Taillandiers 75011 Paris";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"companyDescription"}
                            data-plasmic-override={overrides.companyDescription}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.companyDescription
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.company_description;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Studio de design graphique sp\u00e9cialis\u00e9e dans le design de marque (branding) et le design \u00e9ditorial, le STUDIO ASENS\u00d2 r\u00e9pond aussi bien aux besoins de productions issues des activit\u00e9s des entreprises tels les PME et les grands comptes, des activit\u00e9s des institutions publiques tels les villes, les communaut\u00e9s, agglom\u00e9rations etc. ainsi qu'\u00e0 ses propres projets, consultations et march\u00e9s publics.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    }
                    footer={null}
                    heading={
                      (
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : (() => {
                              try {
                                return true;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__hgXjN)}
                          displayHeight={"17px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"17px"}
                          loading={"lazy"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateModalIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["jobDetails", "isOpen"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalIsOpen"] != null &&
                              typeof $steps["updateModalIsOpen"] === "object" &&
                              typeof $steps["updateModalIsOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalIsOpen"] = await $steps[
                                "updateModalIsOpen"
                              ];
                            }

                            $steps["updateJobId"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["jobId"]
                                    },
                                    operation: 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, undefined);
                                    return undefined;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateJobId"] != null &&
                              typeof $steps["updateJobId"] === "object" &&
                              typeof $steps["updateJobId"].then === "function"
                            ) {
                              $steps["updateJobId"] = await $steps[
                                "updateJobId"
                              ];
                            }
                          }}
                          src={{
                            src: "/plasmic/jam_production_🚀/images/close3.svg",
                            fullWidth: 17,
                            fullHeight: 17,
                            aspectRatio: 1
                          }}
                        />
                      ) : null
                    }
                    isOpen={generateStateValueProp($state, [
                      "jobDetails",
                      "isOpen"
                    ])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "jobDetails",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateJobId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["jobId"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateJobId"] != null &&
                          typeof $steps["updateJobId"] === "object" &&
                          typeof $steps["updateJobId"].then === "function"
                        ) {
                          $steps["updateJobId"] = await $steps["updateJobId"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    showFooter={false}
                    showHeader={false}
                    trigger={
                      <JamButton
                        data-plasmic-name={"button5"}
                        data-plasmic-override={overrides.button5}
                        className={classNames("__wab_instance", sty.button5)}
                        icon={"none"}
                      />
                    }
                  />

                  <Modal
                    data-plasmic-name={"signUpApplication"}
                    data-plasmic-override={overrides.signUpApplication}
                    className={classNames(
                      "__wab_instance",
                      sty.signUpApplication
                    )}
                    closeOnBackdropClick={false}
                    content={
                      <div
                        data-plasmic-name={"application"}
                        data-plasmic-override={overrides.application}
                        className={classNames(projectcss.all, sty.application)}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : (() => {
                                try {
                                  return (
                                    $ctx.SupabaseUser.user !== undefined &&
                                    $ctx.SupabaseUser.user !== null
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <div
                            data-plasmic-name={"header2"}
                            data-plasmic-override={overrides.header2}
                            className={classNames(projectcss.all, sty.header2)}
                          >
                            <div
                              data-plasmic-name={"frame67"}
                              data-plasmic-override={overrides.frame67}
                              className={classNames(
                                projectcss.all,
                                sty.frame67
                              )}
                            >
                              <div
                                data-plasmic-name={"frame68"}
                                data-plasmic-override={overrides.frame68}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame68
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__m3NVn
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.jobObject.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Assistant designer graphique";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  data-plasmic-name={"frame69"}
                                  data-plasmic-override={overrides.frame69}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame69
                                  )}
                                >
                                  <PhMapPin2Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__x8Izl
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__p02
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.jobObject.location;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Paris (75)";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lmXnE
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "Publié le " +
                                        new Date(
                                          $state.jobObject.created_at
                                        ).toLocaleDateString("fr-FR")
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Publi\u00e9 le 18/12/2023";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"frame74"}
                              data-plasmic-override={overrides.frame74}
                              className={classNames(
                                projectcss.all,
                                sty.frame74
                              )}
                            >
                              <div
                                data-plasmic-name={"frame75"}
                                data-plasmic-override={overrides.frame75}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame75
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rTyC
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"frame76"}
                                    data-plasmic-override={overrides.frame76}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame76
                                    )}
                                  >
                                    <PhFileTextIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__cxduz
                                      )}
                                      role={"img"}
                                    />

                                    <div
                                      data-plasmic-name={"dkTrucksPark7"}
                                      data-plasmic-override={
                                        overrides.dkTrucksPark7
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.dkTrucksPark7
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.jobObject
                                              .contract_type;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "CDI";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    data-plasmic-name={"frame77"}
                                    data-plasmic-override={overrides.frame77}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame77
                                    )}
                                  >
                                    <PhClockIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__tXdCm
                                      )}
                                      role={"img"}
                                    />

                                    <div
                                      data-plasmic-name={"dkTrucksPark8"}
                                      data-plasmic-override={
                                        overrides.dkTrucksPark8
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.dkTrucksPark8
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.jobObject
                                              .working_time;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "25h";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hwxVw
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"frame16"}
                                    data-plasmic-override={overrides.frame16}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame16
                                    )}
                                  >
                                    <PhCoinsLightIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__fQers
                                      )}
                                      role={"img"}
                                    />

                                    <div
                                      data-plasmic-name={"dkTrucksPark9"}
                                      data-plasmic-override={
                                        overrides.dkTrucksPark9
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.dkTrucksPark9
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.jobObject.salary;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "2000\u20ac";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    data-plasmic-name={"frame17"}
                                    data-plasmic-override={overrides.frame17}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame17
                                    )}
                                  >
                                    <PhClockCountdownIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___7Q4Yk
                                      )}
                                      role={"img"}
                                    />

                                    <div
                                      data-plasmic-name={"dkTrucksPark10"}
                                      data-plasmic-override={
                                        overrides.dkTrucksPark10
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.dkTrucksPark10
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.jobObject
                                              .availability_status;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Imm\u00e9diat";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div
                              data-plasmic-name={"frame18"}
                              data-plasmic-override={overrides.frame18}
                              className={classNames(
                                projectcss.all,
                                sty.frame18
                              )}
                            >
                              <div
                                data-plasmic-name={"frame78"}
                                data-plasmic-override={overrides.frame78}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame78
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame79"}
                                  data-plasmic-override={overrides.frame79}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame79
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__aDnWy
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.jobObject.company_name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Impact.com";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    data-plasmic-name={"frame80"}
                                    data-plasmic-override={overrides.frame80}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame80
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"frame81"}
                                      data-plasmic-override={overrides.frame81}
                                      className={classNames(
                                        projectcss.all,
                                        sty.frame81
                                      )}
                                    >
                                      <IconPhBriefcase2Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___2Pob4
                                        )}
                                        role={"img"}
                                      />

                                      <div
                                        data-plasmic-name={"dkTrucksPark11"}
                                        data-plasmic-override={
                                          overrides.dkTrucksPark11
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.dkTrucksPark11
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state.jobObject
                                                .company_sector;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Design";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    {(
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? (() => {
                                            try {
                                              return (
                                                $state.jobObject.company_size !=
                                                null
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })()
                                        : true
                                    ) ? (
                                      <div
                                        data-plasmic-name={"frame82"}
                                        data-plasmic-override={
                                          overrides.frame82
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.frame82
                                        )}
                                      >
                                        <PhUsersThreeIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__fyKu
                                          )}
                                          role={"img"}
                                        />

                                        <div
                                          data-plasmic-name={"dkTrucksPark12"}
                                          data-plasmic-override={
                                            overrides.dkTrucksPark12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.dkTrucksPark12
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $state.jobObject
                                                  .company_size;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "450";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    ) : null}
                                    <div
                                      data-plasmic-name={"frame83"}
                                      data-plasmic-override={overrides.frame83}
                                      className={classNames(
                                        projectcss.all,
                                        sty.frame83
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"frame84"}
                                        data-plasmic-override={
                                          overrides.frame84
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.frame84
                                        )}
                                      >
                                        <PhMapTrifoldFillIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__g3SHy
                                          )}
                                          role={"img"}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__zSniP
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $state.jobObject
                                                  .company_address;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "11 rue des Taillandiers 75011 Paris";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return $state.jobObject.logo_file != null;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"frame85"}
                                  data-plasmic-override={overrides.frame85}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame85
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img___23SpF)}
                                    displayHeight={"55px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"none"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"150px"}
                                    loading={"lazy"}
                                    src={(() => {
                                      try {
                                        return $state.jobObject.logo_file;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              ) : null}
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.form),
                            extendedOnValuesChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["form", "value"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            formItems: [
                              {
                                label: "Name",
                                name: "name",
                                inputType: "Text"
                              },
                              {
                                label: "Message",
                                name: "message",
                                inputType: "Text Area"
                              }
                            ],
                            initialValues: (() => {
                              try {
                                return $queries.getCurrentUser.data[0];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "advanced",
                            onFinish: async values => {
                              const $steps = {};

                              $steps["cv"] =
                                $state.upload.files.length > 0
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                          opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                          userArgs: {
                                            path: [
                                              $ctx.SupabaseUser.user.id,

                                              (() => {
                                                const file =
                                                  $state.upload.files[0];
                                                if (file) {
                                                  const formattedName =
                                                    file.name
                                                      .trim()
                                                      .toLowerCase()
                                                      .replace(
                                                        /[^a-z0-9.\-_]/g,
                                                        "_"
                                                      )
                                                      .replace(/_+/g, "_")
                                                      .replace(/^_+|_+$/g, "");
                                                  return formattedName;
                                                }
                                              })()
                                            ],

                                            content: [
                                              $state.upload.files[0].contents
                                            ],

                                            contentType: [
                                              $state.upload.files[0].type
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["cv"] != null &&
                                typeof $steps["cv"] === "object" &&
                                typeof $steps["cv"].then === "function"
                              ) {
                                $steps["cv"] = await $steps["cv"];
                              }

                              $steps["ldm"] =
                                $state.upload3.files.length > 0
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                          opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                          userArgs: {
                                            path: [
                                              $ctx.SupabaseUser.user.id,

                                              (() => {
                                                const file =
                                                  $state.upload3.files[0];
                                                if (file) {
                                                  const formattedName =
                                                    file.name
                                                      .trim()
                                                      .toLowerCase()
                                                      .replace(
                                                        /[^a-z0-9.\-_]/g,
                                                        "_"
                                                      )
                                                      .replace(/_+/g, "_")
                                                      .replace(/^_+|_+$/g, "");
                                                  return formattedName;
                                                }
                                              })()
                                            ],

                                            content: [
                                              $state.upload3.files[0].contents
                                            ],

                                            contentType: [
                                              $state.upload3.files[0].type
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["ldm"] != null &&
                                typeof $steps["ldm"] === "object" &&
                                typeof $steps["ldm"].then === "function"
                              ) {
                                $steps["ldm"] = await $steps["ldm"];
                              }

                              $steps["updateUser"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "208b2516-0c26-4591-9cde-df43376962ed",
                                        userArgs: {
                                          conditions: [
                                            $ctx.SupabaseUser.user.id
                                          ],

                                          variables: [
                                            $steps.cv?.path.split("/")[1] !=
                                            undefined
                                              ? $steps.cv?.path.split("/")[1]
                                              : $queries.getCurrentUser.data[0]
                                                  .cv_file,

                                            $steps.ldm?.path.split("/")[1] !=
                                            undefined
                                              ? $steps.ldm?.path.split("/")[1]
                                              : $queries.getCurrentUser.data[0]
                                                  .cover_letter_file,

                                            $state.form.value.address,

                                            $state.form.value.city,

                                            $state.form.value.Country,

                                            $state.form.value.first_name,

                                            $state.form.value.last_name,

                                            $state.form.value.level,

                                            $state.form.value.linkedin_url,

                                            $state.form.value.phone_number,

                                            $state.form.value.postal_code,

                                            $state.form.value
                                              .short_presentation,

                                            $state.form.value.skill,

                                            $state.form.value.transport_modes,

                                            new Date().toISOString(),

                                            $state.form.value.skills,

                                            $state.form.value.transport_mode,

                                            $queries.fetchUserCoordinates.data
                                              .response.features[0].geometry
                                              .coordinates[0],

                                            $queries.fetchUserCoordinates.data
                                              .response.features[0].geometry
                                              .coordinates[1]
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: null,
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateUser"] != null &&
                                typeof $steps["updateUser"] === "object" &&
                                typeof $steps["updateUser"].then === "function"
                              ) {
                                $steps["updateUser"] = await $steps[
                                  "updateUser"
                                ];
                              }

                              $steps["createApplication"] = (
                                $queries.getApplication.data.some(
                                  application =>
                                    application.job_id == $state.jobObject.id
                                )
                                  ? false
                                  : true
                              )
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "61dee8ac-d65c-484d-bd5d-03def11e95e5",
                                        userArgs: {
                                          variables: [
                                            $state.form.value.address,

                                            $state.form.value.city,

                                            $steps.ldm != undefined
                                              ? $steps.ldm?.path.split("/")[1]
                                              : $queries.getCurrentUser.data[0]
                                                  .cover_letter_file,

                                            $steps.cv != undefined
                                              ? $steps.cv?.path.split("/")[1]
                                              : $queries.getCurrentUser.data[0]
                                                  .cv_file,

                                            $state.form.value.level,

                                            $state.form.value.linkedin_url,

                                            $state.form.value.postal_code,

                                            $state.form.value
                                              .short_presentation,

                                            $state.form.value.skill,

                                            $state.form.value.transport_mode,

                                            $ctx.SupabaseUser.user.id,

                                            $state.jobObject.id
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["createApplication"] != null &&
                                typeof $steps["createApplication"] ===
                                  "object" &&
                                typeof $steps["createApplication"].then ===
                                  "function"
                              ) {
                                $steps["createApplication"] = await $steps[
                                  "createApplication"
                                ];
                              }

                              $steps["errorMsg"] = (
                                $queries.getApplication.data.some(
                                  application =>
                                    application.job_id == $state.jobObject.id
                                )
                                  ? true
                                  : false
                              )
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "warning",
                                        "Attention",
                                        "Vous avez d\u00e9j\u00e0 postul\u00e9 \u00e0 cette offre."
                                      ]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["errorMsg"] != null &&
                                typeof $steps["errorMsg"] === "object" &&
                                typeof $steps["errorMsg"].then === "function"
                              ) {
                                $steps["errorMsg"] = await $steps["errorMsg"];
                              }

                              $steps["succesMsg"] = (
                                $queries.getApplication.data.some(
                                  application =>
                                    application.job_id == $state.jobObject.id
                                )
                                  ? false
                                  : true
                              )
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "success",
                                        "Votre candidature a bien \u00e9t\u00e9 envoy\u00e9e !"
                                      ]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["succesMsg"] != null &&
                                typeof $steps["succesMsg"] === "object" &&
                                typeof $steps["succesMsg"].then === "function"
                              ) {
                                $steps["succesMsg"] = await $steps["succesMsg"];
                              }

                              $steps["sendEmailToEmployer"] = (
                                $queries.getApplication.data.some(
                                  application =>
                                    application.job_id == $state.jobObject.id
                                )
                                  ? false
                                  : true
                              )
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
                                        opId: "ac3aeb59-a5a8-4309-9807-433a1356e04e",
                                        userArgs: {
                                          body: [
                                            {
                                              to: `${$state.jobObject.employer_email}`,
                                              template: "applicationReceived",
                                              subject:
                                                "Nouvelle candidature reçue pour votre offre \uD83D\uDCBC",
                                              params: {
                                                firstName:
                                                  $state.jobObject
                                                    .employer_name,
                                                jobTitle:
                                                  $state.jobObject.title,
                                                candidateName:
                                                  $queries.getCurrentUser
                                                    .data[0].first_name +
                                                  " " +
                                                  $queries.getCurrentUser
                                                    .data[0].last_name,
                                                applicationUrl: `https://job-around-me.com/candidatures-employeur/${$state.jobObject.id}`
                                              }
                                            }
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["sendEmailToEmployer"] != null &&
                                typeof $steps["sendEmailToEmployer"] ===
                                  "object" &&
                                typeof $steps["sendEmailToEmployer"].then ===
                                  "function"
                              ) {
                                $steps["sendEmailToEmployer"] = await $steps[
                                  "sendEmailToEmployer"
                                ];
                              }

                              $steps["sendEmailToCandidat"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
                                        opId: "fcf17976-4f7f-44b3-8083-e1bf6bb812dd",
                                        userArgs: {
                                          body: [
                                            {
                                              to: `${$state.form.value?.email}`,
                                              template: "applicationSubmitted",
                                              subject:
                                                "Ta candidature a bien été envoyée ✅",
                                              params: {
                                                firstName:
                                                  $state.form.value?.first_name,
                                                jobTitle:
                                                  $state.jobObject?.title,
                                                companyName:
                                                  $state.jobObject
                                                    ?.company_name,
                                                applicationUrl:
                                                  "https://job-around-me.com/candidatures"
                                              }
                                            }
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["sendEmailToCandidat"] != null &&
                                typeof $steps["sendEmailToCandidat"] ===
                                  "object" &&
                                typeof $steps["sendEmailToCandidat"].then ===
                                  "function"
                              ) {
                                $steps["sendEmailToCandidat"] = await $steps[
                                  "sendEmailToCandidat"
                                ];
                              }

                              $steps["closeModal"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "signUpApplication",
                                          "isOpen"
                                        ]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["closeModal"] != null &&
                                typeof $steps["closeModal"] === "object" &&
                                typeof $steps["closeModal"].then === "function"
                              ) {
                                $steps["closeModal"] = await $steps[
                                  "closeModal"
                                ];
                              }
                            },
                            onFinishFailed: async data => {
                              const $steps = {};

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "Veuillez remplir toutes les informations obligatoires",
                                        undefined,
                                        undefined,
                                        "topRight"
                                      ]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            },
                            onIsSubmittingChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["form", "isSubmitting"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            ref: ref => {
                              $refs["form"] = ref;
                            },
                            submitSlot: null,
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "form.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "form.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"form"}
                              data-plasmic-override={overrides.form}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__w96C
                                )}
                              >
                                <UploadWrapper
                                  data-plasmic-name={"upload2"}
                                  data-plasmic-override={overrides.upload2}
                                  accept={"image/*"}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.upload2
                                  )}
                                  files={generateStateValueProp($state, [
                                    "upload2",
                                    "files"
                                  ])}
                                  onFilesChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "upload2",
                                      "files"
                                    ]).apply(null, eventArgs);

                                    (async files => {
                                      const $steps = {};

                                      $steps["supabaseUploadFile"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "rtEg85U6Vbyi94cRAe93i7",
                                                opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                                userArgs: {
                                                  path: [
                                                    $ctx.SupabaseUser.user.id,

                                                    $state.upload2.files[0].name
                                                  ],

                                                  content: [
                                                    $state.upload2.files[0]
                                                      .contents
                                                  ],

                                                  contentType: [
                                                    $state.upload2.files[0].type
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["supabaseUploadFile"] != null &&
                                        typeof $steps["supabaseUploadFile"] ===
                                          "object" &&
                                        typeof $steps["supabaseUploadFile"]
                                          .then === "function"
                                      ) {
                                        $steps["supabaseUploadFile"] =
                                          await $steps["supabaseUploadFile"];
                                      }

                                      $steps["postgresUpdateById"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "kVSSe8ab4TtzwRPnTeEeUp",
                                                opId: "ca8056ed-4ec7-4218-bb8b-d4f4da770307",
                                                userArgs: {
                                                  keys: [
                                                    $ctx.SupabaseUser.user.id
                                                  ],

                                                  variables: [
                                                    $steps.supabaseUploadFile?.path.split(
                                                      "/"
                                                    )[1]
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [
                                                  "plasmic_refresh_all"
                                                ],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["postgresUpdateById"] != null &&
                                        typeof $steps["postgresUpdateById"] ===
                                          "object" &&
                                        typeof $steps["postgresUpdateById"]
                                          .then === "function"
                                      ) {
                                        $steps["postgresUpdateById"] =
                                          await $steps["postgresUpdateById"];
                                      }
                                    }).apply(null, eventArgs);
                                  }}
                                  showUploadList={true}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__ubQ4)}
                                    displayHeight={"132px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"132px"}
                                    loading={"lazy"}
                                    src={
                                      $queries.getPp.signedUrl
                                        ? $queries.getPp.signedUrl
                                        : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png"
                                    }
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xNee9
                                    )}
                                  >
                                    <div
                                      data-plasmic-name={"editIcon2"}
                                      data-plasmic-override={
                                        overrides.editIcon2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.editIcon2
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"frame19"}
                                        data-plasmic-override={
                                          overrides.frame19
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.frame19
                                        )}
                                      />

                                      <PhPencilSimpleIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__q7Wxc
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                    <div
                                      data-plasmic-name={"deleteIcon2"}
                                      data-plasmic-override={
                                        overrides.deleteIcon2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.deleteIcon2
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateUpload2Files"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "upload2",
                                                    "files"
                                                  ]
                                                },
                                                operation: 1
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  undefined
                                                );
                                                return undefined;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateUpload2Files"] !=
                                            null &&
                                          typeof $steps[
                                            "updateUpload2Files"
                                          ] === "object" &&
                                          typeof $steps["updateUpload2Files"]
                                            .then === "function"
                                        ) {
                                          $steps["updateUpload2Files"] =
                                            await $steps["updateUpload2Files"];
                                        }

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return event.stopPropagation();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }

                                        $steps["postgresUpdateMany"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "kVSSe8ab4TtzwRPnTeEeUp",
                                                  opId: "00154d6f-41ac-4e44-8d5a-da12df8e7c56",
                                                  userArgs: {
                                                    conditions: [
                                                      $ctx.SupabaseUser.user.id
                                                    ],

                                                    variables: [null]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["postgresUpdateMany"] !=
                                            null &&
                                          typeof $steps[
                                            "postgresUpdateMany"
                                          ] === "object" &&
                                          typeof $steps["postgresUpdateMany"]
                                            .then === "function"
                                        ) {
                                          $steps["postgresUpdateMany"] =
                                            await $steps["postgresUpdateMany"];
                                        }
                                      }}
                                    >
                                      <div
                                        data-plasmic-name={"frame20"}
                                        data-plasmic-override={
                                          overrides.frame20
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.frame20
                                        )}
                                      />

                                      <PhTrashIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__ok9Ml
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </div>
                                </UploadWrapper>
                              </div>
                              <div
                                data-plasmic-name={"nomPrenom"}
                                data-plasmic-override={overrides.nomPrenom}
                                className={classNames(
                                  projectcss.all,
                                  sty.nomPrenom
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__iMuP6
                                  )}
                                  label={"Pr\u00e9nom"}
                                  name={"first_name"}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput1"}
                                    data-plasmic-override={overrides.textInput1}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput1
                                    )}
                                    defaultValue={(() => {
                                      try {
                                        return $queries.getCurrentUser.data[0]
                                          .first_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput1",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Pr\u00e9nom"}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__k1Jbq
                                  )}
                                  label={"Nom"}
                                  name={"last_name"}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput2"}
                                    data-plasmic-override={overrides.textInput2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput2
                                    )}
                                    defaultValue={(() => {
                                      try {
                                        return $queries.getCurrentUser.data[0]
                                          .last_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput2",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Nom"}
                                  />
                                </FormItemWrapper>
                              </div>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__qQzPb
                                )}
                                label={"E-mail"}
                                name={"email"}
                                rules={[{ ruleType: "required" }]}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput4"}
                                  data-plasmic-override={overrides.textInput4}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput4
                                  )}
                                  defaultValue={(() => {
                                    try {
                                      return $queries.getCurrentUser.data[0]
                                        .email;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  disabled={true}
                                  inputType={"email"}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "textInput4",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  placeholder={"E-mail"}
                                />
                              </FormItemWrapper>
                              <div
                                data-plasmic-name={"telephone"}
                                data-plasmic-override={overrides.telephone}
                                className={classNames(
                                  projectcss.all,
                                  sty.telephone
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___4NfFl
                                  )}
                                  label={"T\u00e9l\u00e9phone"}
                                  name={"countryCode"}
                                >
                                  <PhoneSelector
                                    data-plasmic-name={"phoneSelector"}
                                    data-plasmic-override={
                                      overrides.phoneSelector
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.phoneSelector
                                    )}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___7M9Gr
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__i4Sm9
                                      )}
                                    >
                                      {""}
                                    </div>
                                  }
                                  name={"phone_number"}
                                  noLabel={true}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput3"}
                                    data-plasmic-override={overrides.textInput3}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput3
                                    )}
                                    defaultValue={(() => {
                                      try {
                                        return $queries.getCurrentUser.data[0]
                                          .phone_number;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    inputType={"tel"}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput3",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"6060606060"}
                                  />
                                </FormItemWrapper>
                              </div>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__lwGlt
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dlbwm
                                    )}
                                  >
                                    {"Adresse"}
                                  </div>
                                }
                                name={"address"}
                                rules={[{ ruleType: "required" }]}
                              >
                                <TextInput
                                  data-plasmic-name={"rue"}
                                  data-plasmic-override={overrides.rue}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.rue
                                  )}
                                  defaultValue={(() => {
                                    try {
                                      return $queries.getCurrentUser.data[0]
                                        .address;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "rue",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  placeholder={"Rue"}
                                />
                              </FormItemWrapper>
                              <div
                                data-plasmic-name={"codePosteVille"}
                                data-plasmic-override={overrides.codePosteVille}
                                className={classNames(
                                  projectcss.all,
                                  sty.codePosteVille
                                )}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__wp2A
                                  )}
                                  hidden={false}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__aXhl9
                                      )}
                                    >
                                      {""}
                                    </div>
                                  }
                                  name={"postal_code"}
                                  noLabel={true}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  <TextInput
                                    data-plasmic-name={"codePostal"}
                                    data-plasmic-override={overrides.codePostal}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.codePostal
                                    )}
                                    defaultValue={(() => {
                                      try {
                                        return $queries.getCurrentUser.data[0]
                                          .postal_code;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "codePostal",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Code postal"}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__dKhbg
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__o4Elx
                                      )}
                                    >
                                      {"Adresse*"}
                                    </div>
                                  }
                                  name={"city"}
                                  noLabel={true}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  <TextInput
                                    data-plasmic-name={"ville"}
                                    data-plasmic-override={overrides.ville}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.ville
                                    )}
                                    defaultValue={(() => {
                                      try {
                                        return $queries.getCurrentUser.data[0]
                                          .city;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "ville",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Ville"}
                                  />
                                </FormItemWrapper>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jGum5
                                )}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput5"}
                                  data-plasmic-override={overrides.textInput5}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput5
                                  )}
                                  defaultValue={``}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "textInput5",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  placeholder={"Code postal"}
                                />

                                <Select
                                  data-plasmic-name={"select2"}
                                  data-plasmic-override={overrides.select2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select2
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "select2",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  placeholder={"Ville"}
                                  showLabel={false}
                                />
                              </div>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__ldZSu
                                )}
                                label={null}
                                name={"country"}
                                noLabel={true}
                                rules={[{ ruleType: "required" }]}
                              >
                                <Select
                                  data-plasmic-name={"select4"}
                                  data-plasmic-override={overrides.select4}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select4
                                  )}
                                  initialSelectedValue={"France"}
                                  items={(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $state.countries;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <MenuItem
                                        className={classNames(
                                          "__wab_instance",
                                          sty.menuItem__jtwJu
                                        )}
                                        key={currentIndex}
                                        label={(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        value={(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    );
                                  })}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "select4",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  placeholder={"Pays"}
                                  showLabel={false}
                                />
                              </FormItemWrapper>
                              <Line10Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___3UUi
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uo1Wz
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__n73Pe
                                  )}
                                >
                                  {"Moyens de transport"}
                                </div>
                                <AntdSelect
                                  data-plasmic-name={"select5"}
                                  data-plasmic-override={overrides.select5}
                                  allowClear={true}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select5
                                  )}
                                  defaultStylesClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    styleTokensClassNames,
                                    styleTokensClassNames_antd_5_hostless,
                                    styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                    styleTokensClassNames_plasmic_rich_components
                                  )}
                                  defaultValue={[]}
                                  mode={"multiple"}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "select5",
                                      "value"
                                    ]).apply(null, eventArgs);
                                  }}
                                  options={(() => {
                                    try {
                                      return (() => {
                                        const selectedTransportModes =
                                          $queries.getCurrentUser.data?.[0]
                                            ?.transport_mode || [];
                                        return $queries.getTransportModes.data.map(
                                          mode => ({
                                            value: mode.id,
                                            label: mode.mode,
                                            selected:
                                              selectedTransportModes.includes(
                                                mode.id
                                              )
                                          })
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  placeholder={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___35Epy
                                      )}
                                    >
                                      {"Moyen de transport"}
                                    </div>
                                  }
                                  popupScopeClassName={sty["select5__popup"]}
                                  size={"large"}
                                  suffixIcon={
                                    <ChevronDownIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___4AB7D
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  value={generateStateValueProp($state, [
                                    "select5",
                                    "value"
                                  ])}
                                />
                              </div>
                              {false ? (
                                <FormItemWrapper
                                  children={null}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__lHwsv
                                  )}
                                  initialValue={(() => {
                                    try {
                                      return (() => {
                                        const selectedTransportModes =
                                          $queries.getCurrentUser.data?.[0]
                                            ?.transport_mode || [];
                                        const selectedIds =
                                          $queries.getTransportModes.data
                                            .filter(mode =>
                                              selectedTransportModes.includes(
                                                mode.id
                                              )
                                            )
                                            .map(mode => mode.id);
                                        return selectedIds;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  label={null}
                                  name={"transport_mode"}
                                  noLabel={false}
                                />
                              ) : null}
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__mFsz0
                                )}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__mS8Kr
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sLolF
                                      )}
                                    >
                                      {"Pr\u00e9sentation courte"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__k1Qrg
                                      )}
                                    >
                                      {
                                        "D\u00e9crivez le type de poste que vous cherchez, les missions que vous souhaitez effectuer. \nAjouter les mots-cl\u00e9s qui vous semblent les plus pertinents pour trouver les jobs qui correspondent \u00e0 votre recherche.\r\n\r"
                                      }
                                    </div>
                                  </div>
                                }
                                name={"short_presentation"}
                              >
                                <TextAreaInput
                                  data-plasmic-name={"textAreaInput"}
                                  data-plasmic-override={
                                    overrides.textAreaInput
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textAreaInput
                                  )}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "textAreaInput",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  placeholder={"Pr\u00e9sentation"}
                                />
                              </FormItemWrapper>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__u38R8
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jhc0V
                                  )}
                                >
                                  {"Comp\u00e9tences"}
                                </div>
                                <AntdSelect
                                  data-plasmic-name={"select7"}
                                  data-plasmic-override={overrides.select7}
                                  allowClear={false}
                                  bordered={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? true
                                      : undefined
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select7
                                  )}
                                  defaultStylesClassName={classNames(
                                    projectcss.root_reset,
                                    projectcss.plasmic_default_styles,
                                    projectcss.plasmic_mixins,
                                    styleTokensClassNames,
                                    styleTokensClassNames_antd_5_hostless,
                                    styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                    styleTokensClassNames_plasmic_rich_components
                                  )}
                                  mode={"multiple"}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "select7",
                                      "value"
                                    ]).apply(null, eventArgs);
                                  }}
                                  options={(() => {
                                    try {
                                      return $queries.getSoftSkill.data.map(
                                        skill => ({
                                          value: skill.skill,
                                          label: skill.skill
                                        })
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  placeholder={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___9ZIu6
                                      )}
                                    >
                                      {"Ajouter"}
                                    </div>
                                  }
                                  popupScopeClassName={sty["select7__popup"]}
                                  size={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "large"
                                      : "large"
                                  }
                                  suffixIcon={
                                    <ChevronDownIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__gGwGf
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  value={generateStateValueProp($state, [
                                    "select7",
                                    "value"
                                  ])}
                                />
                              </div>
                              {false ? (
                                <FormItemWrapper
                                  children={null}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___7U8E7
                                  )}
                                  label={null}
                                  name={"skill"}
                                />
                              ) : null}
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField___0N6P1
                                )}
                                initialValue={
                                  $queries.getCurrentUser?.data[0]?.level
                                }
                                label={"Niveau d'exp\u00e9rience"}
                                name={"level"}
                              >
                                <Select
                                  data-plasmic-name={"select"}
                                  data-plasmic-override={overrides.select}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.select
                                  )}
                                  initialSelectedValue={(() => {
                                    try {
                                      return $queries.getCurrentUser.data[0]
                                        .level;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  items={(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.getXpLevel.data.sort(
                                          (a, b) => a.id - b.id
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <MenuItem
                                        key={currentIndex}
                                        label={(() => {
                                          try {
                                            return currentItem.level;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        value={(() => {
                                          try {
                                            return currentItem.id;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />
                                    );
                                  })}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "select",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  placeholder={"S\u00e9l\u00e9ctionner"}
                                  showLabel={false}
                                />
                              </FormItemWrapper>
                              <div
                                data-plasmic-name={"frame13"}
                                data-plasmic-override={overrides.frame13}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame13
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame14"}
                                  data-plasmic-override={overrides.frame14}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame14
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"email4"}
                                    data-plasmic-override={overrides.email4}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.email4
                                    )}
                                  >
                                    {"CV"}
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.getCurrentUser.data[0]
                                          .cv_file !== null
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={"cvUpload"}
                                      data-plasmic-override={overrides.cvUpload}
                                      className={classNames(
                                        projectcss.all,
                                        sty.cvUpload
                                      )}
                                    >
                                      <PhTrashIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__hFfKa
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateUploadFiles"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "upload",
                                                      "files"
                                                    ]
                                                  },
                                                  operation: 1
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    undefined
                                                  );
                                                  return undefined;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateUploadFiles"] !=
                                              null &&
                                            typeof $steps[
                                              "updateUploadFiles"
                                            ] === "object" &&
                                            typeof $steps["updateUploadFiles"]
                                              .then === "function"
                                          ) {
                                            $steps["updateUploadFiles"] =
                                              await $steps["updateUploadFiles"];
                                          }

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return event.stopPropagation();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }

                                          $steps["postgresUpdateMany"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "kVSSe8ab4TtzwRPnTeEeUp",
                                                    opId: "cdc42b1f-f73e-4f27-8f76-8dc20c86304c",
                                                    userArgs: {
                                                      conditions: [
                                                        $ctx.SupabaseUser.user
                                                          .id
                                                      ],

                                                      variables: [null]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["postgresUpdateMany"] !=
                                              null &&
                                            typeof $steps[
                                              "postgresUpdateMany"
                                            ] === "object" &&
                                            typeof $steps["postgresUpdateMany"]
                                              .then === "function"
                                          ) {
                                            $steps["postgresUpdateMany"] =
                                              await $steps[
                                                "postgresUpdateMany"
                                              ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <div
                                        data-plasmic-name={"content5"}
                                        data-plasmic-override={
                                          overrides.content5
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.content5
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(
                                            sty.img___9WbG6
                                          )}
                                          displayHeight={"39px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"39px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                            fullWidth: 39,
                                            fullHeight: 39,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__c0I3
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $queries.getCurrentUser
                                                  .data[0].cv_file;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Importer ou d\u00e9poser un fichier";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        $queries.getCurrentUser.data[0]
                                          .cv_file === null
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={"fileUploader3"}
                                      data-plasmic-override={
                                        overrides.fileUploader3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.fileUploader3
                                      )}
                                    >
                                      <UploadWrapper
                                        data-plasmic-name={"upload"}
                                        data-plasmic-override={overrides.upload}
                                        accept={"application/pdf"}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.upload
                                        )}
                                        files={generateStateValueProp($state, [
                                          "upload",
                                          "files"
                                        ])}
                                        maxCount={1}
                                        onFilesChange={async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangeProp($state, [
                                            "upload",
                                            "files"
                                          ]).apply(null, eventArgs);
                                        }}
                                        showUploadList={true}
                                      >
                                        <div
                                          data-plasmic-name={"content"}
                                          data-plasmic-override={
                                            overrides.content
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.content
                                          )}
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__jgllg
                                            )}
                                            displayHeight={"39px"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"100%"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"39px"}
                                            loading={"lazy"}
                                            src={{
                                              src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                              fullWidth: 39,
                                              fullHeight: 39,
                                              aspectRatio: 1
                                            }}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__xl82G
                                            )}
                                          >
                                            {
                                              "Importer ou d\u00e9poser un fichier"
                                            }
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__fp4F
                                            )}
                                          >
                                            {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                          </div>
                                        </div>
                                      </UploadWrapper>
                                    </div>
                                  ) : null}
                                </div>
                                <div
                                  data-plasmic-name={"frame15"}
                                  data-plasmic-override={overrides.frame15}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame15
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"email5"}
                                    data-plasmic-override={overrides.email5}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.email5
                                    )}
                                  >
                                    {"Lettre de motivation"}
                                  </div>
                                  {(() => {
                                    try {
                                      return (
                                        $queries.getCurrentUser.data[0]
                                          .cover_letter_file !== null
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={"cvUpload2"}
                                      data-plasmic-override={
                                        overrides.cvUpload2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.cvUpload2
                                      )}
                                    >
                                      <PhTrashIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__yisnu
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateUpload3Files"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "upload3",
                                                      "files"
                                                    ]
                                                  },
                                                  operation: 0
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateUpload3Files"] !=
                                              null &&
                                            typeof $steps[
                                              "updateUpload3Files"
                                            ] === "object" &&
                                            typeof $steps["updateUpload3Files"]
                                              .then === "function"
                                          ) {
                                            $steps["updateUpload3Files"] =
                                              await $steps[
                                                "updateUpload3Files"
                                              ];
                                          }

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return event.stopPropagation();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }

                                          $steps["postgresUpdateMany"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "kVSSe8ab4TtzwRPnTeEeUp",
                                                    opId: "4f38c287-22eb-4fba-9a3c-811fbab26f49",
                                                    userArgs: {
                                                      conditions: [
                                                        $ctx.SupabaseUser.user
                                                          .id
                                                      ],

                                                      variables: [null]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["postgresUpdateMany"] !=
                                              null &&
                                            typeof $steps[
                                              "postgresUpdateMany"
                                            ] === "object" &&
                                            typeof $steps["postgresUpdateMany"]
                                              .then === "function"
                                          ) {
                                            $steps["postgresUpdateMany"] =
                                              await $steps[
                                                "postgresUpdateMany"
                                              ];
                                          }
                                        }}
                                        role={"img"}
                                      />

                                      <div
                                        data-plasmic-name={"content6"}
                                        data-plasmic-override={
                                          overrides.content6
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.content6
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__fKfk2)}
                                          displayHeight={"39px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"39px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                            fullWidth: 39,
                                            fullHeight: 39,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__kRxW
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $queries.getCurrentUser
                                                  .data[0].cover_letter_file;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Importer ou d\u00e9poser un fichier";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        $queries.getCurrentUser.data[0]
                                          .cover_letter_file === null
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={"fileUploader4"}
                                      data-plasmic-override={
                                        overrides.fileUploader4
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.fileUploader4
                                      )}
                                    >
                                      <UploadWrapper
                                        data-plasmic-name={"upload3"}
                                        data-plasmic-override={
                                          overrides.upload3
                                        }
                                        accept={"application/pdf"}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.upload3
                                        )}
                                        files={generateStateValueProp($state, [
                                          "upload3",
                                          "files"
                                        ])}
                                        maxCount={1}
                                        onFilesChange={async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangeProp($state, [
                                            "upload3",
                                            "files"
                                          ]).apply(null, eventArgs);
                                        }}
                                        showUploadList={true}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__qwu7S
                                          )}
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__vfPdF
                                            )}
                                            displayHeight={"39px"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"100%"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"39px"}
                                            loading={"lazy"}
                                            src={{
                                              src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                              fullWidth: 39,
                                              fullHeight: 39,
                                              aspectRatio: 1
                                            }}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__maz01
                                            )}
                                          >
                                            {
                                              "Importer ou d\u00e9poser un fichier"
                                            }
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__nMeBb
                                            )}
                                          >
                                            {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                          </div>
                                        </div>
                                      </UploadWrapper>
                                    </div>
                                  ) : null}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"frame92"}
                                data-plasmic-override={overrides.frame92}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame92
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame93"}
                                  data-plasmic-override={overrides.frame93}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame93
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"email3"}
                                    data-plasmic-override={overrides.email3}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.email3
                                    )}
                                  >
                                    {"CV"}
                                  </div>
                                  <FileUploader
                                    data-plasmic-name={"fileUploader"}
                                    data-plasmic-override={
                                      overrides.fileUploader
                                    }
                                    accept={"*/*"}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.fileUploader
                                    )}
                                    maxSize={5242880}
                                    state={"complete"}
                                  />
                                </div>
                                <div
                                  data-plasmic-name={"frame94"}
                                  data-plasmic-override={overrides.frame94}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame94
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"email2"}
                                    data-plasmic-override={overrides.email2}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.email2
                                    )}
                                  >
                                    {"Lettre de motivation"}
                                  </div>
                                  <FileUploader
                                    data-plasmic-name={"fileUploader2"}
                                    data-plasmic-override={
                                      overrides.fileUploader2
                                    }
                                    accept={"*/*"}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.fileUploader2
                                    )}
                                    maxSize={7}
                                    state={"complete"}
                                  />
                                </div>
                              </div>
                              <FormItemWrapper
                                className={classNames(
                                  "__wab_instance",
                                  sty.formField__bmxQ7
                                )}
                                label={"Linkedin"}
                                name={"linkedin_url"}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput6"}
                                  data-plasmic-override={overrides.textInput6}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput6
                                  )}
                                  defaultValue={(() => {
                                    try {
                                      return $queries.getCurrentUser.data[0]
                                        .linkedin_url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "textInput6",
                                      "value"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  placeholder={"https://"}
                                />
                              </FormItemWrapper>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vCSmY
                                )}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__gaEs
                                  )}
                                  end={
                                    <GroupIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__lFhqa
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  iconEnd={true}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___9SlXh
                                      )}
                                    >
                                      {"enregistrer et postuler"}
                                    </div>
                                  }
                                  submitsForm={true}
                                />
                              </div>
                            </FormWrapper>
                          );
                        })()}
                        <div
                          data-plasmic-name={"notLoggued"}
                          data-plasmic-override={overrides.notLoggued}
                          className={classNames(projectcss.all, sty.notLoggued)}
                        >
                          <Login
                            data-plasmic-name={"loginForm2"}
                            data-plasmic-override={overrides.loginForm2}
                            buttonStyle={"primary"}
                            className={classNames(
                              "__wab_instance",
                              sty.loginForm2
                            )}
                            createAccountText={"Créer un compte"}
                            email={generateStateValueProp($state, [
                              "loginForm2",
                              "email"
                            ])}
                            emailLabel={"Email"}
                            forgotPasswordPosition={"left"}
                            forgotPasswordText={"Mot de passe oublié ?"}
                            inputGap={"1rem"}
                            inputStyle={"simple"}
                            onEmailChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "loginForm2",
                                "email"
                              ]).apply(null, eventArgs);
                            }}
                            onPasswordChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "loginForm2",
                                "password"
                              ]).apply(null, eventArgs);
                            }}
                            onSubmit={async event => {
                              const $steps = {};

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        (() => {
                                          try {
                                            return $state.loginForm2.email;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        (() => {
                                          try {
                                            return $state.loginForm2.password;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "SupabaseUserGlobalContext.login"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                            password={generateStateValueProp($state, [
                              "loginForm2",
                              "password"
                            ])}
                            passwordLabel={"Mot de passe"}
                            placeholderEmail={"Entrez votre email"}
                            placeholderPassword={"Entrez votre mot de passe"}
                            redirectTo={"/auth/oauth-callback"}
                            showAppleButton={false}
                            showBottomSignupLink={true}
                            showCreateAccount={false}
                            showGoogleButton={false}
                            showPasswordToggle={true}
                            signUpLinkText={
                              "Pas encore de compte ? INSCRIPTION"
                            }
                            submitButtonText={"Connexion"}
                            title={"Connexion"}
                            titleHeading={"h1"}
                            wrapperStyle={"card"}
                          />
                        </div>
                      </div>
                    }
                    footer={null}
                    heading={
                      <React.Fragment>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : (() => {
                                try {
                                  return true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__dQyt2)}
                            displayHeight={"17px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"17px"}
                            loading={"lazy"}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateModal2IsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "signUpApplication",
                                          "isOpen"
                                        ]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModal2IsOpen"] != null &&
                                typeof $steps["updateModal2IsOpen"] ===
                                  "object" &&
                                typeof $steps["updateModal2IsOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateModal2IsOpen"] = await $steps[
                                  "updateModal2IsOpen"
                                ];
                              }
                            }}
                            src={{
                              src: "/plasmic/jam_production_🚀/images/close3.svg",
                              fullWidth: 17,
                              fullHeight: 17,
                              aspectRatio: 1
                            }}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__osnHc
                          )}
                        >
                          {"Enter some text"}
                        </div>
                      </React.Fragment>
                    }
                    isOpen={generateStateValueProp($state, [
                      "signUpApplication",
                      "isOpen"
                    ])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "signUpApplication",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showFooter={false}
                    showHeader={false}
                    trigger={
                      <JamButton
                        data-plasmic-name={"button6"}
                        data-plasmic-override={overrides.button6}
                        className={classNames("__wab_instance", sty.button6)}
                        icon={"none"}
                      />
                    }
                  />

                  <Modal
                    data-plasmic-name={"modal"}
                    data-plasmic-override={overrides.modal}
                    className={classNames("__wab_instance", sty.modal)}
                    closeOnBackdropClick={false}
                    content={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ksAtE
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.formFilter2
                            ),
                            extendedOnValuesChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["formFilter2", "value"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);

                              (async (changedValues, allValues) => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            if (!$state.formFilter.value) {
                                              $state.formFilter.value = {};
                                            }
                                            return Object.keys(
                                              $state.formFilter.value
                                            ).forEach(key => {
                                              if (
                                                $state.formFilter.value[key] &&
                                                $state.formFilter.value[key]
                                                  .length === 0
                                              ) {
                                                delete $state.formFilter.value[
                                                  key
                                                ];
                                              }
                                            });
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            formItems: [],
                            labelCol: { span: 8, horizontalOnly: true },
                            layout: "vertical",
                            mode: "advanced",
                            onFinish: async values => {
                              const $steps = {};
                            },
                            onIsSubmittingChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "isSubmitting",
                                ["formFilter2", "isSubmitting"],
                                FormWrapper_Helpers
                              ).apply(null, eventArgs);
                            },
                            ref: ref => {
                              $refs["formFilter2"] = ref;
                            },
                            submitSlot: null,
                            wrapperCol: { span: 16, horizontalOnly: true }
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "formFilter2.value"
                              },
                              {
                                name: "isSubmitting",
                                plasmicStateName: "formFilter2.isSubmitting"
                              }
                            ],
                            [],
                            FormWrapper_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <FormWrapper
                              data-plasmic-name={"formFilter2"}
                              data-plasmic-override={overrides.formFilter2}
                              {...child$Props}
                            >
                              <div
                                data-plasmic-name={"wrapContent2"}
                                data-plasmic-override={overrides.wrapContent2}
                                className={classNames(
                                  projectcss.all,
                                  sty.wrapContent2
                                )}
                              >
                                <div
                                  data-plasmic-name={"searchInput2"}
                                  data-plasmic-override={overrides.searchInput2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.searchInput2
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      allowClear: true,
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input5
                                      ),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input5", "value"],
                                          AntdInput_Helpers
                                        ).apply(null, eventArgs);

                                        (async event => {
                                          const $steps = {};

                                          $steps["updateKeyWords"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["keyWords"]
                                                  },
                                                  operation: 0,
                                                  value: $state.input5.value
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateKeyWords"] != null &&
                                            typeof $steps["updateKeyWords"] ===
                                              "object" &&
                                            typeof $steps["updateKeyWords"]
                                              .then === "function"
                                          ) {
                                            $steps["updateKeyWords"] =
                                              await $steps["updateKeyWords"];
                                          }
                                        }).apply(null, eventArgs);
                                      },
                                      placeholder:
                                        "Mot-cl\u00e9, job, entreprise",
                                      prefix: (
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__mgLeE)}
                                          displayHeight={"20px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"none"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"20px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/image10.svg",
                                            fullWidth: 21,
                                            fullHeight: 20,
                                            aspectRatio: 1.05
                                          }}
                                        />
                                      ),

                                      size: "small",
                                      value: generateStateValueProp($state, [
                                        "input5",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input5.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input5"}
                                        data-plasmic-override={overrides.input5}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </div>
                                <div
                                  data-plasmic-name={"locationInput2"}
                                  data-plasmic-override={
                                    overrides.locationInput2
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.locationInput2
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      allowClear: true,
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input6
                                      ),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input6", "value"],
                                          AntdInput_Helpers
                                        ).apply(null, eventArgs);

                                        (async event => {
                                          const $steps = {};

                                          $steps["updateSearchLocation"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "searchLocation"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: $state.input6.value
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateSearchLocation"] !=
                                              null &&
                                            typeof $steps[
                                              "updateSearchLocation"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateSearchLocation"
                                            ].then === "function"
                                          ) {
                                            $steps["updateSearchLocation"] =
                                              await $steps[
                                                "updateSearchLocation"
                                              ];
                                          }
                                        }).apply(null, eventArgs);
                                      },
                                      placeholder: "Lacalisation",
                                      prefix: (
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__rTsCw)}
                                          displayHeight={"auto"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"auto"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/phMapPinPng.png",
                                            fullWidth: 20,
                                            fullHeight: 20,
                                            aspectRatio: undefined
                                          }}
                                        />
                                      ),

                                      size: "small",
                                      value: generateStateValueProp($state, [
                                        "input6",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input6.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input6"}
                                        data-plasmic-override={overrides.input6}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </div>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__jKtcu
                                  )}
                                  label={"Name"}
                                  name={"sector_activity"}
                                  noLabel={true}
                                >
                                  <AntdSelect
                                    data-plasmic-name={"select15"}
                                    data-plasmic-override={overrides.select15}
                                    allowClear={true}
                                    autoFocus={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select15
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      styleTokensClassNames,
                                      styleTokensClassNames_antd_5_hostless,
                                      styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                      styleTokensClassNames_plasmic_rich_components
                                    )}
                                    dropdownMatchSelectWidth={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? false
                                        : true
                                    }
                                    mode={"single"}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select15",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    optionClassName={classNames({
                                      [sty["pcls_CROrOsyTlJ_a"]]: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                    })}
                                    options={(() => {
                                      try {
                                        return $queries.getCriteria.data
                                          .filter(
                                            item =>
                                              item.type === "sector_activity"
                                          )
                                          .map(item => ({
                                            value: item.name,
                                            label: item.name
                                          }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__xqCqx
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__xjqRn)}
                                          displayHeight={"16px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"14px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/image2.svg",
                                            fullWidth: 20,
                                            fullHeight: 20,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cxyqv
                                          )}
                                        >
                                          {"Secteur"}
                                        </div>
                                      </div>
                                    }
                                    popupScopeClassName={sty["select15__popup"]}
                                    size={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "large"
                                        : "large"
                                    }
                                    useChildren={false}
                                    value={generateStateValueProp($state, [
                                      "select15",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__vfzBe
                                  )}
                                  label={"Name"}
                                  name={"availability_status"}
                                  noLabel={true}
                                  preserve={false}
                                >
                                  <AntdSelect
                                    data-plasmic-name={"select16"}
                                    data-plasmic-override={overrides.select16}
                                    allowClear={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select16
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      styleTokensClassNames,
                                      styleTokensClassNames_antd_5_hostless,
                                      styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                      styleTokensClassNames_plasmic_rich_components
                                    )}
                                    mode={"multiple"}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select16",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    optionClassName={classNames({
                                      [sty["pcls_WYebg1Ow8Eoq"]]: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                    })}
                                    options={(() => {
                                      try {
                                        return $queries.getCriteria.data
                                          .filter(
                                            item =>
                                              item.type ===
                                              "availability_status"
                                          )
                                          .map(item => ({
                                            value: item.name,
                                            label: item.name
                                          }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__aacQt
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(
                                            sty.img___6Kxuz
                                          )}
                                          displayHeight={"16px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"14px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/image3.svg",
                                            fullWidth: 20,
                                            fullHeight: 20,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__oAgZo
                                          )}
                                        >
                                          {"Disponibilit\u00e9"}
                                        </div>
                                      </div>
                                    }
                                    popupScopeClassName={sty["select16__popup"]}
                                    size={"large"}
                                    value={generateStateValueProp($state, [
                                      "select16",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___8JaDx
                                  )}
                                  hidden={false}
                                  label={"Name"}
                                  name={"contract_type"}
                                  noLabel={true}
                                  preserve={false}
                                  shouldUpdate={false}
                                >
                                  <AntdSelect
                                    data-plasmic-name={"select17"}
                                    data-plasmic-override={overrides.select17}
                                    allowClear={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select17
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      styleTokensClassNames,
                                      styleTokensClassNames_antd_5_hostless,
                                      styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                      styleTokensClassNames_plasmic_rich_components
                                    )}
                                    dropdownMatchSelectWidth={false}
                                    mode={"multiple"}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select17",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    optionClassName={classNames({
                                      [sty["pcls_YDM2KEme_2xX"]]: true
                                    })}
                                    options={(() => {
                                      try {
                                        return $queries.getCriteria.data
                                          .filter(
                                            item =>
                                              item.type === "contract_type"
                                          )
                                          .map(item => ({
                                            value: item.name,
                                            label: item.name
                                          }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ug2Ho
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__opSi)}
                                          displayHeight={"16px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"14px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/image7.svg",
                                            fullWidth: 20,
                                            fullHeight: 20,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__hbxu7
                                          )}
                                        >
                                          {"Type de contrat"}
                                        </div>
                                      </div>
                                    }
                                    popupScopeClassName={sty["select17__popup"]}
                                    size={"large"}
                                    suffixIcon={null}
                                    value={generateStateValueProp($state, [
                                      "select17",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__mcSCf
                                  )}
                                  label={"Name"}
                                  name={"working_time"}
                                  noLabel={true}
                                >
                                  <AntdSelect
                                    data-plasmic-name={"select18"}
                                    data-plasmic-override={overrides.select18}
                                    allowClear={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select18
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      styleTokensClassNames,
                                      styleTokensClassNames_antd_5_hostless,
                                      styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                      styleTokensClassNames_plasmic_rich_components
                                    )}
                                    mode={"multiple"}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select18",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    optionClassName={classNames({
                                      [sty["pcls_-AFl0xOWTp7r"]]: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                    })}
                                    options={(() => {
                                      try {
                                        return $queries.getCriteria.data
                                          .filter(
                                            item => item.type === "working_time"
                                          )
                                          .map(item => ({
                                            value: item.name,
                                            label: item.name
                                          }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ykesG
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__dB2Ap)}
                                          displayHeight={"16px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"14px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/image3.svg",
                                            fullWidth: 20,
                                            fullHeight: 20,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__iHmmp
                                          )}
                                        >
                                          {"Temps de travail"}
                                        </div>
                                      </div>
                                    }
                                    popupScopeClassName={sty["select18__popup"]}
                                    size={"large"}
                                    value={generateStateValueProp($state, [
                                      "select18",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___6JuE
                                  )}
                                  label={"Name"}
                                  name={"work_mode"}
                                  noLabel={true}
                                >
                                  <AntdSelect
                                    data-plasmic-name={"select19"}
                                    data-plasmic-override={overrides.select19}
                                    allowClear={true}
                                    autoFocus={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select19
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      styleTokensClassNames,
                                      styleTokensClassNames_antd_5_hostless,
                                      styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                      styleTokensClassNames_plasmic_rich_components
                                    )}
                                    mode={"multiple"}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select19",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    optionClassName={classNames({
                                      [sty["pcls_8FoOPz89dknX"]]: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                    })}
                                    options={(() => {
                                      try {
                                        return $queries.getCriteria.data
                                          .filter(
                                            item => item.type === "work_mode"
                                          )
                                          .map(item => ({
                                            value: item.name,
                                            label: item.name
                                          }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ziZzi
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__ftejM)}
                                          displayHeight={"16px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"14px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/image6.svg",
                                            fullWidth: 20,
                                            fullHeight: 20,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___5GClr
                                          )}
                                        >
                                          {"Mode de travail"}
                                        </div>
                                      </div>
                                    }
                                    popupScopeClassName={sty["select19__popup"]}
                                    showSearch={false}
                                    size={"large"}
                                    value={generateStateValueProp($state, [
                                      "select19",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__vc4Qu
                                  )}
                                  label={"Name"}
                                  name={"salary"}
                                  noLabel={true}
                                >
                                  <AntdSelect
                                    data-plasmic-name={"select20"}
                                    data-plasmic-override={overrides.select20}
                                    allowClear={true}
                                    autoFocus={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select20
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      styleTokensClassNames,
                                      styleTokensClassNames_antd_5_hostless,
                                      styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                      styleTokensClassNames_plasmic_rich_components
                                    )}
                                    mode={"multiple"}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select20",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    optionClassName={classNames({
                                      [sty["pcls_-rriotpc1IlZ"]]: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                    })}
                                    options={(() => {
                                      try {
                                        return $queries.getCriteria.data
                                          .filter(
                                            item => item.type === "salary"
                                          )
                                          .map(item => ({
                                            value: item.name,
                                            label: item.name
                                          }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__wjWt8
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__geNty)}
                                          displayHeight={"16px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"14px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/image5.svg",
                                            fullWidth: 20,
                                            fullHeight: 20,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___2ViYf
                                          )}
                                        >
                                          {"Salaire"}
                                        </div>
                                      </div>
                                    }
                                    popupScopeClassName={sty["select20__popup"]}
                                    size={"large"}
                                    useChildren={false}
                                    value={generateStateValueProp($state, [
                                      "select20",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__rUpCz
                                  )}
                                  label={"Name"}
                                  name={"company_size"}
                                  noLabel={true}
                                >
                                  <AntdSelect
                                    data-plasmic-name={"select21"}
                                    data-plasmic-override={overrides.select21}
                                    allowClear={true}
                                    autoFocus={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select21
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      styleTokensClassNames,
                                      styleTokensClassNames_antd_5_hostless,
                                      styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                      styleTokensClassNames_plasmic_rich_components
                                    )}
                                    mode={"multiple"}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select21",
                                        "value"
                                      ]).apply(null, eventArgs);
                                    }}
                                    optionClassName={classNames({
                                      [sty["pcls_1OTZYyfBb5WN"]]: hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                    })}
                                    options={(() => {
                                      try {
                                        return $queries.getCriteria.data
                                          .filter(
                                            item => item.type === "company_size"
                                          )
                                          .map(item => ({
                                            value: item.name,
                                            label: item.name
                                          }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___1Bb3H
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__eSv1)}
                                          displayHeight={"16px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"14px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/image4.svg",
                                            fullWidth: 20,
                                            fullHeight: 20,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cVeGy
                                          )}
                                        >
                                          {"Taille entreprise"}
                                        </div>
                                      </div>
                                    }
                                    popupScopeClassName={sty["select21__popup"]}
                                    size={"large"}
                                    useChildren={false}
                                    value={generateStateValueProp($state, [
                                      "select21",
                                      "value"
                                    ])}
                                  />
                                </FormItemWrapper>
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : (() => {
                                        try {
                                          return Object.keys(
                                            $state.formFilter2?.value
                                          ).length === 0
                                            ? false
                                            : true;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()
                                ) ? (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__gtMgV
                                    )}
                                    color={"neutral"}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__j9P5S
                                        )}
                                      >
                                        {"tout effacer"}
                                      </div>
                                    }
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return ($state.formFilter = {});
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }
                                    }}
                                    resetsForm={(() => {
                                      try {
                                        return $state.formFilter2.value ==
                                          undefined
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                ) : null}
                                <button
                                  data-plasmic-name={"buttonLastMin"}
                                  data-plasmic-override={
                                    overrides.buttonLastMin
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.button,
                                    sty.buttonLastMin
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateIsLastMinute"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["isLastMinute"]
                                            },
                                            operation: 4
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            const oldValue = $stateGet(
                                              objRoot,
                                              variablePath
                                            );
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              !oldValue
                                            );
                                            return !oldValue;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateIsLastMinute"] != null &&
                                      typeof $steps["updateIsLastMinute"] ===
                                        "object" &&
                                      typeof $steps["updateIsLastMinute"]
                                        .then === "function"
                                    ) {
                                      $steps["updateIsLastMinute"] =
                                        await $steps["updateIsLastMinute"];
                                    }
                                  }}
                                  ref={ref => {
                                    $refs["buttonLastMin"] = ref;
                                  }}
                                >
                                  <PhClockCountdownFillIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__tsYgu
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    data-plasmic-name={"text5"}
                                    data-plasmic-override={overrides.text5}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text5
                                    )}
                                  >
                                    {"LAST MINUTE"}
                                  </div>
                                </button>
                                <PlasmicLink__
                                  data-plasmic-name={"textLinkBase"}
                                  data-plasmic-override={overrides.textLinkBase}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    sty.textLinkBase
                                  )}
                                  component={Link}
                                  href={(() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  platform={"nextjs"}
                                >
                                  <IconPhBellFillIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__pYpGh
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    data-plasmic-name={"text6"}
                                    data-plasmic-override={overrides.text6}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text6
                                    )}
                                  >
                                    {
                                      "Cr\u00e9er une alerte avec ces crit\u00e8res"
                                    }
                                  </div>
                                </PlasmicLink__>
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__kq5Ow
                                  )}
                                  end={
                                    <GroupIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___4YEla
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  iconEnd={true}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___9Kvv6
                                      )}
                                    >
                                      {"Rechercher"}
                                    </div>
                                  }
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateFormFilter2Submited"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "formFilter2Submited"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateFormFilter2Submited"] !=
                                        null &&
                                      typeof $steps[
                                        "updateFormFilter2Submited"
                                      ] === "object" &&
                                      typeof $steps["updateFormFilter2Submited"]
                                        .then === "function"
                                    ) {
                                      $steps["updateFormFilter2Submited"] =
                                        await $steps[
                                          "updateFormFilter2Submited"
                                        ];
                                    }

                                    $steps["updateModalIsOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["modal", "isOpen"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateModalIsOpen"] != null &&
                                      typeof $steps["updateModalIsOpen"] ===
                                        "object" &&
                                      typeof $steps["updateModalIsOpen"]
                                        .then === "function"
                                    ) {
                                      $steps["updateModalIsOpen"] =
                                        await $steps["updateModalIsOpen"];
                                    }
                                  }}
                                  submitsForm={false}
                                />
                              </div>
                            </FormWrapper>
                          );
                        })()}
                      </div>
                    }
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hq1Rd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wThxq
                          )}
                        >
                          {"Enter some text"}
                        </div>
                      </div>
                    }
                    heading={
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__piwi3
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__aM3E9
                          )}
                        >
                          {"Plus de crit\u00e8res"}
                        </h3>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___99Yk6)}
                          displayHeight={"17px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"17px"}
                          loading={"lazy"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateModalIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modal", "isOpen"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalIsOpen"] != null &&
                              typeof $steps["updateModalIsOpen"] === "object" &&
                              typeof $steps["updateModalIsOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalIsOpen"] = await $steps[
                                "updateModalIsOpen"
                              ];
                            }
                          }}
                          src={{
                            src: "/plasmic/jam_production_🚀/images/close2.svg",
                            fullWidth: 17,
                            fullHeight: 17,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                    }
                    isOpen={generateStateValueProp($state, ["modal", "isOpen"])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showFooter={false}
                    trigger={
                      <JamButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        icon={"none"}
                      />
                    }
                  />

                  <Footer
                    data-plasmic-name={"footer"}
                    data-plasmic-override={overrides.footer}
                    className={classNames("__wab_instance", sty.footer)}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </LoadingBoundary>
          <PageLoader
            data-plasmic-name={"updateRoleForGoogleRegistration"}
            data-plasmic-override={overrides.updateRoleForGoogleRegistration}
            className={classNames(
              "__wab_instance",
              sty.updateRoleForGoogleRegistration
            )}
            onMount={async () => {
              const $steps = {};

              $steps["goToRegisterGoogleValidation"] = true
                ? (() => {
                    const actionArgs = { destination: `/register-validation` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToRegisterGoogleValidation"] != null &&
                typeof $steps["goToRegisterGoogleValidation"] === "object" &&
                typeof $steps["goToRegisterGoogleValidation"].then ===
                  "function"
              ) {
                $steps["goToRegisterGoogleValidation"] = await $steps[
                  "goToRegisterGoogleValidation"
                ];
              }
            }}
            shouldRun={(() => {
              try {
                return $ctx.SupabaseUser.user?.user_metadata.role === "google";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rechercheJob: [
    "rechercheJob",
    "loadingBoundary",
    "screen",
    "frame6",
    "frame7",
    "frame8",
    "frame9",
    "header",
    "jamLogo",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "link",
    "main",
    "bgImage",
    "hero",
    "heroLeft",
    "badgeGroup",
    "message",
    "title",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2",
    "jobSearchSection",
    "filtersDesk",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn",
    "mapJobs",
    "joblistandbtn",
    "btn",
    "postes",
    "button4",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent",
    "filtersMobile",
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2",
    "lastMinuteBtn",
    "buttonLastMin2",
    "text7",
    "buttonLastMin3",
    "text8",
    "mapboxContainer",
    "mapBox",
    "section2",
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5",
    "supportingText9",
    "section",
    "sectionCard",
    "sectionCard2",
    "sectionCard3",
    "verifyUserAuth",
    "jobDetails",
    "button5",
    "jobListing",
    "jobDetail",
    "frame38",
    "jobName",
    "likeBtn",
    "like",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "frame",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription",
    "signUpApplication",
    "button6",
    "application",
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textAreaInput",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6",
    "notLoggued",
    "loginForm2",
    "modal",
    "button",
    "formFilter2",
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6",
    "footer",
    "updateRoleForGoogleRegistration"
  ],
  loadingBoundary: [
    "loadingBoundary",
    "screen",
    "frame6",
    "frame7",
    "frame8",
    "frame9",
    "header",
    "jamLogo",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "link",
    "main",
    "bgImage",
    "hero",
    "heroLeft",
    "badgeGroup",
    "message",
    "title",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2",
    "jobSearchSection",
    "filtersDesk",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn",
    "mapJobs",
    "joblistandbtn",
    "btn",
    "postes",
    "button4",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent",
    "filtersMobile",
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2",
    "lastMinuteBtn",
    "buttonLastMin2",
    "text7",
    "buttonLastMin3",
    "text8",
    "mapboxContainer",
    "mapBox",
    "section2",
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5",
    "supportingText9",
    "section",
    "sectionCard",
    "sectionCard2",
    "sectionCard3",
    "verifyUserAuth",
    "jobDetails",
    "button5",
    "jobListing",
    "jobDetail",
    "frame38",
    "jobName",
    "likeBtn",
    "like",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "frame",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription",
    "signUpApplication",
    "button6",
    "application",
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textAreaInput",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6",
    "notLoggued",
    "loginForm2",
    "modal",
    "button",
    "formFilter2",
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6",
    "footer"
  ],
  screen: ["screen", "frame6", "frame7", "frame8", "frame9"],
  frame6: ["frame6", "frame7", "frame8", "frame9"],
  frame7: ["frame7"],
  frame8: ["frame8"],
  frame9: ["frame9"],
  header: ["header", "jamLogo", "frame2", "frame3", "frame4", "frame5", "link"],
  jamLogo: ["jamLogo", "frame2", "frame3", "frame4", "frame5"],
  frame2: ["frame2", "frame3", "frame4", "frame5"],
  frame3: ["frame3"],
  frame4: ["frame4"],
  frame5: ["frame5"],
  link: ["link"],
  main: [
    "main",
    "bgImage",
    "hero",
    "heroLeft",
    "badgeGroup",
    "message",
    "title",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2",
    "jobSearchSection",
    "filtersDesk",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn",
    "mapJobs",
    "joblistandbtn",
    "btn",
    "postes",
    "button4",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent",
    "filtersMobile",
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2",
    "lastMinuteBtn",
    "buttonLastMin2",
    "text7",
    "buttonLastMin3",
    "text8",
    "mapboxContainer",
    "mapBox",
    "section2",
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5",
    "supportingText9",
    "section",
    "sectionCard",
    "sectionCard2",
    "sectionCard3"
  ],
  bgImage: ["bgImage"],
  hero: [
    "hero",
    "heroLeft",
    "badgeGroup",
    "message",
    "title",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2",
    "jobSearchSection",
    "filtersDesk",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn",
    "mapJobs",
    "joblistandbtn",
    "btn",
    "postes",
    "button4",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent",
    "filtersMobile",
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2",
    "lastMinuteBtn",
    "buttonLastMin2",
    "text7",
    "buttonLastMin3",
    "text8",
    "mapboxContainer",
    "mapBox"
  ],
  heroLeft: [
    "heroLeft",
    "badgeGroup",
    "message",
    "title",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2",
    "jobSearchSection",
    "filtersDesk",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn",
    "mapJobs",
    "joblistandbtn",
    "btn",
    "postes",
    "button4",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent",
    "filtersMobile",
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2",
    "lastMinuteBtn",
    "buttonLastMin2",
    "text7",
    "buttonLastMin3",
    "text8",
    "mapboxContainer",
    "mapBox"
  ],
  badgeGroup: ["badgeGroup", "message"],
  message: ["message"],
  title: [
    "title",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2"
  ],
  trouvezUnJobNaJamaisEteAussiSimple: ["trouvezUnJobNaJamaisEteAussiSimple"],
  trouvezUnJobNaJamaisEteAussiSimple2: ["trouvezUnJobNaJamaisEteAussiSimple2"],
  jobSearchSection: [
    "jobSearchSection",
    "filtersDesk",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn",
    "mapJobs",
    "joblistandbtn",
    "btn",
    "postes",
    "button4",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent",
    "filtersMobile",
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2",
    "lastMinuteBtn",
    "buttonLastMin2",
    "text7",
    "buttonLastMin3",
    "text8",
    "mapboxContainer",
    "mapBox"
  ],
  filtersDesk: [
    "filtersDesk",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn"
  ],
  formFilter: [
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn"
  ],
  wrapContent: [
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "button8",
    "resetFormBtn"
  ],
  input3: ["input3"],
  input4: ["input4"],
  select13: ["select13"],
  select9: ["select9"],
  select8: ["select8"],
  select10: ["select10"],
  select14: ["select14"],
  select12: ["select12"],
  button8: ["button8"],
  resetFormBtn: ["resetFormBtn"],
  mapJobs: [
    "mapJobs",
    "joblistandbtn",
    "btn",
    "postes",
    "button4",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent",
    "filtersMobile",
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2",
    "lastMinuteBtn",
    "buttonLastMin2",
    "text7",
    "buttonLastMin3",
    "text8",
    "mapboxContainer",
    "mapBox"
  ],
  joblistandbtn: [
    "joblistandbtn",
    "btn",
    "postes",
    "button4",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent"
  ],
  btn: ["btn", "postes", "button4", "featuredIcon7", "featuredIcon8"],
  postes: ["postes", "button4", "featuredIcon7", "featuredIcon8"],
  button4: ["button4", "featuredIcon7", "featuredIcon8"],
  featuredIcon7: ["featuredIcon7"],
  featuredIcon8: ["featuredIcon8"],
  jobListContainer: [
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "loadingComponent"
  ],
  jobsOnScroll: [
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20"
  ],
  likeButtons: ["likeButtons", "like2", "dislike"],
  like2: ["like2"],
  dislike: ["dislike"],
  jobCard20: ["jobCard20"],
  loadingComponent: ["loadingComponent"],
  filtersMobile: [
    "filtersMobile",
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2"
  ],
  formFilter3: [
    "formFilter3",
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2"
  ],
  wrapContent3: [
    "wrapContent3",
    "input7",
    "input8",
    "select22",
    "select11",
    "select23",
    "select24",
    "select25",
    "select26",
    "button9",
    "resetFormBtn2"
  ],
  input7: ["input7"],
  input8: ["input8"],
  select22: ["select22"],
  select11: ["select11"],
  select23: ["select23"],
  select24: ["select24"],
  select25: ["select25"],
  select26: ["select26"],
  button9: ["button9"],
  resetFormBtn2: ["resetFormBtn2"],
  lastMinuteBtn: [
    "lastMinuteBtn",
    "buttonLastMin2",
    "text7",
    "buttonLastMin3",
    "text8"
  ],
  buttonLastMin2: ["buttonLastMin2", "text7"],
  text7: ["text7"],
  buttonLastMin3: ["buttonLastMin3", "text8"],
  text8: ["text8"],
  mapboxContainer: ["mapboxContainer", "mapBox"],
  mapBox: ["mapBox"],
  section2: [
    "section2",
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5",
    "supportingText9",
    "section",
    "sectionCard",
    "sectionCard2",
    "sectionCard3"
  ],
  headingAndSupportingText2: [
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5",
    "supportingText9"
  ],
  badgeGroup3: ["badgeGroup3", "content8", "message3"],
  content8: ["content8", "message3"],
  message3: ["message3"],
  heading2: ["heading2"],
  supportingText5: ["supportingText5"],
  supportingText9: ["supportingText9"],
  section: ["section", "sectionCard", "sectionCard2", "sectionCard3"],
  sectionCard: ["sectionCard"],
  sectionCard2: ["sectionCard2"],
  sectionCard3: ["sectionCard3"],
  verifyUserAuth: ["verifyUserAuth"],
  jobDetails: [
    "jobDetails",
    "button5",
    "jobListing",
    "jobDetail",
    "frame38",
    "jobName",
    "likeBtn",
    "like",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "frame",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription"
  ],
  button5: ["button5"],
  jobListing: [
    "jobListing",
    "jobDetail",
    "frame38",
    "jobName",
    "likeBtn",
    "like",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "frame",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription"
  ],
  jobDetail: [
    "jobDetail",
    "frame38",
    "jobName",
    "likeBtn",
    "like",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "frame"
  ],
  frame38: ["frame38", "jobName", "likeBtn", "like", "dislike3"],
  jobName: ["jobName"],
  likeBtn: ["likeBtn", "like", "dislike3"],
  like: ["like"],
  dislike3: ["dislike3"],
  location: ["location"],
  publicationDate: ["publicationDate"],
  frame46: [
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "frame"
  ],
  frame47: [
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4"
  ],
  frame48: ["frame48", "dkTrucksPark"],
  dkTrucksPark: ["dkTrucksPark"],
  frame49: ["frame49", "dkTrucksPark2"],
  dkTrucksPark2: ["dkTrucksPark2"],
  frame50: ["frame50", "dkTrucksPark3"],
  dkTrucksPark3: ["dkTrucksPark3"],
  frame51: ["frame51", "dkTrucksPark4"],
  dkTrucksPark4: ["dkTrucksPark4"],
  frame: ["frame"],
  jobDescriptionContainer: [
    "jobDescriptionContainer",
    "jobDescription",
    "benefits"
  ],
  jobDescription: ["jobDescription"],
  benefits: ["benefits"],
  expectedProfileContainer: ["expectedProfileContainer", "expectedProfile"],
  expectedProfile: ["expectedProfile"],
  companyContainer: [
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription"
  ],
  logoContainer: ["logoContainer", "logo"],
  logo: ["logo"],
  companyName: ["companyName"],
  companyDetail: [
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation"
  ],
  sectorActivity: ["sectorActivity", "dkTrucksPark5"],
  dkTrucksPark5: ["dkTrucksPark5"],
  companySize: ["companySize", "dkTrucksPark6"],
  dkTrucksPark6: ["dkTrucksPark6"],
  companyLocation: ["companyLocation"],
  companyDescription: ["companyDescription"],
  signUpApplication: [
    "signUpApplication",
    "button6",
    "application",
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textAreaInput",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6",
    "notLoggued",
    "loginForm2"
  ],
  button6: ["button6"],
  application: [
    "application",
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textAreaInput",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6",
    "notLoggued",
    "loginForm2"
  ],
  header2: [
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85"
  ],
  frame67: ["frame67", "frame68", "frame69"],
  frame68: ["frame68", "frame69"],
  frame69: ["frame69"],
  frame74: [
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10"
  ],
  frame75: [
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10"
  ],
  frame76: ["frame76", "dkTrucksPark7"],
  dkTrucksPark7: ["dkTrucksPark7"],
  frame77: ["frame77", "dkTrucksPark8"],
  dkTrucksPark8: ["dkTrucksPark8"],
  frame16: ["frame16", "dkTrucksPark9"],
  dkTrucksPark9: ["dkTrucksPark9"],
  frame17: ["frame17", "dkTrucksPark10"],
  dkTrucksPark10: ["dkTrucksPark10"],
  frame18: [
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85"
  ],
  frame78: [
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84"
  ],
  frame79: [
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84"
  ],
  frame80: [
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84"
  ],
  frame81: ["frame81", "dkTrucksPark11"],
  dkTrucksPark11: ["dkTrucksPark11"],
  frame82: ["frame82", "dkTrucksPark12"],
  dkTrucksPark12: ["dkTrucksPark12"],
  frame83: ["frame83", "frame84"],
  frame84: ["frame84"],
  frame85: ["frame85"],
  form: [
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textAreaInput",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6"
  ],
  upload2: ["upload2", "editIcon2", "frame19", "deleteIcon2", "frame20"],
  editIcon2: ["editIcon2", "frame19"],
  frame19: ["frame19"],
  deleteIcon2: ["deleteIcon2", "frame20"],
  frame20: ["frame20"],
  nomPrenom: ["nomPrenom", "textInput1", "textInput2"],
  textInput1: ["textInput1"],
  textInput2: ["textInput2"],
  textInput4: ["textInput4"],
  telephone: ["telephone", "phoneSelector", "textInput3"],
  phoneSelector: ["phoneSelector"],
  textInput3: ["textInput3"],
  rue: ["rue"],
  codePosteVille: ["codePosteVille", "codePostal", "ville"],
  codePostal: ["codePostal"],
  ville: ["ville"],
  textInput5: ["textInput5"],
  select2: ["select2"],
  select4: ["select4"],
  select5: ["select5"],
  textAreaInput: ["textAreaInput"],
  select7: ["select7"],
  select: ["select"],
  frame13: [
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3"
  ],
  frame14: [
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content"
  ],
  email4: ["email4"],
  cvUpload: ["cvUpload", "content5"],
  content5: ["content5"],
  fileUploader3: ["fileUploader3", "upload", "content"],
  upload: ["upload", "content"],
  content: ["content"],
  frame15: [
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3"
  ],
  email5: ["email5"],
  cvUpload2: ["cvUpload2", "content6"],
  content6: ["content6"],
  fileUploader4: ["fileUploader4", "upload3"],
  upload3: ["upload3"],
  frame92: [
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2"
  ],
  frame93: ["frame93", "email3", "fileUploader"],
  email3: ["email3"],
  fileUploader: ["fileUploader"],
  frame94: ["frame94", "email2", "fileUploader2"],
  email2: ["email2"],
  fileUploader2: ["fileUploader2"],
  textInput6: ["textInput6"],
  notLoggued: ["notLoggued", "loginForm2"],
  loginForm2: ["loginForm2"],
  modal: [
    "modal",
    "button",
    "formFilter2",
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6"
  ],
  button: ["button"],
  formFilter2: [
    "formFilter2",
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6"
  ],
  wrapContent2: [
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6"
  ],
  searchInput2: ["searchInput2", "input5"],
  input5: ["input5"],
  locationInput2: ["locationInput2", "input6"],
  input6: ["input6"],
  select15: ["select15"],
  select16: ["select16"],
  select17: ["select17"],
  select18: ["select18"],
  select19: ["select19"],
  select20: ["select20"],
  select21: ["select21"],
  buttonLastMin: ["buttonLastMin", "text5"],
  text5: ["text5"],
  textLinkBase: ["textLinkBase", "text6"],
  text6: ["text6"],
  footer: ["footer"],
  updateRoleForGoogleRegistration: ["updateRoleForGoogleRegistration"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rechercheJob: "div";
  loadingBoundary: typeof LoadingBoundary;
  screen: "div";
  frame6: "div";
  frame7: "div";
  frame8: "div";
  frame9: "div";
  header: "header";
  jamLogo: "div";
  frame2: "div";
  frame3: "div";
  frame4: "div";
  frame5: "div";
  link: "a";
  main: "main";
  bgImage: typeof PlasmicImg__;
  hero: "section";
  heroLeft: "div";
  badgeGroup: "div";
  message: "div";
  title: "div";
  trouvezUnJobNaJamaisEteAussiSimple: "h1";
  trouvezUnJobNaJamaisEteAussiSimple2: "p";
  jobSearchSection: "div";
  filtersDesk: "div";
  formFilter: typeof FormWrapper;
  wrapContent: "div";
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  select13: typeof AntdSelect;
  select9: typeof AntdSelect;
  select8: typeof AntdSelect;
  select10: typeof AntdSelect;
  select14: typeof AntdSelect;
  select12: typeof AntdSelect;
  button8: typeof Button;
  resetFormBtn: "button";
  mapJobs: "div";
  joblistandbtn: "div";
  btn: "div";
  postes: "div";
  button4: "div";
  featuredIcon7: "div";
  featuredIcon8: "div";
  jobListContainer: "div";
  jobsOnScroll: "div";
  likeButtons: "div";
  like2: "svg";
  dislike: "svg";
  jobCard20: typeof JobCard20;
  loadingComponent: typeof LoadingComponent;
  filtersMobile: "div";
  formFilter3: typeof FormWrapper;
  wrapContent3: "div";
  input7: typeof AntdInput;
  input8: typeof AntdInput;
  select22: typeof AntdSelect;
  select11: typeof AntdSelect;
  select23: typeof AntdSelect;
  select24: typeof AntdSelect;
  select25: typeof AntdSelect;
  select26: typeof AntdSelect;
  button9: typeof Button;
  resetFormBtn2: "button";
  lastMinuteBtn: "div";
  buttonLastMin2: "button";
  text7: "div";
  buttonLastMin3: "button";
  text8: "div";
  mapboxContainer: "div";
  mapBox: typeof MapBox;
  section2: "section";
  headingAndSupportingText2: "header";
  badgeGroup3: "div";
  content8: "div";
  message3: "div";
  heading2: "h2";
  supportingText5: "p";
  supportingText9: "p";
  section: "article";
  sectionCard: typeof SectionCard;
  sectionCard2: typeof SectionCard;
  sectionCard3: typeof SectionCard;
  verifyUserAuth: typeof Modal;
  jobDetails: typeof Modal;
  button5: typeof JamButton;
  jobListing: "div";
  jobDetail: "div";
  frame38: "div";
  jobName: "div";
  likeBtn: "div";
  like: "svg";
  dislike3: "svg";
  location: "div";
  publicationDate: "div";
  frame46: "div";
  frame47: "div";
  frame48: "div";
  dkTrucksPark: "div";
  frame49: "div";
  dkTrucksPark2: "div";
  frame50: "div";
  dkTrucksPark3: "div";
  frame51: "div";
  dkTrucksPark4: "div";
  frame: "div";
  jobDescriptionContainer: "div";
  jobDescription: "div";
  benefits: "div";
  expectedProfileContainer: "div";
  expectedProfile: "div";
  companyContainer: "div";
  logoContainer: "div";
  logo: typeof PlasmicImg__;
  companyName: "div";
  companyDetail: "div";
  sectorActivity: "div";
  dkTrucksPark5: "div";
  companySize: "div";
  dkTrucksPark6: "div";
  companyLocation: "div";
  companyDescription: "div";
  signUpApplication: typeof Modal;
  button6: typeof JamButton;
  application: "div";
  header2: "div";
  frame67: "div";
  frame68: "div";
  frame69: "div";
  frame74: "div";
  frame75: "div";
  frame76: "div";
  dkTrucksPark7: "div";
  frame77: "div";
  dkTrucksPark8: "div";
  frame16: "div";
  dkTrucksPark9: "div";
  frame17: "div";
  dkTrucksPark10: "div";
  frame18: "div";
  frame78: "div";
  frame79: "div";
  frame80: "div";
  frame81: "div";
  dkTrucksPark11: "div";
  frame82: "div";
  dkTrucksPark12: "div";
  frame83: "div";
  frame84: "div";
  frame85: "div";
  form: typeof FormWrapper;
  upload2: typeof UploadWrapper;
  editIcon2: "div";
  frame19: "div";
  deleteIcon2: "div";
  frame20: "div";
  nomPrenom: "div";
  textInput1: typeof TextInput;
  textInput2: typeof TextInput;
  textInput4: typeof TextInput;
  telephone: "div";
  phoneSelector: typeof PhoneSelector;
  textInput3: typeof TextInput;
  rue: typeof TextInput;
  codePosteVille: "div";
  codePostal: typeof TextInput;
  ville: typeof TextInput;
  textInput5: typeof TextInput;
  select2: typeof Select;
  select4: typeof Select;
  select5: typeof AntdSelect;
  textAreaInput: typeof TextAreaInput;
  select7: typeof AntdSelect;
  select: typeof Select;
  frame13: "div";
  frame14: "div";
  email4: "div";
  cvUpload: "div";
  content5: "div";
  fileUploader3: "div";
  upload: typeof UploadWrapper;
  content: "div";
  frame15: "div";
  email5: "div";
  cvUpload2: "div";
  content6: "div";
  fileUploader4: "div";
  upload3: typeof UploadWrapper;
  frame92: "div";
  frame93: "div";
  email3: "div";
  fileUploader: typeof FileUploader;
  frame94: "div";
  email2: "div";
  fileUploader2: typeof FileUploader;
  textInput6: typeof TextInput;
  notLoggued: "div";
  loginForm2: typeof Login;
  modal: typeof Modal;
  button: typeof JamButton;
  formFilter2: typeof FormWrapper;
  wrapContent2: "div";
  searchInput2: "div";
  input5: typeof AntdInput;
  locationInput2: "div";
  input6: typeof AntdInput;
  select15: typeof AntdSelect;
  select16: typeof AntdSelect;
  select17: typeof AntdSelect;
  select18: typeof AntdSelect;
  select19: typeof AntdSelect;
  select20: typeof AntdSelect;
  select21: typeof AntdSelect;
  buttonLastMin: "button";
  text5: "div";
  textLinkBase: "a";
  text6: "div";
  footer: typeof Footer;
  updateRoleForGoogleRegistration: typeof PageLoader;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccueil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccueil__VariantsArgs;
    args?: PlasmicAccueil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccueil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccueil__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccueil__ArgProps,
          internalVariantPropNames: PlasmicAccueil__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccueil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rechercheJob") {
    func.displayName = "PlasmicAccueil";
  } else {
    func.displayName = `PlasmicAccueil.${nodeName}`;
  }
  return func;
}

export const PlasmicAccueil = Object.assign(
  // Top-level PlasmicAccueil renders the root element
  makeNodeComponent("rechercheJob"),
  {
    // Helper components rendering sub-elements
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    screen: makeNodeComponent("screen"),
    frame6: makeNodeComponent("frame6"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    frame9: makeNodeComponent("frame9"),
    header: makeNodeComponent("header"),
    jamLogo: makeNodeComponent("jamLogo"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    link: makeNodeComponent("link"),
    main: makeNodeComponent("main"),
    bgImage: makeNodeComponent("bgImage"),
    hero: makeNodeComponent("hero"),
    heroLeft: makeNodeComponent("heroLeft"),
    badgeGroup: makeNodeComponent("badgeGroup"),
    message: makeNodeComponent("message"),
    title: makeNodeComponent("title"),
    trouvezUnJobNaJamaisEteAussiSimple: makeNodeComponent(
      "trouvezUnJobNaJamaisEteAussiSimple"
    ),
    trouvezUnJobNaJamaisEteAussiSimple2: makeNodeComponent(
      "trouvezUnJobNaJamaisEteAussiSimple2"
    ),
    jobSearchSection: makeNodeComponent("jobSearchSection"),
    filtersDesk: makeNodeComponent("filtersDesk"),
    formFilter: makeNodeComponent("formFilter"),
    wrapContent: makeNodeComponent("wrapContent"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    select13: makeNodeComponent("select13"),
    select9: makeNodeComponent("select9"),
    select8: makeNodeComponent("select8"),
    select10: makeNodeComponent("select10"),
    select14: makeNodeComponent("select14"),
    select12: makeNodeComponent("select12"),
    button8: makeNodeComponent("button8"),
    resetFormBtn: makeNodeComponent("resetFormBtn"),
    mapJobs: makeNodeComponent("mapJobs"),
    joblistandbtn: makeNodeComponent("joblistandbtn"),
    btn: makeNodeComponent("btn"),
    postes: makeNodeComponent("postes"),
    button4: makeNodeComponent("button4"),
    featuredIcon7: makeNodeComponent("featuredIcon7"),
    featuredIcon8: makeNodeComponent("featuredIcon8"),
    jobListContainer: makeNodeComponent("jobListContainer"),
    jobsOnScroll: makeNodeComponent("jobsOnScroll"),
    likeButtons: makeNodeComponent("likeButtons"),
    like2: makeNodeComponent("like2"),
    dislike: makeNodeComponent("dislike"),
    jobCard20: makeNodeComponent("jobCard20"),
    loadingComponent: makeNodeComponent("loadingComponent"),
    filtersMobile: makeNodeComponent("filtersMobile"),
    formFilter3: makeNodeComponent("formFilter3"),
    wrapContent3: makeNodeComponent("wrapContent3"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    select22: makeNodeComponent("select22"),
    select11: makeNodeComponent("select11"),
    select23: makeNodeComponent("select23"),
    select24: makeNodeComponent("select24"),
    select25: makeNodeComponent("select25"),
    select26: makeNodeComponent("select26"),
    button9: makeNodeComponent("button9"),
    resetFormBtn2: makeNodeComponent("resetFormBtn2"),
    lastMinuteBtn: makeNodeComponent("lastMinuteBtn"),
    buttonLastMin2: makeNodeComponent("buttonLastMin2"),
    text7: makeNodeComponent("text7"),
    buttonLastMin3: makeNodeComponent("buttonLastMin3"),
    text8: makeNodeComponent("text8"),
    mapboxContainer: makeNodeComponent("mapboxContainer"),
    mapBox: makeNodeComponent("mapBox"),
    section2: makeNodeComponent("section2"),
    headingAndSupportingText2: makeNodeComponent("headingAndSupportingText2"),
    badgeGroup3: makeNodeComponent("badgeGroup3"),
    content8: makeNodeComponent("content8"),
    message3: makeNodeComponent("message3"),
    heading2: makeNodeComponent("heading2"),
    supportingText5: makeNodeComponent("supportingText5"),
    supportingText9: makeNodeComponent("supportingText9"),
    section: makeNodeComponent("section"),
    sectionCard: makeNodeComponent("sectionCard"),
    sectionCard2: makeNodeComponent("sectionCard2"),
    sectionCard3: makeNodeComponent("sectionCard3"),
    verifyUserAuth: makeNodeComponent("verifyUserAuth"),
    jobDetails: makeNodeComponent("jobDetails"),
    button5: makeNodeComponent("button5"),
    jobListing: makeNodeComponent("jobListing"),
    jobDetail: makeNodeComponent("jobDetail"),
    frame38: makeNodeComponent("frame38"),
    jobName: makeNodeComponent("jobName"),
    likeBtn: makeNodeComponent("likeBtn"),
    like: makeNodeComponent("like"),
    dislike3: makeNodeComponent("dislike3"),
    location: makeNodeComponent("location"),
    publicationDate: makeNodeComponent("publicationDate"),
    frame46: makeNodeComponent("frame46"),
    frame47: makeNodeComponent("frame47"),
    frame48: makeNodeComponent("frame48"),
    dkTrucksPark: makeNodeComponent("dkTrucksPark"),
    frame49: makeNodeComponent("frame49"),
    dkTrucksPark2: makeNodeComponent("dkTrucksPark2"),
    frame50: makeNodeComponent("frame50"),
    dkTrucksPark3: makeNodeComponent("dkTrucksPark3"),
    frame51: makeNodeComponent("frame51"),
    dkTrucksPark4: makeNodeComponent("dkTrucksPark4"),
    frame: makeNodeComponent("frame"),
    jobDescriptionContainer: makeNodeComponent("jobDescriptionContainer"),
    jobDescription: makeNodeComponent("jobDescription"),
    benefits: makeNodeComponent("benefits"),
    expectedProfileContainer: makeNodeComponent("expectedProfileContainer"),
    expectedProfile: makeNodeComponent("expectedProfile"),
    companyContainer: makeNodeComponent("companyContainer"),
    logoContainer: makeNodeComponent("logoContainer"),
    logo: makeNodeComponent("logo"),
    companyName: makeNodeComponent("companyName"),
    companyDetail: makeNodeComponent("companyDetail"),
    sectorActivity: makeNodeComponent("sectorActivity"),
    dkTrucksPark5: makeNodeComponent("dkTrucksPark5"),
    companySize: makeNodeComponent("companySize"),
    dkTrucksPark6: makeNodeComponent("dkTrucksPark6"),
    companyLocation: makeNodeComponent("companyLocation"),
    companyDescription: makeNodeComponent("companyDescription"),
    signUpApplication: makeNodeComponent("signUpApplication"),
    button6: makeNodeComponent("button6"),
    application: makeNodeComponent("application"),
    header2: makeNodeComponent("header2"),
    frame67: makeNodeComponent("frame67"),
    frame68: makeNodeComponent("frame68"),
    frame69: makeNodeComponent("frame69"),
    frame74: makeNodeComponent("frame74"),
    frame75: makeNodeComponent("frame75"),
    frame76: makeNodeComponent("frame76"),
    dkTrucksPark7: makeNodeComponent("dkTrucksPark7"),
    frame77: makeNodeComponent("frame77"),
    dkTrucksPark8: makeNodeComponent("dkTrucksPark8"),
    frame16: makeNodeComponent("frame16"),
    dkTrucksPark9: makeNodeComponent("dkTrucksPark9"),
    frame17: makeNodeComponent("frame17"),
    dkTrucksPark10: makeNodeComponent("dkTrucksPark10"),
    frame18: makeNodeComponent("frame18"),
    frame78: makeNodeComponent("frame78"),
    frame79: makeNodeComponent("frame79"),
    frame80: makeNodeComponent("frame80"),
    frame81: makeNodeComponent("frame81"),
    dkTrucksPark11: makeNodeComponent("dkTrucksPark11"),
    frame82: makeNodeComponent("frame82"),
    dkTrucksPark12: makeNodeComponent("dkTrucksPark12"),
    frame83: makeNodeComponent("frame83"),
    frame84: makeNodeComponent("frame84"),
    frame85: makeNodeComponent("frame85"),
    form: makeNodeComponent("form"),
    upload2: makeNodeComponent("upload2"),
    editIcon2: makeNodeComponent("editIcon2"),
    frame19: makeNodeComponent("frame19"),
    deleteIcon2: makeNodeComponent("deleteIcon2"),
    frame20: makeNodeComponent("frame20"),
    nomPrenom: makeNodeComponent("nomPrenom"),
    textInput1: makeNodeComponent("textInput1"),
    textInput2: makeNodeComponent("textInput2"),
    textInput4: makeNodeComponent("textInput4"),
    telephone: makeNodeComponent("telephone"),
    phoneSelector: makeNodeComponent("phoneSelector"),
    textInput3: makeNodeComponent("textInput3"),
    rue: makeNodeComponent("rue"),
    codePosteVille: makeNodeComponent("codePosteVille"),
    codePostal: makeNodeComponent("codePostal"),
    ville: makeNodeComponent("ville"),
    textInput5: makeNodeComponent("textInput5"),
    select2: makeNodeComponent("select2"),
    select4: makeNodeComponent("select4"),
    select5: makeNodeComponent("select5"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    select7: makeNodeComponent("select7"),
    select: makeNodeComponent("select"),
    frame13: makeNodeComponent("frame13"),
    frame14: makeNodeComponent("frame14"),
    email4: makeNodeComponent("email4"),
    cvUpload: makeNodeComponent("cvUpload"),
    content5: makeNodeComponent("content5"),
    fileUploader3: makeNodeComponent("fileUploader3"),
    upload: makeNodeComponent("upload"),
    content: makeNodeComponent("content"),
    frame15: makeNodeComponent("frame15"),
    email5: makeNodeComponent("email5"),
    cvUpload2: makeNodeComponent("cvUpload2"),
    content6: makeNodeComponent("content6"),
    fileUploader4: makeNodeComponent("fileUploader4"),
    upload3: makeNodeComponent("upload3"),
    frame92: makeNodeComponent("frame92"),
    frame93: makeNodeComponent("frame93"),
    email3: makeNodeComponent("email3"),
    fileUploader: makeNodeComponent("fileUploader"),
    frame94: makeNodeComponent("frame94"),
    email2: makeNodeComponent("email2"),
    fileUploader2: makeNodeComponent("fileUploader2"),
    textInput6: makeNodeComponent("textInput6"),
    notLoggued: makeNodeComponent("notLoggued"),
    loginForm2: makeNodeComponent("loginForm2"),
    modal: makeNodeComponent("modal"),
    button: makeNodeComponent("button"),
    formFilter2: makeNodeComponent("formFilter2"),
    wrapContent2: makeNodeComponent("wrapContent2"),
    searchInput2: makeNodeComponent("searchInput2"),
    input5: makeNodeComponent("input5"),
    locationInput2: makeNodeComponent("locationInput2"),
    input6: makeNodeComponent("input6"),
    select15: makeNodeComponent("select15"),
    select16: makeNodeComponent("select16"),
    select17: makeNodeComponent("select17"),
    select18: makeNodeComponent("select18"),
    select19: makeNodeComponent("select19"),
    select20: makeNodeComponent("select20"),
    select21: makeNodeComponent("select21"),
    buttonLastMin: makeNodeComponent("buttonLastMin"),
    text5: makeNodeComponent("text5"),
    textLinkBase: makeNodeComponent("textLinkBase"),
    text6: makeNodeComponent("text6"),
    footer: makeNodeComponent("footer"),
    updateRoleForGoogleRegistration: makeNodeComponent(
      "updateRoleForGoogleRegistration"
    ),

    // Metadata about props expected for PlasmicAccueil
    internalVariantProps: PlasmicAccueil__VariantProps,
    internalArgProps: PlasmicAccueil__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Accueil",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccueil;
/* prettier-ignore-end */
