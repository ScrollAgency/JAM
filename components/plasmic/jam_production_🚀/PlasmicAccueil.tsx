/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: x8mEiwhu6Vco

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import ClearBtn from "../../ClearBtn"; // plasmic-import: w2sS9PPQXQ_k/component
import { MapBox } from "../../others/MapBox/MapBox"; // plasmic-import: LQF6pcE1iukm/codeComponent
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import { JobCard } from "../../cards/JobCard/JobCard"; // plasmic-import: epi6kICoBl8S/codeComponent
import JobCard20 from "../../JobCard20"; // plasmic-import: VbqA3KvJ940Z/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { PhoneSelector } from "../../forms/PhoneSelector/PhoneSelector"; // plasmic-import: sOyePdANTQ6t/codeComponent
import Select from "../../Select"; // plasmic-import: ZMB-SB-xJDyQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: plmAgyhhAdMc/component
import MenuSection from "../../MenuSection"; // plasmic-import: MUvYPH7rZO6i/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { FileUploader } from "../../others/FileUploader/FileUploader"; // plasmic-import: RpVDoPZzyXH3/codeComponent
import { Login } from "../../auth/Login"; // plasmic-import: DTfpuarR8FPx/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicAccueil.module.css"; // plasmic-import: x8mEiwhu6Vco/css

import Vector12Icon from "./icons/PlasmicIcon__Vector12"; // plasmic-import: 5U7jknIbCE_j/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import Vector22Icon from "./icons/PlasmicIcon__Vector22"; // plasmic-import: Ykfk_-VFlaKp/icon
import Vector18Icon from "./icons/PlasmicIcon__Vector18"; // plasmic-import: JUKb9Zc4HfIz/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import Vector19Icon from "./icons/PlasmicIcon__Vector19"; // plasmic-import: x-e3wkzQ4xVg/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: yCa_tEPZRIxr/icon
import HeartStraightStreamlinePhosphorSvgIcon from "./icons/PlasmicIcon__HeartStraightStreamlinePhosphorSvg"; // plasmic-import: TgoKIDr5z3En/icon
import HeartStraightIcon from "./icons/PlasmicIcon__HeartStraight"; // plasmic-import: 2A8amxR7FAse/icon
import PhClockCountdownFill3Icon from "./icons/PlasmicIcon__PhClockCountdownFill3"; // plasmic-import: j8TopiIYLYKn/icon
import LikeIconIcon from "./icons/PlasmicIcon__LikeIcon"; // plasmic-import: _YvBX6QjT3en/icon
import PersonSimpleWalkIcon from "./icons/PlasmicIcon__PersonSimpleWalk"; // plasmic-import: SiceSr5Gywz4/icon
import Mail2Icon from "./icons/PlasmicIcon__Mail2"; // plasmic-import: rZP3MS1dOHIL/icon
import ClockCountdownIcon from "./icons/PlasmicIcon__ClockCountdown"; // plasmic-import: SFl8xy9PdAWQ/icon
import SocialIcon2Icon from "./icons/PlasmicIcon__SocialIcon2"; // plasmic-import: 85_PHFbzbYbc/icon
import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: uW8IxWz2drGt/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: jg2ejGQewG0B/icon
import PhMapPin2Icon from "./icons/PlasmicIcon__PhMapPin2"; // plasmic-import: hGRa__J54hta/icon
import PhFileTextIcon from "./icons/PlasmicIcon__PhFileText"; // plasmic-import: kuV0Q3xSw_jm/icon
import PhClockIcon from "./icons/PlasmicIcon__PhClock"; // plasmic-import: r6dP5yPLK2Mb/icon
import PhCoinsLightIcon from "./icons/PlasmicIcon__PhCoinsLight"; // plasmic-import: 4H-jk36Nk9q0/icon
import PhClockCountdownIcon from "./icons/PlasmicIcon__PhClockCountdown"; // plasmic-import: EKdA7LX61Arw/icon
import IconPhBriefcase2Icon from "./icons/PlasmicIcon__IconPhBriefcase2"; // plasmic-import: QT5tozis-7ZJ/icon
import PhUsersThreeIcon from "./icons/PlasmicIcon__PhUsersThree"; // plasmic-import: 5hJF42npUKid/icon
import PhMapTrifoldFillIcon from "./icons/PlasmicIcon__PhMapTrifoldFill"; // plasmic-import: uZBfKa3cidgz/icon
import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import Line10Icon from "./icons/PlasmicIcon__Line10"; // plasmic-import: okDoJMf2ty5e/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: yud1FH0Ox1FR/icon
import PhClockCountdownFillIcon from "./icons/PlasmicIcon__PhClockCountdownFill"; // plasmic-import: GhtgoozaYTSb/icon
import IconPhBellFillIcon from "./icons/PlasmicIcon__IconPhBellFill"; // plasmic-import: unf2e-lexzfx/icon

createPlasmicElementProxy;

export type PlasmicAccueil__VariantMembers = {};
export type PlasmicAccueil__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccueil__VariantsArgs;
export const PlasmicAccueil__VariantProps = new Array<VariantPropType>();

export type PlasmicAccueil__ArgsType = {};
type ArgPropType = keyof PlasmicAccueil__ArgsType;
export const PlasmicAccueil__ArgProps = new Array<ArgPropType>();

export type PlasmicAccueil__OverridesType = {
  rechercheJob?: Flex__<"div">;
  header?: Flex__<"header">;
  jamLogo?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame5?: Flex__<"div">;
  main?: Flex__<"main">;
  bgImage?: Flex__<typeof PlasmicImg__>;
  section1?: Flex__<"section">;
  title?: Flex__<"div">;
  badgeGroup?: Flex__<"div">;
  message?: Flex__<"div">;
  trouvezUnJobNaJamaisEteAussiSimple?: Flex__<"h1">;
  trouvezUnJobNaJamaisEteAussiSimple2?: Flex__<"p">;
  jobSearchSection?: Flex__<"div">;
  filters?: Flex__<"div">;
  formFilter?: Flex__<typeof FormWrapper>;
  wrapContent?: Flex__<"div">;
  input3?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  select13?: Flex__<typeof AntdSelect>;
  select9?: Flex__<typeof AntdSelect>;
  select8?: Flex__<typeof AntdSelect>;
  select10?: Flex__<typeof AntdSelect>;
  select14?: Flex__<typeof AntdSelect>;
  select12?: Flex__<typeof AntdSelect>;
  select11?: Flex__<typeof AntdSelect>;
  button8?: Flex__<typeof Button>;
  clearBtn?: Flex__<typeof ClearBtn>;
  resetFormBtn?: Flex__<"button">;
  mapJobs?: Flex__<"div">;
  postes?: Flex__<"div">;
  button4?: Flex__<"div">;
  button3?: Flex__<typeof JamButton>;
  button7?: Flex__<typeof JamButton>;
  featuredIcon7?: Flex__<"div">;
  featuredIcon8?: Flex__<"div">;
  jobListContainer?: Flex__<"div">;
  jobsOnScroll?: Flex__<"div">;
  likeButtons?: Flex__<"div">;
  like2?: Flex__<"svg">;
  dislike?: Flex__<"svg">;
  jobCard20?: Flex__<typeof JobCard20>;
  buttonLastMin2?: Flex__<"button">;
  text7?: Flex__<"div">;
  mapJobs2?: Flex__<"div">;
  postes2?: Flex__<"div">;
  button9?: Flex__<"div">;
  button10?: Flex__<typeof JamButton>;
  button11?: Flex__<typeof JamButton>;
  jobListContainer2?: Flex__<"div">;
  jobsOnScroll2?: Flex__<"div">;
  likeButtons2?: Flex__<"div">;
  like3?: Flex__<"svg">;
  dislike2?: Flex__<"svg">;
  section2?: Flex__<"section">;
  headingAndSupportingText2?: Flex__<"header">;
  badgeGroup3?: Flex__<"div">;
  content8?: Flex__<"div">;
  message3?: Flex__<"div">;
  heading2?: Flex__<"h2">;
  supportingText5?: Flex__<"p">;
  section?: Flex__<"article">;
  featureText4?: Flex__<"div">;
  featuredIcon4?: Flex__<"div">;
  textAndSupportingText4?: Flex__<"div">;
  text?: Flex__<"div">;
  supportingText6?: Flex__<"p">;
  featureText5?: Flex__<"div">;
  featuredIcon5?: Flex__<"div">;
  textAndSupportingText5?: Flex__<"div">;
  text2?: Flex__<"div">;
  supportingText7?: Flex__<"p">;
  featureText6?: Flex__<"div">;
  featuredIcon6?: Flex__<"div">;
  textAndSupportingText6?: Flex__<"div">;
  text3?: Flex__<"div">;
  supportingText8?: Flex__<"p">;
  footer?: Flex__<"footer">;
  container?: Flex__<"div">;
  column?: Flex__<"div">;
  frame6?: Flex__<"div">;
  frame7?: Flex__<"div">;
  frame9?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame12?: Flex__<"div">;
  socials?: Flex__<"div">;
  socialIcon?: Flex__<"div">;
  socialIcon2?: Flex__<"div">;
  footerLinksContainer?: Flex__<"div">;
  buttonBase?: Flex__<"div">;
  text4?: Flex__<"div">;
  footerLinks2?: Flex__<"div">;
  container2?: Flex__<"div">;
  divider?: Flex__<"div">;
  content2?: Flex__<"div">;
  footerText?: Flex__<"div">;
  jobDetails?: Flex__<typeof Modal>;
  button5?: Flex__<typeof JamButton>;
  jobListing?: Flex__<"div">;
  jobDetail?: Flex__<"div">;
  frame38?: Flex__<"div">;
  jobName?: Flex__<"div">;
  frame53?: Flex__<"div">;
  like4?: Flex__<"svg">;
  dislike3?: Flex__<"svg">;
  location?: Flex__<"div">;
  publicationDate?: Flex__<"div">;
  frame46?: Flex__<"div">;
  frame47?: Flex__<"div">;
  frame48?: Flex__<"div">;
  dkTrucksPark?: Flex__<"div">;
  frame49?: Flex__<"div">;
  dkTrucksPark2?: Flex__<"div">;
  frame50?: Flex__<"div">;
  dkTrucksPark3?: Flex__<"div">;
  frame51?: Flex__<"div">;
  dkTrucksPark4?: Flex__<"div">;
  jobDescriptionContainer?: Flex__<"div">;
  jobDescription?: Flex__<"div">;
  benefits?: Flex__<"div">;
  expectedProfileContainer?: Flex__<"div">;
  expectedProfile?: Flex__<"div">;
  companyContainer?: Flex__<"div">;
  logoContainer?: Flex__<"div">;
  logo?: Flex__<typeof PlasmicImg__>;
  companyName?: Flex__<"div">;
  companyDetail?: Flex__<"div">;
  sectorActivity?: Flex__<"div">;
  dkTrucksPark5?: Flex__<"div">;
  companySize?: Flex__<"div">;
  dkTrucksPark6?: Flex__<"div">;
  companyLocation?: Flex__<"div">;
  companyDescription?: Flex__<"div">;
  signUpApplication?: Flex__<typeof Modal>;
  button6?: Flex__<typeof JamButton>;
  application?: Flex__<"div">;
  header2?: Flex__<"div">;
  frame67?: Flex__<"div">;
  frame68?: Flex__<"div">;
  frame69?: Flex__<"div">;
  frame74?: Flex__<"div">;
  frame75?: Flex__<"div">;
  frame76?: Flex__<"div">;
  dkTrucksPark7?: Flex__<"div">;
  frame77?: Flex__<"div">;
  dkTrucksPark8?: Flex__<"div">;
  frame16?: Flex__<"div">;
  dkTrucksPark9?: Flex__<"div">;
  frame17?: Flex__<"div">;
  dkTrucksPark10?: Flex__<"div">;
  frame18?: Flex__<"div">;
  frame78?: Flex__<"div">;
  frame79?: Flex__<"div">;
  frame80?: Flex__<"div">;
  frame81?: Flex__<"div">;
  dkTrucksPark11?: Flex__<"div">;
  frame82?: Flex__<"div">;
  dkTrucksPark12?: Flex__<"div">;
  frame83?: Flex__<"div">;
  frame84?: Flex__<"div">;
  frame85?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  upload2?: Flex__<typeof UploadWrapper>;
  editIcon2?: Flex__<"div">;
  frame19?: Flex__<"div">;
  deleteIcon2?: Flex__<"div">;
  frame20?: Flex__<"div">;
  nomPrenom?: Flex__<"div">;
  textInput1?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  telephone?: Flex__<"div">;
  phoneSelector?: Flex__<typeof PhoneSelector>;
  textInput3?: Flex__<typeof TextInput>;
  rue?: Flex__<typeof TextInput>;
  codePosteVille?: Flex__<"div">;
  codePostal?: Flex__<typeof TextInput>;
  ville?: Flex__<typeof TextInput>;
  textInput5?: Flex__<typeof TextInput>;
  select2?: Flex__<typeof Select>;
  select4?: Flex__<typeof Select>;
  select5?: Flex__<typeof AntdSelect>;
  textArea?: Flex__<typeof AntdTextArea>;
  select7?: Flex__<typeof AntdSelect>;
  select?: Flex__<typeof Select>;
  frame13?: Flex__<"div">;
  frame14?: Flex__<"div">;
  email4?: Flex__<"div">;
  cvUpload?: Flex__<"div">;
  content5?: Flex__<"div">;
  fileUploader3?: Flex__<"div">;
  upload?: Flex__<typeof UploadWrapper>;
  content?: Flex__<"div">;
  frame15?: Flex__<"div">;
  email5?: Flex__<"div">;
  cvUpload2?: Flex__<"div">;
  content6?: Flex__<"div">;
  fileUploader4?: Flex__<"div">;
  upload3?: Flex__<typeof UploadWrapper>;
  frame92?: Flex__<"div">;
  frame93?: Flex__<"div">;
  email3?: Flex__<"div">;
  fileUploader?: Flex__<typeof FileUploader>;
  frame94?: Flex__<"div">;
  email2?: Flex__<"div">;
  fileUploader2?: Flex__<typeof FileUploader>;
  textInput6?: Flex__<typeof TextInput>;
  notLoggued?: Flex__<"div">;
  loginForm2?: Flex__<typeof Login>;
  verifyUserAuth?: Flex__<typeof Modal>;
  modal?: Flex__<typeof Modal>;
  button?: Flex__<typeof JamButton>;
  formFilter2?: Flex__<typeof FormWrapper>;
  wrapContent2?: Flex__<"div">;
  searchInput2?: Flex__<"div">;
  input5?: Flex__<typeof AntdInput>;
  locationInput2?: Flex__<"div">;
  input6?: Flex__<typeof AntdInput>;
  select15?: Flex__<typeof AntdSelect>;
  select16?: Flex__<typeof AntdSelect>;
  select17?: Flex__<typeof AntdSelect>;
  select18?: Flex__<typeof AntdSelect>;
  select19?: Flex__<typeof AntdSelect>;
  select20?: Flex__<typeof AntdSelect>;
  select21?: Flex__<typeof AntdSelect>;
  buttonLastMin?: Flex__<"div">;
  text5?: Flex__<"div">;
  textLinkBase?: Flex__<"a"> & Partial<LinkProps>;
  text6?: Flex__<"div">;
};

export interface DefaultAccueilProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccueil__RenderFunc(props: {
  variants: PlasmicAccueil__VariantsArgs;
  args: PlasmicAccueil__ArgsType;
  overrides: PlasmicAccueil__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "lieu",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "menuOnOff",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "city",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "critereBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput1.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jobDetails.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.jobObject ?? false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "signUpApplication.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isDiv1Visible",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "couleurLike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "jobId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "jobAvailability",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "jobDetais",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload3.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "formFilter.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formFilter",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formFilter.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formFilter",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.city;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "keyWords",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.input3.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "loginForm2.email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loginForm2.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showJobs",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "criteria",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "searchLocation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "formFilter2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formFilter2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formFilter2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formFilter2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "formFilter2Submited",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "rue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jobObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getJobByAlertId.data[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "locationData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "verifyUserAuth.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jobCard20[].name",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].city",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].campany",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].sector",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].contractType",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].availability",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].workingTime",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].salary",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].workMode",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].companyLogo",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard20[].isLastMinute",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "jobCard20[].isNew",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "jobCard20[].isApplied",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "isLastMinute",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "jobCoordinates",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "fullAddress",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.form?.value?.address +
                ", " +
                $state.form?.value?.city +
                " 77100 " +
                $state.form?.value?.country
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getJobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "208a862c-6b2b-45e3-b89c-6c733ebcdd5b",
        userArgs: {
          query: [$state.isLastMinute]
        },
        cacheKey: `plasmic.$.208a862c-6b2b-45e3-b89c-6c733ebcdd5b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getMarker: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "2187553f-3b67-4b98-9ce3-f06f8a7d02d3",
        userArgs: {},
        cacheKey: `plasmic.$.2187553f-3b67-4b98-9ce3-f06f8a7d02d3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUsersLikes: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.24ab9e7e-7e19-4ab2-82fc-82df12596da0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUser: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "8f7dc129-1045-4b5d-8dae-fcd9f01f3924",
        userArgs: {
          filters: [
            $ctx.SupabaseUser.user == null ? null : $ctx.SupabaseUser.user.id
          ]
        },
        cacheKey: `plasmic.$.8f7dc129-1045-4b5d-8dae-fcd9f01f3924.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    homeGetJobById: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "25a00478-4e30-4965-8940-e968e2ffc8ce",
        userArgs: {
          keys: [$state.jobId]
        },
        cacheKey: `plasmic.$.25a00478-4e30-4965-8940-e968e2ffc8ce.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    homeGetCompanyById: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "a552b22b-2946-4fd1-9ca2-36439cbb13a7",
        userArgs: {
          keys: [$queries.homeGetJobById?.data[0]?.company_id ?? 1]
        },
        cacheKey: `plasmic.$.a552b22b-2946-4fd1-9ca2-36439cbb13a7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCurrentUserById: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "9c25c922-f186-4ed9-850f-6ded6b307e4e",
        userArgs: {
          keys: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.9c25c922-f186-4ed9-850f-6ded6b307e4e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCountries: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "55fe18eb-11a3-411e-bf08-f786d3cb4a98",
        userArgs: {},
        cacheKey: `plasmic.$.55fe18eb-11a3-411e-bf08-f786d3cb4a98.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getXpLevel: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "b2a4d57d-9e60-42ef-90a4-3c0c39a3cc9e",
        userArgs: {},
        cacheKey: `plasmic.$.b2a4d57d-9e60-42ef-90a4-3c0c39a3cc9e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSoftSkill: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "782fb4f4-ec90-41a0-a2e9-7e5a5135d08c",
        userArgs: {},
        cacheKey: `plasmic.$.782fb4f4-ec90-41a0-a2e9-7e5a5135d08c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getTransportModes: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "1cc686aa-ff11-4cb1-a24c-a37863ba8378",
        userArgs: {},
        cacheKey: `plasmic.$.1cc686aa-ff11-4cb1-a24c-a37863ba8378.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
        userArgs: {
          path: [
            $queries.getUser.data[0].id +
              "/" +
              $queries.getUser.data[0].profile_photo
          ]
        },
        cacheKey: `plasmic.$.8be05618-e3eb-4b37-889a-c18c2902bc93.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCriteriaByJobId: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "e572e8d5-6ba8-4999-8195-2d3913411ba3",
        userArgs: {
          filters: [
            $queries.homeGetJobById?.data[0]?.contract_type_id,
            $queries.homeGetJobById?.data[0]?.sector_activity_id,
            $queries.homeGetJobById?.data[0]?.availability_status_id,
            $queries.homeGetJobById?.data[0]?.working_time_id,
            $queries.homeGetJobById?.data[0]?.work_mode_id,
            $queries.homeGetJobById?.data[0]?.company_size_id,
            $queries.homeGetJobById?.data[0]?.salary_id
          ]
        },
        cacheKey: `plasmic.$.e572e8d5-6ba8-4999-8195-2d3913411ba3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJobsByCriteria: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "ad91ad28-20dc-48b1-85ca-183fb092a303",
        userArgs: {
          query: [
            $state.formFilter?.value?.contract_type,
            $state.formFilter?.value?.contract_type == undefined ||
              $state.formFilter?.value?.contract_type.length == 0,
            $state.formFilter?.value?.working_time,
            $state.formFilter?.value?.working_time == undefined ||
              $state.formFilter?.value?.working_time == 0,
            $state.formFilter?.value?.availability_status,
            $state.formFilter?.value?.availability_status == undefined ||
              $state.formFilter?.value?.availability_status.length == 0,
            $state.formFilter?.value?.work_mode,
            $state.formFilter?.value?.work_mode == undefined ||
              $state.formFilter?.value?.work_mode == 0,
            $state.formFilter?.value?.company_size,
            $state.formFilter?.value?.company_size == undefined ||
              $state.formFilter?.value?.company_size.length == 0,
            $state.formFilter?.value?.salary,
            $state.formFilter?.value?.salary == undefined ||
              $state.formFilter?.value?.salary.length == 0,
            $state.formFilter?.value?.sector_activity,
            $state.formFilter?.value?.sector_activity == undefined ||
              $state.formFilter?.value?.sector_activity.length == 0,
            $state.keyWords,
            $state.keyWords,
            $state.searchLocation
          ]
        },
        cacheKey: `plasmic.$.ad91ad28-20dc-48b1-85ca-183fb092a303.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCriteria: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "3c8bdc4e-677f-4634-aaef-8a13e1973a95",
        userArgs: {},
        cacheKey: `plasmic.$.3c8bdc4e-677f-4634-aaef-8a13e1973a95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJobsByCriteriaMobile: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "01335337-0b9f-474b-824e-94d2a6f1fcf1",
        userArgs: {
          query: [
            $state.formFilter2?.value?.contract_type,
            $state.formFilter2?.value?.contract_type == undefined,
            $state.formFilter2?.value?.contract_type == undefined ||
              $state.formFilter2.value.contract_type.length == 0,
            $state.formFilter2?.value?.working_time,
            $state.formFilter2?.value?.working_time == undefined,
            $state.formFilter2?.value?.working_time == undefined ||
              $state.formFilter2.value.working_time.length == 0,
            $state.formFilter2?.value?.availability_status,
            $state.formFilter2?.value?.availability_status == undefined,
            $state.formFilter2?.value?.availability_status == undefined ||
              $state.formFilter2.value.availability_status.length == 0,
            $state.formFilter2?.value?.work_mode,
            $state.formFilter2?.value?.work_mode == undefined,
            $state.formFilter2?.value?.work_mode == undefined ||
              $state.formFilter2.value.work_mode.length == 0,
            $state.formFilter2?.value?.company_size,
            $state.formFilter2?.value?.company_size == undefined,
            $state.formFilter2?.value?.company_size == undefined ||
              $state.formFilter.value.company_size.length == 0,
            $state.formFilter2?.value?.salary,
            $state.formFilter2?.value?.salary == undefined,
            $state.formFilter2?.value?.salary == undefined ||
              $state.formFilter2.value.salary.length == 0,
            $state.formFilter2?.value?.sector_activity,
            $state.formFilter2?.value?.sector_activity == undefined,
            $state.formFilter2?.value?.sector_activity == undefined ||
              $state.formFilter2.value.sector_activity.length == 0,
            $state.keyWords,
            $state.keyWords,
            $state.searchLocation
          ]
        },
        cacheKey: `plasmic.$.01335337-0b9f-474b-824e-94d2a6f1fcf1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJobByAlertId: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "c8980992-071d-4985-ad09-8cccc6a60c00",
        userArgs: {
          query: [$ctx.query.job_id]
        },
        cacheKey: `plasmic.$.c8980992-071d-4985-ad09-8cccc6a60c00.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getApplication: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "a3e4c858-0549-4f80-9f4b-d2e2d7018c4e",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.a3e4c858-0549-4f80-9f4b-d2e2d7018c4e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCoordinates: usePlasmicDataOp(() => {
      return {
        sourceId: "3fRequBPthJKGmQ2njgcZi",
        opId: "85eae0b7-ce5b-4375-ae46-819180244b88",
        userArgs: {},
        cacheKey: `plasmic.$.85eae0b7-ce5b-4375-ae46-819180244b88.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"rechercheJob"}
          data-plasmic-override={overrides.rechercheJob}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.rechercheJob
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hZRv)}>
            <Stack__
              as={"header"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"jamLogo"}
                data-plasmic-override={overrides.jamLogo}
                hasGap={true}
                className={classNames(projectcss.all, sty.jamLogo)}
              >
                <Vector12Icon
                  className={classNames(projectcss.all, sty.svg___5Qs48)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"frame2"}
                  data-plasmic-override={overrides.frame2}
                  className={classNames(projectcss.all, sty.frame2)}
                >
                  <div
                    data-plasmic-name={"frame3"}
                    data-plasmic-override={overrides.frame3}
                    className={classNames(projectcss.all, sty.frame3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vpFC
                      )}
                    >
                      {"JOB"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame4"}
                    data-plasmic-override={overrides.frame4}
                    className={classNames(projectcss.all, sty.frame4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sawvN
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame5"}
                    data-plasmic-override={overrides.frame5}
                    className={classNames(projectcss.all, sty.frame5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rxVy
                      )}
                    >
                      {"ME"}
                    </div>
                  </div>
                </div>
              </Stack__>
              <Button
                className={classNames("__wab_instance", sty.button__c3Lr)}
                end={
                  <GroupIcon
                    className={classNames(projectcss.all, sty.svg__jtEt)}
                    role={"img"}
                  />
                }
                iconEnd={true}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nkEml
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.SupabaseUser.user
                            ? "Voir mon compte"
                            : "Connexion";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Connexion";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["goToParametresDeCompte"] =
                    $ctx.SupabaseUser.user !== null &&
                    $ctx.SupabaseUser.user.user_metadata.role == "User"
                      ? (() => {
                          const actionArgs = { destination: `/parametres` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["goToParametresDeCompte"] != null &&
                    typeof $steps["goToParametresDeCompte"] === "object" &&
                    typeof $steps["goToParametresDeCompte"].then === "function"
                  ) {
                    $steps["goToParametresDeCompte"] = await $steps[
                      "goToParametresDeCompte"
                    ];
                  }

                  $steps["goToConnexion"] =
                    $ctx.SupabaseUser.user == null
                      ? (() => {
                          const actionArgs = { destination: `/login` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["goToConnexion"] != null &&
                    typeof $steps["goToConnexion"] === "object" &&
                    typeof $steps["goToConnexion"].then === "function"
                  ) {
                    $steps["goToConnexion"] = await $steps["goToConnexion"];
                  }

                  $steps["goToOffreEmployeur"] =
                    $ctx.SupabaseUser.user.user_metadata.role == "Company"
                      ? (() => {
                          const actionArgs = {
                            destination: `/offre-employeur`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["goToOffreEmployeur"] != null &&
                    typeof $steps["goToOffreEmployeur"] === "object" &&
                    typeof $steps["goToOffreEmployeur"].then === "function"
                  ) {
                    $steps["goToOffreEmployeur"] = await $steps[
                      "goToOffreEmployeur"
                    ];
                  }

                  $steps["goToOffreAdmin"] =
                    $ctx.SupabaseUser.user.user_metadata.role == "Admin"
                      ? (() => {
                          const actionArgs = { destination: `/offre_admin` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["goToOffreAdmin"] != null &&
                    typeof $steps["goToOffreAdmin"] === "object" &&
                    typeof $steps["goToOffreAdmin"].then === "function"
                  ) {
                    $steps["goToOffreAdmin"] = await $steps["goToOffreAdmin"];
                  }
                }}
              />
            </Stack__>
            <main
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              <PlasmicImg__
                data-plasmic-name={"bgImage"}
                data-plasmic-override={overrides.bgImage}
                alt={""}
                className={classNames(sty.bgImage)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "582px"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: "/plasmic/jam_production_🚀/images/bgImage.jpg",
                  fullWidth: 2904,
                  fullHeight: 4356,
                  aspectRatio: undefined
                }}
              />

              <section
                data-plasmic-name={"section1"}
                data-plasmic-override={overrides.section1}
                className={classNames(projectcss.all, sty.section1)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.title)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0Chyr)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"badgeGroup"}
                      data-plasmic-override={overrides.badgeGroup}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.badgeGroup)}
                    >
                      <div
                        data-plasmic-name={"message"}
                        data-plasmic-override={overrides.message}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.message
                        )}
                      >
                        {"Get ready to find a job"}
                      </div>
                    </Stack__>
                    <h1
                      data-plasmic-name={"trouvezUnJobNaJamaisEteAussiSimple"}
                      data-plasmic-override={
                        overrides.trouvezUnJobNaJamaisEteAussiSimple
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.trouvezUnJobNaJamaisEteAussiSimple
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "Trouver un job n\u2019a jamais \u00e9t\u00e9 aussi "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#BBFE68", fontWeight: 600 }}
                        >
                          {"simple"}
                        </span>
                      </React.Fragment>
                    </h1>
                  </Stack__>
                  <p
                    data-plasmic-name={"trouvezUnJobNaJamaisEteAussiSimple2"}
                    data-plasmic-override={
                      overrides.trouvezUnJobNaJamaisEteAussiSimple2
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.trouvezUnJobNaJamaisEteAussiSimple2
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 300 }}
                      >
                        {
                          "Trouvez facilement un emploi pr\u00e8s de chez vous et connectez-vous aux employeurs locaux."
                        }
                      </span>
                    </React.Fragment>
                  </p>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"jobSearchSection"}
                  data-plasmic-override={overrides.jobSearchSection}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.jobSearchSection)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"filters"}
                    data-plasmic-override={overrides.filters}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.filters)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.formFilter),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["formFilter", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);

                          (async (changedValues, allValues) => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["postgresCustomRead"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                    opId: "fe604a34-de03-44c2-9c0d-5a034312dd6a",
                                    userArgs: {
                                      query: [
                                        $state.formFilter?.value?.contract_type,
                                        $state.formFilter?.value
                                          ?.contract_type == undefined,
                                        $state.formFilter?.value
                                          ?.contract_type == undefined ||
                                          $state.formFilter.value.contract_type
                                            .length == 0,
                                        $state.formFilter?.value?.working_time,
                                        $state.formFilter?.value
                                          ?.working_time == undefined,
                                        $state.formFilter?.value
                                          ?.working_time == undefined ||
                                          $state.formFilter.value.working_time
                                            .length == 0,
                                        $state.formFilter?.value
                                          ?.availability_status,
                                        $state.formFilter?.value
                                          ?.availability_status == undefined,
                                        $state.formFilter?.value
                                          ?.availability_status == undefined ||
                                          $state.formFilter.value
                                            .availability_status.length == 0,
                                        $state.formFilter?.value?.work_mode,
                                        $state.formFilter?.value?.work_mode ==
                                          undefined,
                                        $state.formFilter?.value?.work_mode ==
                                          undefined ||
                                          $state.formFilter.value.work_mode
                                            .length == 0,
                                        $state.formFilter?.value?.company_size,
                                        $state.formFilter?.value
                                          ?.company_size == undefined,
                                        $state.formFilter?.value
                                          ?.company_size == undefined ||
                                          $state.formFilter.value.company_size
                                            .length == 0,
                                        $state.formFilter?.value?.salary,
                                        $state.formFilter?.value?.salary ==
                                          undefined,
                                        $state.formFilter?.value?.salary ==
                                          undefined ||
                                          $state.formFilter.value.salary
                                            .length == 0,
                                        $state.formFilter?.value
                                          ?.sector_activity,
                                        $state.formFilter?.value
                                          ?.sector_activity == undefined,
                                        $state.formFilter?.value
                                          ?.sector_activity == undefined ||
                                          $state.formFilter.value
                                            .sector_activity.length == 0
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: null,
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresCustomRead"] != null &&
                            typeof $steps["postgresCustomRead"] === "object" &&
                            typeof $steps["postgresCustomRead"].then ===
                              "function"
                          ) {
                            $steps["postgresCustomRead"] = await $steps[
                              "postgresCustomRead"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["formFilter", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["formFilter"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "formFilter.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "formFilter.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"formFilter"}
                          data-plasmic-override={overrides.formFilter}
                          {...child$Props}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"wrapContent"}
                            data-plasmic-override={overrides.wrapContent}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.wrapContent
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___6Jwam
                              )}
                              initialValue={""}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___7WSaY
                                  )}
                                >
                                  {"Label"}
                                </div>
                              }
                              name={"key_words"}
                              noLabel={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__rOqAn
                                )}
                              >
                                {(() => {
                                  const child$Props = {
                                    allowClear: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input3
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input3", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);

                                      (async event => {
                                        const $steps = {};

                                        $steps["updateKeyWords"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["keyWords"]
                                                },
                                                operation: 0,
                                                value: $state.input3.value
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateKeyWords"] != null &&
                                          typeof $steps["updateKeyWords"] ===
                                            "object" &&
                                          typeof $steps["updateKeyWords"]
                                            .then === "function"
                                        ) {
                                          $steps["updateKeyWords"] =
                                            await $steps["updateKeyWords"];
                                        }
                                      }).apply(null, eventArgs);
                                    },
                                    placeholder:
                                      "Mot-cl\u00e9, job, entreprise",
                                    prefix: (
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__bgjoy)}
                                        displayHeight={"20px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"none"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"20px"}
                                        loading={"lazy"}
                                        src={{
                                          src: "/plasmic/jam_production_🚀/images/image10.svg",
                                          fullWidth: 21,
                                          fullHeight: 20,
                                          aspectRatio: 1.05
                                        }}
                                      />
                                    ),

                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input3",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input3.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "input3.value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $ctx.query.name;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    []
                                  );
                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input3"}
                                      data-plasmic-override={overrides.input3}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__zKiqa
                              )}
                              initialValue={""}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ipMk7
                                  )}
                                >
                                  {"Label"}
                                </div>
                              }
                              name={"location"}
                              noLabel={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__r7PSa
                                )}
                              >
                                {(() => {
                                  const child$Props = {
                                    allowClear: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input4
                                    ),
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input4", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);

                                      (async event => {
                                        const $steps = {};

                                        $steps["updateCardLieu"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["city"]
                                                },
                                                operation: 0,
                                                value: ""
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateCardLieu"] != null &&
                                          typeof $steps["updateCardLieu"] ===
                                            "object" &&
                                          typeof $steps["updateCardLieu"]
                                            .then === "function"
                                        ) {
                                          $steps["updateCardLieu"] =
                                            await $steps["updateCardLieu"];
                                        }

                                        $steps["updateSearchLocation"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "searchLocation"
                                                  ]
                                                },
                                                operation: 0,
                                                value: $state.input4.value
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateSearchLocation"] !=
                                            null &&
                                          typeof $steps[
                                            "updateSearchLocation"
                                          ] === "object" &&
                                          typeof $steps["updateSearchLocation"]
                                            .then === "function"
                                        ) {
                                          $steps["updateSearchLocation"] =
                                            await $steps[
                                              "updateSearchLocation"
                                            ];
                                        }
                                      }).apply(null, eventArgs);
                                    },
                                    placeholder: "Localisation",
                                    prefix: (
                                      <PlasmicImg__
                                        alt={""}
                                        className={classNames(sty.img__wMeId)}
                                        displayHeight={"18px"}
                                        displayMaxHeight={"none"}
                                        displayMaxWidth={"100%"}
                                        displayMinHeight={"0"}
                                        displayMinWidth={"0"}
                                        displayWidth={"18px"}
                                        loading={"lazy"}
                                        src={{
                                          src: "/plasmic/jam_production_🚀/images/locationPinSvgrepoComSvg.svg",
                                          fullWidth: 800,
                                          fullHeight: 800,
                                          aspectRatio: undefined
                                        }}
                                      />
                                    ),

                                    size: "large",
                                    value: generateStateValueProp($state, [
                                      "input4",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input4.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "input4.value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $ctx.query.city;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    []
                                  );
                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input4"}
                                      data-plasmic-override={overrides.input4}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__tdjl9
                              )}
                              label={"Name"}
                              name={"sector_activity"}
                              noLabel={true}
                            >
                              <AntdSelect
                                data-plasmic-name={"select13"}
                                data-plasmic-override={overrides.select13}
                                allowClear={true}
                                autoFocus={false}
                                bordered={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select13
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                dropdownMatchSelectWidth={true}
                                mode={"single"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select13",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                optionClassName={classNames({
                                  [sty["pcls_TulvYrdlFkLz"]]: true
                                })}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(
                                        item => item.type === "sector_activity"
                                      )
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cepRq
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__noDyM)}
                                      displayHeight={"18px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"18px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/jam_production_🚀/images/image2.svg",
                                        fullWidth: 20,
                                        fullHeight: 20,
                                        aspectRatio: 1
                                      }}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__cIt50
                                      )}
                                    >
                                      {"Secteur d'activit\u00e9"}
                                    </div>
                                  </Stack__>
                                }
                                popupScopeClassName={sty["select13__popup"]}
                                showSearch={true}
                                size={"large"}
                                useChildren={false}
                                value={generateStateValueProp($state, [
                                  "select13",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__dm5ZL
                              )}
                              label={"Name"}
                              name={"availability_status"}
                              noLabel={true}
                              preserve={false}
                            >
                              <AntdSelect
                                data-plasmic-name={"select9"}
                                data-plasmic-override={overrides.select9}
                                allowClear={true}
                                bordered={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select9
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                mode={"multiple"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select9",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                optionClassName={classNames({
                                  [sty["pcls_dj7ANnXN0yWv"]]: true
                                })}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(
                                        item =>
                                          item.type === "availability_status"
                                      )
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___1O30W
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__nzBml)}
                                      displayHeight={"18px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"18px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/jam_production_🚀/images/image3.svg",
                                        fullWidth: 20,
                                        fullHeight: 20,
                                        aspectRatio: 1
                                      }}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6OmLu
                                      )}
                                    >
                                      {"Disponibilit\u00e9"}
                                    </div>
                                  </Stack__>
                                }
                                popupScopeClassName={sty["select9__popup"]}
                                showSearch={true}
                                size={"large"}
                                value={generateStateValueProp($state, [
                                  "select9",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___2W6T
                              )}
                              hidden={false}
                              initialValue={(() => {
                                try {
                                  return $ctx.query?.contract_types == ""
                                    ? undefined
                                    : $ctx.query?.contract_types?.split(",");
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"Name"}
                              name={"contract_type"}
                              noLabel={true}
                              preserve={false}
                              shouldUpdate={false}
                            >
                              <AntdSelect
                                data-plasmic-name={"select8"}
                                data-plasmic-override={overrides.select8}
                                allowClear={true}
                                bordered={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select8
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                dropdownMatchSelectWidth={false}
                                mode={"multiple"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select8",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                optionClassName={classNames({
                                  [sty["pcls_PaVAJpZUdheZ"]]: true
                                })}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(
                                        item => item.type === "contract_type"
                                      )
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__kNiQ
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__tuqV3)}
                                      displayHeight={"18px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"18px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/jam_production_🚀/images/image7.svg",
                                        fullWidth: 20,
                                        fullHeight: 20,
                                        aspectRatio: 1
                                      }}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___3Kr4B
                                      )}
                                    >
                                      {"Type de contrat"}
                                    </div>
                                  </Stack__>
                                }
                                popupScopeClassName={sty["select8__popup"]}
                                showSearch={true}
                                size={"large"}
                                suffixIcon={null}
                                value={generateStateValueProp($state, [
                                  "select8",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__eZlqS
                              )}
                              initialValue={(() => {
                                try {
                                  return $ctx.query?.work_times == ""
                                    ? undefined
                                    : $ctx.query?.work_times?.split(",");
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"Name"}
                              name={"working_time"}
                              noLabel={true}
                            >
                              <AntdSelect
                                data-plasmic-name={"select10"}
                                data-plasmic-override={overrides.select10}
                                allowClear={true}
                                bordered={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select10
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                mode={"multiple"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select10",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                optionClassName={classNames({
                                  [sty["pcls_tE82JyaC8VXE"]]: true
                                })}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(
                                        item => item.type === "working_time"
                                      )
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uy0Tz
                                    )}
                                  >
                                    <Vector22Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__lvs5K
                                      )}
                                      role={"img"}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ni5N
                                      )}
                                    >
                                      {"Temps de travail"}
                                    </div>
                                  </Stack__>
                                }
                                popupScopeClassName={sty["select10__popup"]}
                                showSearch={true}
                                size={"large"}
                                value={generateStateValueProp($state, [
                                  "select10",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___9FKic
                              )}
                              label={"Name"}
                              name={"work_mode"}
                              noLabel={true}
                            >
                              <AntdSelect
                                data-plasmic-name={"select14"}
                                data-plasmic-override={overrides.select14}
                                allowClear={true}
                                autoFocus={false}
                                bordered={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select14
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                mode={"multiple"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select14",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                optionClassName={classNames({
                                  [sty["pcls_R9D3KUDsYzj1"]]: true
                                })}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(item => item.type === "work_mode")
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__eKhDu
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__xkwQs)}
                                      displayHeight={"18px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"18px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/jam_production_🚀/images/image6.svg",
                                        fullWidth: 20,
                                        fullHeight: 20,
                                        aspectRatio: 1
                                      }}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__rHt4A
                                      )}
                                    >
                                      {"Mode de travail"}
                                    </div>
                                  </Stack__>
                                }
                                popupScopeClassName={sty["select14__popup"]}
                                showSearch={true}
                                size={"large"}
                                value={generateStateValueProp($state, [
                                  "select14",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___7Yt9
                              )}
                              initialValue={(() => {
                                try {
                                  return $ctx.query?.min_salary == ""
                                    ? undefined
                                    : $ctx.query?.min_salary?.split(",");
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"Name"}
                              name={"salary"}
                              noLabel={true}
                            >
                              <AntdSelect
                                data-plasmic-name={"select12"}
                                data-plasmic-override={overrides.select12}
                                allowClear={true}
                                autoFocus={false}
                                bordered={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select12
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                mode={"multiple"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select12",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                optionClassName={classNames({
                                  [sty["pcls_VB9_52Vd-eHG"]]: true
                                })}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(item => item.type === "salary")
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__mTgel
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__uL0Eg)}
                                      displayHeight={"18px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"18px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/jam_production_🚀/images/image5.svg",
                                        fullWidth: 20,
                                        fullHeight: 20,
                                        aspectRatio: 1
                                      }}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__aa97T
                                      )}
                                    >
                                      {"Salaire"}
                                    </div>
                                  </Stack__>
                                }
                                popupScopeClassName={sty["select12__popup"]}
                                showSearch={true}
                                size={"large"}
                                useChildren={false}
                                value={generateStateValueProp($state, [
                                  "select12",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___1WFbm
                              )}
                              label={"Name"}
                              name={"company_size"}
                              noLabel={true}
                            >
                              <AntdSelect
                                data-plasmic-name={"select11"}
                                data-plasmic-override={overrides.select11}
                                allowClear={true}
                                autoFocus={false}
                                bordered={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select11
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                mode={"multiple"}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select11",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                optionClassName={classNames({
                                  [sty["pcls_REhv2N_f8MfM"]]: true
                                })}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(
                                        item => item.type === "company_size"
                                      )
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___2UCJv
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img___9ScV6)}
                                      displayHeight={"18px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"18px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/jam_production_🚀/images/image4.svg",
                                        fullWidth: 20,
                                        fullHeight: 20,
                                        aspectRatio: 1
                                      }}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__af7J2
                                      )}
                                    >
                                      {"Taille entreprise"}
                                    </div>
                                  </Stack__>
                                }
                                popupScopeClassName={sty["select11__popup"]}
                                showSearch={true}
                                size={"large"}
                                useChildren={false}
                                value={generateStateValueProp($state, [
                                  "select11",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <Button
                              data-plasmic-name={"button8"}
                              data-plasmic-override={overrides.button8}
                              className={classNames(
                                "__wab_instance",
                                sty.button8
                              )}
                              color={"white"}
                              iconStart={true}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oaHWz
                                  )}
                                >
                                  {"CRITERES"}
                                </div>
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateModalIsOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["modal", "isOpen"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateModalIsOpen"] != null &&
                                  typeof $steps["updateModalIsOpen"] ===
                                    "object" &&
                                  typeof $steps["updateModalIsOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateModalIsOpen"] = await $steps[
                                    "updateModalIsOpen"
                                  ];
                                }

                                $steps["updateFormFilter2Submited"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["formFilter2Submited"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFormFilter2Submited"] != null &&
                                  typeof $steps["updateFormFilter2Submited"] ===
                                    "object" &&
                                  typeof $steps["updateFormFilter2Submited"]
                                    .then === "function"
                                ) {
                                  $steps["updateFormFilter2Submited"] =
                                    await $steps["updateFormFilter2Submited"];
                                }
                              }}
                              size={"large"}
                              start={
                                <Vector18Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__sgWoa
                                  )}
                                  role={"img"}
                                />
                              }
                            />

                            <ClearBtn
                              data-plasmic-name={"clearBtn"}
                              data-plasmic-override={overrides.clearBtn}
                              className={classNames(
                                "__wab_instance",
                                sty.clearBtn
                              )}
                              color={"transparent"}
                              iconStart={true}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qjv9
                                  )}
                                >
                                  {"R\u00e9initialiser les filtres"}
                                </div>
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["runActionOnFormFilter"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        tplRef: "formFilter",
                                        action: "resetFields"
                                      };
                                      return (({ tplRef, action, args }) => {
                                        return $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? [])
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runActionOnFormFilter"] != null &&
                                  typeof $steps["runActionOnFormFilter"] ===
                                    "object" &&
                                  typeof $steps["runActionOnFormFilter"]
                                    .then === "function"
                                ) {
                                  $steps["runActionOnFormFilter"] =
                                    await $steps["runActionOnFormFilter"];
                                }

                                $steps["updateFormFilter2Submited"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["formFilter2Submited"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFormFilter2Submited"] != null &&
                                  typeof $steps["updateFormFilter2Submited"] ===
                                    "object" &&
                                  typeof $steps["updateFormFilter2Submited"]
                                    .then === "function"
                                ) {
                                  $steps["updateFormFilter2Submited"] =
                                    await $steps["updateFormFilter2Submited"];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            $state.input3.value = "";
                                            $state.input4.value = "";
                                            $state.keyWords = "";
                                            return ($state.searchLocation = "");
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                              resetsForm={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : true
                              }
                              start={
                                <Vector19Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__tsTyC
                                  )}
                                  role={"img"}
                                />
                              }
                            />

                            <Stack__
                              as={"button"}
                              data-plasmic-name={"resetFormBtn"}
                              data-plasmic-override={overrides.resetFormBtn}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.button,
                                sty.resetFormBtn
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            $state.input3.value = "";
                                            $state.input4.value = "";
                                            $state.keyWords = "";
                                            return ($state.searchLocation = "");
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["runActionOnFormFilter"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        tplRef: "formFilter",
                                        action: "clearFields"
                                      };
                                      return (({ tplRef, action, args }) => {
                                        return $refs?.[tplRef]?.[action]?.(
                                          ...(args ?? [])
                                        );
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runActionOnFormFilter"] != null &&
                                  typeof $steps["runActionOnFormFilter"] ===
                                    "object" &&
                                  typeof $steps["runActionOnFormFilter"]
                                    .then === "function"
                                ) {
                                  $steps["runActionOnFormFilter"] =
                                    await $steps["runActionOnFormFilter"];
                                }

                                $steps["updateFormFilter2Submited"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["formFilter2Submited"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateFormFilter2Submited"] != null &&
                                  typeof $steps["updateFormFilter2Submited"] ===
                                    "object" &&
                                  typeof $steps["updateFormFilter2Submited"]
                                    .then === "function"
                                ) {
                                  $steps["updateFormFilter2Submited"] =
                                    await $steps["updateFormFilter2Submited"];
                                }
                              }}
                              ref={ref => {
                                $refs["resetFormBtn"] = ref;
                              }}
                            >
                              <Vector19Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__qSfLf
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lWfpt
                                )}
                              >
                                {"R\u00e9initialiser les filtres"}
                              </div>
                            </Stack__>
                          </Stack__>
                        </FormWrapper>
                      );
                    })()}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"mapJobs"}
                    data-plasmic-override={overrides.mapJobs}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.mapJobs)}
                  >
                    <MapBox
                      className={classNames(
                        "__wab_instance",
                        sty.mapBox__rvf40
                      )}
                      iconUrl={(() => {
                        try {
                          return (() => {
                            switch ($queries.getMarker.data[$state.state]) {
                              case "liked":
                                return "https://idwomihieftgogbgivic.supabase.co/storage/v1/object/public/img/Marker/State=PinLiked,%20ShowSalary=False.svg";
                              case "new":
                                return "https://idwomihieftgogbgivic.supabase.co/storage/v1/object/public/img/Marker/State=PinApplied,%20ShowSalary=False.svg";
                              case "applied":
                                return "https://idwomihieftgogbgivic.supabase.co/storage/v1/object/public/img/Marker/State=PinApplied,%20ShowSalary=False.svg";
                              case "base":
                                return "https://idwomihieftgogbgivic.supabase.co/storage/v1/object/public/img/Marker/State=PinNew,%20ShowSalary=False.svg";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "/plasmic/jam_production_🚀/images/frame.svg";
                          }
                          throw e;
                        }
                      })()}
                      latitude={(() => {
                        try {
                          return $state.jobCoordinates.latitude;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      longitude={(() => {
                        try {
                          return $state.jobCoordinates.longitude;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      mapStyle={
                        "mapbox://styles/scroll/cm6gi9ljw003t01s36b0jfl80"
                      }
                      markers={(() => {
                        try {
                          return $queries.getJobOffers.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      zoom={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? 12
                          : 15
                      }
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__up3F4)}
                    >
                      <div
                        data-plasmic-name={"postes"}
                        data-plasmic-override={overrides.postes}
                        className={classNames(projectcss.all, sty.postes)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateMenuOnOff"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["menuOnOff"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateMenuOnOff"] != null &&
                            typeof $steps["updateMenuOnOff"] === "object" &&
                            typeof $steps["updateMenuOnOff"].then === "function"
                          ) {
                            $steps["updateMenuOnOff"] = await $steps[
                              "updateMenuOnOff"
                            ];
                          }

                          $steps["updateIsDiv1Visible"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["isDiv1Visible"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateIsDiv1Visible"] != null &&
                            typeof $steps["updateIsDiv1Visible"] === "object" &&
                            typeof $steps["updateIsDiv1Visible"].then ===
                              "function"
                          ) {
                            $steps["updateIsDiv1Visible"] = await $steps[
                              "updateIsDiv1Visible"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lUpz4
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    if ($state.isDiv1Visible == false) {
                                      return "Afficher la liste des résultats";
                                    } else if (
                                      $queries.getJobsByCriteria.data.length ===
                                      0
                                    ) {
                                      return "Aucun resultat";
                                    } else if (
                                      $queries.getJobsByCriteriaMobile.data
                                        .length === 0 &&
                                      $state.formFilter2Submited
                                    ) {
                                      return "Aucun resultat";
                                    } else {
                                      return "Masquer la liste des résultats";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Afficher la liste des r\u00e9sultats";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    if (
                                      $queries.getJobsByCriteria.data.length >
                                        0 &&
                                      $state.isDiv1Visible
                                    ) {
                                      return "Masquer la liste des résultats";
                                    } else if (
                                      $queries.getJobsByCriteria.data.length ===
                                      0
                                    ) {
                                      return "Aucun resultat";
                                    } else {
                                      return "Afficher la liste des résultats";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Afficher la liste des r\u00e9sultats";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"button4"}
                        data-plasmic-override={overrides.button4}
                        className={classNames(projectcss.all, sty.button4)}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? (() => {
                                try {
                                  return $state.menuOnOff;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return !$state.menuOnOff;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <JamButton
                            data-plasmic-name={"button3"}
                            data-plasmic-override={overrides.button3}
                            className={classNames(
                              "__wab_instance",
                              sty.button3
                            )}
                            icon={"none"}
                            iconImage={
                              "/plasmic/jam_production_🚀/images/image13.svg"
                            }
                            label={``}
                            onClick={async () => {
                              const $steps = {};

                              $steps["afficherOffre"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["isDiv1Visible"]
                                      },
                                      operation: 4,
                                      value: !$state.menuOnOff
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["afficherOffre"] != null &&
                                typeof $steps["afficherOffre"] === "object" &&
                                typeof $steps["afficherOffre"].then ===
                                  "function"
                              ) {
                                $steps["afficherOffre"] = await $steps[
                                  "afficherOffre"
                                ];
                              }

                              $steps["updatebtn"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["menuOnOff"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatebtn"] != null &&
                                typeof $steps["updatebtn"] === "object" &&
                                typeof $steps["updatebtn"].then === "function"
                              ) {
                                $steps["updatebtn"] = await $steps["updatebtn"];
                              }
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $state.menuOnOff;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <JamButton
                            data-plasmic-name={"button7"}
                            data-plasmic-override={overrides.button7}
                            className={classNames(
                              "__wab_instance",
                              sty.button7
                            )}
                            icon={"none"}
                            iconImage={
                              "/plasmic/jam_production_🚀/images/image13.svg"
                            }
                            label={``}
                            onClick={async () => {
                              const $steps = {};

                              $steps["afficherOffre"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["isDiv1Visible"]
                                      },
                                      operation: 4,
                                      value: !$state.menuOnOff
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["afficherOffre"] != null &&
                                typeof $steps["afficherOffre"] === "object" &&
                                typeof $steps["afficherOffre"].then ===
                                  "function"
                              ) {
                                $steps["afficherOffre"] = await $steps[
                                  "afficherOffre"
                                ];
                              }

                              $steps["updateMenuOnOff"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["menuOnOff"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateMenuOnOff"] != null &&
                                typeof $steps["updateMenuOnOff"] === "object" &&
                                typeof $steps["updateMenuOnOff"].then ===
                                  "function"
                              ) {
                                $steps["updateMenuOnOff"] = await $steps[
                                  "updateMenuOnOff"
                                ];
                              }
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return $state.menuOnOff;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"featuredIcon7"}
                            data-plasmic-override={overrides.featuredIcon7}
                            className={classNames(
                              projectcss.all,
                              sty.featuredIcon7
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateIsDiv1Visible"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["isDiv1Visible"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateIsDiv1Visible"] != null &&
                                typeof $steps["updateIsDiv1Visible"] ===
                                  "object" &&
                                typeof $steps["updateIsDiv1Visible"].then ===
                                  "function"
                              ) {
                                $steps["updateIsDiv1Visible"] = await $steps[
                                  "updateIsDiv1Visible"
                                ];
                              }

                              $steps["updateMenuOnOff"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["menuOnOff"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateMenuOnOff"] != null &&
                                typeof $steps["updateMenuOnOff"] === "object" &&
                                typeof $steps["updateMenuOnOff"].then ===
                                  "function"
                              ) {
                                $steps["updateMenuOnOff"] = await $steps[
                                  "updateMenuOnOff"
                                ];
                              }
                            }}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ndq9R
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return !$state.menuOnOff;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={"featuredIcon8"}
                            data-plasmic-override={overrides.featuredIcon8}
                            className={classNames(
                              projectcss.all,
                              sty.featuredIcon8
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateIsDiv1Visible"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["isDiv1Visible"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateIsDiv1Visible"] != null &&
                                typeof $steps["updateIsDiv1Visible"] ===
                                  "object" &&
                                typeof $steps["updateIsDiv1Visible"].then ===
                                  "function"
                              ) {
                                $steps["updateIsDiv1Visible"] = await $steps[
                                  "updateIsDiv1Visible"
                                ];
                              }

                              $steps["updateMenuOnOff"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["menuOnOff"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateMenuOnOff"] != null &&
                                typeof $steps["updateMenuOnOff"] === "object" &&
                                typeof $steps["updateMenuOnOff"].then ===
                                  "function"
                              ) {
                                $steps["updateMenuOnOff"] = await $steps[
                                  "updateMenuOnOff"
                                ];
                              }
                            }}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mts9A
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                      </div>
                    </div>
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : (() => {
                            try {
                              return (() => {
                                const hasFilters =
                                  ($state.formFilter.value !== undefined &&
                                    Object.keys($state.formFilter.value)
                                      .length > 0) ||
                                  $state.formFilter2.value !== undefined ||
                                  $state.keyWords !== "" ||
                                  $state.searchLocation !== "";
                                if (hasFilters) {
                                  if ($state.menuOnOff) {
                                    return (
                                      $queries.getJobsByCriteria.data.length > 0
                                    );
                                  } else {
                                    return false;
                                  }
                                } else {
                                  return $state.isDiv1Visible;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"jobListContainer"}
                        data-plasmic-override={overrides.jobListContainer}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.jobListContainer
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return (() => {
                                if (
                                  ($state.formFilter.value == undefined ||
                                    Object.keys($state.formFilter.value)
                                      .length === 0) &&
                                  $state.formFilter2.value == undefined &&
                                  $state.keyWords == "" &&
                                  $state.searchLocation == ""
                                ) {
                                  return $queries.getJobOffers.data;
                                } else if ($state.formFilter2Submited) {
                                  return $queries.getJobsByCriteriaMobile.data;
                                } else {
                                  return $queries.getJobsByCriteria.data;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              data-plasmic-name={"jobsOnScroll"}
                              data-plasmic-override={overrides.jobsOnScroll}
                              className={classNames(
                                projectcss.all,
                                sty.jobsOnScroll
                              )}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};
                              }}
                            >
                              <div
                                data-plasmic-name={"likeButtons"}
                                data-plasmic-override={overrides.likeButtons}
                                className={classNames(
                                  projectcss.all,
                                  sty.likeButtons
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return event?.stopPropagation();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }
                                }}
                              >
                                {(() => {
                                  try {
                                    return !$queries.getUsersLikes.data.some(
                                      like => like.job_id === currentItem.id
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <HeartStraightStreamlinePhosphorSvgIcon
                                    data-plasmic-name={"like2"}
                                    data-plasmic-override={overrides.like2}
                                    className={classNames(
                                      projectcss.all,
                                      sty.like2
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["postgresUpdateMany"] =
                                        !$queries.getUsersLikes.data.some(
                                          like => like.job_id === currentItem.id
                                        )
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "kVSSe8ab4TtzwRPnTeEeUp",
                                                  opId: "82374051-9814-414c-909c-d23851067d30",
                                                  userArgs: {
                                                    variables: [
                                                      currentItem.id,
                                                      $state.couleurLike ==
                                                      false
                                                        ? true
                                                        : false,
                                                      $ctx.SupabaseUser.user.id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                                    "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                                    "ee40aeb1-9965-4045-8d4f-b223146962b1"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["postgresUpdateMany"] != null &&
                                        typeof $steps["postgresUpdateMany"] ===
                                          "object" &&
                                        typeof $steps["postgresUpdateMany"]
                                          .then === "function"
                                      ) {
                                        $steps["postgresUpdateMany"] =
                                          await $steps["postgresUpdateMany"];
                                      }

                                      $steps["invokeGlobalAction"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "success",
                                                (() => {
                                                  try {
                                                    return `L'annonce "${currentItem.title}" a bien été ajoutée de vos favoris`;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["invokeGlobalAction"] != null &&
                                        typeof $steps["invokeGlobalAction"] ===
                                          "object" &&
                                        typeof $steps["invokeGlobalAction"]
                                          .then === "function"
                                      ) {
                                        $steps["invokeGlobalAction"] =
                                          await $steps["invokeGlobalAction"];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                ) : null}
                                {(() => {
                                  try {
                                    return $queries.getUsersLikes.data.some(
                                      like => like.job_id === currentItem.id
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <HeartStraightIcon
                                    data-plasmic-name={"dislike"}
                                    data-plasmic-override={overrides.dislike}
                                    className={classNames(
                                      projectcss.all,
                                      sty.dislike
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["postgresUpdateMany"] =
                                        $queries.getUsersLikes.data.some(
                                          like => like.job_id === currentItem.id
                                        )
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "kVSSe8ab4TtzwRPnTeEeUp",
                                                  opId: "21389a04-150f-4bd5-bdca-85fbbce35635",
                                                  userArgs: {
                                                    conditions: [currentItem.id]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                                    "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                                    "ee40aeb1-9965-4045-8d4f-b223146962b1"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["postgresUpdateMany"] != null &&
                                        typeof $steps["postgresUpdateMany"] ===
                                          "object" &&
                                        typeof $steps["postgresUpdateMany"]
                                          .then === "function"
                                      ) {
                                        $steps["postgresUpdateMany"] =
                                          await $steps["postgresUpdateMany"];
                                      }

                                      $steps["invokeGlobalAction"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "success",
                                                (() => {
                                                  try {
                                                    return `L'annonce "${currentItem.title}" a bien été retirée de vos favoris`;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["invokeGlobalAction"] != null &&
                                        typeof $steps["invokeGlobalAction"] ===
                                          "object" &&
                                        typeof $steps["invokeGlobalAction"]
                                          .then === "function"
                                      ) {
                                        $steps["invokeGlobalAction"] =
                                          await $steps["invokeGlobalAction"];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                              <JobCard
                                availability={(() => {
                                  const __composite = {
                                    icon: null,
                                    text: null
                                  };
                                  __composite["icon"] =
                                    "https://site-assets.plasmic.app/09559aac36fd99f7328c58c54917e963.svg";
                                  __composite["text"] =
                                    currentItem.availability_status;
                                  return __composite;
                                })()}
                                city={(() => {
                                  try {
                                    return currentItem.location;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                className={classNames(
                                  "__wab_instance",
                                  sty.jobCard___9Gniz
                                )}
                                companyName={(() => {
                                  try {
                                    return currentItem.company_name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                contractType={(() => {
                                  const __composite = {
                                    icon: null,
                                    text: null
                                  };
                                  __composite["icon"] =
                                    "https://site-assets.plasmic.app/8c7917b8895bfc981624579d17930e0b.svg";
                                  __composite["text"] =
                                    currentItem.contract_type;
                                  return __composite;
                                })()}
                                customIcons={{}}
                                domain={(() => {
                                  const __composite = {
                                    icon: null,
                                    text: null
                                  };
                                  __composite["icon"] =
                                    "https://site-assets.plasmic.app/317422994ee40e8e3801225ee1942b34.svg";
                                  __composite["text"] =
                                    currentItem.sector_activity;
                                  return __composite;
                                })()}
                                logo={(() => {
                                  try {
                                    return currentItem.logo_file;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                metrics={[]}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateJobObject"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["jobObject"]
                                          },
                                          operation: 0,
                                          value: currentItem
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateJobObject"] != null &&
                                    typeof $steps["updateJobObject"] ===
                                      "object" &&
                                    typeof $steps["updateJobObject"].then ===
                                      "function"
                                  ) {
                                    $steps["updateJobObject"] = await $steps[
                                      "updateJobObject"
                                    ];
                                  }

                                  $steps["updateJobDetailsIsOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "jobDetails",
                                              "isOpen"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateJobDetailsIsOpen"] != null &&
                                    typeof $steps["updateJobDetailsIsOpen"] ===
                                      "object" &&
                                    typeof $steps["updateJobDetailsIsOpen"]
                                      .then === "function"
                                  ) {
                                    $steps["updateJobDetailsIsOpen"] =
                                      await $steps["updateJobDetailsIsOpen"];
                                  }

                                  $steps["updateCardLieu"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["city"]
                                          },
                                          operation: 0,
                                          value: currentItem.location
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateCardLieu"] != null &&
                                    typeof $steps["updateCardLieu"] ===
                                      "object" &&
                                    typeof $steps["updateCardLieu"].then ===
                                      "function"
                                  ) {
                                    $steps["updateCardLieu"] = await $steps[
                                      "updateCardLieu"
                                    ];
                                  }
                                }}
                                salary={(() => {
                                  const __composite = {
                                    icon: null,
                                    text: null
                                  };
                                  __composite["icon"] =
                                    "https://site-assets.plasmic.app/f452255eec148d4879254c4826702c60.svg";
                                  __composite["text"] = currentItem.salary;
                                  return __composite;
                                })()}
                                state={"applied"}
                                tags={[]}
                                title={(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                workMode={(() => {
                                  const __composite = {
                                    icon: null,
                                    text: null
                                  };
                                  __composite["icon"] =
                                    "https://site-assets.plasmic.app/ef7606af271b147dab4c95619b75af73.svg";
                                  __composite["text"] = currentItem.work_mode;
                                  return __composite;
                                })()}
                                workingTime={(() => {
                                  const __composite = {
                                    icon: null,
                                    text: null
                                  };
                                  __composite["icon"] =
                                    "https://site-assets.plasmic.app/09559aac36fd99f7328c58c54917e963.svg";
                                  __composite["text"] =
                                    currentItem.working_time;
                                  return __composite;
                                })()}
                              />

                              {(() => {
                                const child$Props = {
                                  availability: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "availability"
                                  ]),
                                  campany: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "campany"
                                  ]),
                                  city: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "city"
                                  ]),
                                  className: classNames(
                                    "__wab_instance",
                                    sty.jobCard20
                                  ),
                                  companyLogo: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "companyLogo"
                                  ]),
                                  contractType: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "contractType"
                                  ]),
                                  isApplied: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "isApplied"
                                  ]),
                                  isLastMinute: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "isLastMinute"
                                  ]),
                                  isNew: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "isNew"
                                  ]),
                                  name: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "name"
                                  ]),
                                  onAvailabilityChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "availability"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onCampanyChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "campany"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onCityChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "city"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onClick: async event => {
                                    const $steps = {};

                                    $steps["updateJobObject"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["jobObject"]
                                            },
                                            operation: 0,
                                            value: currentItem
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateJobObject"] != null &&
                                      typeof $steps["updateJobObject"] ===
                                        "object" &&
                                      typeof $steps["updateJobObject"].then ===
                                        "function"
                                    ) {
                                      $steps["updateJobObject"] = await $steps[
                                        "updateJobObject"
                                      ];
                                    }

                                    $steps["updateJobDetailsIsOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "jobDetails",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateJobDetailsIsOpen"] !=
                                        null &&
                                      typeof $steps[
                                        "updateJobDetailsIsOpen"
                                      ] === "object" &&
                                      typeof $steps["updateJobDetailsIsOpen"]
                                        .then === "function"
                                    ) {
                                      $steps["updateJobDetailsIsOpen"] =
                                        await $steps["updateJobDetailsIsOpen"];
                                    }

                                    $steps["updateJobCoordinates"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["jobCoordinates"]
                                            },
                                            operation: 0,
                                            value: {
                                              latitude: currentItem.latitude,
                                              longitude: currentItem.longitude
                                            }
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateJobCoordinates"] != null &&
                                      typeof $steps["updateJobCoordinates"] ===
                                        "object" &&
                                      typeof $steps["updateJobCoordinates"]
                                        .then === "function"
                                    ) {
                                      $steps["updateJobCoordinates"] =
                                        await $steps["updateJobCoordinates"];
                                    }
                                  },
                                  onCompanyLogoChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "companyLogo"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onContractTypeChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "contractType"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onIsAppliedChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "isApplied"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onIsLastMinuteChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "isLastMinute"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onIsNewChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "isNew"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onNameChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "name"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onSalaryChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "salary"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onSectorChange2: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "sector"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onWorkModeChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "workMode"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onWorkingTimeChange: async (
                                    ...eventArgs: any
                                  ) => {
                                    generateStateOnChangeProp($state, [
                                      "jobCard20",
                                      __plasmic_idx_0,
                                      "workingTime"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  salary: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "salary"
                                  ]),
                                  sector: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "sector"
                                  ]),
                                  workMode: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "workMode"
                                  ]),
                                  workingTime: generateStateValueProp($state, [
                                    "jobCard20",
                                    __plasmic_idx_0,
                                    "workingTime"
                                  ])
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "jobCard20[].name",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.title;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].city",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.location;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].campany",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.company_name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].sector",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.sector_activity;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].contractType",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.contract_type;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].availability",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.availability_status;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].workingTime",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.working_time;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].salary",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.salary;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].workMode",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.work_mode;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].companyLogo",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.logo_file;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].isLastMinute",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return currentItem.is_last_minute;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return false;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].isNew",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return (
                                              new Date(
                                                currentItem.created_at
                                              ).toDateString() ===
                                              new Date().toDateString()
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return false;
                                            }
                                            throw e;
                                          }
                                        })()
                                    },
                                    {
                                      name: "jobCard20[].isApplied",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return (() => {
                                              if (
                                                $ctx.SupabaseUser?.user?.id ==
                                                undefined
                                              ) {
                                                return false;
                                              } else {
                                                return (
                                                  $queries.getApplication
                                                    .data[0].job_id ==
                                                  currentItem.id
                                                );
                                              }
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return false;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <JobCard20
                                    data-plasmic-name={"jobCard20"}
                                    data-plasmic-override={overrides.jobCard20}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          );
                        })}
                      </Stack__>
                    ) : null}
                    <Stack__
                      as={"button"}
                      data-plasmic-name={"buttonLastMin2"}
                      data-plasmic-override={overrides.buttonLastMin2}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.buttonLastMin2
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateIsLastMinute"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["isLastMinute"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIsLastMinute"] != null &&
                          typeof $steps["updateIsLastMinute"] === "object" &&
                          typeof $steps["updateIsLastMinute"].then ===
                            "function"
                        ) {
                          $steps["updateIsLastMinute"] = await $steps[
                            "updateIsLastMinute"
                          ];
                        }
                      }}
                      ref={ref => {
                        $refs["buttonLastMin2"] = ref;
                      }}
                    >
                      <PhClockCountdownFill3Icon
                        className={classNames(projectcss.all, sty.svg___6TKkr)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"text7"}
                        data-plasmic-override={overrides.text7}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text7
                        )}
                      >
                        {"LAST MINUTE"}
                      </div>
                    </Stack__>
                  </Stack__>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"mapJobs2"}
                      data-plasmic-override={overrides.mapJobs2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.mapJobs2)}
                    >
                      <MapBox
                        className={classNames(
                          "__wab_instance",
                          sty.mapBox___0IljK
                        )}
                        iconUrl={(() => {
                          try {
                            return (() => {
                              switch ($queries.getMarker.data[$state.state]) {
                                case "liked":
                                  return "https://idwomihieftgogbgivic.supabase.co/storage/v1/object/public/img/Marker/State=PinLiked,%20ShowSalary=False.svg";
                                case "new":
                                  return "https://idwomihieftgogbgivic.supabase.co/storage/v1/object/public/img/Marker/State=PinApplied,%20ShowSalary=False.svg";
                                case "applied":
                                  return "https://idwomihieftgogbgivic.supabase.co/storage/v1/object/public/img/Marker/State=PinApplied,%20ShowSalary=False.svg";
                                case "base":
                                  return "https://idwomihieftgogbgivic.supabase.co/storage/v1/object/public/img/Marker/State=PinNew,%20ShowSalary=False.svg";
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "/plasmic/jam_production_🚀/images/frame.svg";
                            }
                            throw e;
                          }
                        })()}
                        mapStyle={
                          "mapbox://styles/scroll/cm6gi9ljw003t01s36b0jfl80"
                        }
                        markers={[]}
                        searchAddress={(() => {
                          try {
                            return $state.city;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        zoom={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? 12
                            : 15
                        }
                      />

                      <div
                        data-plasmic-name={"postes2"}
                        data-plasmic-override={overrides.postes2}
                        className={classNames(projectcss.all, sty.postes2)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateMenuOnOff"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["menuOnOff"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateMenuOnOff"] != null &&
                            typeof $steps["updateMenuOnOff"] === "object" &&
                            typeof $steps["updateMenuOnOff"].then === "function"
                          ) {
                            $steps["updateMenuOnOff"] = await $steps[
                              "updateMenuOnOff"
                            ];
                          }

                          $steps["updateIsDiv1Visible"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["isDiv1Visible"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateIsDiv1Visible"] != null &&
                            typeof $steps["updateIsDiv1Visible"] === "object" &&
                            typeof $steps["updateIsDiv1Visible"].then ===
                              "function"
                          ) {
                            $steps["updateIsDiv1Visible"] = await $steps[
                              "updateIsDiv1Visible"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ceQwr
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    if ($state.isDiv1Visible == false) {
                                      return "Afficher la liste des résultats";
                                    } else if (
                                      $queries.getJobsByCriteria.data.length ===
                                      0
                                    ) {
                                      return "Aucun resultat";
                                    } else if (
                                      $queries.getJobsByCriteriaMobile.data
                                        .length === 0 &&
                                      $state.formFilter2Submited
                                    ) {
                                      return "Aucun resultat";
                                    } else {
                                      return "Masquer la liste des résultats";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Afficher la liste des r\u00e9sultats";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    if ($state.isDiv1Visible == false) {
                                      return "Afficher la liste des résultats";
                                    } else if (
                                      $queries.getJobsByCriteria.data.length ===
                                      0
                                    ) {
                                      return "Aucun resultat";
                                    } else {
                                      return "Masquer la liste des résultats";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Afficher la liste des r\u00e9sultats";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"button9"}
                        data-plasmic-override={overrides.button9}
                        className={classNames(projectcss.all, sty.button9)}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? (() => {
                                try {
                                  return $state.menuOnOff;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return $state.menuOnOff;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <JamButton
                            data-plasmic-name={"button10"}
                            data-plasmic-override={overrides.button10}
                            className={classNames(
                              "__wab_instance",
                              sty.button10
                            )}
                            icon={"none"}
                            iconImage={
                              "/plasmic/jam_production_🚀/images/image13.svg"
                            }
                            label={``}
                            onClick={async () => {
                              const $steps = {};

                              $steps["afficherOffre"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["isDiv1Visible"]
                                      },
                                      operation: 4,
                                      value: !$state.menuOnOff
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["afficherOffre"] != null &&
                                typeof $steps["afficherOffre"] === "object" &&
                                typeof $steps["afficherOffre"].then ===
                                  "function"
                              ) {
                                $steps["afficherOffre"] = await $steps[
                                  "afficherOffre"
                                ];
                              }

                              $steps["updatebtn"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["menuOnOff"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatebtn"] != null &&
                                typeof $steps["updatebtn"] === "object" &&
                                typeof $steps["updatebtn"].then === "function"
                              ) {
                                $steps["updatebtn"] = await $steps["updatebtn"];
                              }
                            }}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return !$state.menuOnOff;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <JamButton
                            data-plasmic-name={"button11"}
                            data-plasmic-override={overrides.button11}
                            className={classNames(
                              "__wab_instance",
                              sty.button11
                            )}
                            icon={"none"}
                            iconImage={
                              "/plasmic/jam_production_🚀/images/image13.svg"
                            }
                            label={``}
                            onClick={async () => {
                              const $steps = {};

                              $steps["afficherOffre"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["isDiv1Visible"]
                                      },
                                      operation: 4,
                                      value: !$state.menuOnOff
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["afficherOffre"] != null &&
                                typeof $steps["afficherOffre"] === "object" &&
                                typeof $steps["afficherOffre"].then ===
                                  "function"
                              ) {
                                $steps["afficherOffre"] = await $steps[
                                  "afficherOffre"
                                ];
                              }

                              $steps["updateMenuOnOff"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["menuOnOff"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateMenuOnOff"] != null &&
                                typeof $steps["updateMenuOnOff"] === "object" &&
                                typeof $steps["updateMenuOnOff"].then ===
                                  "function"
                              ) {
                                $steps["updateMenuOnOff"] = await $steps[
                                  "updateMenuOnOff"
                                ];
                              }
                            }}
                          />
                        ) : null}
                      </div>
                      {(() => {
                        try {
                          return $state.isDiv1Visible;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"jobListContainer2"}
                          data-plasmic-override={overrides.jobListContainer2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.jobListContainer2
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return (() => {
                                  if (
                                    $state.formFilter.value == undefined &&
                                    $state.formFilter2.value == undefined &&
                                    $state.keyWords == "" &&
                                    $state.searchLocation == ""
                                  ) {
                                    return $queries.getJobOffers.data;
                                  } else if ($state.formFilter2Submited) {
                                    return $queries.getJobsByCriteriaMobile
                                      .data;
                                  } else {
                                    return $queries.getJobsByCriteria.data;
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                data-plasmic-name={"jobsOnScroll2"}
                                data-plasmic-override={overrides.jobsOnScroll2}
                                className={classNames(
                                  projectcss.all,
                                  sty.jobsOnScroll2
                                )}
                                key={currentIndex}
                                onClick={async event => {
                                  const $steps = {};
                                }}
                              >
                                <div
                                  data-plasmic-name={"likeButtons2"}
                                  data-plasmic-override={overrides.likeButtons2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.likeButtons2
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return event?.stopPropagation();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }
                                  }}
                                >
                                  {(() => {
                                    try {
                                      return !$queries.getUsersLikes.data.some(
                                        like => like.job_id === currentItem.id
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <LikeIconIcon
                                      data-plasmic-name={"like3"}
                                      data-plasmic-override={overrides.like3}
                                      className={classNames(
                                        projectcss.all,
                                        sty.like3
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["postgresUpdateMany"] =
                                          !$queries.getUsersLikes.data.some(
                                            like =>
                                              like.job_id === currentItem.id
                                          )
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "kVSSe8ab4TtzwRPnTeEeUp",
                                                    opId: "82374051-9814-414c-909c-d23851067d30",
                                                    userArgs: {
                                                      variables: [
                                                        currentItem.id,
                                                        $state.couleurLike ==
                                                        false
                                                          ? true
                                                          : false,
                                                        $ctx.SupabaseUser.user
                                                          .id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                                      "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                                      "ee40aeb1-9965-4045-8d4f-b223146962b1"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["postgresUpdateMany"] !=
                                            null &&
                                          typeof $steps[
                                            "postgresUpdateMany"
                                          ] === "object" &&
                                          typeof $steps["postgresUpdateMany"]
                                            .then === "function"
                                        ) {
                                          $steps["postgresUpdateMany"] =
                                            await $steps["postgresUpdateMany"];
                                        }

                                        $steps["invokeGlobalAction"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: ["info", "Job lik\u00e9"]
                                              };
                                              return $globalActions[
                                                "plasmic-antd5-config-provider.showNotification"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }
                                      }}
                                      role={"img"}
                                    />
                                  ) : null}
                                  {(() => {
                                    try {
                                      return $queries.getUsersLikes.data.some(
                                        like => like.job_id === currentItem.id
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <HeartStraightIcon
                                      data-plasmic-name={"dislike2"}
                                      data-plasmic-override={overrides.dislike2}
                                      className={classNames(
                                        projectcss.all,
                                        sty.dislike2
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["postgresUpdateMany"] =
                                          $queries.getUsersLikes.data.some(
                                            like =>
                                              like.job_id === currentItem.id
                                          )
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "kVSSe8ab4TtzwRPnTeEeUp",
                                                    opId: "21389a04-150f-4bd5-bdca-85fbbce35635",
                                                    userArgs: {
                                                      conditions: [
                                                        currentItem.id
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                                      "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                                      "ee40aeb1-9965-4045-8d4f-b223146962b1"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["postgresUpdateMany"] !=
                                            null &&
                                          typeof $steps[
                                            "postgresUpdateMany"
                                          ] === "object" &&
                                          typeof $steps["postgresUpdateMany"]
                                            .then === "function"
                                        ) {
                                          $steps["postgresUpdateMany"] =
                                            await $steps["postgresUpdateMany"];
                                        }

                                        $steps["invokeGlobalAction"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "info",
                                                  "Job dislik\u00e9"
                                                ]
                                              };
                                              return $globalActions[
                                                "plasmic-antd5-config-provider.showNotification"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }
                                      }}
                                      role={"img"}
                                    />
                                  ) : null}
                                </div>
                                <JobCard
                                  availability={(() => {
                                    const __composite = {
                                      icon: null,
                                      text: null
                                    };
                                    __composite["icon"] =
                                      "https://site-assets.plasmic.app/09559aac36fd99f7328c58c54917e963.svg";
                                    __composite["text"] =
                                      currentItem.availability_status;
                                    return __composite;
                                  })()}
                                  city={(() => {
                                    try {
                                      return currentItem.location;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.jobCard__cwhV0
                                  )}
                                  companyName={(() => {
                                    try {
                                      return currentItem.company_name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  contractType={(() => {
                                    const __composite = {
                                      icon: null,
                                      text: null
                                    };
                                    __composite["icon"] =
                                      "https://site-assets.plasmic.app/8c7917b8895bfc981624579d17930e0b.svg";
                                    __composite["text"] =
                                      currentItem.contract_type;
                                    return __composite;
                                  })()}
                                  customIcons={{}}
                                  domain={(() => {
                                    const __composite = {
                                      icon: null,
                                      text: null
                                    };
                                    __composite["icon"] =
                                      "https://site-assets.plasmic.app/317422994ee40e8e3801225ee1942b34.svg";
                                    __composite["text"] =
                                      currentItem.sector_activity;
                                    return __composite;
                                  })()}
                                  logo={(() => {
                                    try {
                                      return currentItem.logo_file;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  metrics={[]}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateJobObject"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["jobObject"]
                                            },
                                            operation: 0,
                                            value: currentItem
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateJobObject"] != null &&
                                      typeof $steps["updateJobObject"] ===
                                        "object" &&
                                      typeof $steps["updateJobObject"].then ===
                                        "function"
                                    ) {
                                      $steps["updateJobObject"] = await $steps[
                                        "updateJobObject"
                                      ];
                                    }

                                    $steps["updateCardLieu"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["city"]
                                            },
                                            operation: 0,
                                            value: currentItem.location
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateCardLieu"] != null &&
                                      typeof $steps["updateCardLieu"] ===
                                        "object" &&
                                      typeof $steps["updateCardLieu"].then ===
                                        "function"
                                    ) {
                                      $steps["updateCardLieu"] = await $steps[
                                        "updateCardLieu"
                                      ];
                                    }

                                    $steps["updateJobDetailsIsOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "jobDetails",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateJobDetailsIsOpen"] !=
                                        null &&
                                      typeof $steps[
                                        "updateJobDetailsIsOpen"
                                      ] === "object" &&
                                      typeof $steps["updateJobDetailsIsOpen"]
                                        .then === "function"
                                    ) {
                                      $steps["updateJobDetailsIsOpen"] =
                                        await $steps["updateJobDetailsIsOpen"];
                                    }
                                  }}
                                  salary={(() => {
                                    const __composite = {
                                      icon: null,
                                      text: null
                                    };
                                    __composite["icon"] =
                                      "https://site-assets.plasmic.app/f452255eec148d4879254c4826702c60.svg";
                                    __composite["text"] = currentItem.salary;
                                    return __composite;
                                  })()}
                                  state={"default"}
                                  tags={[]}
                                  title={(() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  workMode={(() => {
                                    const __composite = {
                                      icon: null,
                                      text: null
                                    };
                                    __composite["icon"] =
                                      "https://site-assets.plasmic.app/ef7606af271b147dab4c95619b75af73.svg";
                                    __composite["text"] = currentItem.work_mode;
                                    return __composite;
                                  })()}
                                  workingTime={(() => {
                                    const __composite = {
                                      icon: null,
                                      text: null
                                    };
                                    __composite["icon"] =
                                      "https://site-assets.plasmic.app/09559aac36fd99f7328c58c54917e963.svg";
                                    __composite["text"] =
                                      currentItem.working_time;
                                    return __composite;
                                  })()}
                                />
                              </div>
                            );
                          })}
                        </Stack__>
                      ) : null}
                    </Stack__>
                  ) : null}
                </Stack__>
              </section>
              <Stack__
                as={"section"}
                data-plasmic-name={"section2"}
                data-plasmic-override={overrides.section2}
                hasGap={true}
                className={classNames(projectcss.all, sty.section2)}
              >
                <Stack__
                  as={"header"}
                  data-plasmic-name={"headingAndSupportingText2"}
                  data-plasmic-override={overrides.headingAndSupportingText2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.headingAndSupportingText2
                  )}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"badgeGroup3"}
                    data-plasmic-override={overrides.badgeGroup3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.badgeGroup3)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content8"}
                      data-plasmic-override={overrides.content8}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content8)}
                    >
                      <div
                        data-plasmic-name={"message3"}
                        data-plasmic-override={overrides.message3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.message3
                        )}
                      >
                        {"Notre solution"}
                      </div>
                    </Stack__>
                  </Stack__>
                  <h2
                    data-plasmic-name={"heading2"}
                    data-plasmic-override={overrides.heading2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.heading2
                    )}
                  >
                    {"Pourquoi chercher sur Job Around Me\u00a0?"}
                  </h2>
                  <p
                    data-plasmic-name={"supportingText5"}
                    data-plasmic-override={overrides.supportingText5}
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.supportingText5
                    )}
                  >
                    {
                      "Trouvez un job pr\u00e8s de chez vous, facilement et rapidement !"
                    }
                  </p>
                </Stack__>
                <Stack__
                  as={"article"}
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"featureText4"}
                    data-plasmic-override={overrides.featureText4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.featureText4)}
                  >
                    <div
                      data-plasmic-name={"featuredIcon4"}
                      data-plasmic-override={overrides.featuredIcon4}
                      className={classNames(projectcss.all, sty.featuredIcon4)}
                    >
                      <PersonSimpleWalkIcon
                        className={classNames(projectcss.all, sty.svg__rNea)}
                        role={"img"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"textAndSupportingText4"}
                      data-plasmic-override={overrides.textAndSupportingText4}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.textAndSupportingText4
                      )}
                    >
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"Il suffit de traverser la rue"}
                      </div>
                      <p
                        data-plasmic-name={"supportingText6"}
                        data-plasmic-override={overrides.supportingText6}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.supportingText6
                        )}
                      >
                        {
                          "Gr\u00e2ce \u00e0 la carte, rep\u00e9rez les jobs \u00e0 pourvoir pr\u00e8s de chez vous."
                        }
                      </p>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"featureText5"}
                    data-plasmic-override={overrides.featureText5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.featureText5)}
                  >
                    <div
                      data-plasmic-name={"featuredIcon5"}
                      data-plasmic-override={overrides.featuredIcon5}
                      className={classNames(projectcss.all, sty.featuredIcon5)}
                    >
                      <Mail2Icon
                        className={classNames(projectcss.all, sty.svg__vgh53)}
                        role={"img"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"textAndSupportingText5"}
                      data-plasmic-override={overrides.textAndSupportingText5}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.textAndSupportingText5
                      )}
                    >
                      <div
                        data-plasmic-name={"text2"}
                        data-plasmic-override={overrides.text2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text2
                        )}
                      >
                        {"Ne ratez aucune offre"}
                      </div>
                      <p
                        data-plasmic-name={"supportingText7"}
                        data-plasmic-override={overrides.supportingText7}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.supportingText7
                        )}
                      >
                        {
                          "Soyez alert\u00e9 par email d\u00e8s qu\u2019une nouvelle offre d\u2019emploi correspond \u00e0 vos crit\u00e8res de recherche."
                        }
                      </p>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"featureText6"}
                    data-plasmic-override={overrides.featureText6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.featureText6)}
                  >
                    <div
                      data-plasmic-name={"featuredIcon6"}
                      data-plasmic-override={overrides.featuredIcon6}
                      className={classNames(projectcss.all, sty.featuredIcon6)}
                    >
                      <ClockCountdownIcon
                        className={classNames(projectcss.all, sty.svg___1Rw0)}
                        role={"img"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"textAndSupportingText6"}
                      data-plasmic-override={overrides.textAndSupportingText6}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.textAndSupportingText6
                      )}
                    >
                      <div
                        data-plasmic-name={"text3"}
                        data-plasmic-override={overrides.text3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text3
                        )}
                      >
                        {"Jobs Last Minute"}
                      </div>
                      <p
                        data-plasmic-name={"supportingText8"}
                        data-plasmic-override={overrides.supportingText8}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.supportingText8
                        )}
                      >
                        {
                          "Fini l\u2019attente, gr\u00e2ce aux jobs Last Minute, vous postulez et recevez une r\u00e9ponse sous 24-48h."
                        }
                      </p>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </main>
            <Stack__
              as={"footer"}
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              hasGap={true}
              className={classNames(projectcss.all, sty.footer)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                hasGap={true}
                className={classNames(projectcss.all, sty.container)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"column"}
                  data-plasmic-override={overrides.column}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame6"}
                    data-plasmic-override={overrides.frame6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nVHg)}
                    >
                      <Vector12Icon
                        className={classNames(projectcss.all, sty.svg__ksJoD)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"frame7"}
                      data-plasmic-override={overrides.frame7}
                      className={classNames(projectcss.all, sty.frame7)}
                    >
                      <div
                        data-plasmic-name={"frame9"}
                        data-plasmic-override={overrides.frame9}
                        className={classNames(projectcss.all, sty.frame9)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2N3Bn
                          )}
                        >
                          {"JOB"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame11"}
                        data-plasmic-override={overrides.frame11}
                        className={classNames(projectcss.all, sty.frame11)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t3Gzv
                          )}
                        >
                          {"AROUND"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame12"}
                        data-plasmic-override={overrides.frame12}
                        className={classNames(projectcss.all, sty.frame12)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k9VUn
                          )}
                        >
                          {"ME"}
                        </div>
                      </div>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"socials"}
                    data-plasmic-override={overrides.socials}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.socials)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__rnHIi)}
                      displayHeight={"24px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"24px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/jam_production_🚀/images/socialIcon6.svg",
                        fullWidth: 24,
                        fullHeight: 24,
                        aspectRatio: 1
                      }}
                    />

                    <SocialIcon2Icon
                      className={classNames(projectcss.all, sty.svg___6EQxT)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={"socialIcon"}
                      data-plasmic-override={overrides.socialIcon}
                      className={classNames(projectcss.all, sty.socialIcon)}
                    >
                      <Group3Icon
                        className={classNames(projectcss.all, sty.svg__b9KbC)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"socialIcon2"}
                      data-plasmic-override={overrides.socialIcon2}
                      className={classNames(projectcss.all, sty.socialIcon2)}
                    >
                      <Group4Icon
                        className={classNames(projectcss.all, sty.svg___5ObBx)}
                        role={"img"}
                      />
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"footerLinksContainer"}
                  data-plasmic-override={overrides.footerLinksContainer}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.footerLinksContainer
                  )}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"buttonBase"}
                    data-plasmic-override={overrides.buttonBase}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttonBase)}
                  >
                    <div
                      data-plasmic-name={"text4"}
                      data-plasmic-override={overrides.text4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text4
                      )}
                    >
                      {"Acc\u00e8s employeur"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"footerLinks2"}
                    data-plasmic-override={overrides.footerLinks2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.footerLinks2)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [
                            "Mentions légales",
                            "Politique de confidentialité",
                            "CGU"
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2Q1XJ
                          )}
                          key={currentIndex}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      );
                    })}
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                hasGap={true}
                className={classNames(projectcss.all, sty.container2)}
              >
                <div
                  data-plasmic-name={"divider"}
                  data-plasmic-override={overrides.divider}
                  className={classNames(projectcss.all, sty.divider)}
                />

                <div
                  data-plasmic-name={"content2"}
                  data-plasmic-override={overrides.content2}
                  className={classNames(projectcss.all, sty.content2)}
                >
                  <div
                    data-plasmic-name={"footerText"}
                    data-plasmic-override={overrides.footerText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.footerText
                    )}
                  >
                    {"\u00a9 2024 Job Around Me. Site par Agence Scroll."}
                  </div>
                </div>
              </Stack__>
            </Stack__>
          </div>
          <Modal
            data-plasmic-name={"jobDetails"}
            data-plasmic-override={overrides.jobDetails}
            className={classNames("__wab_instance", sty.jobDetails)}
            closeOnBackdropClick={
              hasVariant(globalVariants, "screen", "mobileOnly") ? false : true
            }
            content={
              <Stack__
                as={"div"}
                data-plasmic-name={"jobListing"}
                data-plasmic-override={overrides.jobListing}
                hasGap={true}
                className={classNames(projectcss.all, sty.jobListing)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"jobDetail"}
                  data-plasmic-override={overrides.jobDetail}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.jobDetail)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame38"}
                    data-plasmic-override={overrides.frame38}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame38)}
                  >
                    <div
                      data-plasmic-name={"jobName"}
                      data-plasmic-override={overrides.jobName}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.jobName
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.jobObject.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Assistant designer graphique";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame53"}
                      data-plasmic-override={overrides.frame53}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame53)}
                    >
                      {(() => {
                        try {
                          return !$queries.getUsersLikes.data.some(
                            like => like.job_id === $state.jobObject.id
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <LikeIconIcon
                          data-plasmic-name={"like4"}
                          data-plasmic-override={overrides.like4}
                          className={classNames(projectcss.all, sty.like4)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["postgresUpdateMany"] =
                              !$queries.getUsersLikes.data.some(
                                like => like.job_id === $state.jobObject.id
                              )
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "9227d6f1-2755-4824-9d71-68d2b8ad2fa6",
                                        userArgs: {
                                          variables: [
                                            $state.couleurLike == false
                                              ? true
                                              : false,
                                            $ctx.SupabaseUser.user.id,
                                            $state.jobObject.id
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                          "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                          "ee40aeb1-9965-4045-8d4f-b223146962b1"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["postgresUpdateMany"] != null &&
                              typeof $steps["postgresUpdateMany"] ===
                                "object" &&
                              typeof $steps["postgresUpdateMany"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateMany"] = await $steps[
                                "postgresUpdateMany"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "success",
                                      (() => {
                                        try {
                                          return "l'annonce ${$state.jobObject.title} a bien été ajoutée à vos favoris";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $queries.getUsersLikes.data.some(
                            like => like.job_id === $state.jobObject.id
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <HeartStraightIcon
                          data-plasmic-name={"dislike3"}
                          data-plasmic-override={overrides.dislike3}
                          className={classNames(projectcss.all, sty.dislike3)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["postgresUpdateMany"] =
                              $queries.getUsersLikes.data.some(
                                like => like.job_id === $state.jobObject.id
                              )
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "21389a04-150f-4bd5-bdca-85fbbce35635",
                                        userArgs: {
                                          conditions: [$state.jobObject.id]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "24ab9e7e-7e19-4ab2-82fc-82df12596da0",
                                          "8b5c082f-d99a-4dae-bab9-7c91407a4070",
                                          "ee40aeb1-9965-4045-8d4f-b223146962b1"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["postgresUpdateMany"] != null &&
                              typeof $steps["postgresUpdateMany"] ===
                                "object" &&
                              typeof $steps["postgresUpdateMany"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateMany"] = await $steps[
                                "postgresUpdateMany"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "success",
                                      (() => {
                                        try {
                                          return "l'annonce ${$state.jobObject.title} a bien été retirée à vos favoris";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      ) : null}
                    </Stack__>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__quAxx)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"location"}
                      data-plasmic-override={overrides.location}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.location)}
                    >
                      <PhMapPin2Icon
                        className={classNames(projectcss.all, sty.svg__ii0So)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rWxGh
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.jobObject.location;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Paris (75)";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <div
                      data-plasmic-name={"publicationDate"}
                      data-plasmic-override={overrides.publicationDate}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.publicationDate
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "Publié le " +
                              new Date(
                                $state.jobObject.created_at
                              ).toLocaleDateString("fr-FR")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Publi\u00e9 le 18/12/2023";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame46"}
                    data-plasmic-override={overrides.frame46}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame46)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame47"}
                      data-plasmic-override={overrides.frame47}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame47)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame48"}
                        data-plasmic-override={overrides.frame48}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame48)}
                      >
                        <PhFileTextIcon
                          className={classNames(projectcss.all, sty.svg__puRmk)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"dkTrucksPark"}
                          data-plasmic-override={overrides.dkTrucksPark}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dkTrucksPark
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject.contract_type;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "CDI";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame49"}
                        data-plasmic-override={overrides.frame49}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame49)}
                      >
                        <PhClockIcon
                          className={classNames(projectcss.all, sty.svg__aiXq7)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"dkTrucksPark2"}
                          data-plasmic-override={overrides.dkTrucksPark2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dkTrucksPark2
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject.working_time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "25h";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame50"}
                        data-plasmic-override={overrides.frame50}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame50)}
                      >
                        <PhCoinsLightIcon
                          className={classNames(projectcss.all, sty.svg__ig7W)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"dkTrucksPark3"}
                          data-plasmic-override={overrides.dkTrucksPark3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dkTrucksPark3
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject.salary;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "2000\u20ac";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame51"}
                        data-plasmic-override={overrides.frame51}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame51)}
                      >
                        <PhClockCountdownIcon
                          className={classNames(projectcss.all, sty.svg__jEyBi)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"dkTrucksPark4"}
                          data-plasmic-override={overrides.dkTrucksPark4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dkTrucksPark4
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject.availability_status;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Imm\u00e9diat";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                    <Button
                      className={classNames("__wab_instance", sty.button__yJeC)}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__dzbTy)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cNwVu
                          )}
                        >
                          {"postuler"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateVerifyUserAuthIsOpen"] =
                          $ctx.SupabaseUser?.user?.id == undefined
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["verifyUserAuth", "isOpen"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateVerifyUserAuthIsOpen"] != null &&
                          typeof $steps["updateVerifyUserAuthIsOpen"] ===
                            "object" &&
                          typeof $steps["updateVerifyUserAuthIsOpen"].then ===
                            "function"
                        ) {
                          $steps["updateVerifyUserAuthIsOpen"] = await $steps[
                            "updateVerifyUserAuthIsOpen"
                          ];
                        }

                        $steps["runCode"] = $ctx.SupabaseUser?.user?.id
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.signUpApplication.isOpen =
                                    true);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateDetailsDeLoffreIsOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["jobDetails", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDetailsDeLoffreIsOpen"] != null &&
                          typeof $steps["updateDetailsDeLoffreIsOpen"] ===
                            "object" &&
                          typeof $steps["updateDetailsDeLoffreIsOpen"].then ===
                            "function"
                        ) {
                          $steps["updateDetailsDeLoffreIsOpen"] = await $steps[
                            "updateDetailsDeLoffreIsOpen"
                          ];
                        }
                      }}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"jobDescriptionContainer"}
                  data-plasmic-override={overrides.jobDescriptionContainer}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.jobDescriptionContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nzb0W
                    )}
                  >
                    {"Description du poste"}
                  </div>
                  <div
                    data-plasmic-name={"jobDescription"}
                    data-plasmic-override={overrides.jobDescription}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.jobDescription
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.jobObject.description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Le STUDIO ASENS\u00d2 recherche un(e) talentueux(SE) ASSISTANT(E) DESIGNER GRAPHIQUE, recrutement en CDD de 10 mois, \u00e0 mi-temps (21 heures par semaine).\n\nAssurer l'ensemble de la coh\u00e9rence graphique de l'identit\u00e9 d'ANOZR WAY via la cr\u00e9ation, l'entretien, le renouvellement de tous les \u00e9l\u00e9ments graphiques qui la compose.\nContribuer \u00e0 la direction artistique (benchmark, moodboards, maquettes, recommandations, key visual...), d\u00e9velopper l'identit\u00e9 visuelle et \"digitaliser\" la charte graphique.\nMise en forme des contenus, cr\u00e9ation de templates et kits graphiques : infographies, brochures, sales deck, livre blanc, cas client etc. d\u00e9clin\u00e9 en format digital et print\nR\u00e9seaux sociaux : visuels des posts Linkedin/Twitter, des Ads / publicit\u00e9s (images statiques, carrousels, vid\u00e9os etc.)\nSite internet : r\u00e9alisation de maquettes, int\u00e9gration Wordpress via un th\u00e8me, cr\u00e9ation de landing pages, de visuels\nShooting et retouche photo (\u00e9v\u00e9nementiel, marque employeur)\nCaptation et montage vid\u00e9o : explainer video, t\u00e9moignages clients, \u00e9v\u00e9nementiel, formats courts pour r\u00e9seaux sociaux etc. La ma\u00eetrise du motion design est un plus !\nSalon/\u00e9v\u00e9nementiel : habillage et sc\u00e9nographie de stand, PLV, roll-up goodies, v\u00eatements personnalis\u00e9s, brochures/flyers,";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"benefits"}
                    data-plasmic-override={overrides.benefits}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.benefits)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.jobObject.benefits
                            .replace(/{/g, "")
                            .replace(/}/g, "")
                            .replace(/"/g, "")
                            .split(",");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8MYwb
                          )}
                          key={currentIndex}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      );
                    })}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"expectedProfileContainer"}
                  data-plasmic-override={overrides.expectedProfileContainer}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.expectedProfileContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kTadj
                    )}
                  >
                    {"Profil attendu"}
                  </div>
                  <div
                    data-plasmic-name={"expectedProfile"}
                    data-plasmic-override={overrides.expectedProfile}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.expectedProfile
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.jobObject.requirements;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Vous aimez votre m\u00e9tier, en particulier passer de la conception \u00e0 la r\u00e9alisation de vos id\u00e9es mais \u00e9galement d\u00e9cliner/ ex\u00e9cuter des concepts cr\u00e9atifs pens\u00e9s en \u00e9quipe. Votre culture graphique vous permet d'aborder avec autant d'aisance communications de petites entreprises, corporate, institutionnelle ou publique. \nVous ma\u00eetrisez et affectionnez particuli\u00e8rement la conception d'identit\u00e9 visuelle et de maquettes \u00e9ditoriales (magazines, rapports d'activit\u00e9s, etc.). Force de propositions construites et cr\u00e9atives, vous \u00eates en capacit\u00e9 d'argumenter vos pr\u00e9conisations \u00e0 l'\u00e9crit comme \u00e0 l'oral. ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"companyContainer"}
                  data-plasmic-override={overrides.companyContainer}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.companyContainer)}
                >
                  <div
                    data-plasmic-name={"logoContainer"}
                    data-plasmic-override={overrides.logoContainer}
                    className={classNames(projectcss.all, sty.logoContainer)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m6E17
                      )}
                    >
                      {"L\u2019entreprise"}
                    </div>
                    <PlasmicImg__
                      data-plasmic-name={"logo"}
                      data-plasmic-override={overrides.logo}
                      alt={""}
                      className={classNames(sty.logo)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.jobObject.logo_file;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__iOsT5)}
                  >
                    <div
                      data-plasmic-name={"companyName"}
                      data-plasmic-override={overrides.companyName}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.companyName
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.jobObject.company_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Impact.com";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"companyDetail"}
                      data-plasmic-override={overrides.companyDetail}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.companyDetail)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"sectorActivity"}
                        data-plasmic-override={overrides.sectorActivity}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.sectorActivity
                        )}
                      >
                        <IconPhBriefcase2Icon
                          className={classNames(projectcss.all, sty.svg__x2Ev5)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"dkTrucksPark5"}
                          data-plasmic-override={overrides.dkTrucksPark5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dkTrucksPark5
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject.company_sector;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Design";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"companySize"}
                        data-plasmic-override={overrides.companySize}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.companySize)}
                      >
                        <PhUsersThreeIcon
                          className={classNames(projectcss.all, sty.svg__dpSE)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"dkTrucksPark6"}
                          data-plasmic-override={overrides.dkTrucksPark6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dkTrucksPark6
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject.company_size;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "450";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"companyLocation"}
                        data-plasmic-override={overrides.companyLocation}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.companyLocation
                        )}
                      >
                        <PhMapTrifoldFillIcon
                          className={classNames(projectcss.all, sty.svg__uq5EX)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ozaHn
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject.company_address;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "11 rue des Taillandiers 75011 Paris";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <div
                    data-plasmic-name={"companyDescription"}
                    data-plasmic-override={overrides.companyDescription}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.companyDescription
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.jobObject.company_description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Studio de design graphique sp\u00e9cialis\u00e9e dans le design de marque (branding) et le design \u00e9ditorial, le STUDIO ASENS\u00d2 r\u00e9pond aussi bien aux besoins de productions issues des activit\u00e9s des entreprises tels les PME et les grands comptes, des activit\u00e9s des institutions publiques tels les villes, les communaut\u00e9s, agglom\u00e9rations etc. ainsi qu'\u00e0 ses propres projets, consultations et march\u00e9s publics.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              </Stack__>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__hgXjN)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["jobDetails", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalIsOpen"] != null &&
                      typeof $steps["updateModalIsOpen"] === "object" &&
                      typeof $steps["updateModalIsOpen"].then === "function"
                    ) {
                      $steps["updateModalIsOpen"] = await $steps[
                        "updateModalIsOpen"
                      ];
                    }

                    $steps["updateJobId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["jobId"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateJobId"] != null &&
                      typeof $steps["updateJobId"] === "object" &&
                      typeof $steps["updateJobId"].then === "function"
                    ) {
                      $steps["updateJobId"] = await $steps["updateJobId"];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["jobDetails", "isOpen"])}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["jobDetails", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["updateJobId"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["jobId"]
                        },
                        operation: 1
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateJobId"] != null &&
                  typeof $steps["updateJobId"] === "object" &&
                  typeof $steps["updateJobId"].then === "function"
                ) {
                  $steps["updateJobId"] = await $steps["updateJobId"];
                }
              }).apply(null, eventArgs);
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <JamButton
                data-plasmic-name={"button5"}
                data-plasmic-override={overrides.button5}
                className={classNames("__wab_instance", sty.button5)}
                icon={"none"}
              />
            }
          />

          <Modal
            data-plasmic-name={"signUpApplication"}
            data-plasmic-override={overrides.signUpApplication}
            className={classNames("__wab_instance", sty.signUpApplication)}
            closeOnBackdropClick={false}
            content={
              <div
                data-plasmic-name={"application"}
                data-plasmic-override={overrides.application}
                className={classNames(projectcss.all, sty.application)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : (() => {
                        try {
                          return (
                            $ctx.SupabaseUser.user !== undefined &&
                            $ctx.SupabaseUser.user !== null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"header2"}
                    data-plasmic-override={overrides.header2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.header2)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame67"}
                      data-plasmic-override={overrides.frame67}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame67)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame68"}
                        data-plasmic-override={overrides.frame68}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame68)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m3NVn
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Assistant designer graphique";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame69"}
                          data-plasmic-override={overrides.frame69}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame69)}
                        >
                          <PhMapPin2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__x8Izl
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p02
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.location;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Paris (75)";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lmXnE
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "Publié le " +
                                new Date(
                                  $state.jobObject.created_at
                                ).toLocaleDateString("fr-FR")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Publi\u00e9 le 18/12/2023";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame74"}
                      data-plasmic-override={overrides.frame74}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame74)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame75"}
                        data-plasmic-override={overrides.frame75}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame75)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame76"}
                          data-plasmic-override={overrides.frame76}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame76)}
                        >
                          <PhFileTextIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cxduz
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"dkTrucksPark7"}
                            data-plasmic-override={overrides.dkTrucksPark7}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.dkTrucksPark7
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.contract_type;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "CDI";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame77"}
                          data-plasmic-override={overrides.frame77}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame77)}
                        >
                          <PhClockIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tXdCm
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"dkTrucksPark8"}
                            data-plasmic-override={overrides.dkTrucksPark8}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.dkTrucksPark8
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.working_time;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "25h";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame16"}
                          data-plasmic-override={overrides.frame16}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame16)}
                        >
                          <PhCoinsLightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fQers
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"dkTrucksPark9"}
                            data-plasmic-override={overrides.dkTrucksPark9}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.dkTrucksPark9
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.salary;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "2000\u20ac";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame17"}
                          data-plasmic-override={overrides.frame17}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame17)}
                        >
                          <PhClockCountdownIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___7Q4Yk
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"dkTrucksPark10"}
                            data-plasmic-override={overrides.dkTrucksPark10}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.dkTrucksPark10
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.availability_status;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Imm\u00e9diat";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame18"}
                      data-plasmic-override={overrides.frame18}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame18)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame78"}
                        data-plasmic-override={overrides.frame78}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame78)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame79"}
                          data-plasmic-override={overrides.frame79}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame79)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aDnWy
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.jobObject.company_name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Impact.com";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"frame80"}
                            data-plasmic-override={overrides.frame80}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.frame80)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame81"}
                              data-plasmic-override={overrides.frame81}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame81
                              )}
                            >
                              <IconPhBriefcase2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___2Pob4
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"dkTrucksPark11"}
                                data-plasmic-override={overrides.dkTrucksPark11}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.dkTrucksPark11
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.jobObject.company_sector;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Design";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame82"}
                              data-plasmic-override={overrides.frame82}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame82
                              )}
                            >
                              <PhUsersThreeIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fyKu
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"dkTrucksPark12"}
                                data-plasmic-override={overrides.dkTrucksPark12}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.dkTrucksPark12
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.jobObject.company_size;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "450";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"frame83"}
                              data-plasmic-override={overrides.frame83}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame83
                              )}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"frame84"}
                                data-plasmic-override={overrides.frame84}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame84
                                )}
                              >
                                <PhMapTrifoldFillIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__g3SHy
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zSniP
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.jobObject.company_address;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "11 rue des Taillandiers 75011 Paris";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Stack__>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame85"}
                        data-plasmic-override={overrides.frame85}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame85)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___23SpF)}
                          displayHeight={"55px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"150px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return $state.jobObject.logo_file;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </Stack__>
                    </Stack__>
                  </Stack__>
                ) : null}
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: (() => {
                      try {
                        return $queries.getCurrentUserById.data[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["cv"] =
                        $state.upload.files.length > 0
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                  userArgs: {
                                    path: [
                                      $ctx.SupabaseUser.user.id,
                                      $state.upload.files[0].name
                                    ],
                                    content: [$state.upload.files[0].contents],
                                    contentType: [$state.upload.files[0].type]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["cv"] != null &&
                        typeof $steps["cv"] === "object" &&
                        typeof $steps["cv"].then === "function"
                      ) {
                        $steps["cv"] = await $steps["cv"];
                      }

                      $steps["lettreMotiv"] =
                        $state.upload3.files.length > 0
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                  userArgs: {
                                    path: [
                                      $ctx.SupabaseUser.user.id,
                                      $state.upload3.files[0].name
                                    ],
                                    content: [$state.upload3.files[0].contents],
                                    contentType: [$state.upload3.files[0].type]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["lettreMotiv"] != null &&
                        typeof $steps["lettreMotiv"] === "object" &&
                        typeof $steps["lettreMotiv"].then === "function"
                      ) {
                        $steps["lettreMotiv"] = await $steps["lettreMotiv"];
                      }

                      $steps["updateUser"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "208b2516-0c26-4591-9cde-df43376962ed",
                                userArgs: {
                                  conditions: [$ctx.SupabaseUser.user.id],
                                  variables: [
                                    $steps.cv?.path.split("/")[1],
                                    $steps.lettreMotiv?.path.split("/")[1],
                                    $state.form.value.address,
                                    $state.form.value.city,
                                    $state.form.value.Country,
                                    $state.form.value.first_name,
                                    $state.form.value.last_name,
                                    $state.form.value.level,
                                    $state.form.value.linkedin_url,
                                    $state.form.value.phone_number,
                                    $state.form.value.postal_code,
                                    $state.form.value.short_presentation,
                                    $state.form.value.skill,
                                    $state.form.value.transport_modes,
                                    new Date().toISOString(),
                                    $state.form.value.skills,
                                    $state.form.value.transport_mode,
                                    $queries.getCoordinates.data.response
                                      .features[0].geometry.coordinates[0],
                                    $queries.getCoordinates.data.response
                                      .features[0].geometry.coordinates[1]
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: null,
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUser"] != null &&
                        typeof $steps["updateUser"] === "object" &&
                        typeof $steps["updateUser"].then === "function"
                      ) {
                        $steps["updateUser"] = await $steps["updateUser"];
                      }

                      $steps["createApplication"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "61dee8ac-d65c-484d-bd5d-03def11e95e5",
                                userArgs: {
                                  variables: [
                                    $state.form.value.address,
                                    $state.form.value.city,
                                    $steps.lettreMotiv?.path.split("/")[1],
                                    $steps.cv?.path.split("/")[1],
                                    $state.form.value.level,
                                    $state.form.value.linkedin_url,
                                    $state.form.value.postal_code,
                                    $state.form.value.short_presentation,
                                    $state.form.value.skill,
                                    $state.form.value.transport_mode,
                                    $state.form.value.id,
                                    $state.jobObject.id
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["createApplication"] != null &&
                        typeof $steps["createApplication"] === "object" &&
                        typeof $steps["createApplication"].then === "function"
                      ) {
                        $steps["createApplication"] = await $steps[
                          "createApplication"
                        ];
                      }

                      $steps["updateInscriptionEtCandidatureAUneOffreIsOpen"] =
                        true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["signUpApplication", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps[
                          "updateInscriptionEtCandidatureAUneOffreIsOpen"
                        ] != null &&
                        typeof $steps[
                          "updateInscriptionEtCandidatureAUneOffreIsOpen"
                        ] === "object" &&
                        typeof $steps[
                          "updateInscriptionEtCandidatureAUneOffreIsOpen"
                        ].then === "function"
                      ) {
                        $steps[
                          "updateInscriptionEtCandidatureAUneOffreIsOpen"
                        ] = await $steps[
                          "updateInscriptionEtCandidatureAUneOffreIsOpen"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__w96C
                        )}
                      >
                        <UploadWrapper
                          data-plasmic-name={"upload2"}
                          data-plasmic-override={overrides.upload2}
                          accept={"image/*"}
                          className={classNames("__wab_instance", sty.upload2)}
                          files={generateStateValueProp($state, [
                            "upload2",
                            "files"
                          ])}
                          onFilesChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "upload2",
                              "files"
                            ]).apply(null, eventArgs);

                            (async files => {
                              const $steps = {};

                              $steps["supabaseUploadFile"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                        opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                        userArgs: {
                                          path: [
                                            $ctx.SupabaseUser.user.id,
                                            $state.upload2.files[0].name
                                          ],
                                          content: [
                                            $state.upload2.files[0].contents
                                          ],
                                          contentType: [
                                            $state.upload2.files[0].type
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["supabaseUploadFile"] != null &&
                                typeof $steps["supabaseUploadFile"] ===
                                  "object" &&
                                typeof $steps["supabaseUploadFile"].then ===
                                  "function"
                              ) {
                                $steps["supabaseUploadFile"] = await $steps[
                                  "supabaseUploadFile"
                                ];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "ca8056ed-4ec7-4218-bb8b-d4f4da770307",
                                        userArgs: {
                                          keys: [$ctx.SupabaseUser.user.id],
                                          variables: [
                                            $steps.supabaseUploadFile?.path.split(
                                              "/"
                                            )[1]
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          showUploadList={true}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__ubQ4)}
                            displayHeight={"132px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"132px"}
                            loading={"lazy"}
                            src={
                              $queries.getPp.signedUrl
                                ? $queries.getPp.signedUrl
                                : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png"
                            }
                          />

                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xNee9
                            )}
                          >
                            <div
                              data-plasmic-name={"editIcon2"}
                              data-plasmic-override={overrides.editIcon2}
                              className={classNames(
                                projectcss.all,
                                sty.editIcon2
                              )}
                            >
                              <div
                                data-plasmic-name={"frame19"}
                                data-plasmic-override={overrides.frame19}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame19
                                )}
                              />

                              <PhPencilSimpleIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__q7Wxc
                                )}
                                role={"img"}
                              />
                            </div>
                            <div
                              data-plasmic-name={"deleteIcon2"}
                              data-plasmic-override={overrides.deleteIcon2}
                              className={classNames(
                                projectcss.all,
                                sty.deleteIcon2
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateUpload2Files"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["upload2", "files"]
                                        },
                                        operation: 1
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          undefined
                                        );
                                        return undefined;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateUpload2Files"] != null &&
                                  typeof $steps["updateUpload2Files"] ===
                                    "object" &&
                                  typeof $steps["updateUpload2Files"].then ===
                                    "function"
                                ) {
                                  $steps["updateUpload2Files"] = await $steps[
                                    "updateUpload2Files"
                                  ];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return event.stopPropagation();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["postgresUpdateMany"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                          opId: "00154d6f-41ac-4e44-8d5a-da12df8e7c56",
                                          userArgs: {
                                            conditions: [
                                              $ctx.SupabaseUser.user.id
                                            ],
                                            variables: [null]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["postgresUpdateMany"] != null &&
                                  typeof $steps["postgresUpdateMany"] ===
                                    "object" &&
                                  typeof $steps["postgresUpdateMany"].then ===
                                    "function"
                                ) {
                                  $steps["postgresUpdateMany"] = await $steps[
                                    "postgresUpdateMany"
                                  ];
                                }
                              }}
                            >
                              <div
                                data-plasmic-name={"frame20"}
                                data-plasmic-override={overrides.frame20}
                                className={classNames(
                                  projectcss.all,
                                  sty.frame20
                                )}
                              />

                              <PhTrashIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ok9Ml
                                )}
                                role={"img"}
                              />
                            </div>
                          </Stack__>
                        </UploadWrapper>
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"nomPrenom"}
                        data-plasmic-override={overrides.nomPrenom}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.nomPrenom)}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__iMuP6
                          )}
                          label={"Pr\u00e9nom"}
                          name={"first_name"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput1"}
                            data-plasmic-override={overrides.textInput1}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput1
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput1",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pr\u00e9nom"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__k1Jbq
                          )}
                          label={"Nom"}
                          name={"last_name"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput2"}
                            data-plasmic-override={overrides.textInput2}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput2
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput2",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pr\u00e9nom"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__qQzPb
                        )}
                        label={"E-mail"}
                        name={"email"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput4"}
                          data-plasmic-override={overrides.textInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput4
                          )}
                          disabled={true}
                          inputType={"email"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"E-mail"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"telephone"}
                        data-plasmic-override={overrides.telephone}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.telephone)}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___4NfFl
                          )}
                          label={"T\u00e9l\u00e9phone"}
                          name={"countryCode"}
                        >
                          <PhoneSelector
                            data-plasmic-name={"phoneSelector"}
                            data-plasmic-override={overrides.phoneSelector}
                            className={classNames(
                              "__wab_instance",
                              sty.phoneSelector
                            )}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___7M9Gr
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__i4Sm9
                              )}
                            >
                              {""}
                            </div>
                          }
                          name={"phone_number"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput3"}
                            data-plasmic-override={overrides.textInput3}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput3
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getCurrentUserById.data[0]
                                  .phone_number;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            inputType={"tel"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput3",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"6060606060"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__lwGlt
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dlbwm
                            )}
                          >
                            {"Adresse"}
                          </div>
                        }
                        name={"address"}
                      >
                        <TextInput
                          data-plasmic-name={"rue"}
                          data-plasmic-override={overrides.rue}
                          className={classNames("__wab_instance", sty.rue)}
                          defaultValue={(() => {
                            try {
                              return $queries.getCurrentUserById.data[0]
                                .address;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "rue",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Rue"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"codePosteVille"}
                        data-plasmic-override={overrides.codePosteVille}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.codePosteVille
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__wp2A
                          )}
                          hidden={false}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aXhl9
                              )}
                            >
                              {""}
                            </div>
                          }
                          name={"postal_code"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"codePostal"}
                            data-plasmic-override={overrides.codePostal}
                            className={classNames(
                              "__wab_instance",
                              sty.codePostal
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getCurrentUserById.data[0]
                                  .postal_code;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "codePostal",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Code postal"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__dKhbg
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__o4Elx
                              )}
                            >
                              {"Adresse*"}
                            </div>
                          }
                          name={"city"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"ville"}
                            data-plasmic-override={overrides.ville}
                            className={classNames("__wab_instance", sty.ville)}
                            defaultValue={(() => {
                              try {
                                return $queries.getCurrentUserById.data[0].city;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "ville",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Ville"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jGum5
                        )}
                      >
                        <TextInput
                          data-plasmic-name={"textInput5"}
                          data-plasmic-override={overrides.textInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput5
                          )}
                          defaultValue={``}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Code postal"}
                        />

                        <Select
                          data-plasmic-name={"select2"}
                          data-plasmic-override={overrides.select2}
                          className={classNames("__wab_instance", sty.select2)}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select2",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Ville"}
                          showLabel={false}
                        />
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__ldZSu
                        )}
                        label={null}
                        name={"country"}
                        noLabel={true}
                      >
                        <Select
                          data-plasmic-name={"select4"}
                          data-plasmic-override={overrides.select4}
                          className={classNames("__wab_instance", sty.select4)}
                          initialSelectedValue={"France"}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getCountries.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.menuItem__jtwJu
                                )}
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pays"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <Line10Icon
                        className={classNames(projectcss.all, sty.svg___3UUi)}
                        role={"img"}
                      />

                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__lHwsv
                        )}
                        initialValue={(() => {
                          try {
                            return (
                              $queries.getUser.data[0].transport_mode ||
                              undefined
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Moyens de transport"}
                        name={"transport_mode"}
                        noLabel={false}
                      >
                        <AntdSelect
                          data-plasmic-name={"select5"}
                          data-plasmic-override={overrides.select5}
                          className={classNames("__wab_instance", sty.select5)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select5",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getTransportModes.data.map(
                                mode => ({
                                  value: mode.id,
                                  label: mode.mode
                                })
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___35Epy
                              )}
                            >
                              {"Moyen de transport"}
                            </div>
                          }
                          popupScopeClassName={sty["select5__popup"]}
                          size={"large"}
                          suffixIcon={
                            <ChevronDownIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4AB7D
                              )}
                              role={"img"}
                            />
                          }
                          value={generateStateValueProp($state, [
                            "select5",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__mFsz0
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mS8Kr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sLolF
                              )}
                            >
                              {"Pr\u00e9sentation courte"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__k1Qrg
                              )}
                            >
                              {
                                "D\u00e9crivez le type de poste que vous cherchez, les missions que vous souhaitez effectuer. \nAjouter les mots-cl\u00e9s qui vous semblent les plus pertinents pour trouver les jobs qui correspondent \u00e0 votre recherche.\r\n\r"
                              }
                            </div>
                          </div>
                        }
                        name={"short_presentation"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.textArea
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea", "value"],
                                AntdTextArea_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder: "Pr\u00e9sentation",
                            value: generateStateValueProp($state, [
                              "textArea",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea.value"
                              }
                            ],
                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea"}
                              data-plasmic-override={overrides.textArea}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___7U8E7
                        )}
                        initialValue={(() => {
                          try {
                            return $queries.getUser.data[0].skill || undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={"Comp\u00e9tences"}
                        name={"skill"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select7"}
                          data-plasmic-override={overrides.select7}
                          className={classNames("__wab_instance", sty.select7)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select7",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getSoftSkill.data.map(skill => ({
                                value: skill.id,
                                label: skill.skill
                              }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9ZIu6
                              )}
                            >
                              {"Ajouter"}
                            </div>
                          }
                          popupScopeClassName={sty["select7__popup"]}
                          size={"large"}
                          suffixIcon={
                            <ChevronDownIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gGwGf
                              )}
                              role={"img"}
                            />
                          }
                          value={generateStateValueProp($state, [
                            "select7",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___0N6P1
                        )}
                        initialValue={$queries.getUser.data[0]?.level}
                        label={"Niveau d'exp\u00e9rience"}
                        name={"level"}
                      >
                        <Select
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          className={classNames("__wab_instance", sty.select)}
                          initialSelectedValue={(() => {
                            try {
                              return $queries.getUser.data[0].level;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getXpLevel.data.sort(
                                  (a, b) => a.id - b.id
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem.level;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem.id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"S\u00e9l\u00e9ctionner"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame13"}
                        data-plasmic-override={overrides.frame13}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame13)}
                      >
                        <div
                          data-plasmic-name={"frame14"}
                          data-plasmic-override={overrides.frame14}
                          className={classNames(projectcss.all, sty.frame14)}
                        >
                          <div
                            data-plasmic-name={"email4"}
                            data-plasmic-override={overrides.email4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.email4
                            )}
                          >
                            {"CV"}
                          </div>
                          {(() => {
                            try {
                              return $queries.getUser.data[0].cv_file !== null;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"cvUpload"}
                              data-plasmic-override={overrides.cvUpload}
                              className={classNames(
                                projectcss.all,
                                sty.cvUpload
                              )}
                            >
                              <PhTrashIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hFfKa
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateUploadFiles"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["upload", "files"]
                                          },
                                          operation: 1
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            undefined
                                          );
                                          return undefined;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateUploadFiles"] != null &&
                                    typeof $steps["updateUploadFiles"] ===
                                      "object" &&
                                    typeof $steps["updateUploadFiles"].then ===
                                      "function"
                                  ) {
                                    $steps["updateUploadFiles"] = await $steps[
                                      "updateUploadFiles"
                                    ];
                                  }

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return event.stopPropagation();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["postgresUpdateMany"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                            opId: "cdc42b1f-f73e-4f27-8f76-8dc20c86304c",
                                            userArgs: {
                                              conditions: [
                                                $ctx.SupabaseUser.user.id
                                              ],
                                              variables: [null]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["postgresUpdateMany"] != null &&
                                    typeof $steps["postgresUpdateMany"] ===
                                      "object" &&
                                    typeof $steps["postgresUpdateMany"].then ===
                                      "function"
                                  ) {
                                    $steps["postgresUpdateMany"] = await $steps[
                                      "postgresUpdateMany"
                                    ];
                                  }
                                }}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"content5"}
                                data-plasmic-override={overrides.content5}
                                className={classNames(
                                  projectcss.all,
                                  sty.content5
                                )}
                              >
                                <Stack__
                                  as={PlasmicImg__}
                                  hasGap={true}
                                  alt={""}
                                  className={classNames(sty.img___9WbG6)}
                                  displayHeight={"39px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"39px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                    fullWidth: 39,
                                    fullHeight: 39,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__c0I3
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.getUser.data[0].cv_file;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Importer ou d\u00e9poser un fichier";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $queries.getUser.data[0].cv_file === null;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"fileUploader3"}
                              data-plasmic-override={overrides.fileUploader3}
                              className={classNames(
                                projectcss.all,
                                sty.fileUploader3
                              )}
                            >
                              <UploadWrapper
                                data-plasmic-name={"upload"}
                                data-plasmic-override={overrides.upload}
                                accept={"application/pdf"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload
                                )}
                                files={generateStateValueProp($state, [
                                  "upload",
                                  "files"
                                ])}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={true}
                              >
                                <div
                                  data-plasmic-name={"content"}
                                  data-plasmic-override={overrides.content}
                                  className={classNames(
                                    projectcss.all,
                                    sty.content
                                  )}
                                >
                                  <Stack__
                                    as={PlasmicImg__}
                                    hasGap={true}
                                    alt={""}
                                    className={classNames(sty.img__jgllg)}
                                    displayHeight={"39px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"39px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                      fullWidth: 39,
                                      fullHeight: 39,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xl82G
                                    )}
                                  >
                                    {"Importer ou d\u00e9poser un fichier"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fp4F
                                    )}
                                  >
                                    {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                  </div>
                                </div>
                              </UploadWrapper>
                            </div>
                          ) : null}
                        </div>
                        <div
                          data-plasmic-name={"frame15"}
                          data-plasmic-override={overrides.frame15}
                          className={classNames(projectcss.all, sty.frame15)}
                        >
                          <div
                            data-plasmic-name={"email5"}
                            data-plasmic-override={overrides.email5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.email5
                            )}
                          >
                            {"Lettre de motivation"}
                          </div>
                          {(() => {
                            try {
                              return (
                                $queries.getUser.data[0].cover_letter_file !==
                                null
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"cvUpload2"}
                              data-plasmic-override={overrides.cvUpload2}
                              className={classNames(
                                projectcss.all,
                                sty.cvUpload2
                              )}
                            >
                              <PhTrashIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yisnu
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateUpload3Files"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["upload3", "files"]
                                          },
                                          operation: 0
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateUpload3Files"] != null &&
                                    typeof $steps["updateUpload3Files"] ===
                                      "object" &&
                                    typeof $steps["updateUpload3Files"].then ===
                                      "function"
                                  ) {
                                    $steps["updateUpload3Files"] = await $steps[
                                      "updateUpload3Files"
                                    ];
                                  }

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return event.stopPropagation();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["postgresUpdateMany"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                            opId: "4f38c287-22eb-4fba-9a3c-811fbab26f49",
                                            userArgs: {
                                              conditions: [
                                                $ctx.SupabaseUser.user.id
                                              ],
                                              variables: [null]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["postgresUpdateMany"] != null &&
                                    typeof $steps["postgresUpdateMany"] ===
                                      "object" &&
                                    typeof $steps["postgresUpdateMany"].then ===
                                      "function"
                                  ) {
                                    $steps["postgresUpdateMany"] = await $steps[
                                      "postgresUpdateMany"
                                    ];
                                  }
                                }}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"content6"}
                                data-plasmic-override={overrides.content6}
                                className={classNames(
                                  projectcss.all,
                                  sty.content6
                                )}
                              >
                                <Stack__
                                  as={PlasmicImg__}
                                  hasGap={true}
                                  alt={""}
                                  className={classNames(sty.img__fKfk2)}
                                  displayHeight={"39px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"39px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                    fullWidth: 39,
                                    fullHeight: 39,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kRxW
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.getUser.data[0]
                                          .cover_letter_file;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Importer ou d\u00e9poser un fichier";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $queries.getUser.data[0].cover_letter_file ===
                                null
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"fileUploader4"}
                              data-plasmic-override={overrides.fileUploader4}
                              className={classNames(
                                projectcss.all,
                                sty.fileUploader4
                              )}
                            >
                              <UploadWrapper
                                data-plasmic-name={"upload3"}
                                data-plasmic-override={overrides.upload3}
                                accept={"application/pdf"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload3
                                )}
                                files={generateStateValueProp($state, [
                                  "upload3",
                                  "files"
                                ])}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload3",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qwu7S
                                  )}
                                >
                                  <Stack__
                                    as={PlasmicImg__}
                                    hasGap={true}
                                    alt={""}
                                    className={classNames(sty.img__vfPdF)}
                                    displayHeight={"39px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"39px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                      fullWidth: 39,
                                      fullHeight: 39,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__maz01
                                    )}
                                  >
                                    {"Importer ou d\u00e9poser un fichier"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__nMeBb
                                    )}
                                  >
                                    {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                  </div>
                                </div>
                              </UploadWrapper>
                            </div>
                          ) : null}
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame92"}
                        data-plasmic-override={overrides.frame92}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame92)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame93"}
                          data-plasmic-override={overrides.frame93}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame93)}
                        >
                          <div
                            data-plasmic-name={"email3"}
                            data-plasmic-override={overrides.email3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.email3
                            )}
                          >
                            {"CV"}
                          </div>
                          <FileUploader
                            data-plasmic-name={"fileUploader"}
                            data-plasmic-override={overrides.fileUploader}
                            accept={"*/*"}
                            className={classNames(
                              "__wab_instance",
                              sty.fileUploader
                            )}
                            maxSize={5242880}
                            state={"complete"}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"frame94"}
                          data-plasmic-override={overrides.frame94}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame94)}
                        >
                          <div
                            data-plasmic-name={"email2"}
                            data-plasmic-override={overrides.email2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.email2
                            )}
                          >
                            {"Lettre de motivation"}
                          </div>
                          <FileUploader
                            data-plasmic-name={"fileUploader2"}
                            data-plasmic-override={overrides.fileUploader2}
                            accept={"*/*"}
                            className={classNames(
                              "__wab_instance",
                              sty.fileUploader2
                            )}
                            maxSize={7}
                            state={"complete"}
                          />
                        </Stack__>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__bmxQ7
                        )}
                        label={"Linkedin"}
                        name={"linkedin_url"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput6"}
                          data-plasmic-override={overrides.textInput6}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput6
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.getCurrentUserById.data[0]
                                .linkedin_url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput6",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"https://"}
                        />
                      </FormItemWrapper>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__gaEs
                        )}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lFhqa
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9SlXh
                            )}
                          >
                            {"enregistrer et postuler"}
                          </div>
                        }
                        submitsForm={true}
                      />
                    </FormWrapper>
                  );
                })()}
                <div
                  data-plasmic-name={"notLoggued"}
                  data-plasmic-override={overrides.notLoggued}
                  className={classNames(projectcss.all, sty.notLoggued)}
                >
                  <Login
                    data-plasmic-name={"loginForm2"}
                    data-plasmic-override={overrides.loginForm2}
                    buttonStyle={"primary"}
                    className={classNames("__wab_instance", sty.loginForm2)}
                    createAccountText={"Créer un compte"}
                    email={generateStateValueProp($state, [
                      "loginForm2",
                      "email"
                    ])}
                    emailLabel={"Email"}
                    forgotPasswordPosition={"left"}
                    forgotPasswordText={"Mot de passe oublié ?"}
                    inputStyle={"simple"}
                    onEmailChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "loginForm2",
                        "email"
                      ]).apply(null, eventArgs);
                    }}
                    onPasswordChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "loginForm2",
                        "password"
                      ]).apply(null, eventArgs);
                    }}
                    onSubmit={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $state.loginForm2.email;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return $state.loginForm2.password;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "SupabaseUserGlobalContext.login"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    padding={"48px"}
                    password={generateStateValueProp($state, [
                      "loginForm2",
                      "password"
                    ])}
                    passwordLabel={"Mot de passe"}
                    placeholderEmail={"Entrez votre email"}
                    placeholderPassword={"Entrez votre mot de passe"}
                    showBottomSignupLink={true}
                    showPasswordToggle={true}
                    showSocialOAuth={false}
                    signUpLinkText={"Pas encore de compte ? INSCRIPTION"}
                    submitButtonText={"Connexion"}
                    title={"Connexion"}
                    titleHeading={"h1"}
                    wrapperStyle={"card"}
                  />
                </div>
              </div>
            }
            footer={null}
            heading={
              <React.Fragment>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : (() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dQyt2)}
                    displayHeight={"17px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"17px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModal2IsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["signUpApplication", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModal2IsOpen"] != null &&
                        typeof $steps["updateModal2IsOpen"] === "object" &&
                        typeof $steps["updateModal2IsOpen"].then === "function"
                      ) {
                        $steps["updateModal2IsOpen"] = await $steps[
                          "updateModal2IsOpen"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/jam_production_🚀/images/close3.svg",
                      fullWidth: 17,
                      fullHeight: 17,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__osnHc
                  )}
                >
                  {"Enter some text"}
                </div>
              </React.Fragment>
            }
            isOpen={generateStateValueProp($state, [
              "signUpApplication",
              "isOpen"
            ])}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "signUpApplication",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <JamButton
                data-plasmic-name={"button6"}
                data-plasmic-override={overrides.button6}
                className={classNames("__wab_instance", sty.button6)}
                icon={"none"}
              />
            }
          />

          <Modal
            data-plasmic-name={"verifyUserAuth"}
            data-plasmic-override={overrides.verifyUserAuth}
            className={classNames("__wab_instance", sty.verifyUserAuth)}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0N4QT)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oj5Wl
                  )}
                >
                  {
                    "Veuillez vous connecter pour pouvoir postuler \u00e0 cette offre."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__vLswu)}
                  end={
                    <GroupIcon
                      className={classNames(projectcss.all, sty.svg__scp8E)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wZ8F1
                      )}
                    >
                      {"se connecter"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToConnexion"] = true
                      ? (() => {
                          const actionArgs = { destination: `/login` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToConnexion"] != null &&
                      typeof $steps["goToConnexion"] === "object" &&
                      typeof $steps["goToConnexion"].then === "function"
                    ) {
                      $steps["goToConnexion"] = await $steps["goToConnexion"];
                    }
                  }}
                />
              </Stack__>
            }
            footer={null}
            heading={
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__lGrux
                )}
              >
                {"Connexion requise"}
              </h3>
            }
            isOpen={generateStateValueProp($state, [
              "verifyUserAuth",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "verifyUserAuth",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
          />

          <Modal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            closeOnBackdropClick={false}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ksAtE)}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.formFilter2),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["formFilter2", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);

                      (async (changedValues, allValues) => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if (!$state.formFilter.value) {
                                      $state.formFilter.value = {};
                                    }
                                    return Object.keys(
                                      $state.formFilter.value
                                    ).forEach(key => {
                                      if (
                                        $state.formFilter.value[key] &&
                                        $state.formFilter.value[key].length ===
                                          0
                                      ) {
                                        delete $state.formFilter.value[key];
                                      }
                                    });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    },
                    formItems: [],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["formFilter2", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["formFilter2"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "formFilter2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "formFilter2.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"formFilter2"}
                      data-plasmic-override={overrides.formFilter2}
                      {...child$Props}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"wrapContent2"}
                        data-plasmic-override={overrides.wrapContent2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.wrapContent2)}
                      >
                        <div
                          data-plasmic-name={"searchInput2"}
                          data-plasmic-override={overrides.searchInput2}
                          className={classNames(
                            projectcss.all,
                            sty.searchInput2
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: true,
                              className: classNames(
                                "__wab_instance",
                                sty.input5
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input5", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);

                                (async event => {
                                  const $steps = {};

                                  $steps["updateKeyWords"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["keyWords"]
                                          },
                                          operation: 0,
                                          value: $state.input5.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateKeyWords"] != null &&
                                    typeof $steps["updateKeyWords"] ===
                                      "object" &&
                                    typeof $steps["updateKeyWords"].then ===
                                      "function"
                                  ) {
                                    $steps["updateKeyWords"] = await $steps[
                                      "updateKeyWords"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              },
                              placeholder: "Mot-cl\u00e9, job, entreprise",
                              prefix: (
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__mgLeE)}
                                  displayHeight={"20px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"none"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"20px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/image10.svg",
                                    fullWidth: 21,
                                    fullHeight: 20,
                                    aspectRatio: 1.05
                                  }}
                                />
                              ),

                              size: "small",
                              value: generateStateValueProp($state, [
                                "input5",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input5.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input5"}
                                data-plasmic-override={overrides.input5}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                        <div
                          data-plasmic-name={"locationInput2"}
                          data-plasmic-override={overrides.locationInput2}
                          className={classNames(
                            projectcss.all,
                            sty.locationInput2
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: true,
                              className: classNames(
                                "__wab_instance",
                                sty.input6
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input6", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);

                                (async event => {
                                  const $steps = {};

                                  $steps["updateSearchLocation"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["searchLocation"]
                                          },
                                          operation: 0,
                                          value: $state.input6.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateSearchLocation"] != null &&
                                    typeof $steps["updateSearchLocation"] ===
                                      "object" &&
                                    typeof $steps["updateSearchLocation"]
                                      .then === "function"
                                  ) {
                                    $steps["updateSearchLocation"] =
                                      await $steps["updateSearchLocation"];
                                  }
                                }).apply(null, eventArgs);
                              },
                              placeholder: "Lacalisation",
                              prefix: (
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__rTsCw)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/phMapPinPng.png",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: undefined
                                  }}
                                />
                              ),

                              size: "small",
                              value: generateStateValueProp($state, [
                                "input6",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input6.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input6"}
                                data-plasmic-override={overrides.input6}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__jKtcu
                          )}
                          label={"Name"}
                          name={"sector_activity"}
                          noLabel={true}
                        >
                          <AntdSelect
                            data-plasmic-name={"select15"}
                            data-plasmic-override={overrides.select15}
                            allowClear={true}
                            autoFocus={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select15
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            dropdownMatchSelectWidth={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? false
                                : true
                            }
                            mode={"single"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select15",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_CROrOsyTlJ_a"]]: hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                            })}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(
                                    item => item.type === "sector_activity"
                                  )
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xqCqx
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__xjqRn)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"14px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/image2.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cxyqv
                                  )}
                                >
                                  {"Secteur"}
                                </div>
                              </Stack__>
                            }
                            popupScopeClassName={sty["select15__popup"]}
                            size={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "large"
                                : "large"
                            }
                            useChildren={false}
                            value={generateStateValueProp($state, [
                              "select15",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__vfzBe
                          )}
                          label={"Name"}
                          name={"availability_status"}
                          noLabel={true}
                          preserve={false}
                        >
                          <AntdSelect
                            data-plasmic-name={"select16"}
                            data-plasmic-override={overrides.select16}
                            allowClear={true}
                            className={classNames(
                              "__wab_instance",
                              sty.select16
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            mode={"multiple"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select16",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_WYebg1Ow8Eoq"]]: hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                            })}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(
                                    item => item.type === "availability_status"
                                  )
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__aacQt
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img___6Kxuz)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"14px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/image3.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__oAgZo
                                  )}
                                >
                                  {"Disponibilit\u00e9"}
                                </div>
                              </Stack__>
                            }
                            popupScopeClassName={sty["select16__popup"]}
                            size={"large"}
                            value={generateStateValueProp($state, [
                              "select16",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___8JaDx
                          )}
                          hidden={false}
                          label={"Name"}
                          name={"contract_type"}
                          noLabel={true}
                          preserve={false}
                          shouldUpdate={false}
                        >
                          <AntdSelect
                            data-plasmic-name={"select17"}
                            data-plasmic-override={overrides.select17}
                            allowClear={true}
                            className={classNames(
                              "__wab_instance",
                              sty.select17
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            dropdownMatchSelectWidth={false}
                            mode={"multiple"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select17",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_YDM2KEme_2xX"]]: true
                            })}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "contract_type")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ug2Ho
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__opSi)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"14px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/image7.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hbxu7
                                  )}
                                >
                                  {"Type de contrat"}
                                </div>
                              </Stack__>
                            }
                            popupScopeClassName={sty["select17__popup"]}
                            size={"large"}
                            suffixIcon={null}
                            value={generateStateValueProp($state, [
                              "select17",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__mcSCf
                          )}
                          label={"Name"}
                          name={"working_time"}
                          noLabel={true}
                        >
                          <AntdSelect
                            data-plasmic-name={"select18"}
                            data-plasmic-override={overrides.select18}
                            allowClear={true}
                            className={classNames(
                              "__wab_instance",
                              sty.select18
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            mode={"multiple"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select18",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_-AFl0xOWTp7r"]]: hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                            })}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "working_time")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ykesG
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__dB2Ap)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"14px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/image3.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iHmmp
                                  )}
                                >
                                  {"Temps de travail"}
                                </div>
                              </Stack__>
                            }
                            popupScopeClassName={sty["select18__popup"]}
                            size={"large"}
                            value={generateStateValueProp($state, [
                              "select18",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___6JuE
                          )}
                          label={"Name"}
                          name={"work_mode"}
                          noLabel={true}
                        >
                          <AntdSelect
                            data-plasmic-name={"select19"}
                            data-plasmic-override={overrides.select19}
                            allowClear={true}
                            autoFocus={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select19
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            mode={"multiple"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select19",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_8FoOPz89dknX"]]: hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                            })}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "work_mode")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ziZzi
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__ftejM)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"14px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/image6.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___5GClr
                                  )}
                                >
                                  {"Mode de travail"}
                                </div>
                              </Stack__>
                            }
                            popupScopeClassName={sty["select19__popup"]}
                            showSearch={false}
                            size={"large"}
                            value={generateStateValueProp($state, [
                              "select19",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__vc4Qu
                          )}
                          label={"Name"}
                          name={"salary"}
                          noLabel={true}
                        >
                          <AntdSelect
                            data-plasmic-name={"select20"}
                            data-plasmic-override={overrides.select20}
                            allowClear={true}
                            autoFocus={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select20
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            mode={"multiple"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select20",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_-rriotpc1IlZ"]]: hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                            })}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "salary")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wjWt8
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__geNty)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"14px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/image5.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2ViYf
                                  )}
                                >
                                  {"Salaire"}
                                </div>
                              </Stack__>
                            }
                            popupScopeClassName={sty["select20__popup"]}
                            size={"large"}
                            useChildren={false}
                            value={generateStateValueProp($state, [
                              "select20",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__rUpCz
                          )}
                          label={"Name"}
                          name={"company_size"}
                          noLabel={true}
                        >
                          <AntdSelect
                            data-plasmic-name={"select21"}
                            data-plasmic-override={overrides.select21}
                            allowClear={true}
                            autoFocus={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select21
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            mode={"multiple"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select21",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            optionClassName={classNames({
                              [sty["pcls_1OTZYyfBb5WN"]]: hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                            })}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "company_size")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___1Bb3H
                                )}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__eSv1)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"14px"}
                                  loading={"lazy"}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/image4.svg",
                                    fullWidth: 20,
                                    fullHeight: 20,
                                    aspectRatio: 1
                                  }}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cVeGy
                                  )}
                                >
                                  {"Taille entreprise"}
                                </div>
                              </Stack__>
                            }
                            popupScopeClassName={sty["select21__popup"]}
                            size={"large"}
                            useChildren={false}
                            value={generateStateValueProp($state, [
                              "select21",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : (() => {
                                try {
                                  return Object.keys($state.formFilter2?.value)
                                    .length === 0
                                    ? false
                                    : true;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__gtMgV
                            )}
                            color={"neutral"}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j9P5S
                                )}
                              >
                                {"tout effacer"}
                              </div>
                            }
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return ($state.formFilter = {});
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            resetsForm={(() => {
                              try {
                                return $state.formFilter2.value == undefined
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()}
                          />
                        ) : null}
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"buttonLastMin"}
                          data-plasmic-override={overrides.buttonLastMin}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.buttonLastMin
                          )}
                        >
                          <PhClockCountdownFillIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tsYgu
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"text5"}
                            data-plasmic-override={overrides.text5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text5
                            )}
                          >
                            {"LAST MINUTE"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={PlasmicLink__}
                          data-plasmic-name={"textLinkBase"}
                          data-plasmic-override={overrides.textLinkBase}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.textLinkBase
                          )}
                          component={Link}
                          href={(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          platform={"nextjs"}
                        >
                          <IconPhBellFillIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pYpGh
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"text6"}
                            data-plasmic-override={overrides.text6}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text6
                            )}
                          >
                            {"Cr\u00e9er une alerte avec ces crit\u00e8res"}
                          </div>
                        </Stack__>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__kq5Ow
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4YEla
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9Kvv6
                              )}
                            >
                              {"Rechercher"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateFormFilter2Submited"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["formFilter2Submited"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFormFilter2Submited"] != null &&
                              typeof $steps["updateFormFilter2Submited"] ===
                                "object" &&
                              typeof $steps["updateFormFilter2Submited"]
                                .then === "function"
                            ) {
                              $steps["updateFormFilter2Submited"] =
                                await $steps["updateFormFilter2Submited"];
                            }

                            $steps["updateModalIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modal", "isOpen"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalIsOpen"] != null &&
                              typeof $steps["updateModalIsOpen"] === "object" &&
                              typeof $steps["updateModalIsOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalIsOpen"] = await $steps[
                                "updateModalIsOpen"
                              ];
                            }
                          }}
                          submitsForm={false}
                        />
                      </Stack__>
                    </FormWrapper>
                  );
                })()}
              </Stack__>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__hq1Rd)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wThxq
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
            }
            heading={
              <div className={classNames(projectcss.all, sty.freeBox__piwi3)}>
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__aM3E9
                  )}
                >
                  {"Plus de crit\u00e8res"}
                </h3>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___99Yk6)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalIsOpen"] != null &&
                      typeof $steps["updateModalIsOpen"] === "object" &&
                      typeof $steps["updateModalIsOpen"].then === "function"
                    ) {
                      $steps["updateModalIsOpen"] = await $steps[
                        "updateModalIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close2.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              </div>
            }
            isOpen={generateStateValueProp($state, ["modal", "isOpen"])}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            trigger={
              <JamButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                icon={"none"}
              />
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rechercheJob: [
    "rechercheJob",
    "header",
    "jamLogo",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "main",
    "bgImage",
    "section1",
    "title",
    "badgeGroup",
    "message",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2",
    "jobSearchSection",
    "filters",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "select11",
    "button8",
    "clearBtn",
    "resetFormBtn",
    "mapJobs",
    "postes",
    "button4",
    "button3",
    "button7",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "buttonLastMin2",
    "text7",
    "mapJobs2",
    "postes2",
    "button9",
    "button10",
    "button11",
    "jobListContainer2",
    "jobsOnScroll2",
    "likeButtons2",
    "like3",
    "dislike2",
    "section2",
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5",
    "section",
    "featureText4",
    "featuredIcon4",
    "textAndSupportingText4",
    "text",
    "supportingText6",
    "featureText5",
    "featuredIcon5",
    "textAndSupportingText5",
    "text2",
    "supportingText7",
    "featureText6",
    "featuredIcon6",
    "textAndSupportingText6",
    "text3",
    "supportingText8",
    "footer",
    "container",
    "column",
    "frame6",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "socials",
    "socialIcon",
    "socialIcon2",
    "footerLinksContainer",
    "buttonBase",
    "text4",
    "footerLinks2",
    "container2",
    "divider",
    "content2",
    "footerText",
    "jobDetails",
    "button5",
    "jobListing",
    "jobDetail",
    "frame38",
    "jobName",
    "frame53",
    "like4",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription",
    "signUpApplication",
    "button6",
    "application",
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textArea",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6",
    "notLoggued",
    "loginForm2",
    "verifyUserAuth",
    "modal",
    "button",
    "formFilter2",
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6"
  ],
  header: ["header", "jamLogo", "frame2", "frame3", "frame4", "frame5"],
  jamLogo: ["jamLogo", "frame2", "frame3", "frame4", "frame5"],
  frame2: ["frame2", "frame3", "frame4", "frame5"],
  frame3: ["frame3"],
  frame4: ["frame4"],
  frame5: ["frame5"],
  main: [
    "main",
    "bgImage",
    "section1",
    "title",
    "badgeGroup",
    "message",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2",
    "jobSearchSection",
    "filters",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "select11",
    "button8",
    "clearBtn",
    "resetFormBtn",
    "mapJobs",
    "postes",
    "button4",
    "button3",
    "button7",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "buttonLastMin2",
    "text7",
    "mapJobs2",
    "postes2",
    "button9",
    "button10",
    "button11",
    "jobListContainer2",
    "jobsOnScroll2",
    "likeButtons2",
    "like3",
    "dislike2",
    "section2",
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5",
    "section",
    "featureText4",
    "featuredIcon4",
    "textAndSupportingText4",
    "text",
    "supportingText6",
    "featureText5",
    "featuredIcon5",
    "textAndSupportingText5",
    "text2",
    "supportingText7",
    "featureText6",
    "featuredIcon6",
    "textAndSupportingText6",
    "text3",
    "supportingText8"
  ],
  bgImage: ["bgImage"],
  section1: [
    "section1",
    "title",
    "badgeGroup",
    "message",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2",
    "jobSearchSection",
    "filters",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "select11",
    "button8",
    "clearBtn",
    "resetFormBtn",
    "mapJobs",
    "postes",
    "button4",
    "button3",
    "button7",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "buttonLastMin2",
    "text7",
    "mapJobs2",
    "postes2",
    "button9",
    "button10",
    "button11",
    "jobListContainer2",
    "jobsOnScroll2",
    "likeButtons2",
    "like3",
    "dislike2"
  ],
  title: [
    "title",
    "badgeGroup",
    "message",
    "trouvezUnJobNaJamaisEteAussiSimple",
    "trouvezUnJobNaJamaisEteAussiSimple2"
  ],
  badgeGroup: ["badgeGroup", "message"],
  message: ["message"],
  trouvezUnJobNaJamaisEteAussiSimple: ["trouvezUnJobNaJamaisEteAussiSimple"],
  trouvezUnJobNaJamaisEteAussiSimple2: ["trouvezUnJobNaJamaisEteAussiSimple2"],
  jobSearchSection: [
    "jobSearchSection",
    "filters",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "select11",
    "button8",
    "clearBtn",
    "resetFormBtn",
    "mapJobs",
    "postes",
    "button4",
    "button3",
    "button7",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "buttonLastMin2",
    "text7",
    "mapJobs2",
    "postes2",
    "button9",
    "button10",
    "button11",
    "jobListContainer2",
    "jobsOnScroll2",
    "likeButtons2",
    "like3",
    "dislike2"
  ],
  filters: [
    "filters",
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "select11",
    "button8",
    "clearBtn",
    "resetFormBtn"
  ],
  formFilter: [
    "formFilter",
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "select11",
    "button8",
    "clearBtn",
    "resetFormBtn"
  ],
  wrapContent: [
    "wrapContent",
    "input3",
    "input4",
    "select13",
    "select9",
    "select8",
    "select10",
    "select14",
    "select12",
    "select11",
    "button8",
    "clearBtn",
    "resetFormBtn"
  ],
  input3: ["input3"],
  input4: ["input4"],
  select13: ["select13"],
  select9: ["select9"],
  select8: ["select8"],
  select10: ["select10"],
  select14: ["select14"],
  select12: ["select12"],
  select11: ["select11"],
  button8: ["button8"],
  clearBtn: ["clearBtn"],
  resetFormBtn: ["resetFormBtn"],
  mapJobs: [
    "mapJobs",
    "postes",
    "button4",
    "button3",
    "button7",
    "featuredIcon7",
    "featuredIcon8",
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20",
    "buttonLastMin2",
    "text7"
  ],
  postes: ["postes"],
  button4: ["button4", "button3", "button7", "featuredIcon7", "featuredIcon8"],
  button3: ["button3"],
  button7: ["button7"],
  featuredIcon7: ["featuredIcon7"],
  featuredIcon8: ["featuredIcon8"],
  jobListContainer: [
    "jobListContainer",
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20"
  ],
  jobsOnScroll: [
    "jobsOnScroll",
    "likeButtons",
    "like2",
    "dislike",
    "jobCard20"
  ],
  likeButtons: ["likeButtons", "like2", "dislike"],
  like2: ["like2"],
  dislike: ["dislike"],
  jobCard20: ["jobCard20"],
  buttonLastMin2: ["buttonLastMin2", "text7"],
  text7: ["text7"],
  mapJobs2: [
    "mapJobs2",
    "postes2",
    "button9",
    "button10",
    "button11",
    "jobListContainer2",
    "jobsOnScroll2",
    "likeButtons2",
    "like3",
    "dislike2"
  ],
  postes2: ["postes2"],
  button9: ["button9", "button10", "button11"],
  button10: ["button10"],
  button11: ["button11"],
  jobListContainer2: [
    "jobListContainer2",
    "jobsOnScroll2",
    "likeButtons2",
    "like3",
    "dislike2"
  ],
  jobsOnScroll2: ["jobsOnScroll2", "likeButtons2", "like3", "dislike2"],
  likeButtons2: ["likeButtons2", "like3", "dislike2"],
  like3: ["like3"],
  dislike2: ["dislike2"],
  section2: [
    "section2",
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5",
    "section",
    "featureText4",
    "featuredIcon4",
    "textAndSupportingText4",
    "text",
    "supportingText6",
    "featureText5",
    "featuredIcon5",
    "textAndSupportingText5",
    "text2",
    "supportingText7",
    "featureText6",
    "featuredIcon6",
    "textAndSupportingText6",
    "text3",
    "supportingText8"
  ],
  headingAndSupportingText2: [
    "headingAndSupportingText2",
    "badgeGroup3",
    "content8",
    "message3",
    "heading2",
    "supportingText5"
  ],
  badgeGroup3: ["badgeGroup3", "content8", "message3"],
  content8: ["content8", "message3"],
  message3: ["message3"],
  heading2: ["heading2"],
  supportingText5: ["supportingText5"],
  section: [
    "section",
    "featureText4",
    "featuredIcon4",
    "textAndSupportingText4",
    "text",
    "supportingText6",
    "featureText5",
    "featuredIcon5",
    "textAndSupportingText5",
    "text2",
    "supportingText7",
    "featureText6",
    "featuredIcon6",
    "textAndSupportingText6",
    "text3",
    "supportingText8"
  ],
  featureText4: [
    "featureText4",
    "featuredIcon4",
    "textAndSupportingText4",
    "text",
    "supportingText6"
  ],
  featuredIcon4: ["featuredIcon4"],
  textAndSupportingText4: ["textAndSupportingText4", "text", "supportingText6"],
  text: ["text"],
  supportingText6: ["supportingText6"],
  featureText5: [
    "featureText5",
    "featuredIcon5",
    "textAndSupportingText5",
    "text2",
    "supportingText7"
  ],
  featuredIcon5: ["featuredIcon5"],
  textAndSupportingText5: [
    "textAndSupportingText5",
    "text2",
    "supportingText7"
  ],
  text2: ["text2"],
  supportingText7: ["supportingText7"],
  featureText6: [
    "featureText6",
    "featuredIcon6",
    "textAndSupportingText6",
    "text3",
    "supportingText8"
  ],
  featuredIcon6: ["featuredIcon6"],
  textAndSupportingText6: [
    "textAndSupportingText6",
    "text3",
    "supportingText8"
  ],
  text3: ["text3"],
  supportingText8: ["supportingText8"],
  footer: [
    "footer",
    "container",
    "column",
    "frame6",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "socials",
    "socialIcon",
    "socialIcon2",
    "footerLinksContainer",
    "buttonBase",
    "text4",
    "footerLinks2",
    "container2",
    "divider",
    "content2",
    "footerText"
  ],
  container: [
    "container",
    "column",
    "frame6",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "socials",
    "socialIcon",
    "socialIcon2",
    "footerLinksContainer",
    "buttonBase",
    "text4",
    "footerLinks2"
  ],
  column: [
    "column",
    "frame6",
    "frame7",
    "frame9",
    "frame11",
    "frame12",
    "socials",
    "socialIcon",
    "socialIcon2"
  ],
  frame6: ["frame6", "frame7", "frame9", "frame11", "frame12"],
  frame7: ["frame7", "frame9", "frame11", "frame12"],
  frame9: ["frame9"],
  frame11: ["frame11"],
  frame12: ["frame12"],
  socials: ["socials", "socialIcon", "socialIcon2"],
  socialIcon: ["socialIcon"],
  socialIcon2: ["socialIcon2"],
  footerLinksContainer: [
    "footerLinksContainer",
    "buttonBase",
    "text4",
    "footerLinks2"
  ],
  buttonBase: ["buttonBase", "text4"],
  text4: ["text4"],
  footerLinks2: ["footerLinks2"],
  container2: ["container2", "divider", "content2", "footerText"],
  divider: ["divider"],
  content2: ["content2", "footerText"],
  footerText: ["footerText"],
  jobDetails: [
    "jobDetails",
    "button5",
    "jobListing",
    "jobDetail",
    "frame38",
    "jobName",
    "frame53",
    "like4",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription"
  ],
  button5: ["button5"],
  jobListing: [
    "jobListing",
    "jobDetail",
    "frame38",
    "jobName",
    "frame53",
    "like4",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4",
    "jobDescriptionContainer",
    "jobDescription",
    "benefits",
    "expectedProfileContainer",
    "expectedProfile",
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription"
  ],
  jobDetail: [
    "jobDetail",
    "frame38",
    "jobName",
    "frame53",
    "like4",
    "dislike3",
    "location",
    "publicationDate",
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4"
  ],
  frame38: ["frame38", "jobName", "frame53", "like4", "dislike3"],
  jobName: ["jobName"],
  frame53: ["frame53", "like4", "dislike3"],
  like4: ["like4"],
  dislike3: ["dislike3"],
  location: ["location"],
  publicationDate: ["publicationDate"],
  frame46: [
    "frame46",
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4"
  ],
  frame47: [
    "frame47",
    "frame48",
    "dkTrucksPark",
    "frame49",
    "dkTrucksPark2",
    "frame50",
    "dkTrucksPark3",
    "frame51",
    "dkTrucksPark4"
  ],
  frame48: ["frame48", "dkTrucksPark"],
  dkTrucksPark: ["dkTrucksPark"],
  frame49: ["frame49", "dkTrucksPark2"],
  dkTrucksPark2: ["dkTrucksPark2"],
  frame50: ["frame50", "dkTrucksPark3"],
  dkTrucksPark3: ["dkTrucksPark3"],
  frame51: ["frame51", "dkTrucksPark4"],
  dkTrucksPark4: ["dkTrucksPark4"],
  jobDescriptionContainer: [
    "jobDescriptionContainer",
    "jobDescription",
    "benefits"
  ],
  jobDescription: ["jobDescription"],
  benefits: ["benefits"],
  expectedProfileContainer: ["expectedProfileContainer", "expectedProfile"],
  expectedProfile: ["expectedProfile"],
  companyContainer: [
    "companyContainer",
    "logoContainer",
    "logo",
    "companyName",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation",
    "companyDescription"
  ],
  logoContainer: ["logoContainer", "logo"],
  logo: ["logo"],
  companyName: ["companyName"],
  companyDetail: [
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "dkTrucksPark6",
    "companyLocation"
  ],
  sectorActivity: ["sectorActivity", "dkTrucksPark5"],
  dkTrucksPark5: ["dkTrucksPark5"],
  companySize: ["companySize", "dkTrucksPark6"],
  dkTrucksPark6: ["dkTrucksPark6"],
  companyLocation: ["companyLocation"],
  companyDescription: ["companyDescription"],
  signUpApplication: [
    "signUpApplication",
    "button6",
    "application",
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textArea",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6",
    "notLoggued",
    "loginForm2"
  ],
  button6: ["button6"],
  application: [
    "application",
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85",
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textArea",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6",
    "notLoggued",
    "loginForm2"
  ],
  header2: [
    "header2",
    "frame67",
    "frame68",
    "frame69",
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10",
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85"
  ],
  frame67: ["frame67", "frame68", "frame69"],
  frame68: ["frame68", "frame69"],
  frame69: ["frame69"],
  frame74: [
    "frame74",
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10"
  ],
  frame75: [
    "frame75",
    "frame76",
    "dkTrucksPark7",
    "frame77",
    "dkTrucksPark8",
    "frame16",
    "dkTrucksPark9",
    "frame17",
    "dkTrucksPark10"
  ],
  frame76: ["frame76", "dkTrucksPark7"],
  dkTrucksPark7: ["dkTrucksPark7"],
  frame77: ["frame77", "dkTrucksPark8"],
  dkTrucksPark8: ["dkTrucksPark8"],
  frame16: ["frame16", "dkTrucksPark9"],
  dkTrucksPark9: ["dkTrucksPark9"],
  frame17: ["frame17", "dkTrucksPark10"],
  dkTrucksPark10: ["dkTrucksPark10"],
  frame18: [
    "frame18",
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84",
    "frame85"
  ],
  frame78: [
    "frame78",
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84"
  ],
  frame79: [
    "frame79",
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84"
  ],
  frame80: [
    "frame80",
    "frame81",
    "dkTrucksPark11",
    "frame82",
    "dkTrucksPark12",
    "frame83",
    "frame84"
  ],
  frame81: ["frame81", "dkTrucksPark11"],
  dkTrucksPark11: ["dkTrucksPark11"],
  frame82: ["frame82", "dkTrucksPark12"],
  dkTrucksPark12: ["dkTrucksPark12"],
  frame83: ["frame83", "frame84"],
  frame84: ["frame84"],
  frame85: ["frame85"],
  form: [
    "form",
    "upload2",
    "editIcon2",
    "frame19",
    "deleteIcon2",
    "frame20",
    "nomPrenom",
    "textInput1",
    "textInput2",
    "textInput4",
    "telephone",
    "phoneSelector",
    "textInput3",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "textInput5",
    "select2",
    "select4",
    "select5",
    "textArea",
    "select7",
    "select",
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3",
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2",
    "textInput6"
  ],
  upload2: ["upload2", "editIcon2", "frame19", "deleteIcon2", "frame20"],
  editIcon2: ["editIcon2", "frame19"],
  frame19: ["frame19"],
  deleteIcon2: ["deleteIcon2", "frame20"],
  frame20: ["frame20"],
  nomPrenom: ["nomPrenom", "textInput1", "textInput2"],
  textInput1: ["textInput1"],
  textInput2: ["textInput2"],
  textInput4: ["textInput4"],
  telephone: ["telephone", "phoneSelector", "textInput3"],
  phoneSelector: ["phoneSelector"],
  textInput3: ["textInput3"],
  rue: ["rue"],
  codePosteVille: ["codePosteVille", "codePostal", "ville"],
  codePostal: ["codePostal"],
  ville: ["ville"],
  textInput5: ["textInput5"],
  select2: ["select2"],
  select4: ["select4"],
  select5: ["select5"],
  textArea: ["textArea"],
  select7: ["select7"],
  select: ["select"],
  frame13: [
    "frame13",
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content",
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3"
  ],
  frame14: [
    "frame14",
    "email4",
    "cvUpload",
    "content5",
    "fileUploader3",
    "upload",
    "content"
  ],
  email4: ["email4"],
  cvUpload: ["cvUpload", "content5"],
  content5: ["content5"],
  fileUploader3: ["fileUploader3", "upload", "content"],
  upload: ["upload", "content"],
  content: ["content"],
  frame15: [
    "frame15",
    "email5",
    "cvUpload2",
    "content6",
    "fileUploader4",
    "upload3"
  ],
  email5: ["email5"],
  cvUpload2: ["cvUpload2", "content6"],
  content6: ["content6"],
  fileUploader4: ["fileUploader4", "upload3"],
  upload3: ["upload3"],
  frame92: [
    "frame92",
    "frame93",
    "email3",
    "fileUploader",
    "frame94",
    "email2",
    "fileUploader2"
  ],
  frame93: ["frame93", "email3", "fileUploader"],
  email3: ["email3"],
  fileUploader: ["fileUploader"],
  frame94: ["frame94", "email2", "fileUploader2"],
  email2: ["email2"],
  fileUploader2: ["fileUploader2"],
  textInput6: ["textInput6"],
  notLoggued: ["notLoggued", "loginForm2"],
  loginForm2: ["loginForm2"],
  verifyUserAuth: ["verifyUserAuth"],
  modal: [
    "modal",
    "button",
    "formFilter2",
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6"
  ],
  button: ["button"],
  formFilter2: [
    "formFilter2",
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6"
  ],
  wrapContent2: [
    "wrapContent2",
    "searchInput2",
    "input5",
    "locationInput2",
    "input6",
    "select15",
    "select16",
    "select17",
    "select18",
    "select19",
    "select20",
    "select21",
    "buttonLastMin",
    "text5",
    "textLinkBase",
    "text6"
  ],
  searchInput2: ["searchInput2", "input5"],
  input5: ["input5"],
  locationInput2: ["locationInput2", "input6"],
  input6: ["input6"],
  select15: ["select15"],
  select16: ["select16"],
  select17: ["select17"],
  select18: ["select18"],
  select19: ["select19"],
  select20: ["select20"],
  select21: ["select21"],
  buttonLastMin: ["buttonLastMin", "text5"],
  text5: ["text5"],
  textLinkBase: ["textLinkBase", "text6"],
  text6: ["text6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rechercheJob: "div";
  header: "header";
  jamLogo: "div";
  frame2: "div";
  frame3: "div";
  frame4: "div";
  frame5: "div";
  main: "main";
  bgImage: typeof PlasmicImg__;
  section1: "section";
  title: "div";
  badgeGroup: "div";
  message: "div";
  trouvezUnJobNaJamaisEteAussiSimple: "h1";
  trouvezUnJobNaJamaisEteAussiSimple2: "p";
  jobSearchSection: "div";
  filters: "div";
  formFilter: typeof FormWrapper;
  wrapContent: "div";
  input3: typeof AntdInput;
  input4: typeof AntdInput;
  select13: typeof AntdSelect;
  select9: typeof AntdSelect;
  select8: typeof AntdSelect;
  select10: typeof AntdSelect;
  select14: typeof AntdSelect;
  select12: typeof AntdSelect;
  select11: typeof AntdSelect;
  button8: typeof Button;
  clearBtn: typeof ClearBtn;
  resetFormBtn: "button";
  mapJobs: "div";
  postes: "div";
  button4: "div";
  button3: typeof JamButton;
  button7: typeof JamButton;
  featuredIcon7: "div";
  featuredIcon8: "div";
  jobListContainer: "div";
  jobsOnScroll: "div";
  likeButtons: "div";
  like2: "svg";
  dislike: "svg";
  jobCard20: typeof JobCard20;
  buttonLastMin2: "button";
  text7: "div";
  mapJobs2: "div";
  postes2: "div";
  button9: "div";
  button10: typeof JamButton;
  button11: typeof JamButton;
  jobListContainer2: "div";
  jobsOnScroll2: "div";
  likeButtons2: "div";
  like3: "svg";
  dislike2: "svg";
  section2: "section";
  headingAndSupportingText2: "header";
  badgeGroup3: "div";
  content8: "div";
  message3: "div";
  heading2: "h2";
  supportingText5: "p";
  section: "article";
  featureText4: "div";
  featuredIcon4: "div";
  textAndSupportingText4: "div";
  text: "div";
  supportingText6: "p";
  featureText5: "div";
  featuredIcon5: "div";
  textAndSupportingText5: "div";
  text2: "div";
  supportingText7: "p";
  featureText6: "div";
  featuredIcon6: "div";
  textAndSupportingText6: "div";
  text3: "div";
  supportingText8: "p";
  footer: "footer";
  container: "div";
  column: "div";
  frame6: "div";
  frame7: "div";
  frame9: "div";
  frame11: "div";
  frame12: "div";
  socials: "div";
  socialIcon: "div";
  socialIcon2: "div";
  footerLinksContainer: "div";
  buttonBase: "div";
  text4: "div";
  footerLinks2: "div";
  container2: "div";
  divider: "div";
  content2: "div";
  footerText: "div";
  jobDetails: typeof Modal;
  button5: typeof JamButton;
  jobListing: "div";
  jobDetail: "div";
  frame38: "div";
  jobName: "div";
  frame53: "div";
  like4: "svg";
  dislike3: "svg";
  location: "div";
  publicationDate: "div";
  frame46: "div";
  frame47: "div";
  frame48: "div";
  dkTrucksPark: "div";
  frame49: "div";
  dkTrucksPark2: "div";
  frame50: "div";
  dkTrucksPark3: "div";
  frame51: "div";
  dkTrucksPark4: "div";
  jobDescriptionContainer: "div";
  jobDescription: "div";
  benefits: "div";
  expectedProfileContainer: "div";
  expectedProfile: "div";
  companyContainer: "div";
  logoContainer: "div";
  logo: typeof PlasmicImg__;
  companyName: "div";
  companyDetail: "div";
  sectorActivity: "div";
  dkTrucksPark5: "div";
  companySize: "div";
  dkTrucksPark6: "div";
  companyLocation: "div";
  companyDescription: "div";
  signUpApplication: typeof Modal;
  button6: typeof JamButton;
  application: "div";
  header2: "div";
  frame67: "div";
  frame68: "div";
  frame69: "div";
  frame74: "div";
  frame75: "div";
  frame76: "div";
  dkTrucksPark7: "div";
  frame77: "div";
  dkTrucksPark8: "div";
  frame16: "div";
  dkTrucksPark9: "div";
  frame17: "div";
  dkTrucksPark10: "div";
  frame18: "div";
  frame78: "div";
  frame79: "div";
  frame80: "div";
  frame81: "div";
  dkTrucksPark11: "div";
  frame82: "div";
  dkTrucksPark12: "div";
  frame83: "div";
  frame84: "div";
  frame85: "div";
  form: typeof FormWrapper;
  upload2: typeof UploadWrapper;
  editIcon2: "div";
  frame19: "div";
  deleteIcon2: "div";
  frame20: "div";
  nomPrenom: "div";
  textInput1: typeof TextInput;
  textInput2: typeof TextInput;
  textInput4: typeof TextInput;
  telephone: "div";
  phoneSelector: typeof PhoneSelector;
  textInput3: typeof TextInput;
  rue: typeof TextInput;
  codePosteVille: "div";
  codePostal: typeof TextInput;
  ville: typeof TextInput;
  textInput5: typeof TextInput;
  select2: typeof Select;
  select4: typeof Select;
  select5: typeof AntdSelect;
  textArea: typeof AntdTextArea;
  select7: typeof AntdSelect;
  select: typeof Select;
  frame13: "div";
  frame14: "div";
  email4: "div";
  cvUpload: "div";
  content5: "div";
  fileUploader3: "div";
  upload: typeof UploadWrapper;
  content: "div";
  frame15: "div";
  email5: "div";
  cvUpload2: "div";
  content6: "div";
  fileUploader4: "div";
  upload3: typeof UploadWrapper;
  frame92: "div";
  frame93: "div";
  email3: "div";
  fileUploader: typeof FileUploader;
  frame94: "div";
  email2: "div";
  fileUploader2: typeof FileUploader;
  textInput6: typeof TextInput;
  notLoggued: "div";
  loginForm2: typeof Login;
  verifyUserAuth: typeof Modal;
  modal: typeof Modal;
  button: typeof JamButton;
  formFilter2: typeof FormWrapper;
  wrapContent2: "div";
  searchInput2: "div";
  input5: typeof AntdInput;
  locationInput2: "div";
  input6: typeof AntdInput;
  select15: typeof AntdSelect;
  select16: typeof AntdSelect;
  select17: typeof AntdSelect;
  select18: typeof AntdSelect;
  select19: typeof AntdSelect;
  select20: typeof AntdSelect;
  select21: typeof AntdSelect;
  buttonLastMin: "div";
  text5: "div";
  textLinkBase: "a";
  text6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccueil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccueil__VariantsArgs;
    args?: PlasmicAccueil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccueil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccueil__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccueil__ArgProps,
          internalVariantPropNames: PlasmicAccueil__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccueil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rechercheJob") {
    func.displayName = "PlasmicAccueil";
  } else {
    func.displayName = `PlasmicAccueil.${nodeName}`;
  }
  return func;
}

export const PlasmicAccueil = Object.assign(
  // Top-level PlasmicAccueil renders the root element
  makeNodeComponent("rechercheJob"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    jamLogo: makeNodeComponent("jamLogo"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    main: makeNodeComponent("main"),
    bgImage: makeNodeComponent("bgImage"),
    section1: makeNodeComponent("section1"),
    title: makeNodeComponent("title"),
    badgeGroup: makeNodeComponent("badgeGroup"),
    message: makeNodeComponent("message"),
    trouvezUnJobNaJamaisEteAussiSimple: makeNodeComponent(
      "trouvezUnJobNaJamaisEteAussiSimple"
    ),
    trouvezUnJobNaJamaisEteAussiSimple2: makeNodeComponent(
      "trouvezUnJobNaJamaisEteAussiSimple2"
    ),
    jobSearchSection: makeNodeComponent("jobSearchSection"),
    filters: makeNodeComponent("filters"),
    formFilter: makeNodeComponent("formFilter"),
    wrapContent: makeNodeComponent("wrapContent"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    select13: makeNodeComponent("select13"),
    select9: makeNodeComponent("select9"),
    select8: makeNodeComponent("select8"),
    select10: makeNodeComponent("select10"),
    select14: makeNodeComponent("select14"),
    select12: makeNodeComponent("select12"),
    select11: makeNodeComponent("select11"),
    button8: makeNodeComponent("button8"),
    clearBtn: makeNodeComponent("clearBtn"),
    resetFormBtn: makeNodeComponent("resetFormBtn"),
    mapJobs: makeNodeComponent("mapJobs"),
    postes: makeNodeComponent("postes"),
    button4: makeNodeComponent("button4"),
    button3: makeNodeComponent("button3"),
    button7: makeNodeComponent("button7"),
    featuredIcon7: makeNodeComponent("featuredIcon7"),
    featuredIcon8: makeNodeComponent("featuredIcon8"),
    jobListContainer: makeNodeComponent("jobListContainer"),
    jobsOnScroll: makeNodeComponent("jobsOnScroll"),
    likeButtons: makeNodeComponent("likeButtons"),
    like2: makeNodeComponent("like2"),
    dislike: makeNodeComponent("dislike"),
    jobCard20: makeNodeComponent("jobCard20"),
    buttonLastMin2: makeNodeComponent("buttonLastMin2"),
    text7: makeNodeComponent("text7"),
    mapJobs2: makeNodeComponent("mapJobs2"),
    postes2: makeNodeComponent("postes2"),
    button9: makeNodeComponent("button9"),
    button10: makeNodeComponent("button10"),
    button11: makeNodeComponent("button11"),
    jobListContainer2: makeNodeComponent("jobListContainer2"),
    jobsOnScroll2: makeNodeComponent("jobsOnScroll2"),
    likeButtons2: makeNodeComponent("likeButtons2"),
    like3: makeNodeComponent("like3"),
    dislike2: makeNodeComponent("dislike2"),
    section2: makeNodeComponent("section2"),
    headingAndSupportingText2: makeNodeComponent("headingAndSupportingText2"),
    badgeGroup3: makeNodeComponent("badgeGroup3"),
    content8: makeNodeComponent("content8"),
    message3: makeNodeComponent("message3"),
    heading2: makeNodeComponent("heading2"),
    supportingText5: makeNodeComponent("supportingText5"),
    section: makeNodeComponent("section"),
    featureText4: makeNodeComponent("featureText4"),
    featuredIcon4: makeNodeComponent("featuredIcon4"),
    textAndSupportingText4: makeNodeComponent("textAndSupportingText4"),
    text: makeNodeComponent("text"),
    supportingText6: makeNodeComponent("supportingText6"),
    featureText5: makeNodeComponent("featureText5"),
    featuredIcon5: makeNodeComponent("featuredIcon5"),
    textAndSupportingText5: makeNodeComponent("textAndSupportingText5"),
    text2: makeNodeComponent("text2"),
    supportingText7: makeNodeComponent("supportingText7"),
    featureText6: makeNodeComponent("featureText6"),
    featuredIcon6: makeNodeComponent("featuredIcon6"),
    textAndSupportingText6: makeNodeComponent("textAndSupportingText6"),
    text3: makeNodeComponent("text3"),
    supportingText8: makeNodeComponent("supportingText8"),
    footer: makeNodeComponent("footer"),
    container: makeNodeComponent("container"),
    column: makeNodeComponent("column"),
    frame6: makeNodeComponent("frame6"),
    frame7: makeNodeComponent("frame7"),
    frame9: makeNodeComponent("frame9"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    socials: makeNodeComponent("socials"),
    socialIcon: makeNodeComponent("socialIcon"),
    socialIcon2: makeNodeComponent("socialIcon2"),
    footerLinksContainer: makeNodeComponent("footerLinksContainer"),
    buttonBase: makeNodeComponent("buttonBase"),
    text4: makeNodeComponent("text4"),
    footerLinks2: makeNodeComponent("footerLinks2"),
    container2: makeNodeComponent("container2"),
    divider: makeNodeComponent("divider"),
    content2: makeNodeComponent("content2"),
    footerText: makeNodeComponent("footerText"),
    jobDetails: makeNodeComponent("jobDetails"),
    button5: makeNodeComponent("button5"),
    jobListing: makeNodeComponent("jobListing"),
    jobDetail: makeNodeComponent("jobDetail"),
    frame38: makeNodeComponent("frame38"),
    jobName: makeNodeComponent("jobName"),
    frame53: makeNodeComponent("frame53"),
    like4: makeNodeComponent("like4"),
    dislike3: makeNodeComponent("dislike3"),
    location: makeNodeComponent("location"),
    publicationDate: makeNodeComponent("publicationDate"),
    frame46: makeNodeComponent("frame46"),
    frame47: makeNodeComponent("frame47"),
    frame48: makeNodeComponent("frame48"),
    dkTrucksPark: makeNodeComponent("dkTrucksPark"),
    frame49: makeNodeComponent("frame49"),
    dkTrucksPark2: makeNodeComponent("dkTrucksPark2"),
    frame50: makeNodeComponent("frame50"),
    dkTrucksPark3: makeNodeComponent("dkTrucksPark3"),
    frame51: makeNodeComponent("frame51"),
    dkTrucksPark4: makeNodeComponent("dkTrucksPark4"),
    jobDescriptionContainer: makeNodeComponent("jobDescriptionContainer"),
    jobDescription: makeNodeComponent("jobDescription"),
    benefits: makeNodeComponent("benefits"),
    expectedProfileContainer: makeNodeComponent("expectedProfileContainer"),
    expectedProfile: makeNodeComponent("expectedProfile"),
    companyContainer: makeNodeComponent("companyContainer"),
    logoContainer: makeNodeComponent("logoContainer"),
    logo: makeNodeComponent("logo"),
    companyName: makeNodeComponent("companyName"),
    companyDetail: makeNodeComponent("companyDetail"),
    sectorActivity: makeNodeComponent("sectorActivity"),
    dkTrucksPark5: makeNodeComponent("dkTrucksPark5"),
    companySize: makeNodeComponent("companySize"),
    dkTrucksPark6: makeNodeComponent("dkTrucksPark6"),
    companyLocation: makeNodeComponent("companyLocation"),
    companyDescription: makeNodeComponent("companyDescription"),
    signUpApplication: makeNodeComponent("signUpApplication"),
    button6: makeNodeComponent("button6"),
    application: makeNodeComponent("application"),
    header2: makeNodeComponent("header2"),
    frame67: makeNodeComponent("frame67"),
    frame68: makeNodeComponent("frame68"),
    frame69: makeNodeComponent("frame69"),
    frame74: makeNodeComponent("frame74"),
    frame75: makeNodeComponent("frame75"),
    frame76: makeNodeComponent("frame76"),
    dkTrucksPark7: makeNodeComponent("dkTrucksPark7"),
    frame77: makeNodeComponent("frame77"),
    dkTrucksPark8: makeNodeComponent("dkTrucksPark8"),
    frame16: makeNodeComponent("frame16"),
    dkTrucksPark9: makeNodeComponent("dkTrucksPark9"),
    frame17: makeNodeComponent("frame17"),
    dkTrucksPark10: makeNodeComponent("dkTrucksPark10"),
    frame18: makeNodeComponent("frame18"),
    frame78: makeNodeComponent("frame78"),
    frame79: makeNodeComponent("frame79"),
    frame80: makeNodeComponent("frame80"),
    frame81: makeNodeComponent("frame81"),
    dkTrucksPark11: makeNodeComponent("dkTrucksPark11"),
    frame82: makeNodeComponent("frame82"),
    dkTrucksPark12: makeNodeComponent("dkTrucksPark12"),
    frame83: makeNodeComponent("frame83"),
    frame84: makeNodeComponent("frame84"),
    frame85: makeNodeComponent("frame85"),
    form: makeNodeComponent("form"),
    upload2: makeNodeComponent("upload2"),
    editIcon2: makeNodeComponent("editIcon2"),
    frame19: makeNodeComponent("frame19"),
    deleteIcon2: makeNodeComponent("deleteIcon2"),
    frame20: makeNodeComponent("frame20"),
    nomPrenom: makeNodeComponent("nomPrenom"),
    textInput1: makeNodeComponent("textInput1"),
    textInput2: makeNodeComponent("textInput2"),
    textInput4: makeNodeComponent("textInput4"),
    telephone: makeNodeComponent("telephone"),
    phoneSelector: makeNodeComponent("phoneSelector"),
    textInput3: makeNodeComponent("textInput3"),
    rue: makeNodeComponent("rue"),
    codePosteVille: makeNodeComponent("codePosteVille"),
    codePostal: makeNodeComponent("codePostal"),
    ville: makeNodeComponent("ville"),
    textInput5: makeNodeComponent("textInput5"),
    select2: makeNodeComponent("select2"),
    select4: makeNodeComponent("select4"),
    select5: makeNodeComponent("select5"),
    textArea: makeNodeComponent("textArea"),
    select7: makeNodeComponent("select7"),
    select: makeNodeComponent("select"),
    frame13: makeNodeComponent("frame13"),
    frame14: makeNodeComponent("frame14"),
    email4: makeNodeComponent("email4"),
    cvUpload: makeNodeComponent("cvUpload"),
    content5: makeNodeComponent("content5"),
    fileUploader3: makeNodeComponent("fileUploader3"),
    upload: makeNodeComponent("upload"),
    content: makeNodeComponent("content"),
    frame15: makeNodeComponent("frame15"),
    email5: makeNodeComponent("email5"),
    cvUpload2: makeNodeComponent("cvUpload2"),
    content6: makeNodeComponent("content6"),
    fileUploader4: makeNodeComponent("fileUploader4"),
    upload3: makeNodeComponent("upload3"),
    frame92: makeNodeComponent("frame92"),
    frame93: makeNodeComponent("frame93"),
    email3: makeNodeComponent("email3"),
    fileUploader: makeNodeComponent("fileUploader"),
    frame94: makeNodeComponent("frame94"),
    email2: makeNodeComponent("email2"),
    fileUploader2: makeNodeComponent("fileUploader2"),
    textInput6: makeNodeComponent("textInput6"),
    notLoggued: makeNodeComponent("notLoggued"),
    loginForm2: makeNodeComponent("loginForm2"),
    verifyUserAuth: makeNodeComponent("verifyUserAuth"),
    modal: makeNodeComponent("modal"),
    button: makeNodeComponent("button"),
    formFilter2: makeNodeComponent("formFilter2"),
    wrapContent2: makeNodeComponent("wrapContent2"),
    searchInput2: makeNodeComponent("searchInput2"),
    input5: makeNodeComponent("input5"),
    locationInput2: makeNodeComponent("locationInput2"),
    input6: makeNodeComponent("input6"),
    select15: makeNodeComponent("select15"),
    select16: makeNodeComponent("select16"),
    select17: makeNodeComponent("select17"),
    select18: makeNodeComponent("select18"),
    select19: makeNodeComponent("select19"),
    select20: makeNodeComponent("select20"),
    select21: makeNodeComponent("select21"),
    buttonLastMin: makeNodeComponent("buttonLastMin"),
    text5: makeNodeComponent("text5"),
    textLinkBase: makeNodeComponent("textLinkBase"),
    text6: makeNodeComponent("text6"),

    // Metadata about props expected for PlasmicAccueil
    internalVariantProps: PlasmicAccueil__VariantProps,
    internalArgProps: PlasmicAccueil__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccueil;
/* prettier-ignore-end */
