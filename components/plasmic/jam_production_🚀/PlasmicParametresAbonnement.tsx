/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: CdOLil72lyc4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { PageLoader } from "../../others/PageLoader/PageLoader"; // plasmic-import: FHDrnDhA4DZe/codeComponent
import Sidebar2 from "../../Sidebar2"; // plasmic-import: RXqL3kdDrXwo/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import ProductCard from "../../ProductCard"; // plasmic-import: XNMQC2V0FBMZ/component
import { StripeSubscriptionButton } from "../../forms/StripeSubscriptionButton/StripeSubscriptionButton"; // plasmic-import: fjarxLhWe2Gl/codeComponent
import { InputComboSelect } from "../../forms/InputComboSelect/InputComboSelect"; // plasmic-import: KwvhXarw-EVS/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { StripeCheckoutButton } from "../../forms/StripeCheckoutButton/StripeCheckoutButton"; // plasmic-import: HaGLE8b9jujz/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicParametresAbonnement.module.css"; // plasmic-import: CdOLil72lyc4/css

import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: pk0tqTEbFRlt/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import ReshotIconAlert7T6Wum8VleSvgIcon from "./icons/PlasmicIcon__ReshotIconAlert7T6Wum8VleSvg"; // plasmic-import: I2J7nwYmWkrC/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: KY0MLj91ByQL/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: a3u1joTTVUfZ/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import IconPhBriefcaseIcon from "./icons/PlasmicIcon__IconPhBriefcase"; // plasmic-import: E-c3RGwvaig6/icon
import PhClockCountdownFillIcon from "./icons/PlasmicIcon__PhClockCountdownFill"; // plasmic-import: GhtgoozaYTSb/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: p0L_wgJiyVXj/icon

createPlasmicElementProxy;

export type PlasmicParametresAbonnement__VariantMembers = {};
export type PlasmicParametresAbonnement__VariantsArgs = {};
type VariantPropType = keyof PlasmicParametresAbonnement__VariantsArgs;
export const PlasmicParametresAbonnement__VariantProps =
  new Array<VariantPropType>();

export type PlasmicParametresAbonnement__ArgsType = {};
type ArgPropType = keyof PlasmicParametresAbonnement__ArgsType;
export const PlasmicParametresAbonnement__ArgProps = new Array<ArgPropType>();

export type PlasmicParametresAbonnement__OverridesType = {
  root?: Flex__<"div">;
  actionCreditSuccess?: Flex__<typeof PageLoader>;
  actionCreditSuccessDepreciated?: Flex__<typeof PageLoader>;
  sidebar2?: Flex__<typeof Sidebar2>;
  main?: Flex__<"div">;
  heading?: Flex__<"div">;
  modalCreditsAlerts?: Flex__<typeof Modal>;
  closeButton?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  iconSuccess?: Flex__<"div">;
  messageText?: Flex__<"div">;
  actionButton?: Flex__<"div">;
  card2?: Flex__<"div">;
  blockSubscription?: Flex__<"div">;
  subscription?: Flex__<"div">;
  items?: Flex__<"div">;
  productCard?: Flex__<typeof ProductCard>;
  actions?: Flex__<"div">;
  cancelSubscription?: Flex__<typeof StripeSubscriptionButton>;
  changeSubscription?: Flex__<typeof StripeSubscriptionButton>;
  subscriptionDetailsHistory?: Flex__<"div">;
  details?: Flex__<"div">;
  hr?: Flex__<"div">;
  hr3?: Flex__<"div">;
  rechargeList?: Flex__<"div">;
  rechargesNameTotal?: Flex__<"div">;
  hr4?: Flex__<"div">;
  rechargesNameTotal2?: Flex__<"div">;
  hr5?: Flex__<"div">;
  rechargesNameTotal3?: Flex__<"div">;
  history?: Flex__<"div">;
  tableButton?: Flex__<"div">;
  table?: Flex__<"div">;
  header?: Flex__<"div">;
  dateIcon?: Flex__<"div">;
  amountIcon?: Flex__<"div">;
  list?: Flex__<"div">;
  item?: Flex__<"div">;
  recharges?: Flex__<"div">;
  rechargesList?: Flex__<"div">;
  classic?: Flex__<"div">;
  inputComboSelect?: Flex__<typeof InputComboSelect>;
  lastminust?: Flex__<"div">;
  inputComboSelect2?: Flex__<typeof InputComboSelect>;
  boost?: Flex__<"div">;
  inputComboSelect3?: Flex__<typeof InputComboSelect>;
  textInput?: Flex__<typeof TextInput>;
  totalAmount?: Flex__<"div">;
  total?: Flex__<"div">;
  amount?: Flex__<"div">;
  stripeCheckoutButton?: Flex__<typeof StripeCheckoutButton>;
};

export interface DefaultParametresAbonnementProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicParametresAbonnement__RenderFunc(props: {
  variants: PlasmicParametresAbonnement__VariantsArgs;
  args: PlasmicParametresAbonnement__ArgsType;
  overrides: PlasmicParametresAbonnement__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "productId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputComboSelect.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "inputComboSelect2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "inputComboSelect3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "modalCreditsAlerts.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                ($ctx.query.credit === "success" &&
                  $ctx.query.sessionId !== "") ||
                $ctx.query.paiement === "ok"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "isModalCreditOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "clientReferenceId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "paiementValidated",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectedProduct",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getUserStripeInfos.data[0].product_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    stripeProductsList: usePlasmicDataOp(() => {
      return {
        sourceId: "iWyefF3oqfc9knnzuF1Fin",
        opId: "65adb9fe-1686-4fa3-8519-62b6b082d238",
        userArgs: {},
        cacheKey: `plasmic.$.65adb9fe-1686-4fa3-8519-62b6b082d238.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUserStripeInfos: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "44279b1d-8867-4128-97b8-520ffe67ab32",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.44279b1d-8867-4128-97b8-520ffe67ab32.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getStripeHistory: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "edae9b98-d01c-4ff8-9741-cdfedc2753d6",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.email]
        },
        cacheKey: `plasmic.$.edae9b98-d01c-4ff8-9741-cdfedc2753d6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    userMonthlyRecharge: usePlasmicDataOp(() => {
      return {
        sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
        opId: "c91b3dad-0831-48c9-8dd7-50555a9ed2f8",
        userArgs: {
          path: ["monthly_recharges"],
          params: [$queries.getUserStripeInfos.data[0].customer_id]
        },
        cacheKey: `plasmic.$.c91b3dad-0831-48c9-8dd7-50555a9ed2f8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLoader
            data-plasmic-name={"actionCreditSuccess"}
            data-plasmic-override={overrides.actionCreditSuccess}
            className={classNames("__wab_instance", sty.actionCreditSuccess)}
            onMount={async () => {
              const $steps = {};

              $steps["updatePaiementValidated"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["paiementValidated"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updatePaiementValidated"] != null &&
                typeof $steps["updatePaiementValidated"] === "object" &&
                typeof $steps["updatePaiementValidated"].then === "function"
              ) {
                $steps["updatePaiementValidated"] = await $steps[
                  "updatePaiementValidated"
                ];
              }

              $steps["savePurchase"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "9Q77QfSZHRES57WTLJmYrY",
                        opId: "bd84fa6f-d237-4c9b-8057-599f8b23857a",
                        userArgs: {
                          path: ["process-session"],
                          body: [{ sessionId: $ctx.query.session_id }]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["savePurchase"] != null &&
                typeof $steps["savePurchase"] === "object" &&
                typeof $steps["savePurchase"].then === "function"
              ) {
                $steps["savePurchase"] = await $steps["savePurchase"];
              }

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return "/parametres-abonnement?paiement=ok";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return `/parametres-abonnement`;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
            shouldRun={false}
          />

          <PageLoader
            data-plasmic-name={"actionCreditSuccessDepreciated"}
            data-plasmic-override={overrides.actionCreditSuccessDepreciated}
            className={classNames(
              "__wab_instance",
              sty.actionCreditSuccessDepreciated
            )}
            onMount={async () => {
              const $steps = {};

              $steps["updatePaiementValidated"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["paiementValidated"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updatePaiementValidated"] != null &&
                typeof $steps["updatePaiementValidated"] === "object" &&
                typeof $steps["updatePaiementValidated"].then === "function"
              ) {
                $steps["updatePaiementValidated"] = await $steps[
                  "updatePaiementValidated"
                ];
              }

              $steps["updateSessionId"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["sessionId"]
                      },
                      operation: 0,
                      value: $ctx.query.session_id
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSessionId"] != null &&
                typeof $steps["updateSessionId"] === "object" &&
                typeof $steps["updateSessionId"].then === "function"
              ) {
                $steps["updateSessionId"] = await $steps["updateSessionId"];
              }

              $steps["getSessionInfos"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "9Q77QfSZHRES57WTLJmYrY",
                        opId: "5db431b2-902f-44b6-a6b7-6e0b3f6d881b",
                        userArgs: {
                          path: ["get-session"],
                          params: [$state.sessionId]
                        },
                        cacheKey: null,
                        invalidatedKeys: null,
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getSessionInfos"] != null &&
                typeof $steps["getSessionInfos"] === "object" &&
                typeof $steps["getSessionInfos"].then === "function"
              ) {
                $steps["getSessionInfos"] = await $steps["getSessionInfos"];
              }

              $steps["getPaymentIntent"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "9Q77QfSZHRES57WTLJmYrY",
                        opId: "13d12d4b-5a53-4196-a4bf-852be730ee37",
                        userArgs: {
                          params: [$state.sessionId]
                        },
                        cacheKey: null,
                        invalidatedKeys: null,
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getPaymentIntent"] != null &&
                typeof $steps["getPaymentIntent"] === "object" &&
                typeof $steps["getPaymentIntent"].then === "function"
              ) {
                $steps["getPaymentIntent"] = await $steps["getPaymentIntent"];
              }

              $steps["savePurchase"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "9Q77QfSZHRES57WTLJmYrY",
                        opId: "7aafb37d-c502-4ff5-8e6c-8d3c0118c314",
                        userArgs: {
                          body: [
                            {
                              sessionId: $state.sessionId,
                              customerId:
                                $steps.getSessionInfos.data.response.session
                                  .client_reference_id,
                              customerEmail:
                                $steps.getSessionInfos.data.response.session
                                  .customer_details.email,
                              receiptUrl:
                                $steps.getPaymentIntent.data.response
                                  .receiptUrl,
                              receiptTitle:
                                $steps.getPaymentIntent.data.response
                                  .receiptTitle,
                              amount:
                                $steps.getPaymentIntent.data.response.amount,
                              products:
                                $steps.getSessionInfos.data.response.session.line_items.data.map(
                                  item => ({
                                    product_id: item.price.product,
                                    quantity: item.quantity
                                  })
                                )
                            }
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["savePurchase"] != null &&
                typeof $steps["savePurchase"] === "object" &&
                typeof $steps["savePurchase"].then === "function"
              ) {
                $steps["savePurchase"] = await $steps["savePurchase"];
              }

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return "/parametres-abonnement?paiement=ok";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return `/parametres-abonnement`;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
            shouldRun={(() => {
              try {
                return (
                  $ctx.query.credit === "success" && !$state.paiementValidated
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
          />

          <Sidebar2
            data-plasmic-name={"sidebar2"}
            data-plasmic-override={overrides.sidebar2}
            className={classNames("__wab_instance", sty.sidebar2)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <div
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.heading
              )}
            >
              {"Mon abonnement"}
            </div>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.modalCreditsAlerts),
                content: (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__osJ4U)}
                  >
                    <div
                      data-plasmic-name={"iconSuccess"}
                      data-plasmic-override={overrides.iconSuccess}
                      className={classNames(projectcss.all, sty.iconSuccess)}
                    >
                      <Icon17Icon
                        className={classNames(projectcss.all, sty.svg__emkBr)}
                        role={"img"}
                      />
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"messageText"}
                      data-plasmic-override={overrides.messageText}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.messageText)}
                    >
                      {(() => {
                        try {
                          return $ctx.query.paiement === "ok";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2T0Rb
                          )}
                        >
                          {"Paiement re\u00e7u !"}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $ctx.query.paiement !== "ok";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nNsVw
                          )}
                        >
                          {"Nous terminons d'enregistrer votre paiement..."}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $ctx.query.paiement === "ok";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xe3L1
                          )}
                        >
                          {
                            "Votre paiement a bien abouti et vos cr\u00e9dits sont pr\u00eats \u00e0 \u00eatre utilis\u00e9s !"
                          }
                        </div>
                      ) : null}
                    </Stack__>
                  </Stack__>
                ),
                footer: (() => {
                  try {
                    return $ctx.query.paiement === "ok";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"actionButton"}
                    data-plasmic-override={overrides.actionButton}
                    className={classNames(projectcss.all, sty.actionButton)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__v1Wkn
                      )}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__w22K7)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k25C
                          )}
                        >
                          {"publier une offre d'emploi"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToOffreEmployeur"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/offre-employeur`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToOffreEmployeur"] != null &&
                          typeof $steps["goToOffreEmployeur"] === "object" &&
                          typeof $steps["goToOffreEmployeur"].then ===
                            "function"
                        ) {
                          $steps["goToOffreEmployeur"] = await $steps[
                            "goToOffreEmployeur"
                          ];
                        }
                      }}
                    />
                  </div>
                ) : null,
                heading: (
                  <div
                    data-plasmic-name={"closeButton"}
                    data-plasmic-override={overrides.closeButton}
                    className={classNames(projectcss.all, sty.closeButton)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"17px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateIsModalCreditOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["isModalCreditOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIsModalCreditOpen"] != null &&
                          typeof $steps["updateIsModalCreditOpen"] ===
                            "object" &&
                          typeof $steps["updateIsModalCreditOpen"].then ===
                            "function"
                        ) {
                          $steps["updateIsModalCreditOpen"] = await $steps[
                            "updateIsModalCreditOpen"
                          ];
                        }
                      }}
                      src={{
                        src: "/plasmic/jam_production_🚀/images/close.svg",
                        fullWidth: 17,
                        fullHeight: 17,
                        aspectRatio: 1
                      }}
                    />
                  </div>
                ),
                isOpen: generateStateValueProp($state, [
                  "modalCreditsAlerts",
                  "isOpen"
                ]),
                noTrigger: true,
                onOpenChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "modalCreditsAlerts",
                    "isOpen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }
              };

              initializePlasmicStates(
                $state,
                [
                  {
                    name: "modalCreditsAlerts.isOpen",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return (
                            ($ctx.query.credit === "success" &&
                              $ctx.query.sessionId !== "") ||
                            $ctx.query.paiement === "ok"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                  }
                ],
                []
              );
              return (
                <Modal
                  data-plasmic-name={"modalCreditsAlerts"}
                  data-plasmic-override={overrides.modalCreditsAlerts}
                  {...child$Props}
                />
              );
            })()}
            <Stack__
              as={"div"}
              data-plasmic-name={"card2"}
              data-plasmic-override={overrides.card2}
              hasGap={true}
              className={classNames(projectcss.all, sty.card2)}
            >
              {(() => {
                try {
                  return (
                    $queries.getUserStripeInfos.data[0].status !== "cancel"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"blockSubscription"}
                  data-plasmic-override={overrides.blockSubscription}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.blockSubscription)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l0Gem
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 600 }}
                      >
                        {
                          "Plus d\u2019annonces, plus de talents, passez \u00e0 un niveau sup\u00e9rieur."
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"subscription"}
                    data-plasmic-override={overrides.subscription}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.subscription)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.stripeProductsList.data.response.data
                            .filter(
                              recuring =>
                                recuring.default_price.recurring !== null
                            )
                            .sort((a, b) => a.name.localeCompare(b.name));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"items"}
                          data-plasmic-override={overrides.items}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.items)}
                          key={currentIndex}
                        >
                          <ProductCard
                            data-plasmic-name={"productCard"}
                            data-plasmic-override={overrides.productCard}
                            active={(() => {
                              try {
                                return (
                                  $state.selectedProduct === currentItem.id
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.productCard
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateSelectedProduct"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["selectedProduct"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateSelectedProduct"] != null &&
                                typeof $steps["updateSelectedProduct"] ===
                                  "object" &&
                                typeof $steps["updateSelectedProduct"].then ===
                                  "function"
                              ) {
                                $steps["updateSelectedProduct"] = await $steps[
                                  "updateSelectedProduct"
                                ];
                              }
                            }}
                            productId={(() => {
                              try {
                                return currentItem.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </Stack__>
                      );
                    })}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"actions"}
                    data-plasmic-override={overrides.actions}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.actions)}
                  >
                    <StripeSubscriptionButton
                      data-plasmic-name={"cancelSubscription"}
                      data-plasmic-override={overrides.cancelSubscription}
                      cancelButtonSlot={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__smCmG
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wWSi
                              )}
                              role={"img"}
                            />
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cyeKa
                              )}
                            >
                              {"annuler"}
                            </div>
                          }
                          type={"bordered"}
                        />
                      }
                      cancelUrl={``}
                      className={classNames(
                        "__wab_instance",
                        sty.cancelSubscription
                      )}
                      confirmButtonSlot={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__duDbm
                          )}
                          color={"errorDestructive"}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__j89MX
                              )}
                              role={"img"}
                            />
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uWnhc
                              )}
                            >
                              {"R\u00e9silier"}
                            </div>
                          }
                        />
                      }
                      confirmDescription={
                        "Votre abonnement sera actif jusqu\u2019\u00e0 la fin du mois en cours. Sans abonnement, vous ne pourrez plus utiliser la plateforme Job Around Me."
                      }
                      confirmIconSlot={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vFnVh
                          )}
                        >
                          <ReshotIconAlert7T6Wum8VleSvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__x0Yo
                            )}
                            role={"img"}
                          />
                        </div>
                      }
                      confirmTitle={"Voulez-vous résilier votre abonnement ?"}
                      customerEmail={(() => {
                        try {
                          return $ctx.SupabaseUser.user.email;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      customerId={(() => {
                        try {
                          return $queries.getUserStripeInfos.data[0]
                            .customer_id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onSuccess={async () => {
                        const $steps = {};

                        $steps["successNotificartion"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "Votre abonnement \u00e0 \u00e9t\u00e9 r\u00e9sili\u00e9 avec succ\u00e8s !",
                                  undefined,
                                  10
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["successNotificartion"] != null &&
                          typeof $steps["successNotificartion"] === "object" &&
                          typeof $steps["successNotificartion"].then ===
                            "function"
                        ) {
                          $steps["successNotificartion"] = await $steps[
                            "successNotificartion"
                          ];
                        }
                      }}
                      priceId={``}
                      showConfirmationModal={true}
                      stripeAction={"cancel"}
                      successUrl={``}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__x62Ba
                        )}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__swFgN
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uzXwq
                            )}
                          >
                            {"R\u00e9silier mon abonnement"}
                          </div>
                        }
                        type={"bordered"}
                      />
                    </StripeSubscriptionButton>
                    <StripeSubscriptionButton
                      data-plasmic-name={"changeSubscription"}
                      data-plasmic-override={overrides.changeSubscription}
                      cancelButtonSlot={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__mAqol
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__a8Atl
                              )}
                              role={"img"}
                            />
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jqNyE
                              )}
                            >
                              {"annuler"}
                            </div>
                          }
                          type={"bordered"}
                        />
                      }
                      cancelUrl={``}
                      className={classNames(
                        "__wab_instance",
                        sty.changeSubscription
                      )}
                      confirmButtonSlot={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__qlaY
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__r5Cwi
                              )}
                              role={"img"}
                            />
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4BLO
                              )}
                            >
                              {"confirmer"}
                            </div>
                          }
                        />
                      }
                      confirmDescription={(() => {
                        try {
                          return `Votre nouvel abonnement commencera le ${new Date(
                            $ctx.SupabaseUser.user.created_at
                          ).toLocaleDateString("fr-FR", {
                            weekday: "long",
                            year: "numeric",
                            month: "long",
                            day: "numeric"
                          })}.`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      confirmIconSlot={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cpIb
                          )}
                        >
                          <Icon17Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xeq2I
                            )}
                            role={"img"}
                          />
                        </div>
                      }
                      confirmTitle={"Changement d'abonnement "}
                      customerEmail={(() => {
                        try {
                          return $ctx.SupabaseUser.user.email;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      customerId={(() => {
                        try {
                          return $queries.getUserStripeInfos.data[0]
                            .customer_id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      disabled={(() => {
                        try {
                          return (
                            $queries.getUserStripeInfos.data[0].product_id ===
                            $state.selectedProduct
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onSuccess={async () => {
                        const $steps = {};

                        $steps["successNotification"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "success",
                                  "Votre abonnement \u00e0 \u00e9t\u00e9 modifi\u00e9 avec succ\u00e8s !",
                                  undefined,
                                  10
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["successNotification"] != null &&
                          typeof $steps["successNotification"] === "object" &&
                          typeof $steps["successNotification"].then ===
                            "function"
                        ) {
                          $steps["successNotification"] = await $steps[
                            "successNotification"
                          ];
                        }
                      }}
                      priceId={(() => {
                        try {
                          return $queries.stripeProductsList.data.response.data.find(
                            item => item.id === $state.selectedProduct
                          ).default_price.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      showConfirmationModal={true}
                      stripeAction={"update"}
                      successUrl={``}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__b144E
                        )}
                        disabled={false}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__iZqHa
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hhTTt
                            )}
                          >
                            {"changer d'abonnement"}
                          </div>
                        }
                      />
                    </StripeSubscriptionButton>
                  </Stack__>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return (() => {
                    if ($queries.getUserStripeInfos.data[0] !== undefined) {
                      return (
                        $queries.getUserStripeInfos.data[0].status === "cancel"
                      );
                    } else {
                      return false;
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__khod)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kinfj
                    )}
                  >
                    {
                      "Vous avez r\u00e9sili\u00e9 votre abonnement. Il se terminera \u00e0 la fin du mois"
                    }
                  </div>
                </div>
              ) : null}
              <Stack__
                as={"div"}
                data-plasmic-name={"subscriptionDetailsHistory"}
                data-plasmic-override={overrides.subscriptionDetailsHistory}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.subscriptionDetailsHistory
                )}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"details"}
                  data-plasmic-override={overrides.details}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.details)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vXo7X
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {"D\u00e9tails de votre abonnement"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"hr"}
                    data-plasmic-override={overrides.hr}
                    className={classNames(projectcss.all, sty.hr)}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__w61Pj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fhTZi
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 500 }}
                        >
                          {"Abonnement actuel :"}
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iKzha
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.getUserStripeInfos.data[0]
                              .status === "cancel"
                              ? "résilié"
                              : $queries.getUserStripeInfos.data[0]
                                  .product_id === "prod_S81KBWHPyJa53z"
                              ? "Basic"
                              : "Premium";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Abonnement actuel :";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <div
                    data-plasmic-name={"hr3"}
                    data-plasmic-override={overrides.hr3}
                    className={classNames(projectcss.all, sty.hr3)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__u7Q4A)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__liHWj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t9ZHf
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 600 }}
                          >
                            {"Vos annonces"}
                          </span>
                        </React.Fragment>
                      </div>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"rechargeList"}
                        data-plasmic-override={overrides.rechargeList}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.rechargeList)}
                      >
                        <div
                          data-plasmic-name={"rechargesNameTotal"}
                          data-plasmic-override={overrides.rechargesNameTotal}
                          className={classNames(
                            projectcss.all,
                            sty.rechargesNameTotal
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c3MD
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 500 }}
                              >
                                {"Classiques :"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tHbWm
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $queries.userMonthlyRecharge.data.response
                                      .solde.totalClassic +
                                    "/" +
                                    $queries.userMonthlyRecharge.data.response
                                      .total.totalClassic
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"hr4"}
                          data-plasmic-override={overrides.hr4}
                          className={classNames(projectcss.all, sty.hr4)}
                        />

                        <div
                          data-plasmic-name={"rechargesNameTotal2"}
                          data-plasmic-override={overrides.rechargesNameTotal2}
                          className={classNames(
                            projectcss.all,
                            sty.rechargesNameTotal2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kZzxu
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 500 }}
                              >
                                {"Last Minute:"}
                              </span>
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a2T9A
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $queries.userMonthlyRecharge.data.response
                                      .solde.totalLastMinute +
                                    "/" +
                                    $queries.userMonthlyRecharge.data.response
                                      .total.totalLastMinute
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"hr5"}
                          data-plasmic-override={overrides.hr5}
                          className={classNames(projectcss.all, sty.hr5)}
                        />

                        <div
                          data-plasmic-name={"rechargesNameTotal3"}
                          data-plasmic-override={overrides.rechargesNameTotal3}
                          className={classNames(
                            projectcss.all,
                            sty.rechargesNameTotal3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wnuVz
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 500 }}
                              >
                                {"Boost\u00e9es:"}
                              </span>
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return (
                                $queries.getUserStripeInfos.data[0]
                                  .product_id === "prod_S81KBWHPyJa53z"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uuorR
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      parseInt(
                                        $queries.getUserStripeInfos.data[0]
                                          .recharge_boost
                                      ) +
                                      "/" +
                                      ($queries.getUserStripeInfos.data[0]
                                        .product_id === "prod_S81KBWHPyJa53z"
                                        ? 0
                                        : 4)
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (
                                $queries.getUserStripeInfos.data[0]
                                  .product_id !== "prod_S81KBWHPyJa53z"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__plqKa
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $queries.userMonthlyRecharge.data.response
                                        .solde.totalBoost +
                                      "/" +
                                      $queries.userMonthlyRecharge.data.response
                                        .total.totalBoost
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"history"}
                  data-plasmic-override={overrides.history}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.history)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9Dq77
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {"Historique de consommation & Factures"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"tableButton"}
                    data-plasmic-override={overrides.tableButton}
                    className={classNames(projectcss.all, sty.tableButton)}
                  >
                    {(() => {
                      try {
                        return $queries.getStripeHistory.data.length > 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"table"}
                        data-plasmic-override={overrides.table}
                        className={classNames(projectcss.all, sty.table)}
                      >
                        <div
                          data-plasmic-name={"header"}
                          data-plasmic-override={overrides.header}
                          className={classNames(projectcss.all, sty.header)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lLZhm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__knkPr
                              )}
                            >
                              {"Titre du document"}
                            </div>
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"dateIcon"}
                            data-plasmic-override={overrides.dateIcon}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.dateIcon)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gmzRe
                              )}
                            >
                              {"Date"}
                            </div>
                            <Icon13Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__itEtA
                              )}
                              role={"img"}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"amountIcon"}
                            data-plasmic-override={overrides.amountIcon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.amountIcon
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a85R5
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 500 }}
                                >
                                  {"Montant"}
                                </span>
                              </React.Fragment>
                            </div>
                            <Icon13Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tIw1
                              )}
                              role={"img"}
                            />
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v3Lqx
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3Dgj1
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 500 }}
                                >
                                  {"T\u00e9l\u00e9charger"}
                                </span>
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"list"}
                          data-plasmic-override={overrides.list}
                          className={classNames(projectcss.all, sty.list)}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getStripeHistory.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                data-plasmic-name={"item"}
                                data-plasmic-override={overrides.item}
                                className={classNames(projectcss.all, sty.item)}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pCj0D
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xBkhK
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "Facture n\xB0 " +
                                            currentItem.invoice_title
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vnVeY
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__k7T8
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            const isoDate =
                                              currentItem.purchased_at;
                                            const date = new Date(isoDate);
                                            const day = String(
                                              date.getDate()
                                            ).padStart(2, "0");
                                            const month = String(
                                              date.getMonth() + 1
                                            ).padStart(2, "0");
                                            const year = date.getFullYear();
                                            const formattedDate = `${day}/${month}/${year}`;
                                            return formattedDate;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "06/01/2025";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__dG54N
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eKugu
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            currentItem.total_amount / 100 +
                                            "\u20AC"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "59\u20ac";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___0ZLaL
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return window.open(
                                                currentItem.invoice_url,
                                                "_blank"
                                              );
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }
                                  }}
                                >
                                  <Icon14Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__nBIcf
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nEaWx)}
                    >
                      {(() => {
                        try {
                          return $queries.getStripeHistory.data.length > 10;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__tmvU4
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9Fmtk
                              )}
                            >
                              {"voir plus"}
                            </div>
                          }
                          size={"extraSmall"}
                          type={"bordered"}
                        />
                      ) : null}
                    </div>
                  </div>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"recharges"}
                data-plasmic-override={overrides.recharges}
                hasGap={true}
                className={classNames(projectcss.all, sty.recharges)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pOlN
                  )}
                >
                  {"Recharges"}
                </div>
                <div
                  data-plasmic-name={"rechargesList"}
                  data-plasmic-override={overrides.rechargesList}
                  className={classNames(projectcss.all, sty.rechargesList)}
                >
                  <div
                    data-plasmic-name={"classic"}
                    data-plasmic-override={overrides.classic}
                    className={classNames(projectcss.all, sty.classic)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gRUi)}
                    >
                      <IconPhBriefcaseIcon
                        className={classNames(projectcss.all, sty.svg__yy2Vw)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3ST0D
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre classique"}
                          </span>
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__avve6)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gtieN
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[2].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect"}
                        data-plasmic-override={overrides.inputComboSelect}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kSriH
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ((Number($state.inputComboSelect.value) || 0) *
                                  $queries.stripeProductsList.data.response
                                    .data[2].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </div>
                  <div
                    data-plasmic-name={"lastminust"}
                    data-plasmic-override={overrides.lastminust}
                    className={classNames(projectcss.all, sty.lastminust)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__v9RUt)}
                    >
                      <PhClockCountdownFillIcon
                        className={classNames(projectcss.all, sty.svg__fuf5)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__r6N5G
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre Last Minute"}
                          </span>
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2ZFz5
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x1ImO
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[1].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect2"}
                        data-plasmic-override={overrides.inputComboSelect2}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect2
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect2",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect2",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zPuUm
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ((Number($state.inputComboSelect2.value) || 0) *
                                  $queries.stripeProductsList.data.response
                                    .data[1].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </div>
                  <div
                    data-plasmic-name={"boost"}
                    data-plasmic-override={overrides.boost}
                    className={classNames(projectcss.all, sty.boost)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__niJhV)}
                    >
                      <Icon15Icon
                        className={classNames(projectcss.all, sty.svg__mgKfv)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1ACHi
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre Boost\u00e9es"}
                          </span>
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ie1Iu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bMlQh
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[0].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect3"}
                        data-plasmic-override={overrides.inputComboSelect3}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect3
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect3",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect3",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tNj8Z
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ((Number($state.inputComboSelect3.value) || 0) *
                                  $queries.stripeProductsList.data.response
                                    .data[0].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vHjNk)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cGxIr
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {"Code promotionnel"}
                      </span>
                    </React.Fragment>
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"CODEPROMO"}
                  />
                </Stack__>
                <div
                  data-plasmic-name={"totalAmount"}
                  data-plasmic-override={overrides.totalAmount}
                  className={classNames(projectcss.all, sty.totalAmount)}
                >
                  <div
                    data-plasmic-name={"total"}
                    data-plasmic-override={overrides.total}
                    className={classNames(projectcss.all, sty.total)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__usYfA
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 500 }}
                        >
                          {"Total"}
                        </span>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"amount"}
                    data-plasmic-override={overrides.amount}
                    className={classNames(projectcss.all, sty.amount)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xqio
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              ((Number($state.inputComboSelect.value) || 0) *
                                $queries.stripeProductsList.data.response
                                  .data[2].default_price.unit_amount) /
                                100 +
                              ((Number($state.inputComboSelect2.value) || 0) *
                                $queries.stripeProductsList.data.response
                                  .data[1].default_price.unit_amount) /
                                100 +
                              ((Number($state.inputComboSelect3.value) || 0) *
                                $queries.stripeProductsList.data.response
                                  .data[0].default_price.unit_amount) /
                                100 +
                              "\u20AC HT"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__e3Yib)}>
                  <StripeCheckoutButton
                    data-plasmic-name={"stripeCheckoutButton"}
                    data-plasmic-override={overrides.stripeCheckoutButton}
                    cancelUrl={(() => {
                      try {
                        return "parametres-abonnement?credit=cancel";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.stripeCheckoutButton
                    )}
                    clientReferenceId={(() => {
                      try {
                        return $queries.getUserStripeInfos.data[0].customer_id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    customerEmail={(() => {
                      try {
                        return $ctx.SupabaseUser.user.email;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    items={(() => {
                      try {
                        return [
                          {
                            price:
                              $queries.stripeProductsList.data.response.data[2]
                                .default_price.id,
                            quantity: $state.inputComboSelect.value
                          },
                          {
                            price:
                              $queries.stripeProductsList.data.response.data[1]
                                .default_price.id,
                            quantity: $state.inputComboSelect2.value
                          },
                          {
                            price:
                              $queries.stripeProductsList.data.response.data[0]
                                .default_price.id,
                            quantity: $state.inputComboSelect3.value
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    successUrl={(() => {
                      try {
                        return "parametres-abonnement?credit=success&session_id={CHECKOUT_SESSION_ID}";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <Button
                      className={classNames("__wab_instance", sty.button__jSo)}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__d7Sds)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gZhn9
                          )}
                        >
                          {"acheter les cr\u00e9dits"}
                        </div>
                      }
                    />
                  </StripeCheckoutButton>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "actionCreditSuccess",
    "actionCreditSuccessDepreciated",
    "sidebar2",
    "main",
    "heading",
    "modalCreditsAlerts",
    "closeButton",
    "img",
    "iconSuccess",
    "messageText",
    "actionButton",
    "card2",
    "blockSubscription",
    "subscription",
    "items",
    "productCard",
    "actions",
    "cancelSubscription",
    "changeSubscription",
    "subscriptionDetailsHistory",
    "details",
    "hr",
    "hr3",
    "rechargeList",
    "rechargesNameTotal",
    "hr4",
    "rechargesNameTotal2",
    "hr5",
    "rechargesNameTotal3",
    "history",
    "tableButton",
    "table",
    "header",
    "dateIcon",
    "amountIcon",
    "list",
    "item",
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput",
    "totalAmount",
    "total",
    "amount",
    "stripeCheckoutButton"
  ],
  actionCreditSuccess: ["actionCreditSuccess"],
  actionCreditSuccessDepreciated: ["actionCreditSuccessDepreciated"],
  sidebar2: ["sidebar2"],
  main: [
    "main",
    "heading",
    "modalCreditsAlerts",
    "closeButton",
    "img",
    "iconSuccess",
    "messageText",
    "actionButton",
    "card2",
    "blockSubscription",
    "subscription",
    "items",
    "productCard",
    "actions",
    "cancelSubscription",
    "changeSubscription",
    "subscriptionDetailsHistory",
    "details",
    "hr",
    "hr3",
    "rechargeList",
    "rechargesNameTotal",
    "hr4",
    "rechargesNameTotal2",
    "hr5",
    "rechargesNameTotal3",
    "history",
    "tableButton",
    "table",
    "header",
    "dateIcon",
    "amountIcon",
    "list",
    "item",
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput",
    "totalAmount",
    "total",
    "amount",
    "stripeCheckoutButton"
  ],
  heading: ["heading"],
  modalCreditsAlerts: [
    "modalCreditsAlerts",
    "closeButton",
    "img",
    "iconSuccess",
    "messageText",
    "actionButton"
  ],
  closeButton: ["closeButton", "img"],
  img: ["img"],
  iconSuccess: ["iconSuccess"],
  messageText: ["messageText"],
  actionButton: ["actionButton"],
  card2: [
    "card2",
    "blockSubscription",
    "subscription",
    "items",
    "productCard",
    "actions",
    "cancelSubscription",
    "changeSubscription",
    "subscriptionDetailsHistory",
    "details",
    "hr",
    "hr3",
    "rechargeList",
    "rechargesNameTotal",
    "hr4",
    "rechargesNameTotal2",
    "hr5",
    "rechargesNameTotal3",
    "history",
    "tableButton",
    "table",
    "header",
    "dateIcon",
    "amountIcon",
    "list",
    "item",
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput",
    "totalAmount",
    "total",
    "amount",
    "stripeCheckoutButton"
  ],
  blockSubscription: [
    "blockSubscription",
    "subscription",
    "items",
    "productCard",
    "actions",
    "cancelSubscription",
    "changeSubscription"
  ],
  subscription: ["subscription", "items", "productCard"],
  items: ["items", "productCard"],
  productCard: ["productCard"],
  actions: ["actions", "cancelSubscription", "changeSubscription"],
  cancelSubscription: ["cancelSubscription"],
  changeSubscription: ["changeSubscription"],
  subscriptionDetailsHistory: [
    "subscriptionDetailsHistory",
    "details",
    "hr",
    "hr3",
    "rechargeList",
    "rechargesNameTotal",
    "hr4",
    "rechargesNameTotal2",
    "hr5",
    "rechargesNameTotal3",
    "history",
    "tableButton",
    "table",
    "header",
    "dateIcon",
    "amountIcon",
    "list",
    "item"
  ],
  details: [
    "details",
    "hr",
    "hr3",
    "rechargeList",
    "rechargesNameTotal",
    "hr4",
    "rechargesNameTotal2",
    "hr5",
    "rechargesNameTotal3"
  ],
  hr: ["hr"],
  hr3: ["hr3"],
  rechargeList: [
    "rechargeList",
    "rechargesNameTotal",
    "hr4",
    "rechargesNameTotal2",
    "hr5",
    "rechargesNameTotal3"
  ],
  rechargesNameTotal: ["rechargesNameTotal"],
  hr4: ["hr4"],
  rechargesNameTotal2: ["rechargesNameTotal2"],
  hr5: ["hr5"],
  rechargesNameTotal3: ["rechargesNameTotal3"],
  history: [
    "history",
    "tableButton",
    "table",
    "header",
    "dateIcon",
    "amountIcon",
    "list",
    "item"
  ],
  tableButton: [
    "tableButton",
    "table",
    "header",
    "dateIcon",
    "amountIcon",
    "list",
    "item"
  ],
  table: ["table", "header", "dateIcon", "amountIcon", "list", "item"],
  header: ["header", "dateIcon", "amountIcon"],
  dateIcon: ["dateIcon"],
  amountIcon: ["amountIcon"],
  list: ["list", "item"],
  item: ["item"],
  recharges: [
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput",
    "totalAmount",
    "total",
    "amount",
    "stripeCheckoutButton"
  ],
  rechargesList: [
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3"
  ],
  classic: ["classic", "inputComboSelect"],
  inputComboSelect: ["inputComboSelect"],
  lastminust: ["lastminust", "inputComboSelect2"],
  inputComboSelect2: ["inputComboSelect2"],
  boost: ["boost", "inputComboSelect3"],
  inputComboSelect3: ["inputComboSelect3"],
  textInput: ["textInput"],
  totalAmount: ["totalAmount", "total", "amount"],
  total: ["total"],
  amount: ["amount"],
  stripeCheckoutButton: ["stripeCheckoutButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  actionCreditSuccess: typeof PageLoader;
  actionCreditSuccessDepreciated: typeof PageLoader;
  sidebar2: typeof Sidebar2;
  main: "div";
  heading: "div";
  modalCreditsAlerts: typeof Modal;
  closeButton: "div";
  img: typeof PlasmicImg__;
  iconSuccess: "div";
  messageText: "div";
  actionButton: "div";
  card2: "div";
  blockSubscription: "div";
  subscription: "div";
  items: "div";
  productCard: typeof ProductCard;
  actions: "div";
  cancelSubscription: typeof StripeSubscriptionButton;
  changeSubscription: typeof StripeSubscriptionButton;
  subscriptionDetailsHistory: "div";
  details: "div";
  hr: "div";
  hr3: "div";
  rechargeList: "div";
  rechargesNameTotal: "div";
  hr4: "div";
  rechargesNameTotal2: "div";
  hr5: "div";
  rechargesNameTotal3: "div";
  history: "div";
  tableButton: "div";
  table: "div";
  header: "div";
  dateIcon: "div";
  amountIcon: "div";
  list: "div";
  item: "div";
  recharges: "div";
  rechargesList: "div";
  classic: "div";
  inputComboSelect: typeof InputComboSelect;
  lastminust: "div";
  inputComboSelect2: typeof InputComboSelect;
  boost: "div";
  inputComboSelect3: typeof InputComboSelect;
  textInput: typeof TextInput;
  totalAmount: "div";
  total: "div";
  amount: "div";
  stripeCheckoutButton: typeof StripeCheckoutButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicParametresAbonnement__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicParametresAbonnement__VariantsArgs;
    args?: PlasmicParametresAbonnement__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicParametresAbonnement__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicParametresAbonnement__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicParametresAbonnement__ArgProps,
          internalVariantPropNames: PlasmicParametresAbonnement__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicParametresAbonnement__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicParametresAbonnement";
  } else {
    func.displayName = `PlasmicParametresAbonnement.${nodeName}`;
  }
  return func;
}

export const PlasmicParametresAbonnement = Object.assign(
  // Top-level PlasmicParametresAbonnement renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    actionCreditSuccess: makeNodeComponent("actionCreditSuccess"),
    actionCreditSuccessDepreciated: makeNodeComponent(
      "actionCreditSuccessDepreciated"
    ),
    sidebar2: makeNodeComponent("sidebar2"),
    main: makeNodeComponent("main"),
    heading: makeNodeComponent("heading"),
    modalCreditsAlerts: makeNodeComponent("modalCreditsAlerts"),
    closeButton: makeNodeComponent("closeButton"),
    img: makeNodeComponent("img"),
    iconSuccess: makeNodeComponent("iconSuccess"),
    messageText: makeNodeComponent("messageText"),
    actionButton: makeNodeComponent("actionButton"),
    card2: makeNodeComponent("card2"),
    blockSubscription: makeNodeComponent("blockSubscription"),
    subscription: makeNodeComponent("subscription"),
    items: makeNodeComponent("items"),
    productCard: makeNodeComponent("productCard"),
    actions: makeNodeComponent("actions"),
    cancelSubscription: makeNodeComponent("cancelSubscription"),
    changeSubscription: makeNodeComponent("changeSubscription"),
    subscriptionDetailsHistory: makeNodeComponent("subscriptionDetailsHistory"),
    details: makeNodeComponent("details"),
    hr: makeNodeComponent("hr"),
    hr3: makeNodeComponent("hr3"),
    rechargeList: makeNodeComponent("rechargeList"),
    rechargesNameTotal: makeNodeComponent("rechargesNameTotal"),
    hr4: makeNodeComponent("hr4"),
    rechargesNameTotal2: makeNodeComponent("rechargesNameTotal2"),
    hr5: makeNodeComponent("hr5"),
    rechargesNameTotal3: makeNodeComponent("rechargesNameTotal3"),
    history: makeNodeComponent("history"),
    tableButton: makeNodeComponent("tableButton"),
    table: makeNodeComponent("table"),
    header: makeNodeComponent("header"),
    dateIcon: makeNodeComponent("dateIcon"),
    amountIcon: makeNodeComponent("amountIcon"),
    list: makeNodeComponent("list"),
    item: makeNodeComponent("item"),
    recharges: makeNodeComponent("recharges"),
    rechargesList: makeNodeComponent("rechargesList"),
    classic: makeNodeComponent("classic"),
    inputComboSelect: makeNodeComponent("inputComboSelect"),
    lastminust: makeNodeComponent("lastminust"),
    inputComboSelect2: makeNodeComponent("inputComboSelect2"),
    boost: makeNodeComponent("boost"),
    inputComboSelect3: makeNodeComponent("inputComboSelect3"),
    textInput: makeNodeComponent("textInput"),
    totalAmount: makeNodeComponent("totalAmount"),
    total: makeNodeComponent("total"),
    amount: makeNodeComponent("amount"),
    stripeCheckoutButton: makeNodeComponent("stripeCheckoutButton"),

    // Metadata about props expected for PlasmicParametresAbonnement
    internalVariantProps: PlasmicParametresAbonnement__VariantProps,
    internalArgProps: PlasmicParametresAbonnement__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicParametresAbonnement;
/* prettier-ignore-end */
