/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: CsVrMhQxf35k

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import Avatar from "../../Avatar"; // plasmic-import: NvJprRnpeGpU/component
import { Notation } from "../../../plasmic-library/others/Notation/Notation"; // plasmic-import: z82NxL6AqE3T/codeComponent
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import MobileNavbarBottom from "../../MobileNavbarBottom"; // plasmic-import: BIS-N7QZzUVV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicRechercheCandidat.module.css"; // plasmic-import: CsVrMhQxf35k/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: H7s7pGhDmqKY/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: 7N6Suhwryqlm/icon
import IconPhMapPinIcon from "./icons/PlasmicIcon__IconPhMapPin"; // plasmic-import: CAcfAl_W7CL5/icon
import PhoneIcon from "./icons/PlasmicIcon__Phone"; // plasmic-import: TnWLxKqpsOCZ/icon
import EnvelopeSimpleIcon from "./icons/PlasmicIcon__EnvelopeSimple"; // plasmic-import: 6e-QrJJmFWot/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import MagnifyingGlassIcon from "./icons/PlasmicIcon__MagnifyingGlass"; // plasmic-import: fii_q6lckj-n/icon

createPlasmicElementProxy;

export type PlasmicRechercheCandidat__VariantMembers = {};
export type PlasmicRechercheCandidat__VariantsArgs = {};
type VariantPropType = keyof PlasmicRechercheCandidat__VariantsArgs;
export const PlasmicRechercheCandidat__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRechercheCandidat__ArgsType = {};
type ArgPropType = keyof PlasmicRechercheCandidat__ArgsType;
export const PlasmicRechercheCandidat__ArgProps = new Array<ArgPropType>();

export type PlasmicRechercheCandidat__OverridesType = {
  rechercehCandidat?: Flex__<"div">;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  sidebar?: Flex__<typeof Sidebar>;
  main?: Flex__<"main">;
  h1?: Flex__<"h1">;
  filterForm?: Flex__<typeof FormWrapper>;
  keyWordsInput?: Flex__<typeof AntdInput>;
  locationInput?: Flex__<typeof AntdInput>;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
  results?: Flex__<"div">;
  resultsDetails?: Flex__<"div">;
  resultsNumber?: Flex__<"div">;
  keyWords?: Flex__<"div">;
  keywords?: Flex__<"div">;
  cities?: Flex__<"div">;
  city?: Flex__<"div">;
  cards?: Flex__<"div">;
  card?: Flex__<"div">;
  cardHeader?: Flex__<"div">;
  file?: Flex__<typeof Avatar>;
  userInfo?: Flex__<"div">;
  firstnameLastname?: Flex__<"p">;
  contatcInfo?: Flex__<"div">;
  loaction?: Flex__<"div">;
  paris?: Flex__<"p">;
  phoneNumber?: Flex__<"div">;
  email?: Flex__<"div">;
  mainInfos?: Flex__<"div">;
  documents?: Flex__<"div">;
  cvButton?: Flex__<typeof Button>;
  ldmButton?: Flex__<typeof Button>;
  presentation?: Flex__<"div">;
  heading?: Flex__<"p">;
  skills?: Flex__<"div">;
  heading2?: Flex__<"p">;
  frame1437254218?: Flex__<"div">;
  badgeBase5?: Flex__<"div">;
  text6?: Flex__<"div">;
  frame1437254392?: Flex__<"div">;
  heading3?: Flex__<"p">;
  frame1437254413?: Flex__<"div">;
  frame1437254408?: Flex__<"div">;
  tableCell?: Flex__<"div">;
  frame1437254409?: Flex__<"div">;
  tableCell2?: Flex__<"div">;
  frame1437254418?: Flex__<"div">;
  tableCell3?: Flex__<"div">;
  searchNotPerformed?: Flex__<"div">;
  content?: Flex__<"div">;
  featuredIcon?: Flex__<"div">;
  textAndSupportingText?: Flex__<"div">;
  text4?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  noResultsFound?: Flex__<"div">;
  content2?: Flex__<"div">;
  featuredIcon3?: Flex__<"div">;
  textAndSupportingText2?: Flex__<"div">;
  text5?: Flex__<"div">;
  supportingText2?: Flex__<"div">;
  cvModal?: Flex__<typeof Modal>;
  coverLetterModal?: Flex__<typeof Modal>;
  mobileNavbarBottom?: Flex__<typeof MobileNavbarBottom>;
};

export interface DefaultRechercheCandidatProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRechercheCandidat__RenderFunc(props: {
  variants: PlasmicRechercheCandidat__VariantsArgs;
  args: PlasmicRechercheCandidat__ArgsType;
  overrides: PlasmicRechercheCandidat__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "filterForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "filterForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "filterForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "filterForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "keyWordsInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "locationInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "keyWordsTab",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "cityTab",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "listWords",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "cvModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "currentCvUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentLdmUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "coverLetterModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profilePhoto",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "file[].userId",
        type: "private",
        variableType: "text"
      },
      {
        path: "file[].photoUrl",
        type: "private",
        variableType: "text"
      },
      {
        path: "sidebar.disableLinks",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sidebar.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "employer"
      },
      {
        path: "candidates",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const rows = Array.isArray($queries.getCandidates.data)
                  ? $queries.getCandidates.data
                  : [];
                const cityFilter = $state.cityTab;
                const keywordsRaw = $state.keyWordsTab;
                const matchMode = "partial";
                const requireAll = false;
                const norm = s =>
                  (s ?? "")
                    .toString()
                    .trim()
                    .toLowerCase()
                    .normalize("NFD")
                    .replace(/\p{Diacritic}/gu, "");
                const toStringVal = v => {
                  if (
                    typeof v === "string" ||
                    typeof v === "number" ||
                    typeof v === "boolean"
                  )
                    return String(v);
                  if (v && typeof v === "object")
                    return v.value ?? v.label ?? "";
                  return "";
                };
                const collectValues = (obj, bag = []) => {
                  if (obj == null) return bag;
                  if (
                    typeof obj === "string" ||
                    typeof obj === "number" ||
                    typeof obj === "boolean"
                  ) {
                    bag.push(String(obj));
                  } else if (Array.isArray(obj)) {
                    obj.forEach(v => collectValues(v, bag));
                  } else if (typeof obj === "object") {
                    Object.values(obj).forEach(v => collectValues(v, bag));
                  }
                  return bag;
                };
                let citySet = new Set();
                if (Array.isArray(cityFilter)) {
                  cityFilter
                    .map(toStringVal)
                    .map(norm)
                    .filter(Boolean)
                    .forEach(c => citySet.add(c));
                } else if (cityFilter != null) {
                  const single = norm(toStringVal(cityFilter));
                  if (single) citySet.add(single);
                }
                let keywords = [];
                if (Array.isArray(keywordsRaw)) {
                  keywords = keywordsRaw.map(toStringVal);
                } else if (typeof keywordsRaw === "string") {
                  keywords = keywordsRaw
                    .split(/[,\n\r;]+/)
                    .map(s => s.split(/\s+/))
                    .flat();
                } else if (keywordsRaw != null) {
                  keywords = [toStringVal(keywordsRaw)];
                }
                keywords = keywords.map(norm).filter(Boolean);
                const makeMatcher = mode => {
                  if (mode === "exact") {
                    const regs = keywords.map(
                      k =>
                        new RegExp(
                          `\\b${k.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}\\b`,
                          "i"
                        )
                    );
                    return hay => {
                      if (regs.length === 0) return true;
                      return requireAll
                        ? regs.every(rx => rx.test(hay))
                        : regs.some(rx => rx.test(hay));
                    };
                  }
                  return hay => {
                    if (keywords.length === 0) return true;
                    return requireAll
                      ? keywords.every(k => hay.includes(k))
                      : keywords.some(k => hay.includes(k));
                  };
                };
                const matchKeywords = makeMatcher(matchMode);
                const filtered = rows.filter(c => {
                  if (citySet.size > 0) {
                    const cCity = norm(c.city);
                    if (!citySet.has(cCity)) return false;
                  }
                  if (keywords.length > 0) {
                    const haystack = norm(collectValues(c).join(" "));
                    if (!matchKeywords(haystack)) return false;
                  }
                  return true;
                });
                return filtered;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "resultsArray",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.candidates.filter(candidate => {
                  if (
                    $state.cityTab.length === 0 &&
                    $state.keyWordsTab.length === 0
                  ) {
                    return false;
                  }
                  const city = candidate.city || "";
                  const skills = Array.isArray(candidate.skill)
                    ? candidate.skill
                    : [];
                  const cityMatch =
                    $state.cityTab.length === 0 ||
                    $state.cityTab.some(
                      c => c.toLowerCase() === city.toLowerCase()
                    );
                  const skillsMatch =
                    $state.keyWordsTab.length === 0 ||
                    skills.some(s =>
                      $state.keyWordsTab.some(
                        k => String(s).toLowerCase() === String(k).toLowerCase()
                      )
                    );
                  return cityMatch && skillsMatch;
                });
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "mobileNavbarBottom.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "company"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCandidates: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "8cb2b56e-8e95-4435-9999-638f47be04c6",
        userArgs: {},
        cacheKey: `plasmic.$.8cb2b56e-8e95-4435-9999-638f47be04c6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    companyLocation: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "7e1403fe-b5d5-4d8a-b842-83976cee09cb",
        userArgs: {
          query: [$ctx.SupabaseUser?.user?.id]
        },
        cacheKey: `plasmic.$.7e1403fe-b5d5-4d8a-b842-83976cee09cb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicRechercheCandidat.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicRechercheCandidat.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicRechercheCandidat.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"rechercehCandidat"}
          data-plasmic-override={overrides.rechercehCandidat}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.rechercehCandidat
          )}
        >
          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
            disableLinks={generateStateValueProp($state, [
              "sidebar",
              "disableLinks"
            ])}
            onDisableLinksChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebar",
                "disableLinks"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sidebar", "role"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, ["sidebar", "role"])}
          />

          <main
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(
              projectcss.all,
              sty.main,
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ``
                : "main-content"
            )}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Rechercher un candidat"}
            </h1>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.filterForm),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["filterForm", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};

                  $steps["updateResultsObj"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["resultsArray"]
                          },
                          operation: 0,
                          value: []
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateResultsObj"] != null &&
                    typeof $steps["updateResultsObj"] === "object" &&
                    typeof $steps["updateResultsObj"].then === "function"
                  ) {
                    $steps["updateResultsObj"] = await $steps[
                      "updateResultsObj"
                    ];
                  }

                  $steps["pushWords"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const city = $state.locationInput.value?.trim();
                              const keyWords =
                                $state.keyWordsInput.value?.trim();
                              if (
                                city &&
                                !$state.cityTab.some(
                                  c => c.toLowerCase() === city.toLowerCase()
                                )
                              ) {
                                $state.cityTab.push(city);
                              }
                              if (
                                keyWords &&
                                !$state.keyWordsTab.some(
                                  k =>
                                    k.toLowerCase() === keyWords.toLowerCase()
                                )
                              ) {
                                return $state.keyWordsTab.push(keyWords);
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["pushWords"] != null &&
                    typeof $steps["pushWords"] === "object" &&
                    typeof $steps["pushWords"].then === "function"
                  ) {
                    $steps["pushWords"] = await $steps["pushWords"];
                  }

                  $steps["runCode"] = false
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              if (
                                $state.cityTab.length === 0 &&
                                $state.keyWordsTab.length === 0
                              ) {
                                return ($state.resultsArray = []);
                              } else {
                                return ($state.resultsArray =
                                  $queries.getCandidates.data.filter(
                                    candidate => {
                                      const cityMatch =
                                        $state.cityTab.length === 0 ||
                                        $state.cityTab.some(
                                          city =>
                                            city.toLowerCase() ===
                                            (candidate.city || "").toLowerCase()
                                        );
                                      const skillsMatch =
                                        $state.keyWordsTab.length === 0 ||
                                        $state.keyWordsTab.some(skill =>
                                          candidate.skill?.some(
                                            candidateSkill =>
                                              candidateSkill.toLowerCase() ===
                                              skill.toLowerCase()
                                          )
                                        );
                                      return cityMatch && skillsMatch;
                                    }
                                  ));
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                },
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["filterForm", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["filterForm"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "filterForm.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "filterForm.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"filterForm"}
                  data-plasmic-override={overrides.filterForm}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__p8QRa
                    )}
                    initialValue={""}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4AcCt
                        )}
                      >
                        {"Mot-cl\u00e9, comp\u00e9tences"}
                      </div>
                    }
                    name={"keyWords"}
                    preserve={false}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sgGi)}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          bordered: true,
                          className: classNames(
                            "__wab_instance",
                            sty.keyWordsInput
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["keyWordsInput", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};
                            }).apply(null, eventArgs);
                          },
                          placeholder: "Mot-cl\u00e9, comp\u00e9tence...",
                          prefix: (
                            <Icon16Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__fnoMi
                              )}
                              role={"img"}
                            />
                          ),

                          size: "middle",
                          type: "text",
                          value: generateStateValueProp($state, [
                            "keyWordsInput",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "keyWordsInput.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"keyWordsInput"}
                            data-plasmic-override={overrides.keyWordsInput}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </FormItemWrapper>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dyXi)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__cZ3Eq
                      )}
                      initialValue={""}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7FoQ
                          )}
                        >
                          {"Localisation"}
                        </div>
                      }
                      name={"city"}
                      preserve={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hNkjI
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            bordered: true,
                            className: classNames(
                              "__wab_instance",
                              sty.locationInput
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["locationInput", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);

                              (async event => {
                                const $steps = {};
                              }).apply(null, eventArgs);
                            },
                            onPressEnter: async event => {
                              const $steps = {};
                            },
                            placeholder: "Localisation",
                            prefix: (
                              <PlasmicImg__
                                data-plasmic-name={"img"}
                                data-plasmic-override={overrides.img}
                                alt={""}
                                className={classNames(sty.img)}
                                displayHeight={"20px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"none"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"20px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/jam_production_🚀/images/locationPinSvgrepoComSvg.svg",
                                  fullWidth: 800,
                                  fullHeight: 800,
                                  aspectRatio: undefined
                                }}
                              />
                            ),

                            value: generateStateValueProp($state, [
                              "locationInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "locationInput.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"locationInput"}
                              data-plasmic-override={overrides.locationInput}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </FormItemWrapper>
                  </div>
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"white"}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg___2ZehJ)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lOEo
                        )}
                      >
                        {"Rechercher"}
                      </div>
                    }
                    submitsForm={true}
                    type={"bordered"}
                  />
                </FormWrapper>
              );
            })()}
            <div
              data-plasmic-name={"results"}
              data-plasmic-override={overrides.results}
              className={classNames(projectcss.all, sty.results)}
            >
              <div
                data-plasmic-name={"resultsDetails"}
                data-plasmic-override={overrides.resultsDetails}
                className={classNames(projectcss.all, sty.resultsDetails)}
              >
                <div
                  data-plasmic-name={"resultsNumber"}
                  data-plasmic-override={overrides.resultsNumber}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.resultsNumber
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.resultsArray.length > 1
                          ? `${$state.resultsArray.length} résultats`
                          : `${$state.resultsArray.length} résultat `;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "0 r\u00e9sultat ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.keyWordsTab;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"keyWords"}
                      data-plasmic-override={overrides.keyWords}
                      className={classNames(projectcss.all, sty.keyWords)}
                      key={currentIndex}
                    >
                      <div
                        data-plasmic-name={"keywords"}
                        data-plasmic-override={overrides.keywords}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.keywords
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Restauration";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <XIcon
                        className={classNames(projectcss.all, sty.svg__ciUN)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.keyWordsTab =
                                      $state.keyWordsTab.filter(
                                        item => item !== currentItem
                                      ));
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        role={"img"}
                      />
                    </div>
                  );
                })}
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.cityTab;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      data-plasmic-name={"cities"}
                      data-plasmic-override={overrides.cities}
                      className={classNames(projectcss.all, sty.cities)}
                      key={currentIndex}
                    >
                      <div
                        data-plasmic-name={"city"}
                        data-plasmic-override={overrides.city}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.city
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Restauration";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <XIcon
                        className={classNames(projectcss.all, sty.svg__w7T47)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.cityTab =
                                      $state.cityTab.filter(
                                        item => item !== currentItem
                                      ));
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        role={"img"}
                      />
                    </div>
                  );
                })}
              </div>
              {(() => {
                try {
                  return $queries.getCandidates.isLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ie8Or
                  )}
                >
                  {"Chargement..."}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.resultsArray.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"cards"}
                  data-plasmic-override={overrides.cards}
                  className={classNames(projectcss.all, sty.cards)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.resultsArray;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        data-plasmic-name={"card"}
                        data-plasmic-override={overrides.card}
                        className={classNames(projectcss.all, sty.card)}
                        key={currentIndex}
                      >
                        <div
                          data-plasmic-name={"cardHeader"}
                          data-plasmic-override={overrides.cardHeader}
                          className={classNames(projectcss.all, sty.cardHeader)}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames("__wab_instance", sty.file),
                              onPhotoUrlChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "file",
                                  __plasmic_idx_0,
                                  "photoUrl"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              },
                              onUserIdChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "file",
                                  __plasmic_idx_0,
                                  "userId"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              },
                              photoUrl: generateStateValueProp($state, [
                                "file",
                                __plasmic_idx_0,
                                "photoUrl"
                              ]),
                              userId: generateStateValueProp($state, [
                                "file",
                                __plasmic_idx_0,
                                "userId"
                              ])
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "file[].userId",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                },
                                {
                                  name: "file[].photoUrl",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.profile_photo;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Avatar
                                data-plasmic-name={"file"}
                                data-plasmic-override={overrides.file}
                                {...child$Props}
                              />
                            );
                          })()}
                          <div
                            data-plasmic-name={"userInfo"}
                            data-plasmic-override={overrides.userInfo}
                            className={classNames(projectcss.all, sty.userInfo)}
                          >
                            <p
                              data-plasmic-name={"firstnameLastname"}
                              data-plasmic-override={
                                overrides.firstnameLastname
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.firstnameLastname
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      currentItem.first_name +
                                      " " +
                                      currentItem.last_name
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Sarah Levilot";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </p>
                            <div
                              data-plasmic-name={"contatcInfo"}
                              data-plasmic-override={overrides.contatcInfo}
                              className={classNames(
                                projectcss.all,
                                sty.contatcInfo
                              )}
                            >
                              <div
                                data-plasmic-name={"loaction"}
                                data-plasmic-override={overrides.loaction}
                                className={classNames(
                                  projectcss.all,
                                  sty.loaction
                                )}
                              >
                                <IconPhMapPinIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___0Ti25
                                  )}
                                  role={"img"}
                                />

                                <p
                                  data-plasmic-name={"paris"}
                                  data-plasmic-override={overrides.paris}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.paris
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.city;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "paris ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </p>
                              </div>
                              <div
                                data-plasmic-name={"phoneNumber"}
                                data-plasmic-override={overrides.phoneNumber}
                                className={classNames(
                                  projectcss.all,
                                  sty.phoneNumber
                                )}
                              >
                                <PhoneIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__bWkrr
                                  )}
                                  role={"img"}
                                />

                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__zGafa
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.phone_number;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "0606060606";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </p>
                              </div>
                              <div
                                data-plasmic-name={"email"}
                                data-plasmic-override={overrides.email}
                                className={classNames(
                                  projectcss.all,
                                  sty.email
                                )}
                              >
                                <EnvelopeSimpleIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__dks1Q
                                  )}
                                  role={"img"}
                                />

                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__jig2M
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.email;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "olivia@untitledui.Com";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"mainInfos"}
                          data-plasmic-override={overrides.mainInfos}
                          className={classNames(projectcss.all, sty.mainInfos)}
                        >
                          <div
                            data-plasmic-name={"documents"}
                            data-plasmic-override={overrides.documents}
                            className={classNames(
                              projectcss.all,
                              sty.documents
                            )}
                          >
                            {(() => {
                              try {
                                return currentItem.cv_file !== null;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Button
                                data-plasmic-name={"cvButton"}
                                data-plasmic-override={overrides.cvButton}
                                className={classNames(
                                  "__wab_instance",
                                  sty.cvButton
                                )}
                                color={"white"}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jMxlj
                                    )}
                                  >
                                    {"CV"}
                                  </div>
                                }
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["supabaseGetSignedFileUrl"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                            opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
                                            userArgs: {
                                              path: [
                                                currentItem.id +
                                                  "/" +
                                                  currentItem.cv_file
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: null,
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["supabaseGetSignedFileUrl"] !=
                                      null &&
                                    typeof $steps[
                                      "supabaseGetSignedFileUrl"
                                    ] === "object" &&
                                    typeof $steps["supabaseGetSignedFileUrl"]
                                      .then === "function"
                                  ) {
                                    $steps["supabaseGetSignedFileUrl"] =
                                      await $steps["supabaseGetSignedFileUrl"];
                                  }

                                  $steps["updateCurrentCvUrl"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["currentCvUrl"]
                                          },
                                          operation: 0,
                                          value:
                                            $steps.supabaseGetSignedFileUrl
                                              ?.signedUrl
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateCurrentCvUrl"] != null &&
                                    typeof $steps["updateCurrentCvUrl"] ===
                                      "object" &&
                                    typeof $steps["updateCurrentCvUrl"].then ===
                                      "function"
                                  ) {
                                    $steps["updateCurrentCvUrl"] = await $steps[
                                      "updateCurrentCvUrl"
                                    ];
                                  }

                                  $steps["updateModalIsOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["cvModal", "isOpen"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateModalIsOpen"] != null &&
                                    typeof $steps["updateModalIsOpen"] ===
                                      "object" &&
                                    typeof $steps["updateModalIsOpen"].then ===
                                      "function"
                                  ) {
                                    $steps["updateModalIsOpen"] = await $steps[
                                      "updateModalIsOpen"
                                    ];
                                  }
                                }}
                                size={"small"}
                                type={"bordered"}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return currentItem.cover_letter_file !== null;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Button
                                data-plasmic-name={"ldmButton"}
                                data-plasmic-override={overrides.ldmButton}
                                className={classNames(
                                  "__wab_instance",
                                  sty.ldmButton
                                )}
                                color={"white"}
                                label={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ytpl0
                                    )}
                                  >
                                    {"MOTIVATION"}
                                  </div>
                                }
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["supabaseGetSignedFileUrl"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                            opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
                                            userArgs: {
                                              path: [
                                                currentItem.id +
                                                  "/" +
                                                  currentItem.cover_letter_file
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: null,
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["supabaseGetSignedFileUrl"] !=
                                      null &&
                                    typeof $steps[
                                      "supabaseGetSignedFileUrl"
                                    ] === "object" &&
                                    typeof $steps["supabaseGetSignedFileUrl"]
                                      .then === "function"
                                  ) {
                                    $steps["supabaseGetSignedFileUrl"] =
                                      await $steps["supabaseGetSignedFileUrl"];
                                  }

                                  $steps["updateCurrentLdmUrl"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["currentLdmUrl"]
                                          },
                                          operation: 0,
                                          value:
                                            $steps.supabaseGetSignedFileUrl
                                              ?.signedUrl
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateCurrentLdmUrl"] != null &&
                                    typeof $steps["updateCurrentLdmUrl"] ===
                                      "object" &&
                                    typeof $steps["updateCurrentLdmUrl"]
                                      .then === "function"
                                  ) {
                                    $steps["updateCurrentLdmUrl"] =
                                      await $steps["updateCurrentLdmUrl"];
                                  }

                                  $steps["updateModalIsOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "coverLetterModal",
                                              "isOpen"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateModalIsOpen"] != null &&
                                    typeof $steps["updateModalIsOpen"] ===
                                      "object" &&
                                    typeof $steps["updateModalIsOpen"].then ===
                                      "function"
                                  ) {
                                    $steps["updateModalIsOpen"] = await $steps[
                                      "updateModalIsOpen"
                                    ];
                                  }
                                }}
                                size={"small"}
                                type={"bordered"}
                              />
                            ) : null}
                          </div>
                          <div
                            data-plasmic-name={"presentation"}
                            data-plasmic-override={overrides.presentation}
                            className={classNames(
                              projectcss.all,
                              sty.presentation
                            )}
                          >
                            <p
                              data-plasmic-name={"heading"}
                              data-plasmic-override={overrides.heading}
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.heading
                              )}
                            >
                              {"Pr\u00e9sentation"}
                            </p>
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__efdMb
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.short_presentation;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Lorem ipsum dolor sit amet consectetur. Quisque tempor scelerisque cras ut vulputate amet quis feugiat. Enim condimentum aliquam vitae diam vitae ut consequat ut viverra. Vitae ultrices eleifend nisi urna facilisis proin sagittis orci facilisis. Tellus libero proin aliquam arcu porttitor massa.";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </p>
                          </div>
                          <div
                            data-plasmic-name={"skills"}
                            data-plasmic-override={overrides.skills}
                            className={classNames(projectcss.all, sty.skills)}
                          >
                            <p
                              data-plasmic-name={"heading2"}
                              data-plasmic-override={overrides.heading2}
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.heading2
                              )}
                            >
                              {"Comp\u00e9tences"}
                            </p>
                            <div
                              data-plasmic-name={"frame1437254218"}
                              data-plasmic-override={overrides.frame1437254218}
                              className={classNames(
                                projectcss.all,
                                sty.frame1437254218
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return currentItem.skill;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <div
                                    data-plasmic-name={"badgeBase5"}
                                    data-plasmic-override={overrides.badgeBase5}
                                    className={classNames(
                                      projectcss.all,
                                      sty.badgeBase5
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      data-plasmic-name={"text6"}
                                      data-plasmic-override={overrides.text6}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text6
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Autonomie";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"frame1437254392"}
                            data-plasmic-override={overrides.frame1437254392}
                            className={classNames(
                              projectcss.all,
                              sty.frame1437254392
                            )}
                          >
                            <p
                              data-plasmic-name={"heading3"}
                              data-plasmic-override={overrides.heading3}
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.heading3
                              )}
                            >
                              {"Vu(e) par d\u2019autres employeurs"}
                            </p>
                            <div
                              data-plasmic-name={"frame1437254413"}
                              data-plasmic-override={overrides.frame1437254413}
                              className={classNames(
                                projectcss.all,
                                sty.frame1437254413
                              )}
                            >
                              <div
                                data-plasmic-name={"frame1437254408"}
                                data-plasmic-override={
                                  overrides.frame1437254408
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.frame1437254408
                                )}
                              >
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__jqO1
                                  )}
                                >
                                  {"Ponctualit\u00e9"}
                                </p>
                                <div
                                  data-plasmic-name={"tableCell"}
                                  data-plasmic-override={overrides.tableCell}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tableCell
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentItem.punctuality !== null;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Notation
                                      className={
                                        "" +
                                        " " +
                                        classNames(
                                          "__wab_instance",
                                          sty.notationEtoiles__pti6
                                        )
                                      }
                                      enableHover={false}
                                      value={(() => {
                                        try {
                                          return currentItem.punctuality;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 0;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  ) : null}
                                  {(() => {
                                    try {
                                      return currentItem.punctuality === null;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bYXhz
                                      )}
                                    >
                                      {"Pas encore not\u00e9"}
                                    </div>
                                  ) : null}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"frame1437254409"}
                                data-plasmic-override={
                                  overrides.frame1437254409
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.frame1437254409
                                )}
                              >
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__cMy2A
                                  )}
                                >
                                  {"Respect"}
                                </p>
                                <div
                                  data-plasmic-name={"tableCell2"}
                                  data-plasmic-override={overrides.tableCell2}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tableCell2
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentItem.respect !== null;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Notation
                                      className={
                                        "" +
                                        " " +
                                        classNames(
                                          "__wab_instance",
                                          sty.notationEtoiles__dU7Gk
                                        )
                                      }
                                      enableHover={false}
                                      value={(() => {
                                        try {
                                          return currentItem.respect;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 0;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  ) : null}
                                  {(() => {
                                    try {
                                      return currentItem.respect === null;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bccDd
                                      )}
                                    >
                                      {"Pas encore not\u00e9"}
                                    </div>
                                  ) : null}
                                </div>
                              </div>
                              <div
                                data-plasmic-name={"frame1437254418"}
                                data-plasmic-override={
                                  overrides.frame1437254418
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.frame1437254418
                                )}
                              >
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__bFfZg
                                  )}
                                >
                                  {"Prestation"}
                                </p>
                                <div
                                  data-plasmic-name={"tableCell3"}
                                  data-plasmic-override={overrides.tableCell3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.tableCell3
                                  )}
                                >
                                  {(() => {
                                    try {
                                      return currentItem.performance !== null;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Notation
                                      className={
                                        "" +
                                        " " +
                                        classNames(
                                          "__wab_instance",
                                          sty.notationEtoiles__xUrCm
                                        )
                                      }
                                      enableHover={false}
                                      value={(() => {
                                        try {
                                          return currentItem.performance;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 0;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  ) : null}
                                  {(() => {
                                    try {
                                      return currentItem.performance === null;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__boD2Y
                                      )}
                                    >
                                      {"Pas encore not\u00e9"}
                                    </div>
                                  ) : null}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : null}
              {(() => {
                try {
                  return (() => {
                    return (
                      $state.cityTab.length === 0 &&
                      $state.keyWordsTab.length === 0
                    );
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"searchNotPerformed"}
                  data-plasmic-override={overrides.searchNotPerformed}
                  className={classNames(projectcss.all, sty.searchNotPerformed)}
                >
                  <div
                    data-plasmic-name={"content"}
                    data-plasmic-override={overrides.content}
                    className={classNames(projectcss.all, sty.content)}
                  >
                    <div
                      data-plasmic-name={"featuredIcon"}
                      data-plasmic-override={overrides.featuredIcon}
                      className={classNames(projectcss.all, sty.featuredIcon)}
                    >
                      <MagnifyingGlassIcon
                        className={classNames(projectcss.all, sty.svg__ks5Qh)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"textAndSupportingText"}
                      data-plasmic-override={overrides.textAndSupportingText}
                      className={classNames(
                        projectcss.all,
                        sty.textAndSupportingText
                      )}
                    >
                      <div
                        data-plasmic-name={"text4"}
                        data-plasmic-override={overrides.text4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text4
                        )}
                      >
                        {
                          "Vous n\u2019avez pas encore effectu\u00e9 de recherche"
                        }
                      </div>
                      <div
                        data-plasmic-name={"supportingText"}
                        data-plasmic-override={overrides.supportingText}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.supportingText
                        )}
                      >
                        {
                          "Renseignez quelques crit\u00e8res et trouvez un collaborateur qui correspond \u00e0 vos attentes."
                        }
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    $queries.getCandidates.isLoading == false &&
                    ($state.cityTab.length > 0 ||
                      $state.keyWordsTab.length > 0) &&
                    $queries.getCandidates.data.length === 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"noResultsFound"}
                  data-plasmic-override={overrides.noResultsFound}
                  className={classNames(projectcss.all, sty.noResultsFound)}
                >
                  <div
                    data-plasmic-name={"content2"}
                    data-plasmic-override={overrides.content2}
                    className={classNames(projectcss.all, sty.content2)}
                  >
                    <div
                      data-plasmic-name={"featuredIcon3"}
                      data-plasmic-override={overrides.featuredIcon3}
                      className={classNames(projectcss.all, sty.featuredIcon3)}
                    >
                      <MagnifyingGlassIcon
                        className={classNames(projectcss.all, sty.svg__uoQN)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"textAndSupportingText2"}
                      data-plasmic-override={overrides.textAndSupportingText2}
                      className={classNames(
                        projectcss.all,
                        sty.textAndSupportingText2
                      )}
                    >
                      <div
                        data-plasmic-name={"text5"}
                        data-plasmic-override={overrides.text5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text5
                        )}
                      >
                        {
                          "Aucun r\u00e9sultat correspond \u00e0 votre recherche"
                        }
                      </div>
                      <div
                        data-plasmic-name={"supportingText2"}
                        data-plasmic-override={overrides.supportingText2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.supportingText2
                        )}
                      >
                        {
                          "Modifiez vos crit\u00e8res et trouvez un collaborateur qui correspond \u00e0 vos attentes."
                        }
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
          </main>
          <Modal
            data-plasmic-name={"cvModal"}
            data-plasmic-override={overrides.cvModal}
            className={classNames("__wab_instance", sty.cvModal)}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__xvBw9)}>
                <Iframe
                  className={classNames("__wab_instance", sty.iframe__fpPf6)}
                  src={(() => {
                    try {
                      return $state.currentCvUrl;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
                  useHtml={false}
                />
              </div>
            }
            heading={
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3___1X5I9
                )}
              >
                {"CV"}
              </h3>
            }
            isOpen={generateStateValueProp($state, ["cvModal", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["cvModal", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
          />

          <Modal
            data-plasmic-name={"coverLetterModal"}
            data-plasmic-override={overrides.coverLetterModal}
            className={classNames("__wab_instance", sty.coverLetterModal)}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__kVaVj)}>
                <Iframe
                  className={classNames("__wab_instance", sty.iframe__pxGb)}
                  src={(() => {
                    try {
                      return $state.currentLdmUrl;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
                  useHtml={false}
                />
              </div>
            }
            heading={
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__vMe24
                )}
              >
                {"Lettre de motivation"}
              </h3>
            }
            isOpen={generateStateValueProp($state, [
              "coverLetterModal",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "coverLetterModal",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
          />

          <MobileNavbarBottom
            data-plasmic-name={"mobileNavbarBottom"}
            data-plasmic-override={overrides.mobileNavbarBottom}
            className={classNames("__wab_instance", sty.mobileNavbarBottom)}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "mobileNavbarBottom",
                "role"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, [
              "mobileNavbarBottom",
              "role"
            ])}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  rechercehCandidat: [
    "rechercehCandidat",
    "mobileNavbarTop",
    "sidebar",
    "main",
    "h1",
    "filterForm",
    "keyWordsInput",
    "locationInput",
    "img",
    "button",
    "results",
    "resultsDetails",
    "resultsNumber",
    "keyWords",
    "keywords",
    "cities",
    "city",
    "cards",
    "card",
    "cardHeader",
    "file",
    "userInfo",
    "firstnameLastname",
    "contatcInfo",
    "loaction",
    "paris",
    "phoneNumber",
    "email",
    "mainInfos",
    "documents",
    "cvButton",
    "ldmButton",
    "presentation",
    "heading",
    "skills",
    "heading2",
    "frame1437254218",
    "badgeBase5",
    "text6",
    "frame1437254392",
    "heading3",
    "frame1437254413",
    "frame1437254408",
    "tableCell",
    "frame1437254409",
    "tableCell2",
    "frame1437254418",
    "tableCell3",
    "searchNotPerformed",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText",
    "noResultsFound",
    "content2",
    "featuredIcon3",
    "textAndSupportingText2",
    "text5",
    "supportingText2",
    "cvModal",
    "coverLetterModal",
    "mobileNavbarBottom"
  ],
  mobileNavbarTop: ["mobileNavbarTop"],
  sidebar: ["sidebar"],
  main: [
    "main",
    "h1",
    "filterForm",
    "keyWordsInput",
    "locationInput",
    "img",
    "button",
    "results",
    "resultsDetails",
    "resultsNumber",
    "keyWords",
    "keywords",
    "cities",
    "city",
    "cards",
    "card",
    "cardHeader",
    "file",
    "userInfo",
    "firstnameLastname",
    "contatcInfo",
    "loaction",
    "paris",
    "phoneNumber",
    "email",
    "mainInfos",
    "documents",
    "cvButton",
    "ldmButton",
    "presentation",
    "heading",
    "skills",
    "heading2",
    "frame1437254218",
    "badgeBase5",
    "text6",
    "frame1437254392",
    "heading3",
    "frame1437254413",
    "frame1437254408",
    "tableCell",
    "frame1437254409",
    "tableCell2",
    "frame1437254418",
    "tableCell3",
    "searchNotPerformed",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText",
    "noResultsFound",
    "content2",
    "featuredIcon3",
    "textAndSupportingText2",
    "text5",
    "supportingText2"
  ],
  h1: ["h1"],
  filterForm: ["filterForm", "keyWordsInput", "locationInput", "img", "button"],
  keyWordsInput: ["keyWordsInput"],
  locationInput: ["locationInput", "img"],
  img: ["img"],
  button: ["button"],
  results: [
    "results",
    "resultsDetails",
    "resultsNumber",
    "keyWords",
    "keywords",
    "cities",
    "city",
    "cards",
    "card",
    "cardHeader",
    "file",
    "userInfo",
    "firstnameLastname",
    "contatcInfo",
    "loaction",
    "paris",
    "phoneNumber",
    "email",
    "mainInfos",
    "documents",
    "cvButton",
    "ldmButton",
    "presentation",
    "heading",
    "skills",
    "heading2",
    "frame1437254218",
    "badgeBase5",
    "text6",
    "frame1437254392",
    "heading3",
    "frame1437254413",
    "frame1437254408",
    "tableCell",
    "frame1437254409",
    "tableCell2",
    "frame1437254418",
    "tableCell3",
    "searchNotPerformed",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText",
    "noResultsFound",
    "content2",
    "featuredIcon3",
    "textAndSupportingText2",
    "text5",
    "supportingText2"
  ],
  resultsDetails: [
    "resultsDetails",
    "resultsNumber",
    "keyWords",
    "keywords",
    "cities",
    "city"
  ],
  resultsNumber: ["resultsNumber"],
  keyWords: ["keyWords", "keywords"],
  keywords: ["keywords"],
  cities: ["cities", "city"],
  city: ["city"],
  cards: [
    "cards",
    "card",
    "cardHeader",
    "file",
    "userInfo",
    "firstnameLastname",
    "contatcInfo",
    "loaction",
    "paris",
    "phoneNumber",
    "email",
    "mainInfos",
    "documents",
    "cvButton",
    "ldmButton",
    "presentation",
    "heading",
    "skills",
    "heading2",
    "frame1437254218",
    "badgeBase5",
    "text6",
    "frame1437254392",
    "heading3",
    "frame1437254413",
    "frame1437254408",
    "tableCell",
    "frame1437254409",
    "tableCell2",
    "frame1437254418",
    "tableCell3"
  ],
  card: [
    "card",
    "cardHeader",
    "file",
    "userInfo",
    "firstnameLastname",
    "contatcInfo",
    "loaction",
    "paris",
    "phoneNumber",
    "email",
    "mainInfos",
    "documents",
    "cvButton",
    "ldmButton",
    "presentation",
    "heading",
    "skills",
    "heading2",
    "frame1437254218",
    "badgeBase5",
    "text6",
    "frame1437254392",
    "heading3",
    "frame1437254413",
    "frame1437254408",
    "tableCell",
    "frame1437254409",
    "tableCell2",
    "frame1437254418",
    "tableCell3"
  ],
  cardHeader: [
    "cardHeader",
    "file",
    "userInfo",
    "firstnameLastname",
    "contatcInfo",
    "loaction",
    "paris",
    "phoneNumber",
    "email"
  ],
  file: ["file"],
  userInfo: [
    "userInfo",
    "firstnameLastname",
    "contatcInfo",
    "loaction",
    "paris",
    "phoneNumber",
    "email"
  ],
  firstnameLastname: ["firstnameLastname"],
  contatcInfo: ["contatcInfo", "loaction", "paris", "phoneNumber", "email"],
  loaction: ["loaction", "paris"],
  paris: ["paris"],
  phoneNumber: ["phoneNumber"],
  email: ["email"],
  mainInfos: [
    "mainInfos",
    "documents",
    "cvButton",
    "ldmButton",
    "presentation",
    "heading",
    "skills",
    "heading2",
    "frame1437254218",
    "badgeBase5",
    "text6",
    "frame1437254392",
    "heading3",
    "frame1437254413",
    "frame1437254408",
    "tableCell",
    "frame1437254409",
    "tableCell2",
    "frame1437254418",
    "tableCell3"
  ],
  documents: ["documents", "cvButton", "ldmButton"],
  cvButton: ["cvButton"],
  ldmButton: ["ldmButton"],
  presentation: ["presentation", "heading"],
  heading: ["heading"],
  skills: ["skills", "heading2", "frame1437254218", "badgeBase5", "text6"],
  heading2: ["heading2"],
  frame1437254218: ["frame1437254218", "badgeBase5", "text6"],
  badgeBase5: ["badgeBase5", "text6"],
  text6: ["text6"],
  frame1437254392: [
    "frame1437254392",
    "heading3",
    "frame1437254413",
    "frame1437254408",
    "tableCell",
    "frame1437254409",
    "tableCell2",
    "frame1437254418",
    "tableCell3"
  ],
  heading3: ["heading3"],
  frame1437254413: [
    "frame1437254413",
    "frame1437254408",
    "tableCell",
    "frame1437254409",
    "tableCell2",
    "frame1437254418",
    "tableCell3"
  ],
  frame1437254408: ["frame1437254408", "tableCell"],
  tableCell: ["tableCell"],
  frame1437254409: ["frame1437254409", "tableCell2"],
  tableCell2: ["tableCell2"],
  frame1437254418: ["frame1437254418", "tableCell3"],
  tableCell3: ["tableCell3"],
  searchNotPerformed: [
    "searchNotPerformed",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText"
  ],
  content: [
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text4",
    "supportingText"
  ],
  featuredIcon: ["featuredIcon"],
  textAndSupportingText: ["textAndSupportingText", "text4", "supportingText"],
  text4: ["text4"],
  supportingText: ["supportingText"],
  noResultsFound: [
    "noResultsFound",
    "content2",
    "featuredIcon3",
    "textAndSupportingText2",
    "text5",
    "supportingText2"
  ],
  content2: [
    "content2",
    "featuredIcon3",
    "textAndSupportingText2",
    "text5",
    "supportingText2"
  ],
  featuredIcon3: ["featuredIcon3"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text5",
    "supportingText2"
  ],
  text5: ["text5"],
  supportingText2: ["supportingText2"],
  cvModal: ["cvModal"],
  coverLetterModal: ["coverLetterModal"],
  mobileNavbarBottom: ["mobileNavbarBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  rechercehCandidat: "div";
  mobileNavbarTop: typeof MobileNavbarTop;
  sidebar: typeof Sidebar;
  main: "main";
  h1: "h1";
  filterForm: typeof FormWrapper;
  keyWordsInput: typeof AntdInput;
  locationInput: typeof AntdInput;
  img: typeof PlasmicImg__;
  button: typeof Button;
  results: "div";
  resultsDetails: "div";
  resultsNumber: "div";
  keyWords: "div";
  keywords: "div";
  cities: "div";
  city: "div";
  cards: "div";
  card: "div";
  cardHeader: "div";
  file: typeof Avatar;
  userInfo: "div";
  firstnameLastname: "p";
  contatcInfo: "div";
  loaction: "div";
  paris: "p";
  phoneNumber: "div";
  email: "div";
  mainInfos: "div";
  documents: "div";
  cvButton: typeof Button;
  ldmButton: typeof Button;
  presentation: "div";
  heading: "p";
  skills: "div";
  heading2: "p";
  frame1437254218: "div";
  badgeBase5: "div";
  text6: "div";
  frame1437254392: "div";
  heading3: "p";
  frame1437254413: "div";
  frame1437254408: "div";
  tableCell: "div";
  frame1437254409: "div";
  tableCell2: "div";
  frame1437254418: "div";
  tableCell3: "div";
  searchNotPerformed: "div";
  content: "div";
  featuredIcon: "div";
  textAndSupportingText: "div";
  text4: "div";
  supportingText: "div";
  noResultsFound: "div";
  content2: "div";
  featuredIcon3: "div";
  textAndSupportingText2: "div";
  text5: "div";
  supportingText2: "div";
  cvModal: typeof Modal;
  coverLetterModal: typeof Modal;
  mobileNavbarBottom: typeof MobileNavbarBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRechercheCandidat__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRechercheCandidat__VariantsArgs;
    args?: PlasmicRechercheCandidat__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRechercheCandidat__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRechercheCandidat__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRechercheCandidat__ArgProps,
          internalVariantPropNames: PlasmicRechercheCandidat__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRechercheCandidat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rechercehCandidat") {
    func.displayName = "PlasmicRechercheCandidat";
  } else {
    func.displayName = `PlasmicRechercheCandidat.${nodeName}`;
  }
  return func;
}

export const PlasmicRechercheCandidat = Object.assign(
  // Top-level PlasmicRechercheCandidat renders the root element
  makeNodeComponent("rechercehCandidat"),
  {
    // Helper components rendering sub-elements
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    h1: makeNodeComponent("h1"),
    filterForm: makeNodeComponent("filterForm"),
    keyWordsInput: makeNodeComponent("keyWordsInput"),
    locationInput: makeNodeComponent("locationInput"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    results: makeNodeComponent("results"),
    resultsDetails: makeNodeComponent("resultsDetails"),
    resultsNumber: makeNodeComponent("resultsNumber"),
    keyWords: makeNodeComponent("keyWords"),
    keywords: makeNodeComponent("keywords"),
    cities: makeNodeComponent("cities"),
    city: makeNodeComponent("city"),
    cards: makeNodeComponent("cards"),
    card: makeNodeComponent("card"),
    cardHeader: makeNodeComponent("cardHeader"),
    file: makeNodeComponent("file"),
    userInfo: makeNodeComponent("userInfo"),
    firstnameLastname: makeNodeComponent("firstnameLastname"),
    contatcInfo: makeNodeComponent("contatcInfo"),
    loaction: makeNodeComponent("loaction"),
    paris: makeNodeComponent("paris"),
    phoneNumber: makeNodeComponent("phoneNumber"),
    email: makeNodeComponent("email"),
    mainInfos: makeNodeComponent("mainInfos"),
    documents: makeNodeComponent("documents"),
    cvButton: makeNodeComponent("cvButton"),
    ldmButton: makeNodeComponent("ldmButton"),
    presentation: makeNodeComponent("presentation"),
    heading: makeNodeComponent("heading"),
    skills: makeNodeComponent("skills"),
    heading2: makeNodeComponent("heading2"),
    frame1437254218: makeNodeComponent("frame1437254218"),
    badgeBase5: makeNodeComponent("badgeBase5"),
    text6: makeNodeComponent("text6"),
    frame1437254392: makeNodeComponent("frame1437254392"),
    heading3: makeNodeComponent("heading3"),
    frame1437254413: makeNodeComponent("frame1437254413"),
    frame1437254408: makeNodeComponent("frame1437254408"),
    tableCell: makeNodeComponent("tableCell"),
    frame1437254409: makeNodeComponent("frame1437254409"),
    tableCell2: makeNodeComponent("tableCell2"),
    frame1437254418: makeNodeComponent("frame1437254418"),
    tableCell3: makeNodeComponent("tableCell3"),
    searchNotPerformed: makeNodeComponent("searchNotPerformed"),
    content: makeNodeComponent("content"),
    featuredIcon: makeNodeComponent("featuredIcon"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text4: makeNodeComponent("text4"),
    supportingText: makeNodeComponent("supportingText"),
    noResultsFound: makeNodeComponent("noResultsFound"),
    content2: makeNodeComponent("content2"),
    featuredIcon3: makeNodeComponent("featuredIcon3"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text5: makeNodeComponent("text5"),
    supportingText2: makeNodeComponent("supportingText2"),
    cvModal: makeNodeComponent("cvModal"),
    coverLetterModal: makeNodeComponent("coverLetterModal"),
    mobileNavbarBottom: makeNodeComponent("mobileNavbarBottom"),

    // Metadata about props expected for PlasmicRechercheCandidat
    internalVariantProps: PlasmicRechercheCandidat__VariantProps,
    internalArgProps: PlasmicRechercheCandidat__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Recherche de candidats",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRechercheCandidat;
/* prettier-ignore-end */
