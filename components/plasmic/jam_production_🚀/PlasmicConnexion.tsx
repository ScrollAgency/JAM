/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: ZGZ6sFcj1aLn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Login } from "../../../plasmic-library/authentication/Login"; // plasmic-import: DTfpuarR8FPx/codeComponent
import { PageLoader } from "../../others/PageLoader/PageLoader"; // plasmic-import: FHDrnDhA4DZe/codeComponent

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicConnexion.module.css"; // plasmic-import: ZGZ6sFcj1aLn/css

import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon

createPlasmicElementProxy;

export type PlasmicConnexion__VariantMembers = {};
export type PlasmicConnexion__VariantsArgs = {};
type VariantPropType = keyof PlasmicConnexion__VariantsArgs;
export const PlasmicConnexion__VariantProps = new Array<VariantPropType>();

export type PlasmicConnexion__ArgsType = {};
type ArgPropType = keyof PlasmicConnexion__ArgsType;
export const PlasmicConnexion__ArgProps = new Array<ArgPropType>();

export type PlasmicConnexion__OverridesType = {
  connexion?: Flex__<"div">;
  signIn?: Flex__<"div">;
  imageWrapper2?: Flex__<"div">;
  logoWrapper2?: Flex__<"div">;
  svg?: Flex__<"svg">;
  baseline2?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame5?: Flex__<"div">;
  frame6?: Flex__<"div">;
  formWrapper?: Flex__<"div">;
  loginForm?: Flex__<typeof Login>;
  pageLoader?: Flex__<typeof PageLoader>;
};

export interface DefaultConnexionProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicConnexion__RenderFunc(props: {
  variants: PlasmicConnexion__VariantsArgs;
  args: PlasmicConnexion__ArgsType;
  overrides: PlasmicConnexion__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loginForm.email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loginForm.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicConnexion.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicConnexion.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicConnexion.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"connexion"}
          data-plasmic-override={overrides.connexion}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.connexion
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["goToPage"] = true
              ? (() => {
                  const actionArgs = {
                    destination: (() => {
                      try {
                        return $ctx.SupabaseUser.user.user_metadata.role ===
                          "Company"
                          ? "offre-employeur"
                          : "/";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPage"] != null &&
              typeof $steps["goToPage"] === "object" &&
              typeof $steps["goToPage"].then === "function"
            ) {
              $steps["goToPage"] = await $steps["goToPage"];
            }
          }}
        >
          <div
            data-plasmic-name={"signIn"}
            data-plasmic-override={overrides.signIn}
            className={classNames(projectcss.all, sty.signIn)}
          >
            <div
              data-plasmic-name={"imageWrapper2"}
              data-plasmic-override={overrides.imageWrapper2}
              className={classNames(projectcss.all, sty.imageWrapper2)}
            >
              <div
                data-plasmic-name={"logoWrapper2"}
                data-plasmic-override={overrides.logoWrapper2}
                className={classNames(projectcss.all, sty.logoWrapper2)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToAccueil"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToAccueil"] != null &&
                    typeof $steps["goToAccueil"] === "object" &&
                    typeof $steps["goToAccueil"].then === "function"
                  ) {
                    $steps["goToAccueil"] = await $steps["goToAccueil"];
                  }
                }}
              >
                <PictogramIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"baseline2"}
                  data-plasmic-override={overrides.baseline2}
                  className={classNames(projectcss.all, sty.baseline2)}
                >
                  <div
                    data-plasmic-name={"frame4"}
                    data-plasmic-override={overrides.frame4}
                    className={classNames(projectcss.all, sty.frame4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f8Msj
                      )}
                    >
                      {"JOB"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame5"}
                    data-plasmic-override={overrides.frame5}
                    className={classNames(projectcss.all, sty.frame5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cheZj
                      )}
                    >
                      {"AROUND"}
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame6"}
                    data-plasmic-override={overrides.frame6}
                    className={classNames(projectcss.all, sty.frame6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j34TO
                      )}
                    >
                      {"ME"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"formWrapper"}
              data-plasmic-override={overrides.formWrapper}
              className={classNames(projectcss.all, sty.formWrapper)}
            >
              <Login
                data-plasmic-name={"loginForm"}
                data-plasmic-override={overrides.loginForm}
                buttonStyle={"primary"}
                className={classNames("__wab_instance", sty.loginForm)}
                createAccountText={"Créer un compte"}
                email={generateStateValueProp($state, ["loginForm", "email"])}
                emailLabel={"Email"}
                forgotPasswordPosition={"left"}
                forgotPasswordText={"Mot de passe oubli\u00e9 ?"}
                inputGap={"1rem"}
                inputStyle={"simple"}
                onEmailChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "loginForm",
                    "email"
                  ]).apply(null, eventArgs);
                }}
                onError={async error => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u00c9chec de la connexion. Veuillez v\u00e9rifier vos identifiants et r\u00e9essayer."
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
                onPasswordChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "loginForm",
                    "password"
                  ]).apply(null, eventArgs);
                }}
                onSubmit={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $state.loginForm.email;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.loginForm.password;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions[
                          "SupabaseUserGlobalContext.login"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
                password={generateStateValueProp($state, [
                  "loginForm",
                  "password"
                ])}
                passwordLabel={"Mot de passe"}
                placeholderEmail={"Entrez votre email"}
                placeholderPassword={"Entrez votre mot de passe"}
                redirectTo={"https://job-around-me.com/auth/oauth-callback"}
                showAppleButton={false}
                showBottomSignupLink={true}
                showCreateAccount={false}
                showGoogleButton={true}
                showPasswordToggle={true}
                signUpLinkText={"Pas encore de compte ? INSCRIPTION"}
                submitButtonText={"CONNEXION"}
                title={"Connexion"}
                titleHeading={"h1"}
                wrapperStyle={"card"}
              />
            </div>
          </div>
          <PageLoader
            data-plasmic-name={"pageLoader"}
            data-plasmic-override={overrides.pageLoader}
            className={classNames("__wab_instance", sty.pageLoader)}
            onMount={async () => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return $ctx.SupabaseUser.user.user_metadata.role ===
                            "Company"
                            ? "offre-employeur"
                            : $ctx.SupabaseUser.user.user_metadata.role ===
                              "Admin"
                            ? "offre_admin"
                            : "/";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
            shouldRun={(() => {
              try {
                return $ctx.SupabaseUser.user !== null;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  connexion: [
    "connexion",
    "signIn",
    "imageWrapper2",
    "logoWrapper2",
    "svg",
    "baseline2",
    "frame4",
    "frame5",
    "frame6",
    "formWrapper",
    "loginForm",
    "pageLoader"
  ],
  signIn: [
    "signIn",
    "imageWrapper2",
    "logoWrapper2",
    "svg",
    "baseline2",
    "frame4",
    "frame5",
    "frame6",
    "formWrapper",
    "loginForm"
  ],
  imageWrapper2: [
    "imageWrapper2",
    "logoWrapper2",
    "svg",
    "baseline2",
    "frame4",
    "frame5",
    "frame6"
  ],
  logoWrapper2: [
    "logoWrapper2",
    "svg",
    "baseline2",
    "frame4",
    "frame5",
    "frame6"
  ],
  svg: ["svg"],
  baseline2: ["baseline2", "frame4", "frame5", "frame6"],
  frame4: ["frame4"],
  frame5: ["frame5"],
  frame6: ["frame6"],
  formWrapper: ["formWrapper", "loginForm"],
  loginForm: ["loginForm"],
  pageLoader: ["pageLoader"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  connexion: "div";
  signIn: "div";
  imageWrapper2: "div";
  logoWrapper2: "div";
  svg: "svg";
  baseline2: "div";
  frame4: "div";
  frame5: "div";
  frame6: "div";
  formWrapper: "div";
  loginForm: typeof Login;
  pageLoader: typeof PageLoader;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConnexion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConnexion__VariantsArgs;
    args?: PlasmicConnexion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConnexion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConnexion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicConnexion__ArgProps,
          internalVariantPropNames: PlasmicConnexion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicConnexion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "connexion") {
    func.displayName = "PlasmicConnexion";
  } else {
    func.displayName = `PlasmicConnexion.${nodeName}`;
  }
  return func;
}

export const PlasmicConnexion = Object.assign(
  // Top-level PlasmicConnexion renders the root element
  makeNodeComponent("connexion"),
  {
    // Helper components rendering sub-elements
    signIn: makeNodeComponent("signIn"),
    imageWrapper2: makeNodeComponent("imageWrapper2"),
    logoWrapper2: makeNodeComponent("logoWrapper2"),
    svg: makeNodeComponent("svg"),
    baseline2: makeNodeComponent("baseline2"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    formWrapper: makeNodeComponent("formWrapper"),
    loginForm: makeNodeComponent("loginForm"),
    pageLoader: makeNodeComponent("pageLoader"),

    // Metadata about props expected for PlasmicConnexion
    internalVariantProps: PlasmicConnexion__VariantProps,
    internalArgProps: PlasmicConnexion__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Connexion",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConnexion;
/* prettier-ignore-end */
