/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: _xSIsI4MUaab

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import { DataGridV2 } from "../../others/DataGridV2/DataGridV2"; // plasmic-import: iL_5-0entnZc/codeComponent
import LoadingComponent from "../../LoadingComponent"; // plasmic-import: H7nb8l13ZEyx/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { Notation } from "../../../plasmic-library/others/Notation/Notation"; // plasmic-import: z82NxL6AqE3T/codeComponent
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import Button7 from "../../Button7"; // plasmic-import: 3oYr7EcSqEVK/component
import MobileNavbarBottomCompany from "../../MobileNavbarBottomCompany"; // plasmic-import: gAnwjyfMiBe9/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicCandidaturesEmployeur.module.css"; // plasmic-import: _xSIsI4MUaab/css

import IconPhBriefcaseIcon from "./icons/PlasmicIcon__IconPhBriefcase"; // plasmic-import: E-c3RGwvaig6/icon
import IconPhFileTextIcon from "./icons/PlasmicIcon__IconPhFileText"; // plasmic-import: FeEx4DkPe8hp/icon
import IconPhClockCountdownIcon from "./icons/PlasmicIcon__IconPhClockCountdown"; // plasmic-import: ZcpjJL-rRIkk/icon
import IconPhClockIcon from "./icons/PlasmicIcon__IconPhClock"; // plasmic-import: vCpr2sLhwGJi/icon
import IconPhCoinsLightIcon from "./icons/PlasmicIcon__IconPhCoinsLight"; // plasmic-import: _nES3m4j5H0g/icon
import IconPhOfficeChairIcon from "./icons/PlasmicIcon__IconPhOfficeChair"; // plasmic-import: bLcbhEnKY1XN/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import AlertCircle2Icon from "./icons/PlasmicIcon__AlertCircle2"; // plasmic-import: q4XkvLtjrRlS/icon

createPlasmicElementProxy;

export type PlasmicCandidaturesEmployeur__VariantMembers = {};
export type PlasmicCandidaturesEmployeur__VariantsArgs = {};
type VariantPropType = keyof PlasmicCandidaturesEmployeur__VariantsArgs;
export const PlasmicCandidaturesEmployeur__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCandidaturesEmployeur__ArgsType = {};
type ArgPropType = keyof PlasmicCandidaturesEmployeur__ArgsType;
export const PlasmicCandidaturesEmployeur__ArgProps = new Array<ArgPropType>();

export type PlasmicCandidaturesEmployeur__OverridesType = {
  root?: Flex__<"div">;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  sidebar?: Flex__<typeof Sidebar>;
  main?: Flex__<"main">;
  heading3?: Flex__<"div">;
  infos?: Flex__<"div">;
  sector?: Flex__<"div">;
  contract?: Flex__<"div">;
  avaibility?: Flex__<"div">;
  hours?: Flex__<"div">;
  salary?: Flex__<"div">;
  workMode?: Flex__<"div">;
  heading2?: Flex__<"div">;
  contract2?: Flex__<"div">;
  applications?: Flex__<"div">;
  dataGridV2?: Flex__<typeof DataGridV2>;
  loadingComponent?: Flex__<typeof LoadingComponent>;
  notation?: Flex__<typeof Modal>;
  h2?: Flex__<"h2">;
  lettreDeMotivation?: Flex__<typeof Modal>;
  cv?: Flex__<typeof Modal>;
  successsApplications?: Flex__<typeof Modal>;
  confirmRejectModal?: Flex__<typeof Modal>;
  h3?: Flex__<"h3">;
  modal2?: Flex__<"div">;
  content?: Flex__<"div">;
  featuredIcon?: Flex__<"div">;
  textAndSupportingText?: Flex__<"div">;
  text?: Flex__<"div">;
  supportingText?: Flex__<"div">;
  frame1437254298?: Flex__<"div">;
  button3?: Flex__<typeof Button7>;
  button4?: Flex__<typeof Button7>;
  mobileNavbarBottomCompany?: Flex__<typeof MobileNavbarBottomCompany>;
};

export interface DefaultCandidaturesEmployeurProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCandidaturesEmployeur__RenderFunc(props: {
  variants: PlasmicCandidaturesEmployeur__VariantsArgs;
  args: PlasmicCandidaturesEmployeur__ArgsType;
  overrides: PlasmicCandidaturesEmployeur__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pageChange",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "cv.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lettreDeMotivation.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "currentCvUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentLmUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentJaId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "successsApplications.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "currentCandidat",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "notation.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "ponctualite",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "respect",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "prestation",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "currentProfilePhoto",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentUId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "confirmRejectModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dataObjByCandidateId",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "sidebar.disableLinks",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sidebar.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "employer"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    empGetJobapplicationsByJobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "40ceca61-c508-458b-a499-2597a94b9650",
        userArgs: {
          query: [$ctx.params.job_id]
        },
        cacheKey: `plasmic.$.40ceca61-c508-458b-a499-2597a94b9650.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    adminGetCandidatures: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "2f7b34e5-91d1-4f7a-abab-21d56504b2bb",
        userArgs: {
          filters: [$ctx.params.job_id]
        },
        cacheKey: `plasmic.$.2f7b34e5-91d1-4f7a-abab-21d56504b2bb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJob: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "ee28eb43-311c-48b0-8608-c2b16a5541d0",
        userArgs: {
          query: [$ctx.params.job_id]
        },
        cacheKey: `plasmic.$.ee28eb43-311c-48b0-8608-c2b16a5541d0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "7b2907af-2c56-4217-809e-0a1733ab6bd8",
        userArgs: {
          path: [$state.currentUId + "/" + $state.currentProfilePhoto]
        },
        cacheKey: `plasmic.$.7b2907af-2c56-4217-809e-0a1733ab6bd8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUserAccepted: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "4ae278c6-a8be-443b-9c64-77eed0f3bd33",
        userArgs: {
          query: [$ctx.params.job_id]
        },
        cacheKey: `plasmic.$.4ae278c6-a8be-443b-9c64-77eed0f3bd33.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicCandidaturesEmployeur.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicCandidaturesEmployeur.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicCandidaturesEmployeur.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
            disableLinks={generateStateValueProp($state, [
              "sidebar",
              "disableLinks"
            ])}
            onDisableLinksChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebar",
                "disableLinks"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sidebar", "role"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, ["sidebar", "role"])}
          />

          <main
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__rl1Ro)}>
              <div
                data-plasmic-name={"heading3"}
                data-plasmic-override={overrides.heading3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.heading3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.getJob.data[0].title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Les candidatures";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"infos"}
                data-plasmic-override={overrides.infos}
                className={classNames(projectcss.all, sty.infos)}
              >
                <div
                  data-plasmic-name={"sector"}
                  data-plasmic-override={overrides.sector}
                  className={classNames(projectcss.all, sty.sector)}
                >
                  <IconPhBriefcaseIcon
                    className={classNames(projectcss.all, sty.svg___7TdgI)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hqvCv
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getJob.data[0].sector_activity;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"contract"}
                  data-plasmic-override={overrides.contract}
                  className={classNames(projectcss.all, sty.contract)}
                >
                  <IconPhFileTextIcon
                    className={classNames(projectcss.all, sty.svg__kyUjm)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wUq4R
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getJob.data[0].contract_type;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"avaibility"}
                  data-plasmic-override={overrides.avaibility}
                  className={classNames(projectcss.all, sty.avaibility)}
                >
                  <IconPhClockCountdownIcon
                    className={classNames(projectcss.all, sty.svg__pgDyr)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tKlE
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getJob.data[0].availability_status;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"hours"}
                  data-plasmic-override={overrides.hours}
                  className={classNames(projectcss.all, sty.hours)}
                >
                  <IconPhClockIcon
                    className={classNames(projectcss.all, sty.svg__wmyRf)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kDmnp
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getJob.data[0].working_time;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"salary"}
                  data-plasmic-override={overrides.salary}
                  className={classNames(projectcss.all, sty.salary)}
                >
                  <IconPhCoinsLightIcon
                    className={classNames(projectcss.all, sty.svg__ykBk)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wjMf
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getJob.data[0].salary;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"workMode"}
                  data-plasmic-override={overrides.workMode}
                  className={classNames(projectcss.all, sty.workMode)}
                >
                  <IconPhOfficeChairIcon
                    className={classNames(projectcss.all, sty.svg__cqSqA)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__axoez
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getJob.data[0].work_mode;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__eGc2W)}
                color={"white"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cgiuI
                    )}
                  >
                    {"retour"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["goToOffreEmployeur"] = true
                    ? (() => {
                        const actionArgs = { destination: `/offre-employeur` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToOffreEmployeur"] != null &&
                    typeof $steps["goToOffreEmployeur"] === "object" &&
                    typeof $steps["goToOffreEmployeur"].then === "function"
                  ) {
                    $steps["goToOffreEmployeur"] = await $steps[
                      "goToOffreEmployeur"
                    ];
                  }
                }}
                type={"bordered"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__suBdg)}>
              <div className={classNames(projectcss.all, sty.freeBox__nm58L)}>
                <div
                  data-plasmic-name={"heading2"}
                  data-plasmic-override={overrides.heading2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.heading2
                  )}
                >
                  {"Les candidatures "}
                </div>
                <div
                  data-plasmic-name={"contract2"}
                  data-plasmic-override={overrides.contract2}
                  className={classNames(projectcss.all, sty.contract2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cv39Z
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `${$queries.empGetJobapplicationsByJobOffers.data.length} candidatures`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "candidatures";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"applications"}
                data-plasmic-override={overrides.applications}
                className={classNames(projectcss.all, sty.applications)}
              >
                <DataGridV2
                  data-plasmic-name={"dataGridV2"}
                  data-plasmic-override={overrides.dataGridV2}
                  className={classNames("__wab_instance", sty.dataGridV2)}
                  columnLabels={{
                    nom_du_candidat: "Nom du candidat",
                    note: "Note",
                    cv_nom: "CV",
                    lm_nom: "Lettre de motivation",
                    date_de_candidature: "Postul\u00e9 le",
                    status: "Statut",
                    email: "Email"
                  }}
                  currentPage={(() => {
                    try {
                      return $state.pageChange;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 1;
                      }
                      throw e;
                    }
                  })()}
                  emptyStateMessage={"Aucune candidatures..."}
                  isLoading={false}
                  loadingComponent={null}
                  onAccept={async (taskId, task) => {
                    const $steps = {};

                    $steps["updateId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentJaId"]
                            },
                            operation: 0,
                            value: taskId
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateId"] != null &&
                      typeof $steps["updateId"] === "object" &&
                      typeof $steps["updateId"].then === "function"
                    ) {
                      $steps["updateId"] = await $steps["updateId"];
                    }

                    $steps["updateObj"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dataObjByCandidateId"]
                            },
                            operation: 0,
                            value:
                              $queries.empGetJobapplicationsByJobOffers.data.filter(
                                app => app.id == $state.currentJaId
                              )
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateObj"] != null &&
                      typeof $steps["updateObj"] === "object" &&
                      typeof $steps["updateObj"].then === "function"
                    ) {
                      $steps["updateObj"] = await $steps["updateObj"];
                    }

                    $steps["updateCurrentCandidat"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentCandidat"]
                            },
                            operation: 0,
                            value: task.nom_du_candidat
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentCandidat"] != null &&
                      typeof $steps["updateCurrentCandidat"] === "object" &&
                      typeof $steps["updateCurrentCandidat"].then === "function"
                    ) {
                      $steps["updateCurrentCandidat"] = await $steps[
                        "updateCurrentCandidat"
                      ];
                    }

                    $steps["updateCurrentProfilePhoto"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentProfilePhoto"]
                            },
                            operation: 0,
                            value: task.profile_photo
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentProfilePhoto"] != null &&
                      typeof $steps["updateCurrentProfilePhoto"] === "object" &&
                      typeof $steps["updateCurrentProfilePhoto"].then ===
                        "function"
                    ) {
                      $steps["updateCurrentProfilePhoto"] = await $steps[
                        "updateCurrentProfilePhoto"
                      ];
                    }

                    $steps["updateCurrentUserId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentUId"]
                            },
                            operation: 0,
                            value: task.user_id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentUserId"] != null &&
                      typeof $steps["updateCurrentUserId"] === "object" &&
                      typeof $steps["updateCurrentUserId"].then === "function"
                    ) {
                      $steps["updateCurrentUserId"] = await $steps[
                        "updateCurrentUserId"
                      ];
                    }

                    $steps["postgresUpdateById"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["successsApplications", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateById"] != null &&
                      typeof $steps["postgresUpdateById"] === "object" &&
                      typeof $steps["postgresUpdateById"].then === "function"
                    ) {
                      $steps["postgresUpdateById"] = await $steps[
                        "postgresUpdateById"
                      ];
                    }
                  }}
                  onPageChange={async page => {
                    const $steps = {};

                    $steps["updatePageChange"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pageChange"]
                            },
                            operation: 0,
                            value: ($state.pageChange = page)
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePageChange"] != null &&
                      typeof $steps["updatePageChange"] === "object" &&
                      typeof $steps["updatePageChange"].then === "function"
                    ) {
                      $steps["updatePageChange"] = await $steps[
                        "updatePageChange"
                      ];
                    }
                  }}
                  onReject={async taskId => {
                    const $steps = {};

                    $steps["updateState"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentJaId"]
                            },
                            operation: 0,
                            value: taskId
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateState"] != null &&
                      typeof $steps["updateState"] === "object" &&
                      typeof $steps["updateState"].then === "function"
                    ) {
                      $steps["updateState"] = await $steps["updateState"];
                    }

                    $steps["updateObj"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dataObjByCandidateId"]
                            },
                            operation: 0,
                            value:
                              $queries.empGetJobapplicationsByJobOffers.data.filter(
                                app => app.id == $state.currentJaId
                              )
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateObj"] != null &&
                      typeof $steps["updateObj"] === "object" &&
                      typeof $steps["updateObj"].then === "function"
                    ) {
                      $steps["updateObj"] = await $steps["updateObj"];
                    }

                    $steps["openModal"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["confirmRejectModal", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["openModal"] != null &&
                      typeof $steps["openModal"] === "object" &&
                      typeof $steps["openModal"].then === "function"
                    ) {
                      $steps["openModal"] = await $steps["openModal"];
                    }
                  }}
                  onViewCV={async (fileUrl, taskId) => {
                    const $steps = {};

                    $steps["updateCurrentJaId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentJaId"]
                            },
                            operation: 0,
                            value: taskId
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentJaId"] != null &&
                      typeof $steps["updateCurrentJaId"] === "object" &&
                      typeof $steps["updateCurrentJaId"].then === "function"
                    ) {
                      $steps["updateCurrentJaId"] = await $steps[
                        "updateCurrentJaId"
                      ];
                    }

                    $steps["supabaseGetSignedFileUrl"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "rtEg85U6Vbyi94cRAe93i7",
                              opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
                              userArgs: {
                                path: [
                                  $queries.empGetJobapplicationsByJobOffers.data.find(
                                    ja => ja.id === $state.currentJaId
                                  )?.user_id +
                                    "/" +
                                    $queries.empGetJobapplicationsByJobOffers.data.find(
                                      ja => ja.id === $state.currentJaId
                                    )?.cv_nom
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: null,
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["supabaseGetSignedFileUrl"] != null &&
                      typeof $steps["supabaseGetSignedFileUrl"] === "object" &&
                      typeof $steps["supabaseGetSignedFileUrl"].then ===
                        "function"
                    ) {
                      $steps["supabaseGetSignedFileUrl"] = await $steps[
                        "supabaseGetSignedFileUrl"
                      ];
                    }

                    $steps["updateCurrentCvUrl"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentCvUrl"]
                            },
                            operation: 0,
                            value: $steps.supabaseGetSignedFileUrl.signedUrl
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentCvUrl"] != null &&
                      typeof $steps["updateCurrentCvUrl"] === "object" &&
                      typeof $steps["updateCurrentCvUrl"].then === "function"
                    ) {
                      $steps["updateCurrentCvUrl"] = await $steps[
                        "updateCurrentCvUrl"
                      ];
                    }

                    $steps["updateCvIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["cv", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCvIsOpen"] != null &&
                      typeof $steps["updateCvIsOpen"] === "object" &&
                      typeof $steps["updateCvIsOpen"].then === "function"
                    ) {
                      $steps["updateCvIsOpen"] = await $steps["updateCvIsOpen"];
                    }
                  }}
                  onViewLM={async (fileUrl, taskId) => {
                    const $steps = {};

                    $steps["updateCurrentJaId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentJaId"]
                            },
                            operation: 0,
                            value: taskId
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentJaId"] != null &&
                      typeof $steps["updateCurrentJaId"] === "object" &&
                      typeof $steps["updateCurrentJaId"].then === "function"
                    ) {
                      $steps["updateCurrentJaId"] = await $steps[
                        "updateCurrentJaId"
                      ];
                    }

                    $steps["supabaseGetSignedFileUrl"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "rtEg85U6Vbyi94cRAe93i7",
                              opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
                              userArgs: {
                                path: [
                                  $queries.empGetJobapplicationsByJobOffers.data.find(
                                    ja => ja.id === $state.currentJaId
                                  )?.user_id +
                                    "/" +
                                    $queries.empGetJobapplicationsByJobOffers.data.find(
                                      ja => ja.id === $state.currentJaId
                                    )?.lm_nom
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: null,
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["supabaseGetSignedFileUrl"] != null &&
                      typeof $steps["supabaseGetSignedFileUrl"] === "object" &&
                      typeof $steps["supabaseGetSignedFileUrl"].then ===
                        "function"
                    ) {
                      $steps["supabaseGetSignedFileUrl"] = await $steps[
                        "supabaseGetSignedFileUrl"
                      ];
                    }

                    $steps["updateCurrentLmUrl"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentLmUrl"]
                            },
                            operation: 0,
                            value: $steps.supabaseGetSignedFileUrl.signedUrl
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentLmUrl"] != null &&
                      typeof $steps["updateCurrentLmUrl"] === "object" &&
                      typeof $steps["updateCurrentLmUrl"].then === "function"
                    ) {
                      $steps["updateCurrentLmUrl"] = await $steps[
                        "updateCurrentLmUrl"
                      ];
                    }

                    $steps["updateLettreDeMotivationIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["lettreDeMotivation", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLettreDeMotivationIsOpen"] != null &&
                      typeof $steps["updateLettreDeMotivationIsOpen"] ===
                        "object" &&
                      typeof $steps["updateLettreDeMotivationIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateLettreDeMotivationIsOpen"] = await $steps[
                        "updateLettreDeMotivationIsOpen"
                      ];
                    }
                  }}
                  pageSize={
                    hasVariant(globalVariants, "screen", "mobileOnly") ? 5 : 4
                  }
                  showActionsColumn={(() => {
                    try {
                      return !$queries.empGetJobapplicationsByJobOffers.data.some(
                        application => application.status === "accepte"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  statusConfig={{
                    en_attente: { label: "En attente", color: "#E6E6E6" },
                    accepte: { label: "Accept\u00e9e", color: "#f1fbf3" },
                    refuse: { label: "Refus\u00e9e", color: "#fef3f2" }
                  }}
                  tasks={(() => {
                    try {
                      return $queries.empGetJobapplicationsByJobOffers.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  theme={{
                    headerBgColor: "#E6e6e6",
                    rowBgColor: "#ffffff",
                    hoverBgColor: "#f8f8f8",
                    borderColor: "#E5E7EB",
                    textColor: "#666666"
                  }}
                  visibleColumns={[
                    "nom_du_candidat",
                    "note",
                    "cv_nom",
                    "lm_nom",
                    "date_de_candidature",
                    "status"
                  ]}
                />

                {(() => {
                  try {
                    return $queries.adminGetCandidatures.isLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <LoadingComponent
                    data-plasmic-name={"loadingComponent"}
                    data-plasmic-override={overrides.loadingComponent}
                    className={classNames(
                      "__wab_instance",
                      sty.loadingComponent
                    )}
                  />
                ) : null}
              </div>
            </div>
            {(() => {
              try {
                return $ctx.query.openModal === "rating";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Modal
                data-plasmic-name={"notation"}
                data-plasmic-override={overrides.notation}
                className={classNames("__wab_instance", sty.notation)}
                closeOnBackdropClick={false}
                content={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4KFsX)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lIc7N
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h2
                            data-plasmic-name={"h2"}
                            data-plasmic-override={overrides.h2}
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2
                            )}
                          >
                            {"Recommanderiez-vous ce collaborateur?"}
                          </h2>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n0Q5Y
                      )}
                    >
                      {
                        "Notez votre collaborateur sur 3 crit\u00e8res. Cette notation permettra de le recommander \u00e0 d\u2019autres employeurs."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9Jb6Q
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "Pour le poste de " +
                              $queries.getJob.data[0].title
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Pour le poste de  ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3M0Nd
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ke9Hs)}
                        displayHeight={"32px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"32px"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return $queries.getPp.signedUrl;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mxc5Z
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.getUserAccepted.data[0].name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__meJhM)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Zt4J
                        )}
                      >
                        {"Ponctualit\u00e9"}
                      </div>
                      <Notation
                        className={
                          "" +
                          " " +
                          classNames(
                            "__wab_instance",
                            sty.notationEtoiles__mEv21
                          )
                        }
                        enableHover={true}
                        onChange={async value => {
                          const $steps = {};

                          $steps["updatePonctualite"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["ponctualite"]
                                  },
                                  operation: 0,
                                  value: value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePonctualite"] != null &&
                            typeof $steps["updatePonctualite"] === "object" &&
                            typeof $steps["updatePonctualite"].then ===
                              "function"
                          ) {
                            $steps["updatePonctualite"] = await $steps[
                              "updatePonctualite"
                            ];
                          }
                        }}
                        value={(() => {
                          try {
                            return $state.ponctualite;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qP3Qe
                        )}
                      >
                        {"Respect"}
                      </div>
                      <Notation
                        className={
                          "" +
                          " " +
                          classNames(
                            "__wab_instance",
                            sty.notationEtoiles__lGgib
                          )
                        }
                        enableHover={true}
                        onChange={async value => {
                          const $steps = {};

                          $steps["updateRespect"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["respect"]
                                  },
                                  operation: 0,
                                  value: value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateRespect"] != null &&
                            typeof $steps["updateRespect"] === "object" &&
                            typeof $steps["updateRespect"].then === "function"
                          ) {
                            $steps["updateRespect"] = await $steps[
                              "updateRespect"
                            ];
                          }
                        }}
                        value={(() => {
                          try {
                            return $state.respect;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zFecQ
                        )}
                      >
                        {"Prestation"}
                      </div>
                      <Notation
                        className={
                          "" +
                          " " +
                          classNames(
                            "__wab_instance",
                            sty.notationEtoiles__ik66B
                          )
                        }
                        enableHover={true}
                        onChange={async value => {
                          const $steps = {};

                          $steps["updatePrestation"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["prestation"]
                                  },
                                  operation: 0,
                                  value: value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePrestation"] != null &&
                            typeof $steps["updatePrestation"] === "object" &&
                            typeof $steps["updatePrestation"].then ===
                              "function"
                          ) {
                            $steps["updatePrestation"] = await $steps[
                              "updatePrestation"
                            ];
                          }
                        }}
                        value={(() => {
                          try {
                            return $state.prestation;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 0;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__kb2Tz
                      )}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__oWH6)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hmnKv
                          )}
                        >
                          {"Confirmer"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = !(
                          $state.ponctualite !== 0 &&
                          $state.prestation !== 0 &&
                          $state.respect !== 0
                        )
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "Veuillez saisir une note sup\u00e9rieure \u00e0 0."
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["postgresUpdateById"] =
                          $state.ponctualite !== 0 &&
                          $state.prestation !== 0 &&
                          $state.respect !== 0
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                    opId: "222b55c3-f877-4b08-be4e-cb6679641360",
                                    userArgs: {
                                      keys: [
                                        $queries.getUserAccepted.data[0]
                                          .job_application_id
                                      ],

                                      variables: [
                                        ($state.ponctualite +
                                          $state.respect +
                                          $state.prestation) /
                                          3,

                                        $state.ponctualite,

                                        $state.prestation,

                                        $state.respect,

                                        $state.ponctualite,

                                        $state.prestation
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [
                                      "40ceca61-c508-458b-a499-2597a94b9650"
                                    ],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }

                        $steps["goToCandidaturesEmployeur"] =
                          $state.ponctualite !== 0 &&
                          $state.prestation !== 0 &&
                          $state.respect !== 0
                            ? (() => {
                                const actionArgs = {
                                  destination: `/candidatures-employeur/${(() => {
                                    try {
                                      return $ctx.params.job_id;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}`
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["goToCandidaturesEmployeur"] != null &&
                          typeof $steps["goToCandidaturesEmployeur"] ===
                            "object" &&
                          typeof $steps["goToCandidaturesEmployeur"].then ===
                            "function"
                        ) {
                          $steps["goToCandidaturesEmployeur"] = await $steps[
                            "goToCandidaturesEmployeur"
                          ];
                        }
                      }}
                    />
                  </div>
                }
                footer={null}
                heading={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__wd5He)}
                    displayHeight={"17px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"17px"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateNotationIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["notation", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateNotationIsOpen"] != null &&
                        typeof $steps["updateNotationIsOpen"] === "object" &&
                        typeof $steps["updateNotationIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateNotationIsOpen"] = await $steps[
                          "updateNotationIsOpen"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/jam_production_🚀/images/close3.svg",
                      fullWidth: 17,
                      fullHeight: 17,
                      aspectRatio: 1
                    }}
                  />
                }
                isOpen={generateStateValueProp($state, ["notation", "isOpen"])}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "notation",
                    "isOpen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }

                  (async val => {
                    const $steps = {};

                    $steps["updateCurrentUId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentUId"]
                            },
                            operation: 0,
                            value: $queries.getUserAccepted.data[0].user_id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentUId"] != null &&
                      typeof $steps["updateCurrentUId"] === "object" &&
                      typeof $steps["updateCurrentUId"].then === "function"
                    ) {
                      $steps["updateCurrentUId"] = await $steps[
                        "updateCurrentUId"
                      ];
                    }

                    $steps["updateCurrentProfilePhoto"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentProfilePhoto"]
                            },
                            operation: 0,
                            value:
                              $queries.getUserAccepted.data[0].profile_photo
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentProfilePhoto"] != null &&
                      typeof $steps["updateCurrentProfilePhoto"] === "object" &&
                      typeof $steps["updateCurrentProfilePhoto"].then ===
                        "function"
                    ) {
                      $steps["updateCurrentProfilePhoto"] = await $steps[
                        "updateCurrentProfilePhoto"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                showFooter={false}
                showHeader={true}
                trigger={null}
              />
            ) : null}
            <Modal
              data-plasmic-name={"lettreDeMotivation"}
              data-plasmic-override={overrides.lettreDeMotivation}
              className={classNames("__wab_instance", sty.lettreDeMotivation)}
              content={
                <div className={classNames(projectcss.all, sty.freeBox__s9LSt)}>
                  <Iframe
                    className={classNames("__wab_instance", sty.iframe__qSahi)}
                    preview={true}
                    src={(() => {
                      try {
                        return $state.currentLmUrl;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
                    useHtml={false}
                  />
                </div>
              }
              footer={
                <div className={classNames(projectcss.all, sty.freeBox__vhcUd)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__cjLQ)}
                    color={"white"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__p4Hpf
                        )}
                      >
                        {"retour"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["lettreDeMotivation", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalIsOpen"] != null &&
                        typeof $steps["updateModalIsOpen"] === "object" &&
                        typeof $steps["updateModalIsOpen"].then === "function"
                      ) {
                        $steps["updateModalIsOpen"] = await $steps[
                          "updateModalIsOpen"
                        ];
                      }
                    }}
                    type={"bordered"}
                  />
                </div>
              }
              heading={null}
              isOpen={generateStateValueProp($state, [
                "lettreDeMotivation",
                "isOpen"
              ])}
              noTrigger={true}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "lettreDeMotivation",
                  "isOpen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              trigger={null}
            />

            <Modal
              data-plasmic-name={"cv"}
              data-plasmic-override={overrides.cv}
              className={classNames("__wab_instance", sty.cv)}
              content={
                <div className={classNames(projectcss.all, sty.freeBox__oCDv5)}>
                  <Iframe
                    className={classNames("__wab_instance", sty.iframe__mv5Qg)}
                    preview={true}
                    src={(() => {
                      try {
                        return $state.currentCvUrl;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
                    useHtml={false}
                  />
                </div>
              }
              footer={
                <div className={classNames(projectcss.all, sty.freeBox__fdP5)}>
                  <Button
                    className={classNames("__wab_instance", sty.button___64UG)}
                    color={"white"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hEx5B
                        )}
                      >
                        {"retour"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["cv", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalIsOpen"] != null &&
                        typeof $steps["updateModalIsOpen"] === "object" &&
                        typeof $steps["updateModalIsOpen"].then === "function"
                      ) {
                        $steps["updateModalIsOpen"] = await $steps[
                          "updateModalIsOpen"
                        ];
                      }

                      $steps["refreshData"] = true
                        ? (() => {
                            const actionArgs = { queryInvalidation: [] };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }

                      $steps["updateCurrentCvUrl"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentCvUrl"]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentCvUrl"] != null &&
                        typeof $steps["updateCurrentCvUrl"] === "object" &&
                        typeof $steps["updateCurrentCvUrl"].then === "function"
                      ) {
                        $steps["updateCurrentCvUrl"] = await $steps[
                          "updateCurrentCvUrl"
                        ];
                      }
                    }}
                    type={"bordered"}
                  />
                </div>
              }
              heading={null}
              isOpen={generateStateValueProp($state, ["cv", "isOpen"])}
              noTrigger={true}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["cv", "isOpen"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showFooter={true}
              showHeader={false}
              trigger={null}
            />
          </main>
          <Modal
            data-plasmic-name={"successsApplications"}
            data-plasmic-override={overrides.successsApplications}
            className={classNames("__wab_instance", sty.successsApplications)}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__oHhNq)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bly1P
                  )}
                >
                  {"F\u00e9licitation !"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wgDc9
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Vous avez recruté " +
                          $state.currentCandidat +
                          " pour le poste de " +
                          $queries.getJob.data[0].title
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Vous avez recrut\u00e9 pour le poste de ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__yEt5Q)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___8UbGx)}
                    displayHeight={"32px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"32px"}
                    height={``}
                    loading={"lazy"}
                    src={$queries.getPp.signedUrl}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__km9Zk
                    )}
                  >
                    <React.Fragment>{$state.currentCandidat}</React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mxjA
                  )}
                >
                  {
                    "En confirmant votre recrutement, \nl'offre deviendra automatiquement indisponible\n pour les autres candidats."
                  }
                </div>
              </div>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__w4Lt1)}>
                <Button
                  className={classNames("__wab_instance", sty.button__cXhF)}
                  end={
                    <GroupIcon
                      className={classNames(projectcss.all, sty.svg___1LsVi)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uacTo
                      )}
                    >
                      {"confirmer"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateDb"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "14f7a3bf-dd7f-45ec-83c9-7cfb463f22b3",
                              userArgs: {
                                keys: [$state.currentJaId]
                              },
                              cacheKey: null,
                              invalidatedKeys: [
                                "40ceca61-c508-458b-a499-2597a94b9650"
                              ],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDb"] != null &&
                      typeof $steps["updateDb"] === "object" &&
                      typeof $steps["updateDb"].then === "function"
                    ) {
                      $steps["updateDb"] = await $steps["updateDb"];
                    }

                    $steps["sendMail"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
                              opId: "ac3aeb59-a5a8-4309-9807-433a1356e04e",
                              userArgs: {
                                body: [
                                  {
                                    to: `${$state.dataObjByCandidateId[0].email}`,
                                    template: "candidateSelected",
                                    subject:
                                      "Bonne nouvelle ! Tu as été retenue \uD83C\uDF89",
                                    params: {
                                      firstName: `${$state.dataObjByCandidateId[0].nom_du_candidat}`,
                                      jobTitle: `${$state.dataObjByCandidateId[0].titre_du_poste}`,
                                      companyName: `${$state.dataObjByCandidateId[0].nom_entreprise}`,
                                      offersUrl: "https://job-around-me.com/"
                                    }
                                  }
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: [
                                "40ceca61-c508-458b-a499-2597a94b9650"
                              ],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["sendMail"] != null &&
                      typeof $steps["sendMail"] === "object" &&
                      typeof $steps["sendMail"].then === "function"
                    ) {
                      $steps["sendMail"] = await $steps["sendMail"];
                    }

                    $steps["closeModal"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["successsApplications", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["closeModal"] != null &&
                      typeof $steps["closeModal"] === "object" &&
                      typeof $steps["closeModal"].then === "function"
                    ) {
                      $steps["closeModal"] = await $steps["closeModal"];
                    }
                  }}
                />
              </div>
            }
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zmnFw)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["clearId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentJaId"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["clearId"] != null &&
                      typeof $steps["clearId"] === "object" &&
                      typeof $steps["clearId"].then === "function"
                    ) {
                      $steps["clearId"] = await $steps["clearId"];
                    }

                    $steps["clearObj"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dataObjByCandidateId"]
                            },
                            operation: 0,
                            value: {}
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["clearObj"] != null &&
                      typeof $steps["clearObj"] === "object" &&
                      typeof $steps["clearObj"].then === "function"
                    ) {
                      $steps["clearObj"] = await $steps["clearObj"];
                    }

                    $steps["closeModal"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["successsApplications", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["closeModal"] != null &&
                      typeof $steps["closeModal"] === "object" &&
                      typeof $steps["closeModal"].then === "function"
                    ) {
                      $steps["closeModal"] = await $steps["closeModal"];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, [
              "successsApplications",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "successsApplications",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            trigger={null}
          />

          <Modal
            data-plasmic-name={"confirmRejectModal"}
            data-plasmic-override={overrides.confirmRejectModal}
            className={classNames("__wab_instance", sty.confirmRejectModal)}
            content={
              <div
                data-plasmic-name={"modal2"}
                data-plasmic-override={overrides.modal2}
                className={classNames(projectcss.all, sty.modal2)}
              >
                <div
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  className={classNames(projectcss.all, sty.content)}
                >
                  <div
                    data-plasmic-name={"featuredIcon"}
                    data-plasmic-override={overrides.featuredIcon}
                    className={classNames(projectcss.all, sty.featuredIcon)}
                  >
                    <AlertCircle2Icon
                      className={classNames(projectcss.all, sty.svg__dmKf)}
                      role={"img"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"textAndSupportingText"}
                    data-plasmic-override={overrides.textAndSupportingText}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText
                    )}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {
                        "\u00cates-vous s\u00fbr(e) de vouloir refuser \ncette candidature ?"
                      }
                    </div>
                    <div
                      data-plasmic-name={"supportingText"}
                      data-plasmic-override={overrides.supportingText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText
                      )}
                    >
                      {
                        "Cette action est irr\u00e9versible. \nLe ou la candidat\u00b7e en sera inform\u00e9\u00b7e par e\u2011mail."
                      }
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"frame1437254298"}
                  data-plasmic-override={overrides.frame1437254298}
                  className={classNames(projectcss.all, sty.frame1437254298)}
                >
                  <Button7
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    className={classNames("__wab_instance", sty.button3)}
                    color={"white"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mpJbu
                        )}
                      >
                        {"ANNULER"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["clearId"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentJaId"]
                              },
                              operation: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["clearId"] != null &&
                        typeof $steps["clearId"] === "object" &&
                        typeof $steps["clearId"].then === "function"
                      ) {
                        $steps["clearId"] = await $steps["clearId"];
                      }

                      $steps["clearObj"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dataObjByCandidateId"]
                              },
                              operation: 0,
                              value: {}
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["clearObj"] != null &&
                        typeof $steps["clearObj"] === "object" &&
                        typeof $steps["clearObj"].then === "function"
                      ) {
                        $steps["clearObj"] = await $steps["clearObj"];
                      }

                      $steps["closeModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["confirmRejectModal", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["closeModal"] != null &&
                        typeof $steps["closeModal"] === "object" &&
                        typeof $steps["closeModal"].then === "function"
                      ) {
                        $steps["closeModal"] = await $steps["closeModal"];
                      }
                    }}
                    size={"extraLarge"}
                    type={"bordered"}
                  />

                  <Button7
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames("__wab_instance", sty.button4)}
                    color={"errorDestructive"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vetv7
                        )}
                      >
                        {"REFUSER"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDb"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "fea000fb-7257-4c2a-a868-cec09ed68816",
                                userArgs: {
                                  keys: [$state.currentJaId]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDb"] != null &&
                        typeof $steps["updateDb"] === "object" &&
                        typeof $steps["updateDb"].then === "function"
                      ) {
                        $steps["updateDb"] = await $steps["updateDb"];
                      }

                      $steps["sendMail"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
                                opId: "fcf17976-4f7f-44b3-8083-e1bf6bb812dd",
                                userArgs: {
                                  body: [
                                    {
                                      to: `${$state.dataObjByCandidateId[0].email}`,
                                      template: "candidateRejection",
                                      subject:
                                        "Mise à jour concernant ta candidature",
                                      params: {
                                        firstName: `${$state.dataObjByCandidateId[0].nom_du_candidat}`,
                                        jobTitle: `${$state.dataObjByCandidateId[0].titre_du_poste}`,
                                        companyName: `${$state.dataObjByCandidateId[0].nom_entreprise}`,
                                        offersUrl: "https://job-around-me.com/"
                                      }
                                    }
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "40ceca61-c508-458b-a499-2597a94b9650"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["sendMail"] != null &&
                        typeof $steps["sendMail"] === "object" &&
                        typeof $steps["sendMail"].then === "function"
                      ) {
                        $steps["sendMail"] = await $steps["sendMail"];
                      }

                      $steps["closeModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["confirmRejectModal", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["closeModal"] != null &&
                        typeof $steps["closeModal"] === "object" &&
                        typeof $steps["closeModal"].then === "function"
                      ) {
                        $steps["closeModal"] = await $steps["closeModal"];
                      }
                    }}
                    size={"extraLarge"}
                  />
                </div>
              </div>
            }
            footer={null}
            heading={
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                {"Heading"}
              </h3>
            }
            isOpen={generateStateValueProp($state, [
              "confirmRejectModal",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "confirmRejectModal",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return $queries.empGetJobapplicationsByJobOffers.isLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <MobileNavbarBottomCompany
              data-plasmic-name={"mobileNavbarBottomCompany"}
              data-plasmic-override={overrides.mobileNavbarBottomCompany}
              className={classNames(
                "__wab_instance",
                sty.mobileNavbarBottomCompany
              )}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mobileNavbarTop",
    "sidebar",
    "main",
    "heading3",
    "infos",
    "sector",
    "contract",
    "avaibility",
    "hours",
    "salary",
    "workMode",
    "heading2",
    "contract2",
    "applications",
    "dataGridV2",
    "loadingComponent",
    "notation",
    "h2",
    "lettreDeMotivation",
    "cv",
    "successsApplications",
    "confirmRejectModal",
    "h3",
    "modal2",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame1437254298",
    "button3",
    "button4",
    "mobileNavbarBottomCompany"
  ],
  mobileNavbarTop: ["mobileNavbarTop"],
  sidebar: ["sidebar"],
  main: [
    "main",
    "heading3",
    "infos",
    "sector",
    "contract",
    "avaibility",
    "hours",
    "salary",
    "workMode",
    "heading2",
    "contract2",
    "applications",
    "dataGridV2",
    "loadingComponent",
    "notation",
    "h2",
    "lettreDeMotivation",
    "cv"
  ],
  heading3: ["heading3"],
  infos: [
    "infos",
    "sector",
    "contract",
    "avaibility",
    "hours",
    "salary",
    "workMode"
  ],
  sector: ["sector"],
  contract: ["contract"],
  avaibility: ["avaibility"],
  hours: ["hours"],
  salary: ["salary"],
  workMode: ["workMode"],
  heading2: ["heading2"],
  contract2: ["contract2"],
  applications: ["applications", "dataGridV2", "loadingComponent"],
  dataGridV2: ["dataGridV2"],
  loadingComponent: ["loadingComponent"],
  notation: ["notation", "h2"],
  h2: ["h2"],
  lettreDeMotivation: ["lettreDeMotivation"],
  cv: ["cv"],
  successsApplications: ["successsApplications"],
  confirmRejectModal: [
    "confirmRejectModal",
    "h3",
    "modal2",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame1437254298",
    "button3",
    "button4"
  ],
  h3: ["h3"],
  modal2: [
    "modal2",
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text",
    "supportingText",
    "frame1437254298",
    "button3",
    "button4"
  ],
  content: [
    "content",
    "featuredIcon",
    "textAndSupportingText",
    "text",
    "supportingText"
  ],
  featuredIcon: ["featuredIcon"],
  textAndSupportingText: ["textAndSupportingText", "text", "supportingText"],
  text: ["text"],
  supportingText: ["supportingText"],
  frame1437254298: ["frame1437254298", "button3", "button4"],
  button3: ["button3"],
  button4: ["button4"],
  mobileNavbarBottomCompany: ["mobileNavbarBottomCompany"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mobileNavbarTop: typeof MobileNavbarTop;
  sidebar: typeof Sidebar;
  main: "main";
  heading3: "div";
  infos: "div";
  sector: "div";
  contract: "div";
  avaibility: "div";
  hours: "div";
  salary: "div";
  workMode: "div";
  heading2: "div";
  contract2: "div";
  applications: "div";
  dataGridV2: typeof DataGridV2;
  loadingComponent: typeof LoadingComponent;
  notation: typeof Modal;
  h2: "h2";
  lettreDeMotivation: typeof Modal;
  cv: typeof Modal;
  successsApplications: typeof Modal;
  confirmRejectModal: typeof Modal;
  h3: "h3";
  modal2: "div";
  content: "div";
  featuredIcon: "div";
  textAndSupportingText: "div";
  text: "div";
  supportingText: "div";
  frame1437254298: "div";
  button3: typeof Button7;
  button4: typeof Button7;
  mobileNavbarBottomCompany: typeof MobileNavbarBottomCompany;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCandidaturesEmployeur__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCandidaturesEmployeur__VariantsArgs;
    args?: PlasmicCandidaturesEmployeur__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCandidaturesEmployeur__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCandidaturesEmployeur__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCandidaturesEmployeur__ArgProps,
          internalVariantPropNames: PlasmicCandidaturesEmployeur__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCandidaturesEmployeur__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCandidaturesEmployeur";
  } else {
    func.displayName = `PlasmicCandidaturesEmployeur.${nodeName}`;
  }
  return func;
}

export const PlasmicCandidaturesEmployeur = Object.assign(
  // Top-level PlasmicCandidaturesEmployeur renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    heading3: makeNodeComponent("heading3"),
    infos: makeNodeComponent("infos"),
    sector: makeNodeComponent("sector"),
    contract: makeNodeComponent("contract"),
    avaibility: makeNodeComponent("avaibility"),
    hours: makeNodeComponent("hours"),
    salary: makeNodeComponent("salary"),
    workMode: makeNodeComponent("workMode"),
    heading2: makeNodeComponent("heading2"),
    contract2: makeNodeComponent("contract2"),
    applications: makeNodeComponent("applications"),
    dataGridV2: makeNodeComponent("dataGridV2"),
    loadingComponent: makeNodeComponent("loadingComponent"),
    notation: makeNodeComponent("notation"),
    h2: makeNodeComponent("h2"),
    lettreDeMotivation: makeNodeComponent("lettreDeMotivation"),
    cv: makeNodeComponent("cv"),
    successsApplications: makeNodeComponent("successsApplications"),
    confirmRejectModal: makeNodeComponent("confirmRejectModal"),
    h3: makeNodeComponent("h3"),
    modal2: makeNodeComponent("modal2"),
    content: makeNodeComponent("content"),
    featuredIcon: makeNodeComponent("featuredIcon"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    text: makeNodeComponent("text"),
    supportingText: makeNodeComponent("supportingText"),
    frame1437254298: makeNodeComponent("frame1437254298"),
    button3: makeNodeComponent("button3"),
    button4: makeNodeComponent("button4"),
    mobileNavbarBottomCompany: makeNodeComponent("mobileNavbarBottomCompany"),

    // Metadata about props expected for PlasmicCandidaturesEmployeur
    internalVariantProps: PlasmicCandidaturesEmployeur__VariantProps,
    internalArgProps: PlasmicCandidaturesEmployeur__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Candidatures",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCandidaturesEmployeur;
/* prettier-ignore-end */
