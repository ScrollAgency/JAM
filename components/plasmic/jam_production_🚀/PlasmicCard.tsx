/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: 9MKR6AAbT8y6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Switch from "../../Switch"; // plasmic-import: 5AuMkYqOTdqa/component
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicCard.module.css"; // plasmic-import: 9MKR6AAbT8y6/css

import Dot3Icon from "./icons/PlasmicIcon__Dot3"; // plasmic-import: ccAgTXPIrKUq/icon
import Vector25Icon from "./icons/PlasmicIcon__Vector25"; // plasmic-import: _eubZzKq0NkT/icon
import ZapIcon from "./icons/PlasmicIcon__Zap"; // plasmic-import: c9TD4NnDdoCa/icon
import IconPhMapPinIcon from "./icons/PlasmicIcon__IconPhMapPin"; // plasmic-import: CAcfAl_W7CL5/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import PhBriefcaseIcon from "./icons/PlasmicIcon__PhBriefcase"; // plasmic-import: EdRddldiV5u0/icon
import PhFileText2Icon from "./icons/PlasmicIcon__PhFileText2"; // plasmic-import: dbjbAgK_hzNM/icon
import PhClockCountdown2Icon from "./icons/PlasmicIcon__PhClockCountdown2"; // plasmic-import: jfi-_eNi6Hdj/icon
import PhClock2Icon from "./icons/PlasmicIcon__PhClock2"; // plasmic-import: pRkBKEiKHDz6/icon
import PhCoinsLight2Icon from "./icons/PlasmicIcon__PhCoinsLight2"; // plasmic-import: NXtPmYqMEGnX/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import Group7Icon from "./icons/PlasmicIcon__Group7"; // plasmic-import: vdpUMPTJMw-6/icon

createPlasmicElementProxy;

export type PlasmicCard__VariantMembers = {};
export type PlasmicCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicCard__VariantsArgs;
export const PlasmicCard__VariantProps = new Array<VariantPropType>();

export type PlasmicCard__ArgsType = {
  title?: string;
  onTitleChange?: (val: string) => void;
  status?: string;
  onStatusChange?: (val: string) => void;
  location?: string;
  onLocationChange?: (val: string) => void;
  publishDate?: string;
  onPublishDateChange?: (val: string) => void;
  isBoosted?: boolean;
  onIsBoostedChange?: (val: string) => void;
  stripe?: any;
  isPosted?: boolean;
  onIsPostedChange?: (val: string) => void;
  avalabilityStatus?: string;
  onAvalabilityStatusChange?: (val: string) => void;
  contractType?: string;
  onContractTypeChange?: (val: string) => void;
  sectorActivity?: string;
  onSectorActivityChange?: (val: string) => void;
  workingTime?: string;
  onWorkingTimeChange?: (val: string) => void;
  salary?: string;
  onSalaryChange?: (val: string) => void;
  workMode?: string;
  onWorkModeChange?: (val: string) => void;
  jobId?: number;
  onJobIdChange?: (val: string) => void;
  numJobApplications?: string;
  onNumJobApplicationsChange?: (val: string) => void;
  index?: number;
  onIndexChange?: (val: string) => void;
  voirLeDetailBtn?: (event: any) => void;
  edit?: (event: any) => void;
  _delete?: (event: any) => void;
  postalCode?: string;
  onPostalCodeChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicCard__ArgsType;
export const PlasmicCard__ArgProps = new Array<ArgPropType>(
  "title",
  "onTitleChange",
  "status",
  "onStatusChange",
  "location",
  "onLocationChange",
  "publishDate",
  "onPublishDateChange",
  "isBoosted",
  "onIsBoostedChange",
  "stripe",
  "isPosted",
  "onIsPostedChange",
  "avalabilityStatus",
  "onAvalabilityStatusChange",
  "contractType",
  "onContractTypeChange",
  "sectorActivity",
  "onSectorActivityChange",
  "workingTime",
  "onWorkingTimeChange",
  "salary",
  "onSalaryChange",
  "workMode",
  "onWorkModeChange",
  "jobId",
  "onJobIdChange",
  "numJobApplications",
  "onNumJobApplicationsChange",
  "index",
  "onIndexChange",
  "voirLeDetailBtn",
  "edit",
  "_delete",
  "postalCode",
  "onPostalCodeChange"
);

export type PlasmicCard__OverridesType = {
  root?: Flex__<"div">;
  switch3?: Flex__<typeof Switch>;
  frame1437254218?: Flex__<"div">;
  badgeBase?: Flex__<"div">;
  text?: Flex__<"div">;
  badgeBase2?: Flex__<"div">;
  text2?: Flex__<"div">;
  badgeBase3?: Flex__<"div">;
  text3?: Flex__<"div">;
  badgeBase4?: Flex__<"div">;
  text4?: Flex__<"div">;
  badgeBase5?: Flex__<"div">;
  text5?: Flex__<"div">;
  badgeBase6?: Flex__<"div">;
  text6?: Flex__<"div">;
};

export interface DefaultCardProps {
  title?: string;
  onTitleChange?: (val: string) => void;
  status?: string;
  onStatusChange?: (val: string) => void;
  location?: string;
  onLocationChange?: (val: string) => void;
  publishDate?: string;
  onPublishDateChange?: (val: string) => void;
  isBoosted?: boolean;
  onIsBoostedChange?: (val: string) => void;
  stripe?: any;
  isPosted?: boolean;
  onIsPostedChange?: (val: string) => void;
  avalabilityStatus?: string;
  onAvalabilityStatusChange?: (val: string) => void;
  contractType?: string;
  onContractTypeChange?: (val: string) => void;
  sectorActivity?: string;
  onSectorActivityChange?: (val: string) => void;
  workingTime?: string;
  onWorkingTimeChange?: (val: string) => void;
  salary?: string;
  onSalaryChange?: (val: string) => void;
  workMode?: string;
  onWorkModeChange?: (val: string) => void;
  jobId?: number;
  onJobIdChange?: (val: string) => void;
  numJobApplications?: string;
  onNumJobApplicationsChange?: (val: string) => void;
  index?: number;
  onIndexChange?: (val: string) => void;
  voirLeDetailBtn?: (event: any) => void;
  edit?: (event: any) => void;
  _delete?: (event: any) => void;
  postalCode?: string;
  onPostalCodeChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCard__RenderFunc(props: {
  variants: PlasmicCard__VariantsArgs;
  args: PlasmicCard__ArgsType;
  overrides: PlasmicCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "switch3.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isBoosted;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "title",
        type: "writable",
        variableType: "text",

        valueProp: "title",
        onChangeProp: "onTitleChange"
      },
      {
        path: "status",
        type: "writable",
        variableType: "text",

        valueProp: "status",
        onChangeProp: "onStatusChange"
      },
      {
        path: "location",
        type: "writable",
        variableType: "text",

        valueProp: "location",
        onChangeProp: "onLocationChange"
      },
      {
        path: "publishDate",
        type: "writable",
        variableType: "text",

        valueProp: "publishDate",
        onChangeProp: "onPublishDateChange"
      },
      {
        path: "isBoosted",
        type: "writable",
        variableType: "boolean",

        valueProp: "isBoosted",
        onChangeProp: "onIsBoostedChange"
      },
      {
        path: "isPosted",
        type: "writable",
        variableType: "boolean",

        valueProp: "isPosted",
        onChangeProp: "onIsPostedChange"
      },
      {
        path: "avalabilityStatus",
        type: "writable",
        variableType: "text",

        valueProp: "avalabilityStatus",
        onChangeProp: "onAvalabilityStatusChange"
      },
      {
        path: "contractType",
        type: "writable",
        variableType: "text",

        valueProp: "contractType",
        onChangeProp: "onContractTypeChange"
      },
      {
        path: "sectorActivity",
        type: "writable",
        variableType: "text",

        valueProp: "sectorActivity",
        onChangeProp: "onSectorActivityChange"
      },
      {
        path: "workingTime",
        type: "writable",
        variableType: "text",

        valueProp: "workingTime",
        onChangeProp: "onWorkingTimeChange"
      },
      {
        path: "salary",
        type: "writable",
        variableType: "text",

        valueProp: "salary",
        onChangeProp: "onSalaryChange"
      },
      {
        path: "workMode",
        type: "writable",
        variableType: "text",

        valueProp: "workMode",
        onChangeProp: "onWorkModeChange"
      },
      {
        path: "jobId",
        type: "writable",
        variableType: "number",

        valueProp: "jobId",
        onChangeProp: "onJobIdChange"
      },
      {
        path: "numJobApplications",
        type: "writable",
        variableType: "text",

        valueProp: "numJobApplications",
        onChangeProp: "onNumJobApplicationsChange"
      },
      {
        path: "index",
        type: "writable",
        variableType: "number",

        valueProp: "index",
        onChangeProp: "onIndexChange"
      },
      {
        path: "postalCode",
        type: "writable",
        variableType: "text",

        valueProp: "postalCode",
        onChangeProp: "onPostalCodeChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__kD3Dt)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__lvPyQ)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__q1Yn)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__weg0R)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__div3I
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fiDw)}
                style={(() => {
                  try {
                    return {
                      backgroundColor: $state.isPosted ? "#F1FBF3" : "#53535326"
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                {(() => {
                  try {
                    return $state.isPosted;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Dot3Icon
                    className={classNames(projectcss.all, sty.svg__wZv9B)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3JZep
                  )}
                  style={(() => {
                    try {
                      return {
                        Color: $state.isPosted ? "#387C39" : "#4D4D4D"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.isPosted ? "En ligne" : "Brouillon";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1T0Xi)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__mEwuY)}
                onClick={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] =
                    Number(
                      $queries.offreStripeUserInfos.data[0].recharge_boost
                    ) == 0
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "warning",
                              "Plus de cr\u00e9dits boost disponibles",
                              "Vous avez d\u00e9j\u00e0 utilis\u00e9 vos 2 boosts ce mois-ci. Vous pouvez acheter des cr\u00e9dits suppl\u00e9mentaires ou attendre le mois prochain.",
                              10
                            ]
                          };
                          return $globalActions[
                            "plasmic-antd5-config-provider.showNotification"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
              >
                <Vector25Icon
                  className={classNames(projectcss.all, sty.svg__apJYv)}
                  role={"img"}
                />

                {(() => {
                  try {
                    return $state.isBoosted;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Vector25Icon
                    className={classNames(projectcss.all, sty.svg__rnBn)}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  try {
                    return !$state.isBoosted;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <ZapIcon
                    className={classNames(projectcss.all, sty.svg__myH5)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2Fmj2
                  )}
                  style={(() => {
                    try {
                      return {
                        color: $state.isBoosted
                          ? "#002400"
                          : Number($props.stripe.data[0].recharge_boost) == 0
                          ? "#C8C8C8"
                          : "#666666"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {"BOOST"}
                </div>
                {(() => {
                  try {
                    return !$state.isBoosted;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Switch
                    data-plasmic-name={"switch3"}
                    data-plasmic-override={overrides.switch3}
                    className={classNames("__wab_instance", sty.switch3)}
                    disabled={(() => {
                      try {
                        return (() => {
                          if (
                            $props.stripe.data[0].product_id ==
                              "prod_S81L3WBaA1HwM0" &&
                            $props.stripe.data[0].recharge_boost > 0
                          ) {
                            return false;
                          } else if (
                            $props.stripe.data[0].recharge_boost == 0
                          ) {
                            return true;
                          } else {
                            return false;
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    isSelected={generateStateValueProp($state, [
                      "switch3",
                      "isSelected"
                    ])}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "switch3",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["postgresUpdateMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "d5ac40b0-0d4d-4dc6-9737-2d220b297a64",
                                  userArgs: {
                                    conditions: [$ctx.SupabaseUser.user.id],
                                    variables: [
                                      Math.max(
                                        0,
                                        $state.switch3.isSelected
                                          ? Number(
                                              $props.stripe.data[0]
                                                .recharge_boost - 1
                                            )
                                          : Number(
                                              $props.stripe.data[0]
                                                .recharge_boost
                                            )
                                      )
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateMany"] != null &&
                          typeof $steps["postgresUpdateMany"] === "object" &&
                          typeof $steps["postgresUpdateMany"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateMany"] = await $steps[
                            "postgresUpdateMany"
                          ];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "cee5cfc5-4de5-43af-9616-bc311b5bafc8",
                                  userArgs: {
                                    keys: [$state.jobId],
                                    variables: [$state.switch3.isSelected]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    showLabel={false}
                  />
                ) : null}
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__bJghl)}
                displayHeight={"16px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"16px"}
                loading={"lazy"}
                onClick={async event => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "info",
                            "Cr\u00e9dits Boost",
                            "Utilisez un cr\u00e9dit Boost pour mettre en avant votre annonce dans les r\u00e9sultats de recherche.",
                            10
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
                src={{
                  src: "/plasmic/jam_production_🚀/images/icons8InfoSvg.svg",
                  fullWidth: 50,
                  fullHeight: 50,
                  aspectRatio: 1
                }}
              />
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__et87X)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___58Ggo)}
            >
              <IconPhMapPinIcon
                className={classNames(projectcss.all, sty.svg__ttEu)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__arfIx
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        $state.location +
                        " (" +
                        $state.postalCode.slice(0, 2) +
                        ")"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mHFjS
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return `Publié le ${new Date(
                        $state.publishDate
                      ).toLocaleDateString("fr-FR")}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__t8PE6)}>
              <PhTrashIcon
                className={classNames(projectcss.all, sty.svg__uxhW6)}
                onClick={args._delete}
                role={"img"}
              />

              <PhPencilSimpleIcon
                className={classNames(projectcss.all, sty.svg__z5N86)}
                onClick={args.edit}
                role={"img"}
              />
            </div>
          </div>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame1437254218"}
          data-plasmic-override={overrides.frame1437254218}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame1437254218)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"badgeBase"}
            data-plasmic-override={overrides.badgeBase}
            hasGap={true}
            className={classNames(projectcss.all, sty.badgeBase)}
          >
            <PhBriefcaseIcon
              className={classNames(projectcss.all, sty.svg__kW44O)}
              role={"img"}
            />

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.sectorActivity;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "1-3 mois";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"badgeBase2"}
            data-plasmic-override={overrides.badgeBase2}
            hasGap={true}
            className={classNames(projectcss.all, sty.badgeBase2)}
          >
            <PhFileText2Icon
              className={classNames(projectcss.all, sty.svg__pbvmA)}
              role={"img"}
            />

            <div
              data-plasmic-name={"text2"}
              data-plasmic-override={overrides.text2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text2
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.contractType;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "CDI";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"badgeBase3"}
            data-plasmic-override={overrides.badgeBase3}
            hasGap={true}
            className={classNames(projectcss.all, sty.badgeBase3)}
          >
            <PhClockCountdown2Icon
              className={classNames(projectcss.all, sty.svg__s8XQc)}
              role={"img"}
            />

            <div
              data-plasmic-name={"text3"}
              data-plasmic-override={overrides.text3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text3
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.avalabilityStatus;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Imm\u00e9diat";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"badgeBase4"}
            data-plasmic-override={overrides.badgeBase4}
            hasGap={true}
            className={classNames(projectcss.all, sty.badgeBase4)}
          >
            <PhClock2Icon
              className={classNames(projectcss.all, sty.svg__e535Q)}
              role={"img"}
            />

            <div
              data-plasmic-name={"text4"}
              data-plasmic-override={overrides.text4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text4
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.workingTime;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "25h";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"badgeBase5"}
            data-plasmic-override={overrides.badgeBase5}
            hasGap={true}
            className={classNames(projectcss.all, sty.badgeBase5)}
          >
            <PhCoinsLight2Icon
              className={classNames(projectcss.all, sty.svg__jsb3C)}
              role={"img"}
            />

            <div
              data-plasmic-name={"text5"}
              data-plasmic-override={overrides.text5}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text5
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.salary;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "2000\u20ac";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"badgeBase6"}
            data-plasmic-override={overrides.badgeBase6}
            hasGap={true}
            className={classNames(projectcss.all, sty.badgeBase6)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__vKc6)}
              displayHeight={"12px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"12px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/jam_production_🚀/images/phOfficeChair.svg",
                fullWidth: 12,
                fullHeight: 12,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={"text6"}
              data-plasmic-override={overrides.text6}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text6
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.workMode;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "T\u00e9l\u00e9travail 100%";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__lDrQm)}
      >
        <Button
          className={classNames("__wab_instance", sty.button__fDrYi)}
          color={"white"}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hqOOi
              )}
            >
              {"Voir le d\u00e9tail"}
            </div>
          }
          onClick={args.voirLeDetailBtn}
          type={"bordered"}
        />

        <Button
          className={classNames("__wab_instance", sty.button__kY8R2)}
          end={
            <Group7Icon
              className={classNames(projectcss.all, sty.svg__vUcrt)}
              role={"img"}
            />
          }
          iconEnd={true}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wXpm
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.isPosted
                      ? $state.numJobApplications === 1
                        ? "Voir la candidature"
                        : $state.numJobApplications > 1
                        ? `Voir les ${$state.numJobApplications} candidatures`
                        : "Voir les candidatures"
                      : "Poster l'annonce";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "voir les candidatures";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["getCurrentApplication"] =
              $state.isPosted === true
                ? (() => {
                    const actionArgs = {
                      destination: `/candidatures-employeur/${(() => {
                        try {
                          return $state.jobId;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}`
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["getCurrentApplication"] != null &&
              typeof $steps["getCurrentApplication"] === "object" &&
              typeof $steps["getCurrentApplication"].then === "function"
            ) {
              $steps["getCurrentApplication"] = await $steps[
                "getCurrentApplication"
              ];
            }

            $steps["publishJob"] =
              $state.isPosted === false
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                        opId: "cd59497f-5588-42bc-90c4-780c28c9a5c5",
                        userArgs: {
                          keys: [$state.jobId]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["publishJob"] != null &&
              typeof $steps["publishJob"] === "object" &&
              typeof $steps["publishJob"].then === "function"
            ) {
              $steps["publishJob"] = await $steps["publishJob"];
            }

            $steps["updateStripe"] =
              $state.isPosted === false
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                        opId: "a73ddeb0-a427-49e7-a77a-47ee6c992568",
                        userArgs: {
                          conditions: [$ctx.SupabaseUser.user.id],
                          variables: [
                            !$state.switch3.IsSelected
                              ? Number($props.stripe.data[0].recharge_classic) -
                                1
                              : Number($props.stripe.data[0].recharge_classic),
                            $state.switch3.isSelected
                              ? Number(
                                  $props.stripe.data[0].recharge_lastminute
                                ) - 1
                              : Number(
                                  $props.stripe.data[0].recharge_lastminute
                                )
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateStripe"] != null &&
              typeof $steps["updateStripe"] === "object" &&
              typeof $steps["updateStripe"].then === "function"
            ) {
              $steps["updateStripe"] = await $steps["updateStripe"];
            }
          }}
        />
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "switch3",
    "frame1437254218",
    "badgeBase",
    "text",
    "badgeBase2",
    "text2",
    "badgeBase3",
    "text3",
    "badgeBase4",
    "text4",
    "badgeBase5",
    "text5",
    "badgeBase6",
    "text6"
  ],
  switch3: ["switch3"],
  frame1437254218: [
    "frame1437254218",
    "badgeBase",
    "text",
    "badgeBase2",
    "text2",
    "badgeBase3",
    "text3",
    "badgeBase4",
    "text4",
    "badgeBase5",
    "text5",
    "badgeBase6",
    "text6"
  ],
  badgeBase: ["badgeBase", "text"],
  text: ["text"],
  badgeBase2: ["badgeBase2", "text2"],
  text2: ["text2"],
  badgeBase3: ["badgeBase3", "text3"],
  text3: ["text3"],
  badgeBase4: ["badgeBase4", "text4"],
  text4: ["text4"],
  badgeBase5: ["badgeBase5", "text5"],
  text5: ["text5"],
  badgeBase6: ["badgeBase6", "text6"],
  text6: ["text6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  switch3: typeof Switch;
  frame1437254218: "div";
  badgeBase: "div";
  text: "div";
  badgeBase2: "div";
  text2: "div";
  badgeBase3: "div";
  text3: "div";
  badgeBase4: "div";
  text4: "div";
  badgeBase5: "div";
  text5: "div";
  badgeBase6: "div";
  text6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCard__VariantsArgs;
    args?: PlasmicCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCard__ArgProps,
          internalVariantPropNames: PlasmicCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCard";
  } else {
    func.displayName = `PlasmicCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCard = Object.assign(
  // Top-level PlasmicCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    switch3: makeNodeComponent("switch3"),
    frame1437254218: makeNodeComponent("frame1437254218"),
    badgeBase: makeNodeComponent("badgeBase"),
    text: makeNodeComponent("text"),
    badgeBase2: makeNodeComponent("badgeBase2"),
    text2: makeNodeComponent("text2"),
    badgeBase3: makeNodeComponent("badgeBase3"),
    text3: makeNodeComponent("text3"),
    badgeBase4: makeNodeComponent("badgeBase4"),
    text4: makeNodeComponent("text4"),
    badgeBase5: makeNodeComponent("badgeBase5"),
    text5: makeNodeComponent("text5"),
    badgeBase6: makeNodeComponent("badgeBase6"),
    text6: makeNodeComponent("text6"),

    // Metadata about props expected for PlasmicCard
    internalVariantProps: PlasmicCard__VariantProps,
    internalArgProps: PlasmicCard__ArgProps
  }
);

export default PlasmicCard;
/* prettier-ignore-end */
