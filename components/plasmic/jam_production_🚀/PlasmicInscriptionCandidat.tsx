/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: cvdvzbSyE3-W

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SignUp } from "../../../plasmic-library/authentication/SignUp"; // plasmic-import: l54x2CZo0bN2/codeComponent

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicInscriptionCandidat.module.css"; // plasmic-import: cvdvzbSyE3-W/css

import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: wV32h4GpW1qw/icon

createPlasmicElementProxy;

export type PlasmicInscriptionCandidat__VariantMembers = {};
export type PlasmicInscriptionCandidat__VariantsArgs = {};
type VariantPropType = keyof PlasmicInscriptionCandidat__VariantsArgs;
export const PlasmicInscriptionCandidat__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInscriptionCandidat__ArgsType = {};
type ArgPropType = keyof PlasmicInscriptionCandidat__ArgsType;
export const PlasmicInscriptionCandidat__ArgProps = new Array<ArgPropType>();

export type PlasmicInscriptionCandidat__OverridesType = {
  inscription?: Flex__<"div">;
  signUp?: Flex__<"div">;
  imageWrapper?: Flex__<"div">;
  logoWrapper?: Flex__<"div">;
  baseline?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  formWrapper?: Flex__<"div">;
  signupLoading?: Flex__<"div">;
  signUp3?: Flex__<typeof SignUp>;
  signupSuccess?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultInscriptionCandidatProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInscriptionCandidat__RenderFunc(props: {
  variants: PlasmicInscriptionCandidat__VariantsArgs;
  args: PlasmicInscriptionCandidat__ArgsType;
  overrides: PlasmicInscriptionCandidat__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "signUp3.email",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp3.firstName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp3.lastName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp3.password",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp3.confirmPassword",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp3.phone",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "signUp3.countryCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "+33"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicInscriptionCandidat.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicInscriptionCandidat.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicInscriptionCandidat.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"inscription"}
        data-plasmic-override={overrides.inscription}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.inscription
        )}
      >
        <div
          data-plasmic-name={"signUp"}
          data-plasmic-override={overrides.signUp}
          className={classNames(projectcss.all, sty.signUp)}
        >
          <div
            data-plasmic-name={"imageWrapper"}
            data-plasmic-override={overrides.imageWrapper}
            className={classNames(projectcss.all, sty.imageWrapper)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"logoWrapper"}
              data-plasmic-override={overrides.logoWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.logoWrapper)}
              onClick={async event => {
                const $steps = {};

                $steps["goToAccueil"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAccueil"] != null &&
                  typeof $steps["goToAccueil"] === "object" &&
                  typeof $steps["goToAccueil"].then === "function"
                ) {
                  $steps["goToAccueil"] = await $steps["goToAccueil"];
                }
              }}
            >
              <PictogramIcon
                className={classNames(projectcss.all, sty.svg___6NpL)}
                role={"img"}
              />

              <div
                data-plasmic-name={"baseline"}
                data-plasmic-override={overrides.baseline}
                className={classNames(projectcss.all, sty.baseline)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame"}
                  data-plasmic-override={overrides.frame}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kxkvv
                    )}
                  >
                    {"JOB"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame2"}
                  data-plasmic-override={overrides.frame2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6FkZm
                    )}
                  >
                    {"AROUND"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame3"}
                  data-plasmic-override={overrides.frame3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3SDkI
                    )}
                  >
                    {"ME"}
                  </div>
                </Stack__>
              </div>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"formWrapper"}
            data-plasmic-override={overrides.formWrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.formWrapper)}
          >
            {(() => {
              try {
                return $ctx.query.signup !== "success";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"signupLoading"}
                data-plasmic-override={overrides.signupLoading}
                className={classNames(projectcss.all, sty.signupLoading)}
              >
                <SignUp
                  data-plasmic-name={"signUp3"}
                  data-plasmic-override={overrides.signUp3}
                  alertPosition={"top"}
                  appleButtonText={"APPLE"}
                  buttonAbordStyle={"tertiary"}
                  buttonStyle={"primary"}
                  className={classNames("__wab_instance", sty.signUp3)}
                  confirmPassword={generateStateValueProp($state, [
                    "signUp3",
                    "confirmPassword"
                  ])}
                  confirmPasswordLabel={"Confirmer le mot de passe"}
                  countryCode={generateStateValueProp($state, [
                    "signUp3",
                    "countryCode"
                  ])}
                  email={generateStateValueProp($state, ["signUp3", "email"])}
                  emailLabel={"Email*"}
                  eyeIconColor={"#666"}
                  firstName={generateStateValueProp($state, [
                    "signUp3",
                    "firstName"
                  ])}
                  firstNameLabel={"Pr\u00e9nom*"}
                  googleButtonText={"GOOGLE"}
                  inputStyle={"simple"}
                  lastName={generateStateValueProp($state, [
                    "signUp3",
                    "lastName"
                  ])}
                  lastNameLabel={"Nom*"}
                  maxAlerts={3}
                  oAuthButtonsPosition={"bottom"}
                  oAuthSeparatorText={"ou"}
                  onConfirmPasswordChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signUp3",
                      "confirmPassword"
                    ]).apply(null, eventArgs);
                  }}
                  onCountryCodeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signUp3",
                      "countryCode"
                    ]).apply(null, eventArgs);
                  }}
                  onEmailChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signUp3",
                      "email"
                    ]).apply(null, eventArgs);
                  }}
                  onFirstNameChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signUp3",
                      "firstName"
                    ]).apply(null, eventArgs);
                  }}
                  onLastNameChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signUp3",
                      "lastName"
                    ]).apply(null, eventArgs);
                  }}
                  onPasswordChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signUp3",
                      "password"
                    ]).apply(null, eventArgs);
                  }}
                  onPhoneChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "signUp3",
                      "phone"
                    ]).apply(null, eventArgs);
                  }}
                  onSubmit={async event => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $state.signUp3.email;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $state.signUp3.password;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return "/register-candidat?signup=success";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              "/login",
                              (() => {
                                try {
                                  return {
                                    firstName: $state.signUp3.firstName,
                                    lastName: $state.signUp3.lastName,
                                    phone:
                                      $state.signUp3.countryCode +
                                      $state.signUp3.phone,
                                    email: $state.signUp3.email,
                                    role: "User"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions[
                            "SupabaseUserGlobalContext.signup"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                  padding={"40px 16px"}
                  password={generateStateValueProp($state, [
                    "signUp3",
                    "password"
                  ])}
                  passwordInfoText={
                    "Utilisez 8 caractères ou plus en mélangeant lettres, chiffres et symboles."
                  }
                  passwordLabel={"Mot de passe*"}
                  passwordStrength={true}
                  phone={generateStateValueProp($state, ["signUp3", "phone"])}
                  phoneLabel={"T\u00e9l\u00e9phone*"}
                  placeholderConfirmPassword={"Mot de passe"}
                  placeholderEmail={"Email"}
                  placeholderPassword={"Mot de passe"}
                  placeholderPhone={"060606060606"}
                  privacyPolicyText={
                    "J'accepte la politique de confidentialité"
                  }
                  redirectAfterSignUp={``}
                  showAlerts={true}
                  showLabels={true}
                  showLoginLink={true}
                  showOAuthButtons={false}
                  showPasswordToggle={true}
                  showPhoneInput={true}
                  submitButtonText={"S'inscrire"}
                  title={"Bienvenue !"}
                  titleHeading={"h1"}
                  wrapperStyle={"card"}
                />
              </div>
            ) : null}
            {(() => {
              try {
                return $ctx.query.signup === "success";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"signupSuccess"}
                data-plasmic-override={overrides.signupSuccess}
                hasGap={true}
                className={classNames(projectcss.all, sty.signupSuccess)}
              >
                <CheckIcon
                  className={classNames(projectcss.all, sty.svg__aqJ6X)}
                  role={"img"}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d9Eu9
                    )}
                  >
                    {
                      "Votre compte a \u00e9t\u00e9 cr\u00e9\u00e9 avec succ\u00e8s"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rGiQ
                    )}
                  >
                    {
                      "Veuillez v\u00e9rifier vos e-mails pour confirmer votre adresse \net acc\u00e9der \u00e0 Job Around Me."
                    }
                  </div>
                </Stack__>
              </Stack__>
            ) : null}
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  inscription: [
    "inscription",
    "signUp",
    "imageWrapper",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "signupLoading",
    "signUp3",
    "signupSuccess",
    "freeBox"
  ],
  signUp: [
    "signUp",
    "imageWrapper",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3",
    "formWrapper",
    "signupLoading",
    "signUp3",
    "signupSuccess",
    "freeBox"
  ],
  imageWrapper: [
    "imageWrapper",
    "logoWrapper",
    "baseline",
    "frame",
    "frame2",
    "frame3"
  ],
  logoWrapper: ["logoWrapper", "baseline", "frame", "frame2", "frame3"],
  baseline: ["baseline", "frame", "frame2", "frame3"],
  frame: ["frame"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  formWrapper: [
    "formWrapper",
    "signupLoading",
    "signUp3",
    "signupSuccess",
    "freeBox"
  ],
  signupLoading: ["signupLoading", "signUp3"],
  signUp3: ["signUp3"],
  signupSuccess: ["signupSuccess", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  inscription: "div";
  signUp: "div";
  imageWrapper: "div";
  logoWrapper: "div";
  baseline: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  formWrapper: "div";
  signupLoading: "div";
  signUp3: typeof SignUp;
  signupSuccess: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInscriptionCandidat__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInscriptionCandidat__VariantsArgs;
    args?: PlasmicInscriptionCandidat__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInscriptionCandidat__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInscriptionCandidat__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInscriptionCandidat__ArgProps,
          internalVariantPropNames: PlasmicInscriptionCandidat__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInscriptionCandidat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "inscription") {
    func.displayName = "PlasmicInscriptionCandidat";
  } else {
    func.displayName = `PlasmicInscriptionCandidat.${nodeName}`;
  }
  return func;
}

export const PlasmicInscriptionCandidat = Object.assign(
  // Top-level PlasmicInscriptionCandidat renders the root element
  makeNodeComponent("inscription"),
  {
    // Helper components rendering sub-elements
    signUp: makeNodeComponent("signUp"),
    imageWrapper: makeNodeComponent("imageWrapper"),
    logoWrapper: makeNodeComponent("logoWrapper"),
    baseline: makeNodeComponent("baseline"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    formWrapper: makeNodeComponent("formWrapper"),
    signupLoading: makeNodeComponent("signupLoading"),
    signUp3: makeNodeComponent("signUp3"),
    signupSuccess: makeNodeComponent("signupSuccess"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicInscriptionCandidat
    internalVariantProps: PlasmicInscriptionCandidat__VariantProps,
    internalArgProps: PlasmicInscriptionCandidat__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Inscription",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInscriptionCandidat;
/* prettier-ignore-end */
