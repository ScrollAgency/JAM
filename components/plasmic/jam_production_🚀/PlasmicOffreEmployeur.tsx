/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: EockUDddtlJ7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Sidebar from "../../Sidebar"; // plasmic-import: M06HuWMcBQV2/component
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import JobCard from "../../JobCard"; // plasmic-import: 9MKR6AAbT8y6/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import Select from "../../Select"; // plasmic-import: ZMB-SB-xJDyQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: plmAgyhhAdMc/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import LastMinuteToggle from "../../LastMinuteToggle"; // plasmic-import: Porp6y76-dWy/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: nVAUbPc6gpoz/component
import DeleteAccount from "../../DeleteAccount"; // plasmic-import: KdtWnTG_vDHe/component
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import ProgressBar from "../../ProgressBar"; // plasmic-import: o2sDSKJQp4UX/component
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import { PageLoader } from "../../others/PageLoader/PageLoader"; // plasmic-import: FHDrnDhA4DZe/codeComponent
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import CvUploaded from "../../CvUploaded"; // plasmic-import: bmRjHjAcjHYi/component
import ProductCard from "../../ProductCard"; // plasmic-import: XNMQC2V0FBMZ/component
import { SmartLoader } from "../../others/SmartLoader/SmartLoader"; // plasmic-import: YAp2GWWLB3S2/codeComponent
import MobileNavbarBottomCompany from "../../MobileNavbarBottomCompany"; // plasmic-import: gAnwjyfMiBe9/component
import { InputComboSelect } from "../../forms/InputComboSelect/InputComboSelect"; // plasmic-import: KwvhXarw-EVS/codeComponent
import { StripeCheckoutButton } from "../../forms/StripeCheckoutButton/StripeCheckoutButton"; // plasmic-import: HaGLE8b9jujz/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_tailwind_3_4_number_tokens } from "../library_tailwind_3_4_number_tokens/PlasmicStyleTokensProvider"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicOffreEmployeur.module.css"; // plasmic-import: EockUDddtlJ7/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import PlusCircle1425SvgrepoComSvgIcon from "./icons/PlasmicIcon__PlusCircle1425SvgrepoComSvg"; // plasmic-import: Lk_5fNk17U9z/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: noS7WwFUEgg-/icon
import NotificationBellSvgrepoComSvgIcon from "./icons/PlasmicIcon__NotificationBellSvgrepoComSvg"; // plasmic-import: dIeWzMIIc5ij/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: I5WL24ilJ3LK/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: yud1FH0Ox1FR/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import ReshotIconAlert7T6Wum8VleSvgIcon from "./icons/PlasmicIcon__ReshotIconAlert7T6Wum8VleSvg"; // plasmic-import: I2J7nwYmWkrC/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import PhMapPin2Icon from "./icons/PlasmicIcon__PhMapPin2"; // plasmic-import: hGRa__J54hta/icon
import PhFileTextIcon from "./icons/PlasmicIcon__PhFileText"; // plasmic-import: kuV0Q3xSw_jm/icon
import PhClockIcon from "./icons/PlasmicIcon__PhClock"; // plasmic-import: r6dP5yPLK2Mb/icon
import PhCoinsLightIcon from "./icons/PlasmicIcon__PhCoinsLight"; // plasmic-import: 4H-jk36Nk9q0/icon
import PhClockCountdownIcon from "./icons/PlasmicIcon__PhClockCountdown"; // plasmic-import: EKdA7LX61Arw/icon
import IconPhBriefcase2Icon from "./icons/PlasmicIcon__IconPhBriefcase2"; // plasmic-import: QT5tozis-7ZJ/icon
import PhUsersThreeIcon from "./icons/PlasmicIcon__PhUsersThree"; // plasmic-import: 5hJF42npUKid/icon
import PhMapTrifoldFillIcon from "./icons/PlasmicIcon__PhMapTrifoldFill"; // plasmic-import: uZBfKa3cidgz/icon
import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: wV32h4GpW1qw/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 0QBsBx5rQ6RM/icon
import Loader4FillSvgrepoComSvgIcon from "./icons/PlasmicIcon__Loader4FillSvgrepoComSvg"; // plasmic-import: pSQ8_3_KJpQd/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: QOMO9U8NfL6f/icon
import IconPhBriefcaseIcon from "./icons/PlasmicIcon__IconPhBriefcase"; // plasmic-import: E-c3RGwvaig6/icon
import PhClockCountdownFillIcon from "./icons/PlasmicIcon__PhClockCountdownFill"; // plasmic-import: GhtgoozaYTSb/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: p0L_wgJiyVXj/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: pk0tqTEbFRlt/icon

createPlasmicElementProxy;

export type PlasmicOffreEmployeur__VariantMembers = {};
export type PlasmicOffreEmployeur__VariantsArgs = {};
type VariantPropType = keyof PlasmicOffreEmployeur__VariantsArgs;
export const PlasmicOffreEmployeur__VariantProps = new Array<VariantPropType>();

export type PlasmicOffreEmployeur__ArgsType = {};
type ArgPropType = keyof PlasmicOffreEmployeur__ArgsType;
export const PlasmicOffreEmployeur__ArgProps = new Array<ArgPropType>();

export type PlasmicOffreEmployeur__OverridesType = {
  espaceEmployeur?: Flex__<"div">;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  sidebar?: Flex__<typeof Sidebar>;
  main?: Flex__<"main">;
  heading2?: Flex__<"h1">;
  annonces3?: Flex__<"div">;
  jobCard?: Flex__<typeof JobCard>;
  noAnnonce2?: Flex__<"div">;
  featuredIcon3?: Flex__<"div">;
  textAndSupportingText3?: Flex__<"div">;
  text7?: Flex__<"div">;
  supportingText3?: Flex__<"div">;
  createJob?: Flex__<typeof Modal>;
  form2?: Flex__<typeof FormWrapper>;
  textInput8?: Flex__<typeof TextInput>;
  select28?: Flex__<typeof Select>;
  select29?: Flex__<typeof Select>;
  select30?: Flex__<typeof Select>;
  select31?: Flex__<typeof Select>;
  timePicker3?: Flex__<typeof AntdDatePicker>;
  timePicker4?: Flex__<typeof AntdDatePicker>;
  select32?: Flex__<typeof Select>;
  lastMinuteToggle?: Flex__<typeof LastMinuteToggle>;
  select33?: Flex__<typeof Select>;
  select13?: Flex__<typeof AntdSelect>;
  rue?: Flex__<typeof TextInput>;
  codePosteVille?: Flex__<"div">;
  codePostal?: Flex__<typeof TextInput>;
  ville?: Flex__<typeof TextInput>;
  select10?: Flex__<typeof Select>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  textAreaInput2?: Flex__<typeof TextAreaInput>;
  editJob?: Flex__<typeof Modal>;
  formUpdate?: Flex__<typeof FormWrapper>;
  textInput20?: Flex__<typeof TextInput>;
  select34?: Flex__<typeof Select>;
  select35?: Flex__<typeof Select>;
  select36?: Flex__<typeof Select>;
  select37?: Flex__<typeof Select>;
  timePicker?: Flex__<typeof AntdDatePicker>;
  timePicker2?: Flex__<typeof AntdDatePicker>;
  select38?: Flex__<typeof Select>;
  lastMinuteToggle2?: Flex__<typeof LastMinuteToggle>;
  select39?: Flex__<typeof Select>;
  select26?: Flex__<typeof AntdSelect>;
  address?: Flex__<"div">;
  rue2?: Flex__<typeof TextInput>;
  codePosteVille2?: Flex__<"div">;
  codePostal2?: Flex__<typeof TextInput>;
  ville2?: Flex__<typeof TextInput>;
  select27?: Flex__<typeof Select>;
  textAreaInput3?: Flex__<typeof TextAreaInput>;
  textAreaInput4?: Flex__<typeof TextAreaInput>;
  deleteJob?: Flex__<typeof Modal>;
  e2?: Flex__<"p">;
  jobDetails?: Flex__<typeof Modal>;
  jobListing?: Flex__<"div">;
  frame38?: Flex__<"div">;
  jobDetail?: Flex__<"div">;
  location?: Flex__<"div">;
  frame46?: Flex__<"div">;
  frame47?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame49?: Flex__<"div">;
  frame50?: Flex__<"div">;
  frame51?: Flex__<"div">;
  jobDescriptionContainer?: Flex__<"div">;
  benefits?: Flex__<"div">;
  expectedProfileContainer?: Flex__<"div">;
  companyContainer?: Flex__<"div">;
  logoContainer?: Flex__<"div">;
  companyDetail?: Flex__<"div">;
  sectorActivity?: Flex__<"div">;
  dkTrucksPark5?: Flex__<"div">;
  companySize?: Flex__<"div">;
  companyLocation?: Flex__<"div">;
  companyInfos?: Flex__<typeof Modal>;
  form?: Flex__<typeof FormWrapper>;
  upload2?: Flex__<typeof UploadWrapper>;
  editIcon?: Flex__<"div">;
  frame7?: Flex__<"div">;
  deleteIcon?: Flex__<"div">;
  frame8?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  textAreaInput5?: Flex__<typeof TextAreaInput>;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  textInput6?: Flex__<typeof TextInput>;
  select5?: Flex__<typeof Select>;
  textInput5?: Flex__<typeof TextInput>;
  select3?: Flex__<typeof AntdSelect>;
  select4?: Flex__<typeof AntdSelect>;
  textInput7?: Flex__<typeof TextInput>;
  upload?: Flex__<typeof UploadWrapper>;
  content?: Flex__<"div">;
  upload3?: Flex__<typeof UploadWrapper>;
  content2?: Flex__<"div">;
  button2?: Flex__<typeof JamButton>;
  profilCreate?: Flex__<typeof Modal>;
  stopInscription?: Flex__<typeof Modal>;
  e?: Flex__<"div">;
  onBoarding?: Flex__<typeof PageLoader>;
  modalOnboarding?: Flex__<"div">;
  loadingBoundary?: Flex__<typeof LoadingBoundary>;
  modal?: Flex__<"div">;
  close?: Flex__<"div">;
  icon?: Flex__<"svg">;
  closeAfterSuccess?: Flex__<"div">;
  icon2?: Flex__<"svg">;
  step0?: Flex__<"div">;
  logo?: Flex__<"div">;
  form3?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea3?: Flex__<typeof AntdTextArea>;
  input2?: Flex__<typeof AntdInput>;
  form4?: Flex__<typeof FormWrapper>;
  upload4?: Flex__<typeof UploadWrapper>;
  editIcon2?: Flex__<"div">;
  frame9?: Flex__<"div">;
  deleteIcon2?: Flex__<"div">;
  frame10?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  textArea2?: Flex__<typeof AntdTextArea>;
  textInput9?: Flex__<typeof TextInput>;
  textInput10?: Flex__<typeof TextInput>;
  textInput11?: Flex__<typeof TextInput>;
  select11?: Flex__<typeof Select>;
  textInput12?: Flex__<typeof TextInput>;
  select15?: Flex__<typeof AntdSelect>;
  select16?: Flex__<typeof AntdSelect>;
  textInput13?: Flex__<typeof TextInput>;
  upload5?: Flex__<typeof UploadWrapper>;
  content3?: Flex__<"div">;
  upload6?: Flex__<typeof UploadWrapper>;
  content4?: Flex__<"div">;
  form5?: Flex__<typeof FormWrapper>;
  upload7?: Flex__<typeof UploadWrapper>;
  icones?: Flex__<"div">;
  editIcon3?: Flex__<"div">;
  frame11?: Flex__<"div">;
  deleteIcon3?: Flex__<"div">;
  frame12?: Flex__<"div">;
  textInput14?: Flex__<typeof TextInput>;
  textAreaInput6?: Flex__<typeof TextAreaInput>;
  textInput15?: Flex__<typeof TextInput>;
  textInput16?: Flex__<typeof TextInput>;
  textInput17?: Flex__<typeof TextInput>;
  select17?: Flex__<typeof Select>;
  textInput18?: Flex__<typeof TextInput>;
  select?: Flex__<typeof Select>;
  select2?: Flex__<typeof Select>;
  textInput19?: Flex__<typeof TextInput>;
  upload8?: Flex__<typeof UploadWrapper>;
  content5?: Flex__<"div">;
  cvUploaded?: Flex__<typeof CvUploaded>;
  upload9?: Flex__<typeof UploadWrapper>;
  content6?: Flex__<"div">;
  cvUploaded2?: Flex__<typeof CvUploaded>;
  step1?: Flex__<"div">;
  dd?: Flex__<"dd">;
  subscription?: Flex__<"div">;
  productCard?: Flex__<typeof ProductCard>;
  actions?: Flex__<"div">;
  buttonBack?: Flex__<typeof Button>;
  buttonSubscription?: Flex__<typeof Button>;
  step2?: Flex__<"div">;
  stripeCancel?: Flex__<typeof PageLoader>;
  stripeCheckout?: Flex__<typeof SmartLoader>;
  mobileNavbarBottomCompany?: Flex__<typeof MobileNavbarBottomCompany>;
  insufficientCharges?: Flex__<typeof Modal>;
  button?: Flex__<typeof JamButton>;
  e3?: Flex__<"div">;
  rechargeLastMinute?: Flex__<typeof Modal>;
  button3?: Flex__<typeof JamButton>;
  recharges?: Flex__<"div">;
  rechargesList?: Flex__<"div">;
  classic?: Flex__<"div">;
  inputComboSelect?: Flex__<typeof InputComboSelect>;
  lastminust?: Flex__<"div">;
  inputComboSelect2?: Flex__<typeof InputComboSelect>;
  boost?: Flex__<"div">;
  inputComboSelect3?: Flex__<typeof InputComboSelect>;
  textInput21?: Flex__<typeof TextInput>;
  totalAmount?: Flex__<"div">;
  total?: Flex__<"div">;
  amount?: Flex__<"div">;
  stripeCheckoutButton?: Flex__<typeof StripeCheckoutButton>;
  actionCreditSuccess?: Flex__<typeof PageLoader>;
  modalCreditsAlerts?: Flex__<typeof Modal>;
  closeButton?: Flex__<"div">;
  iconSuccess?: Flex__<"div">;
  messageText?: Flex__<"div">;
  actionButton?: Flex__<"div">;
};

export interface DefaultOffreEmployeurProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOffreEmployeur__RenderFunc(props: {
  variants: PlasmicOffreEmployeur__VariantsArgs;
  args: PlasmicOffreEmployeur__ArgsType;
  overrides: PlasmicOffreEmployeur__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "companyInfos.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stopInscription.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "profilCreate.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload3.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createJob.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "form4.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form4",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form4.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form4",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload4.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload5.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload6.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "onboardingStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "productId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "priceId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stripeSessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "cs_test_a1Q4FXac6cZ06BXVzzjACwsWCtIJ1tTyZDlipYgH72UvqQeuMjCPSkoyUX"
      },
      {
        path: "stripeCustomerId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stripeStatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stripeSubscriptionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stripeCreateAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalOnboarding2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showModal",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hiddeModal",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form5.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form5",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form5.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form5",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload7.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload8.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload9.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "deleteJob.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editJob.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "formUpdate.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "formUpdate",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formUpdate.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "formUpdate",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rue2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select27.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jobId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "jobDetails.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "insufficientCharges.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rechargeLastMinute.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputComboSelect.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "inputComboSelect2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "inputComboSelect3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "textInput21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "timePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "timePicker3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "timePicker4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "coordinates",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "currentJobObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "lastMinuteToggle.switch2IsSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lastMinuteToggle.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                ($queries.offreStripeUserInfos.data[0]?.recharge_lastminute ??
                  0) === 0
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "lastMinuteToggle2.switch2IsSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.currentJobObject.is_last_minute;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lastMinuteToggle2.isDisabled",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.currentJobObject.posted;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "select28.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select29.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select30.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select31.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select32.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select33.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select34.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select35.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select36.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select37.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select38.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select39.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "errorMsg",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "jobCard[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].status",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].location",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].publishDate",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].isBoosted",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "jobCard[].isPosted",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "jobCard[].avalabilityStatus",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].contractType",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].sectorActivity",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].workingTime",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].salary",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].workMode",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].jobId",
        type: "private",
        variableType: "number"
      },
      {
        path: "jobCard[].numJobApplications",
        type: "private",
        variableType: "text"
      },
      {
        path: "jobCard[].index",
        type: "private",
        variableType: "number"
      },
      {
        path: "jobCard[].postalCode",
        type: "private",
        variableType: "text"
      },
      {
        path: "countries",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "Afghanistan",
          "Afrique du Sud",
          "Albanie",
          "Alg\u00e9rie",
          "Allemagne",
          "Andorre",
          "Angola",
          "Antigua-et-Barbuda",
          "Arabie saoudite",
          "Argentine",
          "Arm\u00e9nie",
          "Australie",
          "Autriche",
          "Azerba\u00efdjan",
          "Bahamas",
          "Bahre\u00efn",
          "Bangladesh",
          "Barbade",
          "Belgique",
          "Belize",
          "B\u00e9nin",
          "Bhoutan",
          "Bi\u00e9lorussie",
          "Birmanie (Myanmar)",
          "Bolivie",
          "Bosnie-Herz\u00e9govine",
          "Botswana",
          "Br\u00e9sil",
          "Brunei",
          "Bulgarie",
          "Burkina Faso",
          "Burundi",
          "Cambodge",
          "Cameroun",
          "Canada",
          "Cap-Vert",
          "Centrafrique (R\u00e9publique)",
          "Chili",
          "Chine",
          "Chypre",
          "Colombie",
          "Comores",
          "Congo (R\u00e9publique d\u00e9mocratique du)",
          "Congo (R\u00e9publique du)",
          "Cor\u00e9e du Nord",
          "Cor\u00e9e du Sud",
          "Costa Rica",
          "C\u00f4te d'Ivoire",
          "Croatie",
          "Cuba",
          "Danemark",
          "Djibouti",
          "Dominique",
          "\u00c9gypte",
          "\u00c9mirats arabes unis",
          "\u00c9quateur",
          "\u00c9rythr\u00e9e",
          "Espagne",
          "Estonie",
          "Eswatini",
          "\u00c9tats-Unis",
          "\u00c9thiopie",
          "Fidji",
          "Finlande",
          "France",
          "Gabon",
          "Gambie",
          "G\u00e9orgie",
          "Ghana",
          "Gr\u00e8ce",
          "Grenade",
          "Guatemala",
          "Guin\u00e9e",
          "Guin\u00e9e-Bissau",
          "Guin\u00e9e \u00e9quatoriale",
          "Guyana",
          "Ha\u00efti",
          "Honduras",
          "Hongrie",
          "\u00celes Marshall",
          "\u00celes Salomon",
          "Inde",
          "Indon\u00e9sie",
          "Irak",
          "Iran",
          "Irlande",
          "Islande",
          "Isra\u00ebl",
          "Italie",
          "Jama\u00efque",
          "Japon",
          "Jordanie",
          "Kazakhstan",
          "Kenya",
          "Kirghizistan",
          "Kiribati",
          "Kosovo",
          "Kowe\u00eft",
          "Laos",
          "Lesotho",
          "Lettonie",
          "Liban",
          "Liberia",
          "Libye",
          "Liechtenstein",
          "Lituanie",
          "Luxembourg",
          "Mac\u00e9doine du Nord",
          "Madagascar",
          "Malaisie",
          "Malawi",
          "Maldives",
          "Mali",
          "Malte",
          "Maroc",
          "Maurice",
          "Mauritanie",
          "Mexique",
          "Micron\u00e9sie",
          "Moldavie",
          "Monaco",
          "Mongolie",
          "Mont\u00e9n\u00e9gro",
          "Mozambique",
          "Namibie",
          "Nauru",
          "N\u00e9pal",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Norv\u00e8ge",
          "Nouvelle-Z\u00e9lande",
          "Oman",
          "Ouganda",
          "Ouzb\u00e9kistan",
          "Pakistan",
          "Palaos",
          "Palestine",
          "Panama",
          "Papouasie-Nouvelle-Guin\u00e9e",
          "Paraguay",
          "Pays-Bas",
          "P\u00e9rou",
          "Philippines",
          "Pologne",
          "Portugal",
          "Qatar",
          "R\u00e9publique dominicaine",
          "R\u00e9publique tch\u00e8que",
          "Roumanie",
          "Royaume-Uni",
          "Russie",
          "Rwanda",
          "Saint-Christophe-et-Ni\u00e9v\u00e8s",
          "Sainte-Lucie",
          "Saint-Marin",
          "Saint-Vincent-et-les-Grenadines",
          "Salvador",
          "Samoa",
          "Sao Tom\u00e9-et-Principe",
          "S\u00e9n\u00e9gal",
          "Serbie",
          "Seychelles",
          "Sierra Leone",
          "Singapour",
          "Slovaquie",
          "Slov\u00e9nie",
          "Somalie",
          "Soudan",
          "Soudan du Sud",
          "Sri Lanka",
          "Su\u00e8de",
          "Suisse",
          "Suriname",
          "Syrie",
          "Tadjikistan",
          "Ta\u00efwan",
          "Tanzanie",
          "Tchad",
          "Tha\u00eflande",
          "Timor oriental",
          "Togo",
          "Tonga",
          "Trinit\u00e9-et-Tobago",
          "Tunisie",
          "Turkm\u00e9nistan",
          "Turquie",
          "Tuvalu",
          "Ukraine",
          "Uruguay",
          "Vanuatu",
          "Vatican",
          "Venezuela",
          "Vi\u00eat Nam",
          "Y\u00e9men",
          "Zambie",
          "Zimbabwe"
        ]
      },
      {
        path: "textAreaInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cvUploaded.showCard",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.form5.value.kbis_file.length == 1 &&
                $state.form5.value.kbis_file[0].status == "done"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "cvUploaded.fileName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const file = $state.form5.value.kbis_file?.[0];
                const text = file?.name;
                if (!text) return "";
                return text.length > 30 ? `${text.slice(0, 30)}...` : text;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "cvUploaded2.showCard",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.form5.value.identity_file.length == 1 &&
                $state.form5.value.identity_file[0].status == "done"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "cvUploaded2.fileName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const file = $state.form5.value.identity_file?.[0];
                const text = file?.name;
                if (!text) return "";
                return text.length > 30 ? `${text.slice(0, 30)}...` : text;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "jobCard[].switch3IsSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentUser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stripeProductsListState",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.stripeProductsList.data.response.data
                .filter(recuring => recuring.default_price.recurring !== null)
                .sort((a, b) => a.name.localeCompare(b.name));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sidebar.disableLinks",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $queries.getUser.isLoading ||
                !$queries.getUser.data[0].onboarding
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "sidebar.role",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "employer"
      },
      {
        path: "paiementValidated",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalCreditsAlerts.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                ($ctx.query.credit === "success" &&
                  $ctx.query.sessionId !== "") ||
                ($ctx.query.subscription === "success" &&
                  $ctx.query.sessionId !== "") ||
                $ctx.query.paiement === "ok"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isModalCreditOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCriteria: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "3c8bdc4e-677f-4634-aaef-8a13e1973a95",
        userArgs: {},
        cacheKey: `plasmic.$.3c8bdc4e-677f-4634-aaef-8a13e1973a95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCompanies: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "a0f345b5-bbed-4347-80ba-1896e0ae6a8a",
        userArgs: {
          filters: ["345012d4-d726-480d-81f8-24e461899a19"]
        },
        cacheKey: `plasmic.$.a0f345b5-bbed-4347-80ba-1896e0ae6a8a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
        userArgs: {
          path: [
            $queries.getUser.data[0].id +
              "/" +
              $queries.getUser.data[0].profile_photo
          ]
        },
        cacheKey: `plasmic.$.8be05618-e3eb-4b37-889a-c18c2902bc93.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUser: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "c97d2f24-3d9a-4bf9-8107-193ee0e13062",
        userArgs: {
          filters: [$ctx.SupabaseUser.user?.id]
        },
        cacheKey: `plasmic.$.c97d2f24-3d9a-4bf9-8107-193ee0e13062.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    jobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "afd9b8dc-819e-4066-95d2-cc433b979835",
        userArgs: {
          filters: [$queries.getCompanies?.data[0]?.id]
        },
        cacheKey: `plasmic.$.afd9b8dc-819e-4066-95d2-cc433b979835.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramEmpCardJobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "316176a9-f0d4-44d7-baa0-a763336a6271",
        userArgs: {
          query: [$queries.getCompanies.data[0].id]
        },
        cacheKey: `plasmic.$.316176a9-f0d4-44d7-baa0-a763336a6271.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    stripeProductsList: usePlasmicDataOp(() => {
      return {
        sourceId: "iWyefF3oqfc9knnzuF1Fin",
        opId: "9403b7cf-20a8-4ab8-ab32-3e0cfab8be10",
        userArgs: {},
        cacheKey: `plasmic.$.9403b7cf-20a8-4ab8-ab32-3e0cfab8be10.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    productPrice: usePlasmicDataOp(() => {
      return {
        sourceId: "iWyefF3oqfc9knnzuF1Fin",
        opId: "259a3dde-6cd9-46b6-88e9-225b102d6b69",
        userArgs: {},
        cacheKey: `plasmic.$.259a3dde-6cd9-46b6-88e9-225b102d6b69.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    offreStripeUserInfos: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "d6ef9cec-3efc-48a9-a282-e4387e1c0996",
        userArgs: {
          filters: [$ctx.SupabaseUser.user?.id]
        },
        cacheKey: `plasmic.$.d6ef9cec-3efc-48a9-a282-e4387e1c0996.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJobapplicationsByJobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "1e3dda04-b7b2-4657-a520-9d22389e3e32",
        userArgs: {
          query: [$ctx.params.job_id]
        },
        cacheKey: `plasmic.$.1e3dda04-b7b2-4657-a520-9d22389e3e32.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchJobCoordinates: usePlasmicDataOp(() => {
      return {
        sourceId: "3fRequBPthJKGmQ2njgcZi",
        opId: "65b170b0-3295-43b3-ba9d-6e16e0e5541b",
        userArgs: {
          params: [
            $state.form2?.value?.address ?? "",

            $state.form2?.value?.location ?? "Paris",

            $state.form2?.value?.postal_code ?? "75000",

            $state.form2?.value?.country ?? "France"
          ]
        },
        cacheKey: `plasmic.$.65b170b0-3295-43b3-ba9d-6e16e0e5541b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getStripeRefs: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "a5b7058f-d1b3-4094-af68-d47e61215b98",
        userArgs: {},
        cacheKey: `plasmic.$.a5b7058f-d1b3-4094-af68-d47e61215b98.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_library_tailwind_3_4_number_tokens =
    useStyleTokens_library_tailwind_3_4_number_tokens();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicOffreEmployeur.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicOffreEmployeur.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicOffreEmployeur.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"espaceEmployeur"}
          data-plasmic-override={overrides.espaceEmployeur}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_library_tailwind_3_4_number_tokens,
            styleTokensClassNames_plasmic_rich_components,
            sty.espaceEmployeur,
            ``
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["updateCompanyInfosIsOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["companyInfos", "isOpen"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateCompanyInfosIsOpen"] != null &&
              typeof $steps["updateCompanyInfosIsOpen"] === "object" &&
              typeof $steps["updateCompanyInfosIsOpen"].then === "function"
            ) {
              $steps["updateCompanyInfosIsOpen"] = await $steps[
                "updateCompanyInfosIsOpen"
              ];
            }
          }}
          style={undefined}
        >
          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
            disableLinks={generateStateValueProp($state, [
              "sidebar",
              "disableLinks"
            ])}
            onDisableLinksChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebar",
                "disableLinks"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onRoleChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["sidebar", "role"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            role={generateStateValueProp($state, ["sidebar", "role"])}
          />

          <main
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qDWa)}>
              <div className={classNames(projectcss.all, sty.freeBox___8RxEe)}>
                <h1
                  data-plasmic-name={"heading2"}
                  data-plasmic-override={overrides.heading2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.heading2
                  )}
                >
                  {"Mes offres d'emploi"}
                </h1>
                <Button
                  className={classNames("__wab_instance", sty.button__tyBbW)}
                  disabled={(() => {
                    try {
                      return (
                        $queries.getUser.isLoading ||
                        !$queries.getUser.data[0].onboarding ||
                        !$queries.offreStripeUserInfos.data[0]
                          .recharge_classic > 0
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  end={
                    <PlusCircle1425SvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__aWubc)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yH5Tb
                      )}
                    >
                      {"cr\u00e9er une offre d'emploi"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const rechargeClassic = Number(
                                  $queries.offreStripeUserInfos.data[0]
                                    ?.recharge_classic
                                );
                                const rechargeLastminute = Number(
                                  $queries.offreStripeUserInfos.data[0]
                                    ?.recharge_lastminute
                                );
                                const isNaN = Number.isNaN;
                                const isClassicValid =
                                  !isNaN(rechargeClassic) &&
                                  rechargeClassic > 0;
                                const isLastminuteValid =
                                  !isNaN(rechargeLastminute) &&
                                  rechargeLastminute > 0;
                                if (isLastminuteValid) {
                                  $state.insufficientCharges.isOpen = false;
                                  return true;
                                } else if (isClassicValid) {
                                  $state.insufficientCharges.isOpen = false;
                                  return true;
                                } else {
                                  $state.insufficientCharges.isOpen = true;
                                  return false;
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateCreateOffreIsOpen"] =
                      $steps.runCode === true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["createJob", "isOpen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateCreateOffreIsOpen"] != null &&
                      typeof $steps["updateCreateOffreIsOpen"] === "object" &&
                      typeof $steps["updateCreateOffreIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateCreateOffreIsOpen"] = await $steps[
                        "updateCreateOffreIsOpen"
                      ];
                    }
                  }}
                />
              </div>
              {(() => {
                try {
                  return (
                    !$queries.paramEmpCardJobOffers.isLoading &&
                    $queries.paramEmpCardJobOffers?.data?.length > 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"annonces3"}
                  data-plasmic-override={overrides.annonces3}
                  className={classNames(projectcss.all, sty.annonces3)}
                >
                  {(() => {
                    try {
                      return $queries.paramEmpCardJobOffers.isLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fcv3K
                      )}
                    >
                      {"Chargement..."}
                    </div>
                  ) : null}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.paramEmpCardJobOffers.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e6YPj
                        )}
                        key={currentIndex}
                      >
                        {(() => {
                          const child$Props = {
                            _delete: async event => {
                              const $steps = {};

                              $steps["updateCurrentJobObject"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentJobObject"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentJobObject"] != null &&
                                typeof $steps["updateCurrentJobObject"] ===
                                  "object" &&
                                typeof $steps["updateCurrentJobObject"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentJobObject"] = await $steps[
                                  "updateCurrentJobObject"
                                ];
                              }

                              $steps["openDeleteModal"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["deleteJob", "isOpen"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["openDeleteModal"] != null &&
                                typeof $steps["openDeleteModal"] === "object" &&
                                typeof $steps["openDeleteModal"].then ===
                                  "function"
                              ) {
                                $steps["openDeleteModal"] = await $steps[
                                  "openDeleteModal"
                                ];
                              }
                            },
                            avalabilityStatus: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "avalabilityStatus"
                            ]),
                            className: classNames(
                              "__wab_instance",
                              sty.jobCard
                            ),
                            contractType: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "contractType"
                            ]),
                            edit: async event => {
                              const $steps = {};

                              $steps["updateCurrentJobObject"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentJobObject"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentJobObject"] != null &&
                                typeof $steps["updateCurrentJobObject"] ===
                                  "object" &&
                                typeof $steps["updateCurrentJobObject"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentJobObject"] = await $steps[
                                  "updateCurrentJobObject"
                                ];
                              }

                              $steps["updateEditOffreIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["editJob", "isOpen"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateEditOffreIsOpen"] != null &&
                                typeof $steps["updateEditOffreIsOpen"] ===
                                  "object" &&
                                typeof $steps["updateEditOffreIsOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateEditOffreIsOpen"] = await $steps[
                                  "updateEditOffreIsOpen"
                                ];
                              }
                            },
                            index: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "index"
                            ]),
                            isBoosted: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "isBoosted"
                            ]),
                            isPosted: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "isPosted"
                            ]),
                            jobId: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "jobId"
                            ]),
                            location: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "location"
                            ]),
                            numJobApplications: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "numJobApplications"
                            ]),
                            onAvalabilityStatusChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "avalabilityStatus"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onClick: async () => {
                              const $steps = {};
                            },
                            onClickBoost: async event => {
                              const $steps = {};

                              $steps["updateInsufficientChargesIsOpen"] =
                                Number(
                                  $queries.offreStripeUserInfos.data[0]
                                    .recharge_boost
                                ) == 0
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "insufficientCharges",
                                            "isOpen"
                                          ]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["updateInsufficientChargesIsOpen"] !=
                                  null &&
                                typeof $steps[
                                  "updateInsufficientChargesIsOpen"
                                ] === "object" &&
                                typeof $steps["updateInsufficientChargesIsOpen"]
                                  .then === "function"
                              ) {
                                $steps["updateInsufficientChargesIsOpen"] =
                                  await $steps[
                                    "updateInsufficientChargesIsOpen"
                                  ];
                              }
                            },
                            onContractTypeChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "contractType"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onIndexChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "index"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onIsBoostedChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "isBoosted"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onIsPostedChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "isPosted"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onJobIdChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "jobId"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onJobToBoost: async () => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          const rechargeBoost = Number(
                                            $queries.offreStripeUserInfos
                                              .data[0].recharge_boost
                                          );
                                          if (
                                            $state.jobCard[currentIndex]
                                              .switch3IsSelected &&
                                            rechargeBoost <= 0
                                          ) {
                                            $state.insufficientCharges.isOpen =
                                              true;
                                            $state.jobCard[
                                              currentItem
                                            ].switch3IsSelected = false;
                                            return false;
                                          }
                                          return true;
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["postgresUpdateMany"] =
                                $steps.runCode === true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                          opId: "d5ac40b0-0d4d-4dc6-9737-2d220b297a64",
                                          userArgs: {
                                            variables: [
                                              (() => {
                                                const rechargeBoost = Number(
                                                  $queries.offreStripeUserInfos
                                                    .data[0].recharge_boost
                                                );
                                                if (rechargeBoost > 0) {
                                                  const updatedRecharge =
                                                    rechargeBoost - 1;
                                                  return updatedRecharge;
                                                } else {
                                                  return rechargeBoost;
                                                }
                                              })()
                                            ],

                                            conditions: [
                                              $ctx.SupabaseUser.user.id
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["postgresUpdateMany"] != null &&
                                typeof $steps["postgresUpdateMany"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateMany"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateMany"] = await $steps[
                                  "postgresUpdateMany"
                                ];
                              }

                              $steps["postgresUpdateById"] =
                                $steps.runCode === true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                          opId: "7e8f8392-4287-4de7-b336-2f14d91a4bba",
                                          userArgs: {
                                            keys: [currentItem.id]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            },
                            onLocationChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "location"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onNumJobApplicationsChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "numJobApplications"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onPostalCodeChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "postalCode"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onPublishDateChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "publishDate"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onSalaryChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "salary"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onSectorActivityChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "sectorActivity"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onStatusChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "status"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onSwitch3IsSelectedChange: async (
                              ...eventArgs: any
                            ) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "switch3IsSelected"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onTitleChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "title"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onWorkModeChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "workMode"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onWorkingTimeChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "jobCard",
                                __plasmic_idx_0,
                                "workingTime"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onclickToPostAd: async isSelected => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          const rechargeClassic = Number(
                                            $queries.offreStripeUserInfos
                                              .data[0].recharge_classic
                                          );
                                          const rechargeLastminute = Number(
                                            $queries.offreStripeUserInfos
                                              .data[0].recharge_lastminute
                                          );
                                          const isLastMinuteJob =
                                            currentItem.is_last_minute;
                                          if (isLastMinuteJob) {
                                            if (rechargeLastminute > 0) {
                                              $state.insufficientCharges.isOpen =
                                                false;
                                              return true;
                                            } else {
                                              $state.insufficientCharges.isOpen =
                                                true;
                                              return false;
                                            }
                                          } else {
                                            if (rechargeClassic > 0) {
                                              $state.insufficientCharges.isOpen =
                                                false;
                                              return true;
                                            } else if (rechargeLastminute > 0) {
                                              $state.insufficientCharges.isOpen =
                                                true;
                                              return false;
                                            } else {
                                              $state.insufficientCharges.isOpen =
                                                true;
                                              return false;
                                            }
                                          }
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["postgresUpdateById"] =
                                $steps.runCode === true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                          opId: "dc7ec104-f8da-4927-a69d-7d2625ce7e24",
                                          userArgs: {
                                            keys: [currentItem.id],

                                            variables: [
                                              $state.currentJobObject
                                                .is_last_minute
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }

                              $steps["useCredit"] =
                                $steps.runCode === true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                          opId: "a73ddeb0-a427-49e7-a77a-47ee6c992568",
                                          userArgs: {
                                            conditions: [
                                              $ctx.SupabaseUser.user.id
                                            ],

                                            variables: [
                                              (() => {
                                                const recharge = Number(
                                                  $queries.offreStripeUserInfos
                                                    .data[0].recharge_classic
                                                );
                                                const isLastMinuteJob =
                                                  currentItem.is_last_minute;
                                                if (isLastMinuteJob) {
                                                  return recharge;
                                                }
                                                if (
                                                  !isLastMinuteJob &&
                                                  recharge > 0
                                                ) {
                                                  const updatedRecharge =
                                                    recharge - 1;
                                                  return updatedRecharge;
                                                }
                                                return recharge;
                                              })(),

                                              (() => {
                                                const rechargeClassic = Number(
                                                  $queries.offreStripeUserInfos
                                                    .data[0].recharge_classic
                                                );
                                                const rechargeLastminute =
                                                  Number(
                                                    $queries
                                                      .offreStripeUserInfos
                                                      .data[0]
                                                      .recharge_lastminute
                                                  );
                                                const switchIsSelected =
                                                  $state.jobCard[currentIndex]
                                                    .switch3IsSelected;
                                                const isLastMinuteJob =
                                                  currentItem.is_last_minute;
                                                if (!isLastMinuteJob) {
                                                  return rechargeLastminute;
                                                }
                                                if (
                                                  isLastMinuteJob &&
                                                  rechargeLastminute > 0
                                                ) {
                                                  return rechargeLastminute - 1;
                                                }
                                                return rechargeLastminute;
                                              })()
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["useCredit"] != null &&
                                typeof $steps["useCredit"] === "object" &&
                                typeof $steps["useCredit"].then === "function"
                              ) {
                                $steps["useCredit"] = await $steps["useCredit"];
                              }

                              $steps["goToOffreEmployeur"] =
                                $steps.runCode === true
                                  ? (() => {
                                      const actionArgs = {};
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["goToOffreEmployeur"] != null &&
                                typeof $steps["goToOffreEmployeur"] ===
                                  "object" &&
                                typeof $steps["goToOffreEmployeur"].then ===
                                  "function"
                              ) {
                                $steps["goToOffreEmployeur"] = await $steps[
                                  "goToOffreEmployeur"
                                ];
                              }
                            },
                            onclickToShowJobApplications: async () => {
                              const $steps = {};

                              $steps["goToCandidaturesEmployeur"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/candidatures-employeur/${(() => {
                                        try {
                                          return currentItem.id;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToCandidaturesEmployeur"] != null &&
                                typeof $steps["goToCandidaturesEmployeur"] ===
                                  "object" &&
                                typeof $steps["goToCandidaturesEmployeur"]
                                  .then === "function"
                              ) {
                                $steps["goToCandidaturesEmployeur"] =
                                  await $steps["goToCandidaturesEmployeur"];
                              }
                            },
                            postalCode: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "postalCode"
                            ]),
                            publishDate: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "publishDate"
                            ]),
                            salary: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "salary"
                            ]),
                            sectorActivity: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "sectorActivity"
                            ]),
                            status: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "status"
                            ]),
                            stripe: (() => {
                              try {
                                return $queries.offreStripeUserInfos;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            title: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "title"
                            ]),
                            voirLeDetailBtn: async event => {
                              const $steps = {};

                              $steps["updateCurrentJobObject"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["currentJobObject"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCurrentJobObject"] != null &&
                                typeof $steps["updateCurrentJobObject"] ===
                                  "object" &&
                                typeof $steps["updateCurrentJobObject"].then ===
                                  "function"
                              ) {
                                $steps["updateCurrentJobObject"] = await $steps[
                                  "updateCurrentJobObject"
                                ];
                              }

                              $steps["updateJobDetailsIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["jobDetails", "isOpen"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateJobDetailsIsOpen"] != null &&
                                typeof $steps["updateJobDetailsIsOpen"] ===
                                  "object" &&
                                typeof $steps["updateJobDetailsIsOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateJobDetailsIsOpen"] = await $steps[
                                  "updateJobDetailsIsOpen"
                                ];
                              }
                            },
                            workMode: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "workMode"
                            ]),
                            workingTime: generateStateValueProp($state, [
                              "jobCard",
                              __plasmic_idx_0,
                              "workingTime"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "jobCard[].title",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].status",
                                initFunc: ({ $props, $state, $queries }) => ""
                              },
                              {
                                name: "jobCard[].location",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.location;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].publishDate",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.created_at;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].isBoosted",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.is_boosted;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].isPosted",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.posted;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].avalabilityStatus",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.availability_status;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].contractType",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.contract_type;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].sectorActivity",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.sector_activity;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].workingTime",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.working_time;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].salary",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.salary;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].workMode",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.work_mode;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].jobId",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.id;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 0;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].numJobApplications",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.num_job_applications;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].index",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentIndex;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 0;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "jobCard[].postalCode",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.postal_code;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <JobCard
                              data-plasmic-name={"jobCard"}
                              data-plasmic-override={overrides.jobCard}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    );
                  })}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return $queries.jobOffers.data.length === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          !$queries.paramEmpCardJobOffers.isLoading &&
                          $queries.paramEmpCardJobOffers?.data?.length == 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div
                  data-plasmic-name={"noAnnonce2"}
                  data-plasmic-override={overrides.noAnnonce2}
                  className={classNames(projectcss.all, sty.noAnnonce2)}
                >
                  <div
                    data-plasmic-name={"featuredIcon3"}
                    data-plasmic-override={overrides.featuredIcon3}
                    className={classNames(projectcss.all, sty.featuredIcon3)}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? NotificationBellSvgrepoComSvgIcon
                          : IconIcon
                      }
                      className={classNames(projectcss.all, sty.svg__pMjqr)}
                      role={"img"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"textAndSupportingText3"}
                    data-plasmic-override={overrides.textAndSupportingText3}
                    className={classNames(
                      projectcss.all,
                      sty.textAndSupportingText3
                    )}
                  >
                    <div
                      data-plasmic-name={"text7"}
                      data-plasmic-override={overrides.text7}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text7
                      )}
                    >
                      {"Vous n'avez pas encore cr\u00e9\u00e9 d'offre d'emploi"}
                    </div>
                    <div
                      data-plasmic-name={"supportingText3"}
                      data-plasmic-override={overrides.supportingText3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.supportingText3
                      )}
                    >
                      {
                        "Cr\u00e9ez des offres d'emploi et trouvez un collaborateur qui correspond \u00e0 vos attentes."
                      }
                    </div>
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__w3Tts)}
                    disabled={(() => {
                      try {
                        return (
                          $queries.getUser.isLoading ||
                          !$queries.getUser.data[0].onboarding ||
                          !$queries.offreStripeUserInfos.data[0]
                            .recharge_classic > 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    end={
                      <PlusCircle1425SvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__bbX1U)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yfO2Q
                        )}
                      >
                        {"cr\u00e9er une offre d'emploi "}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const rechargeClassic = Number(
                                    $queries.offreStripeUserInfos.data[0]
                                      ?.recharge_classic
                                  );
                                  const rechargeLastminute = Number(
                                    $queries.offreStripeUserInfos.data[0]
                                      ?.recharge_lastminute
                                  );
                                  const isClassicValid =
                                    !isNaN(rechargeClassic) &&
                                    rechargeClassic > 0;
                                  const isLastminuteValid =
                                    !isNaN(rechargeLastminute) &&
                                    rechargeLastminute > 0;
                                  if (
                                    $state.lastMinuteToggle.switch2IsSelected
                                  ) {
                                    if (isLastminuteValid) {
                                      $state.insufficientCharges.isOpen = false;
                                      return true;
                                    } else {
                                      $state.insufficientCharges.isOpen = true;
                                      return false;
                                    }
                                  } else {
                                    if (isClassicValid) {
                                      $state.insufficientCharges.isOpen = false;
                                      return true;
                                    } else {
                                      $state.insufficientCharges.isOpen = true;
                                      return false;
                                    }
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateCreateOffreIsOpen"] =
                        $steps.runCode === true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["createJob", "isOpen"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateCreateOffreIsOpen"] != null &&
                        typeof $steps["updateCreateOffreIsOpen"] === "object" &&
                        typeof $steps["updateCreateOffreIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateCreateOffreIsOpen"] = await $steps[
                          "updateCreateOffreIsOpen"
                        ];
                      }
                    }}
                  />
                </div>
              ) : null}
            </div>
          </main>
          <Modal
            data-plasmic-name={"createJob"}
            data-plasmic-override={overrides.createJob}
            className={classNames("__wab_instance", sty.createJob)}
            closeOnBackdropClick={false}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__ooTw4)}>
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__yzTu8
                  )}
                >
                  {"Cr\u00e9er une offre d'emploi"}
                </h3>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form2),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form2", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: undefined,
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["checkRechargeQuantity"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const rechargeClassic = Number(
                                    $queries.offreStripeUserInfos.data[0]
                                      .recharge_classic
                                  );
                                  const rechargeLastminute = Number(
                                    $queries.offreStripeUserInfos.data[0]
                                      .recharge_lastminute
                                  );
                                  if (
                                    $state.lastMinuteToggle.switch2IsSelected
                                  ) {
                                    if (rechargeLastminute > 0) {
                                      $state.insufficientCharges.isOpen = false;
                                      return true;
                                    } else {
                                      $state.insufficientCharges.isOpen = true;
                                      return false;
                                    }
                                  } else {
                                    if (rechargeClassic > 0) {
                                      $state.insufficientCharges.isOpen = false;
                                      return true;
                                    } else {
                                      $state.insufficientCharges.isOpen = true;
                                      return false;
                                    }
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["checkRechargeQuantity"] != null &&
                        typeof $steps["checkRechargeQuantity"] === "object" &&
                        typeof $steps["checkRechargeQuantity"].then ===
                          "function"
                      ) {
                        $steps["checkRechargeQuantity"] = await $steps[
                          "checkRechargeQuantity"
                        ];
                      }

                      $steps["createOffer"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "d065132b-2aac-4c10-8414-8e92410e1c74",
                                userArgs: {
                                  variables: [
                                    $state.form2.value.address,

                                    $state.form2.value.availability_status,

                                    $queries.getCompanies.data[0].id,

                                    $state.form2.value.benefits,

                                    $state.form2.value.team_size,

                                    $state.form2.value.contract_type,

                                    $state.form2.value.country,

                                    $state.form2.value.description,

                                    $state.form2.value.end_date,

                                    $state.lastMinuteToggle
                                      .switch2IsSelected === true
                                      ? true
                                      : false,

                                    $queries.fetchJobCoordinates.data.response
                                      .features[0].geometry.coordinates[1],

                                    $state.form2.value.location,

                                    $queries.fetchJobCoordinates.data.response
                                      .features[0].geometry.coordinates[0],

                                    $state.form2.value.postal_code,

                                    $state.form2.value.requirements,

                                    $state.form2.value.salary,

                                    $state.form2.value.sector_activity,

                                    $state.form2.value.start_date,

                                    $state.form2.value.title,

                                    $state.form2.value.work_mode,

                                    $state.form2.value.working_time
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "316176a9-f0d4-44d7-baa0-a763336a6271"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["createOffer"] != null &&
                        typeof $steps["createOffer"] === "object" &&
                        typeof $steps["createOffer"].then === "function"
                      ) {
                        $steps["createOffer"] = await $steps["createOffer"];
                      }

                      $steps["closeModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["createJob", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["closeModal"] != null &&
                        typeof $steps["closeModal"] === "object" &&
                        typeof $steps["closeModal"].then === "function"
                      ) {
                        $steps["closeModal"] = await $steps["closeModal"];
                      }

                      $steps["showNotification"] =
                        $steps.checkRechargeQuantity === true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "success",
                                  "Votre offre est publi\u00e9e et visible des candidats"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["showNotification"] != null &&
                        typeof $steps["showNotification"] === "object" &&
                        typeof $steps["showNotification"].then === "function"
                      ) {
                        $steps["showNotification"] = await $steps[
                          "showNotification"
                        ];
                      }

                      $steps["updateStripe"] =
                        $steps.checkRechargeQuantity === true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "a73ddeb0-a427-49e7-a77a-47ee6c992568",
                                  userArgs: {
                                    conditions: [$ctx.SupabaseUser.user?.id],

                                    variables: [
                                      (() => {
                                        const recharge = Number(
                                          $queries.offreStripeUserInfos.data[0]
                                            .recharge_classic
                                        );
                                        const isLastMinuteJob =
                                          $state.lastMinuteToggle
                                            .switch2IsSelected;
                                        if (isLastMinuteJob) {
                                          return recharge;
                                        }
                                        if (
                                          !$state.lastMinuteToggle
                                            .switch2IsSelected &&
                                          recharge > 0
                                        ) {
                                          const updatedRecharge = recharge - 1;
                                          return updatedRecharge;
                                        }
                                        return recharge;
                                      })(),

                                      (() => {
                                        const rechargeClassic = Number(
                                          $queries.offreStripeUserInfos.data[0]
                                            .recharge_classic
                                        );
                                        const rechargeLastminute = Number(
                                          $queries.offreStripeUserInfos.data[0]
                                            .recharge_lastminute
                                        );
                                        const switchIsSelected =
                                          $state.lastMinuteToggle
                                            .switch2IsSelected;
                                        const isLastMinuteJob =
                                          $state.currentJobObject
                                            .is_last_minute;
                                        if (
                                          isLastMinuteJob &&
                                          rechargeLastminute > 0
                                        ) {
                                          return rechargeLastminute - 1;
                                        }
                                        const canUseLastMinute =
                                          switchIsSelected ||
                                          (!switchIsSelected &&
                                            rechargeClassic <= 0 &&
                                            rechargeLastminute > 0);
                                        if (
                                          canUseLastMinute &&
                                          rechargeLastminute > 0
                                        ) {
                                          return rechargeLastminute - 1;
                                        } else {
                                          return rechargeLastminute;
                                        }
                                      })()
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateStripe"] != null &&
                        typeof $steps["updateStripe"] === "object" &&
                        typeof $steps["updateStripe"].then === "function"
                      ) {
                        $steps["updateStripe"] = await $steps["updateStripe"];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form2", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form2"] = ref;
                    },
                    requiredMark: false,
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form2.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form2"}
                      data-plasmic-override={overrides.form2}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___9GbMi
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yt7A0
                            )}
                          >
                            {"Intitul\u00e9 du poste*"}
                          </div>
                        }
                        name={"title"}
                        preserve={false}
                        rules={[{ ruleType: "required", message: "requis" }]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput8"}
                          data-plasmic-override={overrides.textInput8}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput8
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput8",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Intitul\u00e9 du poste"}
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uk817
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__iUfM0
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dcdDl
                              )}
                            >
                              {"Type de contrat*"}
                            </div>
                          }
                          name={"contract_type"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select28"}
                            data-plasmic-override={overrides.select28}
                            className={classNames(
                              "__wab_instance",
                              sty.select28
                            )}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(
                                      item => item.type === "contract_type"
                                    )
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem___1MvQd
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__klSyb
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select28",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Type de contrat"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___0FsF
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zlK2I
                              )}
                            >
                              {"Temps de travail*"}
                            </div>
                          }
                          name={"working_time"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select29"}
                            data-plasmic-override={overrides.select29}
                            className={classNames(
                              "__wab_instance",
                              sty.select29
                            )}
                            initialSelectedValue={undefined}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(
                                      item => item.type === "working_time"
                                    )
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem___1EMpV
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dmOb3
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select29",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Temps de travail"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gzHYd
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__gjJg
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__b2VmR
                              )}
                            >
                              {"Salaire*"}
                            </div>
                          }
                          name={"salary"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select30"}
                            data-plasmic-override={overrides.select30}
                            className={classNames(
                              "__wab_instance",
                              sty.select30
                            )}
                            initialSelectedValue={undefined}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(item => item.type === "salary")
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__hOElY
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j1ZPt
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select30",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Salaire"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__hw4Dg
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vjjrQ
                              )}
                            >
                              {"Secteur de travail*"}
                            </div>
                          }
                          name={"sector_activity"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select31"}
                            data-plasmic-override={overrides.select31}
                            className={classNames(
                              "__wab_instance",
                              sty.select31
                            )}
                            initialSelectedValue={undefined}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(
                                      item => item.type === "sector_activity"
                                    )
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__ivrw
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__in4Xo
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select31",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Secteur de travail"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vfZq
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__ymLck
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6Ynlx
                              )}
                            >
                              {"Date de d\u00e9but du contrat*"}
                            </div>
                          }
                          name={"start_date"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: true,
                              autoFocus: false,
                              bordered: true,
                              className: classNames(
                                "__wab_instance",
                                sty.timePicker3
                              ),
                              disabled: false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["timePicker3", "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              popupScopeClassName:
                                sty["timePicker3__datePickerPopup"],
                              showTime: false,
                              showToday: true,
                              value: generateStateValueProp($state, [
                                "timePicker3",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "timePicker3.value"
                                }
                              ],
                              [],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdDatePicker
                                data-plasmic-name={"timePicker3"}
                                data-plasmic-override={overrides.timePicker3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__jnbdB
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fyjYq
                              )}
                            >
                              {"Date de fin du contrat"}
                            </div>
                          }
                          name={"end_date"}
                          rules={[
                            {
                              ruleType: "advanced",
                              custom: (rule, value) => {
                                return (
                                  $state.form2.value.end_date == undefined ||
                                  $state.form2.value.end_date == null ||
                                  $state.form2.value.start_date <
                                    $state.form2.value.end_date
                                );
                              },
                              message: ``
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: true,
                              className: classNames(
                                "__wab_instance",
                                sty.timePicker4
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["timePicker4", "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              popupScopeClassName:
                                sty["timePicker4__datePickerPopup"],
                              value: generateStateValueProp($state, [
                                "timePicker4",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "timePicker4.value"
                                }
                              ],
                              [],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdDatePicker
                                data-plasmic-name={"timePicker4"}
                                data-plasmic-override={overrides.timePicker4}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pxPvH
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__lfxos
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hbhBq
                              )}
                            >
                              {"Mode de travail*"}
                            </div>
                          }
                          name={"work_mode"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select32"}
                            data-plasmic-override={overrides.select32}
                            className={classNames(
                              "__wab_instance",
                              sty.select32
                            )}
                            initialSelectedValue={undefined}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(item => item.type === "work_mode")
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__gsxIt
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__x20T
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select32",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Mode de travail"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__lFIqh
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vhVxe
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__svS7S
                                )}
                              >
                                {"Disponibilit\u00e9*"}
                              </div>
                              <LastMinuteToggle
                                data-plasmic-name={"lastMinuteToggle"}
                                data-plasmic-override={
                                  overrides.lastMinuteToggle
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.lastMinuteToggle
                                )}
                                isDisabled={generateStateValueProp($state, [
                                  "lastMinuteToggle",
                                  "isDisabled"
                                ])}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateInsufficientChargesIsOpen"] =
                                    $queries.offreStripeUserInfos?.data[0]
                                      ?.recharge_lastminute <= 0
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "insufficientCharges",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateInsufficientChargesIsOpen"] !=
                                      null &&
                                    typeof $steps[
                                      "updateInsufficientChargesIsOpen"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateInsufficientChargesIsOpen"
                                    ].then === "function"
                                  ) {
                                    $steps["updateInsufficientChargesIsOpen"] =
                                      await $steps[
                                        "updateInsufficientChargesIsOpen"
                                      ];
                                  }
                                }}
                                onIsDisabledChange2={async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangeProp($state, [
                                    "lastMinuteToggle",
                                    "isDisabled"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                onSwitch2IsSelectedChange={async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangeProp($state, [
                                    "lastMinuteToggle",
                                    "switch2IsSelected"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                switch2IsSelected={generateStateValueProp(
                                  $state,
                                  ["lastMinuteToggle", "switch2IsSelected"]
                                )}
                              />
                            </div>
                          }
                          name={"availability_status"}
                          noLabel={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? false
                              : undefined
                          }
                          preserve={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : undefined
                          }
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select33"}
                            data-plasmic-override={overrides.select33}
                            className={classNames(
                              "__wab_instance",
                              sty.select33
                            )}
                            initialSelectedValue={undefined}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(
                                      item =>
                                        item.type === "availability_status"
                                    )
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__gv9Ea
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nSfy
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select33",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Disponibilit\u00e9"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sI5Wy
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__wgxLw
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xthih
                              )}
                            >
                              {"Avantages"}
                            </div>
                          }
                          name={"benefits"}
                          rules={[]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select13"}
                            data-plasmic-override={overrides.select13}
                            allowClear={true}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select13
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              styleTokensClassNames,
                              styleTokensClassNames_antd_5_hostless,
                              styleTokensClassNames_library_tailwind_3_4_number_tokens,
                              styleTokensClassNames_plasmic_rich_components
                            )}
                            mode={"multiple"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select13",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "benefits_type")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__l0BAm
                                )}
                              >
                                <PlusIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ijXda
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___37UkC
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-3qu294j6Zo_Y)"
                                      }}
                                    >
                                      {"Ajouter"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </div>
                            }
                            popupScopeClassName={sty["select13__popup"]}
                            size={"large"}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__s1WCq
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select13",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8Xbhy
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__wpCgQ
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fBuHh
                              )}
                            >
                              {"Lieu de travail*"}
                            </div>
                          }
                          name={"address"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <TextInput
                            data-plasmic-name={"rue"}
                            data-plasmic-override={overrides.rue}
                            className={classNames("__wab_instance", sty.rue)}
                            defaultValue={(() => {
                              try {
                                return $queries.getCompanies.data[0].address;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "rue",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Rue"}
                          />
                        </FormItemWrapper>
                        <div
                          data-plasmic-name={"codePosteVille"}
                          data-plasmic-override={overrides.codePosteVille}
                          className={classNames(
                            projectcss.all,
                            sty.codePosteVille
                          )}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__pCjc
                            )}
                            hidden={false}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yaxNk
                                )}
                              >
                                {""}
                              </div>
                            }
                            name={"postal_code"}
                            noLabel={true}
                            rules={[
                              { ruleType: "required" },

                              {
                                ruleType: "min",
                                length: 5,
                                message:
                                  "Le code postal doit contenir au moins 5 chiffres."
                              },

                              {
                                ruleType: "max",
                                length: 5,
                                message:
                                  "Le code postal ne doit pas d\u00e9passer 5 chiffres."
                              }
                            ]}
                          >
                            <TextInput
                              data-plasmic-name={"codePostal"}
                              data-plasmic-override={overrides.codePostal}
                              className={classNames(
                                "__wab_instance",
                                sty.codePostal
                              )}
                              defaultValue={(() => {
                                try {
                                  return $queries.getCompanies.data[0]
                                    .postal_code;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              inputMode={"numeric"}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "codePostal",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Code postal"}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__hjGdm
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__poGmr
                                )}
                              >
                                {"Adresse*"}
                              </div>
                            }
                            name={"location"}
                            noLabel={true}
                            rules={[
                              { ruleType: "required", message: "requis" }
                            ]}
                          >
                            <TextInput
                              data-plasmic-name={"ville"}
                              data-plasmic-override={overrides.ville}
                              className={classNames(
                                "__wab_instance",
                                sty.ville
                              )}
                              defaultValue={(() => {
                                try {
                                  return $queries.getCompanies.data[0].location;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "ville",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Ville"}
                            />
                          </FormItemWrapper>
                        </div>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__omlFk
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ej8Yc
                              )}
                            >
                              {"Adresse*"}
                            </div>
                          }
                          name={"country"}
                          noLabel={true}
                          rules={[{ ruleType: "required" }]}
                        >
                          <Select
                            data-plasmic-name={"select10"}
                            data-plasmic-override={overrides.select10}
                            className={classNames(
                              "__wab_instance",
                              sty.select10
                            )}
                            initialSelectedValue={(() => {
                              try {
                                return $queries.getCompanies.data[0].country;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.countries;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__n4F5R
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3UfGn
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select10",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pays"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___9D410
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__adtS
                            )}
                          >
                            {"Description du poste*"}
                          </div>
                        }
                        name={"description"}
                        rules={[{ ruleType: "required", message: "requis" }]}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput"}
                          data-plasmic-override={overrides.textAreaInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={(() => {
                            try {
                              return "Mission 1\nMission 2\nMission 3\n...";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__rMpzu
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xwgYj
                            )}
                          >
                            {"Profil attendu*"}
                          </div>
                        }
                        name={"requirements"}
                        rules={[{ ruleType: "required", message: "requis" }]}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput2"}
                          data-plasmic-override={overrides.textAreaInput2}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput2
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput2",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "Description du profil recherch\u00e9...."
                          }
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2MyK
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__zCNdp
                          )}
                          color={"white"}
                          disabled={false}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mzQrB
                              )}
                              role={"img"}
                            />
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a6Qdd
                              )}
                            >
                              {"enregistrer comme brouillon"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["createDraftJob"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "02a4b7b4-f704-4f71-8a8a-c293a4f37f46",
                                      userArgs: {
                                        variables: [
                                          $state.form2.value.address,

                                          $state.form2.value
                                            .availability_status,

                                          $queries.getCompanies.data[0].id,

                                          $state.form2.value.contract_type,

                                          $state.form2.value.country,

                                          $state.form2.value.description,

                                          $state.form2.value.location,

                                          $state.form2.value.postal_code,

                                          $state.form2.value.requirements,

                                          $state.form2.value.salary,

                                          $state.form2.value.sector_activity,

                                          $state.form2.value.title,

                                          $state.form2.value.work_mode,

                                          $state.form2.value.working_time,

                                          $state.form2.value.benefits,

                                          $state.lastMinuteToggle
                                            .switch2IsSelected,

                                          $state.form2.value.end_date,

                                          $state.form2.value.start_date,

                                          $queries.fetchJobCoordinates.data
                                            .response.features[0].geometry
                                            .coordinates[1],

                                          $queries.fetchJobCoordinates.data
                                            .response.features[0].geometry
                                            .coordinates[0]
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "316176a9-f0d4-44d7-baa0-a763336a6271"
                                      ],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["createDraftJob"] != null &&
                              typeof $steps["createDraftJob"] === "object" &&
                              typeof $steps["createDraftJob"].then ===
                                "function"
                            ) {
                              $steps["createDraftJob"] = await $steps[
                                "createDraftJob"
                              ];
                            }

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        $state.lastMinuteToggle.switch2IsSelected =
                                          false;
                                        return ($state.lastMinuteToggle2.switch2IsSelected =
                                          false);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["closeModal"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["createJob", "isOpen"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["closeModal"] != null &&
                              typeof $steps["closeModal"] === "object" &&
                              typeof $steps["closeModal"].then === "function"
                            ) {
                              $steps["closeModal"] = await $steps["closeModal"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "success",
                                      "Votre brouillon a \u00e9t\u00e9 enregistr\u00e9 avec succ\u00e8s !"
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          resetsForm={true}
                          submitsForm={false}
                          type={"bordered"}
                        />

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__zEcBb
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dsvOk
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xIBo
                              )}
                            >
                              {"cr\u00e9er l'offre"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = false
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        const rechargeClassic = Number(
                                          $queries.offreStripeUserInfos.data[0]
                                            .recharge_classic
                                        );
                                        const rechargeLastminute = Number(
                                          $queries.offreStripeUserInfos.data[0]
                                            .recharge_lastminute
                                        );
                                        if (
                                          $state.lastMinuteToggle
                                            .switch2IsSelected
                                        ) {
                                          if (rechargeLastminute > 0) {
                                            $state.insufficientCharges.isOpen =
                                              false;
                                            return true;
                                          } else {
                                            $state.insufficientCharges.isOpen =
                                              true;
                                            return false;
                                          }
                                        } else {
                                          if (rechargeClassic > 0) {
                                            $state.insufficientCharges.isOpen =
                                              false;
                                            return true;
                                          } else {
                                            $state.insufficientCharges.isOpen =
                                              true;
                                            return false;
                                          }
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["closeModal"] = false
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        $state.createJob.isOpen = false;
                                        $state.lastMinuteToggle.switch2IsSelected =
                                          false;
                                        return ($state.lastMinuteToggle2.switch2IsSelected =
                                          false);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["closeModal"] != null &&
                              typeof $steps["closeModal"] === "object" &&
                              typeof $steps["closeModal"].then === "function"
                            ) {
                              $steps["closeModal"] = await $steps["closeModal"];
                            }

                            $steps["createOffer"] = false
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "5d31e8d8-cff8-4509-9e73-34a7e4b58ca3",
                                      userArgs: {
                                        variables: [
                                          $state.form2.value.address,

                                          $state.form2.value
                                            .availability_status,

                                          $queries.getCompanies.data[0].id,

                                          $state.form2.value.contract_type,

                                          $state.form2.value.country,

                                          $state.form2.value.description,

                                          $state.form2.value.location,

                                          $state.form2.value.postal_code,

                                          $state.form2.value.requirements,

                                          $state.form2.value.salary,

                                          $state.form2.value.sector_activity,

                                          $state.form2.value.title,

                                          $state.form2.value.work_mode,

                                          $state.form2.value.working_time,

                                          $state.form2.value.benefits,

                                          $state.lastMinuteToggle
                                            .switch2IsSelected,

                                          $state.form2.value.end_date,

                                          $state.form2.value.start_date,

                                          $queries.fetchJobCoordinates.data
                                            .response.features[0].geometry
                                            .coordinates[1],

                                          $queries.fetchJobCoordinates.data
                                            .response.features[0].geometry
                                            .coordinates[0],

                                          $state.form2.value.team_size
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "316176a9-f0d4-44d7-baa0-a763336a6271",
                                        "e38cc2f4-cfb6-40a3-bc90-0b9ce2786a30",
                                        "d6ef9cec-3efc-48a9-a282-e4387e1c0996",
                                        "1284f981-03a5-4aae-9f90-4a9eb18e1c6b",
                                        "ba382dfb-c617-44db-a36f-dda3fa7e919f",
                                        "9258b35e-6135-4ba7-8ce4-fe23b60361d6",
                                        "c91b3dad-0831-48c9-8dd7-50555a9ed2f8",
                                        "09c18e19-f24f-4bbd-891f-3c8b83e5f1cc"
                                      ],
                                      roleId: null
                                    },
                                    continueOnError: false
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["createOffer"] != null &&
                              typeof $steps["createOffer"] === "object" &&
                              typeof $steps["createOffer"].then === "function"
                            ) {
                              $steps["createOffer"] = await $steps[
                                "createOffer"
                              ];
                            }

                            $steps["showNotification"] = false
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "success",
                                      "Votre offre est publi\u00e9e et visible des candidats"
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["showNotification"] != null &&
                              typeof $steps["showNotification"] === "object" &&
                              typeof $steps["showNotification"].then ===
                                "function"
                            ) {
                              $steps["showNotification"] = await $steps[
                                "showNotification"
                              ];
                            }

                            $steps["updateStripe"] = false
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "b3ab694d-132d-4e5d-9ada-cb46ac6ddaad",
                                      userArgs: {
                                        variables: [
                                          (() => {
                                            const rechargeClassic = Number(
                                              $queries.offreStripeUserInfos
                                                .data[0].recharge_classic
                                            );
                                            const rechargeLastminute = Number(
                                              $queries.offreStripeUserInfos
                                                .data[0].recharge_lastminute
                                            );
                                            const switchIsSelected =
                                              $state.lastMinuteToggle
                                                .switch2IsSelected;
                                            const isLastMinuteJob =
                                              $state.currentJobObject
                                                .is_last_minute;
                                            if (
                                              isLastMinuteJob &&
                                              rechargeLastminute > 0
                                            ) {
                                              return rechargeLastminute - 1;
                                            }
                                            const canUseLastMinute =
                                              switchIsSelected ||
                                              (!switchIsSelected &&
                                                rechargeClassic <= 0 &&
                                                rechargeLastminute > 0);
                                            if (
                                              canUseLastMinute &&
                                              rechargeLastminute > 0
                                            ) {
                                              return rechargeLastminute - 1;
                                            } else {
                                              return rechargeLastminute;
                                            }
                                          })(),

                                          (() => {
                                            const recharge = Number(
                                              $queries.offreStripeUserInfos
                                                .data[0].recharge_classic
                                            );
                                            const isLastMinuteJob =
                                              $state.lastMinuteToggle
                                                .switch2IsSelected;
                                            if (isLastMinuteJob) {
                                              return recharge;
                                            }
                                            if (
                                              !$state.lastMinuteToggle
                                                .switch2IsSelected &&
                                              recharge > 0
                                            ) {
                                              const updatedRecharge =
                                                recharge - 1;
                                              return updatedRecharge;
                                            }
                                            return recharge;
                                          })()
                                        ],

                                        conditions: [$ctx.SupabaseUser.user.id]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "d6ef9cec-3efc-48a9-a282-e4387e1c0996",
                                        "1284f981-03a5-4aae-9f90-4a9eb18e1c6b",
                                        "9258b35e-6135-4ba7-8ce4-fe23b60361d6"
                                      ],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStripe"] != null &&
                              typeof $steps["updateStripe"] === "object" &&
                              typeof $steps["updateStripe"].then === "function"
                            ) {
                              $steps["updateStripe"] = await $steps[
                                "updateStripe"
                              ];
                            }
                          }}
                          resetsForm={false}
                          submitsForm={true}
                        />
                      </div>
                    </FormWrapper>
                  );
                })()}
              </div>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__g8Xvs)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCreateOffreIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["createJob", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCreateOffreIsOpen"] != null &&
                      typeof $steps["updateCreateOffreIsOpen"] === "object" &&
                      typeof $steps["updateCreateOffreIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateCreateOffreIsOpen"] = await $steps[
                        "updateCreateOffreIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["createJob", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["createJob", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <div className={classNames(projectcss.all, sty.freeBox__uxYbw)} />
            }
          />

          <Modal
            data-plasmic-name={"editJob"}
            data-plasmic-override={overrides.editJob}
            className={classNames("__wab_instance", sty.editJob)}
            closeOnBackdropClick={false}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__pHBqe)}>
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__h0Jrc
                  )}
                >
                  {"Modifier l'offre d'emploi"}
                </h3>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.formUpdate),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["formUpdate", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: undefined,
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["updateCompanyInfosIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["companyInfos", "isOpen"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCompanyInfosIsOpen"] != null &&
                        typeof $steps["updateCompanyInfosIsOpen"] ===
                          "object" &&
                        typeof $steps["updateCompanyInfosIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateCompanyInfosIsOpen"] = await $steps[
                          "updateCompanyInfosIsOpen"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["formUpdate", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["formUpdate"] = ref;
                    },
                    requiredMark: false,
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "formUpdate.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "formUpdate.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"formUpdate"}
                      data-plasmic-override={overrides.formUpdate}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__az5Os
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fTR8
                            )}
                          >
                            {"Intitul\u00e9 du poste*"}
                          </div>
                        }
                        name={"title"}
                        rules={[{ ruleType: "required", message: "requis" }]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput20"}
                          data-plasmic-override={overrides.textInput20}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput20
                          )}
                          defaultValue={(() => {
                            try {
                              return $state.currentJobObject.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput20",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Intitul\u00e9 du poste"}
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__t1Tmc
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__dT99
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pfzhm
                              )}
                            >
                              {"Type de contrat*"}
                            </div>
                          }
                          name={"contract_type"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select34"}
                            data-plasmic-override={overrides.select34}
                            className={classNames(
                              "__wab_instance",
                              sty.select34
                            )}
                            initialSelectedValue={(() => {
                              try {
                                return $state.currentJobObject.contract_type_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(
                                      item => item.type === "contract_type"
                                    )
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem___2U1Bl
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wQuqp
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select34",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Type de travail"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__yTgr9
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nwHpC
                              )}
                            >
                              {"Temps de travail*"}
                            </div>
                          }
                          name={"working_time"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select35"}
                            data-plasmic-override={overrides.select35}
                            className={classNames(
                              "__wab_instance",
                              sty.select35
                            )}
                            initialSelectedValue={(() => {
                              try {
                                return $state.currentJobObject.working_time_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(
                                      item => item.type === "working_time"
                                    )
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__wXeDt
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6Dc7X
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select35",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Temps de tavail"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hNqG7
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__f2FXi
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nLxa
                              )}
                            >
                              {"Salaire*"}
                            </div>
                          }
                          name={"salary"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select36"}
                            data-plasmic-override={overrides.select36}
                            className={classNames(
                              "__wab_instance",
                              sty.select36
                            )}
                            initialSelectedValue={(() => {
                              try {
                                return $state.currentJobObject.salary_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(item => item.type === "salary")
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__iNmq4
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v1Og6
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select36",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Salaire"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__rcoz2
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0GkLs
                              )}
                            >
                              {"Secteur de travail*"}
                            </div>
                          }
                          name={"sector_activity"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select37"}
                            data-plasmic-override={overrides.select37}
                            className={classNames(
                              "__wab_instance",
                              sty.select37
                            )}
                            initialSelectedValue={(() => {
                              try {
                                return $state.currentJobObject
                                  .sector_activity_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(
                                      item => item.type === "sector_activity"
                                    )
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__rYMg
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zmQk9
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select37",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Secteur d'activit\u00e9"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jdVuR
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__uS4Y
                          )}
                          initialValue={(() => {
                            try {
                              return $state.currentJobObject.start_date;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__g1NwT
                              )}
                            >
                              {"Date de d\u00e9but du contrat*"}
                            </div>
                          }
                          name={"start_date"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: true,
                              className: classNames(
                                "__wab_instance",
                                sty.timePicker
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["timePicker", "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              popupScopeClassName:
                                sty["timePicker__datePickerPopup"],
                              value: generateStateValueProp($state, [
                                "timePicker",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "timePicker.value"
                                }
                              ],
                              [],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdDatePicker
                                data-plasmic-name={"timePicker"}
                                data-plasmic-override={overrides.timePicker}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___02D3
                          )}
                          initialValue={(() => {
                            try {
                              return $state.currentJobObject.end_date;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zOxCr
                              )}
                            >
                              {"Date de fin du contrat"}
                            </div>
                          }
                          name={"end_date"}
                          noLabel={false}
                          rules={[]}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: true,
                              className: classNames(
                                "__wab_instance",
                                sty.timePicker2
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["timePicker2", "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              popupScopeClassName:
                                sty["timePicker2__datePickerPopup"],
                              value: generateStateValueProp($state, [
                                "timePicker2",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "timePicker2.value"
                                }
                              ],
                              [],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdDatePicker
                                data-plasmic-name={"timePicker2"}
                                data-plasmic-override={overrides.timePicker2}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___62W9Z
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__h4Z5Z
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___29Vu
                              )}
                            >
                              {"Mode de travail*"}
                            </div>
                          }
                          name={"work_mode"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select38"}
                            data-plasmic-override={overrides.select38}
                            className={classNames(
                              "__wab_instance",
                              sty.select38
                            )}
                            initialSelectedValue={(() => {
                              try {
                                return $state.currentJobObject.work_mode_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(item => item.type === "work_mode")
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__nqT7J
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2AxIz
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select38",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Mode de travail"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__hxZsY
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__onL86
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__m3QLp
                                )}
                              >
                                {"Disponibilit\u00e9*"}
                              </div>
                              <LastMinuteToggle
                                data-plasmic-name={"lastMinuteToggle2"}
                                data-plasmic-override={
                                  overrides.lastMinuteToggle2
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.lastMinuteToggle2
                                )}
                                isDisabled={generateStateValueProp($state, [
                                  "lastMinuteToggle2",
                                  "isDisabled"
                                ])}
                                onIsDisabledChange2={async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangeProp($state, [
                                    "lastMinuteToggle2",
                                    "isDisabled"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                onSwitch2IsSelectedChange={async (
                                  ...eventArgs: any
                                ) => {
                                  generateStateOnChangeProp($state, [
                                    "lastMinuteToggle2",
                                    "switch2IsSelected"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                switch2IsSelected={generateStateValueProp(
                                  $state,
                                  ["lastMinuteToggle2", "switch2IsSelected"]
                                )}
                              />
                            </div>
                          }
                          name={"availability_status"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select39"}
                            data-plasmic-override={overrides.select39}
                            className={classNames(
                              "__wab_instance",
                              sty.select39
                            )}
                            initialSelectedValue={(() => {
                              try {
                                return $state.currentJobObject
                                  .availability_status_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.getCriteria.data
                                    .filter(
                                      item =>
                                        item.type === "availability_status"
                                    )
                                    .map(item => ({
                                      value: item.id,
                                      label: item.name
                                    }));
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem__xr4T1
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem.label;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem.value;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eSGzz
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select39",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Disponibilit\u00e9"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__gy8Zk
                        )}
                        initialValue={(() => {
                          try {
                            return (
                              $state.currentJobObject.benefits ?? undefined
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aGHh4
                            )}
                          >
                            {"Avantages"}
                          </div>
                        }
                        name={"benefits"}
                        rules={[]}
                      >
                        <AntdSelect
                          data-plasmic-name={"select26"}
                          data-plasmic-override={overrides.select26}
                          bordered={false}
                          className={classNames("__wab_instance", sty.select26)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            styleTokensClassNames,
                            styleTokensClassNames_antd_5_hostless,
                            styleTokensClassNames_library_tailwind_3_4_number_tokens,
                            styleTokensClassNames_plasmic_rich_components
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select26",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getCriteria.data
                                .filter(item => item.type === "benefits_type")
                                .map(item => ({
                                  value: item.name,
                                  label: item.name
                                }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__iiQ13
                              )}
                            >
                              <PlusIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__lFi5
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ckdq1
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Ajouter"}
                                  </span>
                                </React.Fragment>
                              </div>
                            </div>
                          }
                          popupScopeClassName={sty["select26__popup"]}
                          size={"large"}
                          suffixIcon={
                            <ChevronDownIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__fZtS
                              )}
                              role={"img"}
                            />
                          }
                          value={generateStateValueProp($state, [
                            "select26",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <div
                        data-plasmic-name={"address"}
                        data-plasmic-override={overrides.address}
                        className={classNames(projectcss.all, sty.address)}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__wOnzV
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5KNrc
                              )}
                            >
                              {"Lieu de travail*"}
                            </div>
                          }
                          name={"address"}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <TextInput
                            data-plasmic-name={"rue2"}
                            data-plasmic-override={overrides.rue2}
                            className={classNames("__wab_instance", sty.rue2)}
                            defaultValue={(() => {
                              try {
                                return $state.currentJobObject.address;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "rue2",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Rue"}
                          />
                        </FormItemWrapper>
                        <div
                          data-plasmic-name={"codePosteVille2"}
                          data-plasmic-override={overrides.codePosteVille2}
                          className={classNames(
                            projectcss.all,
                            sty.codePosteVille2
                          )}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__pw9JZ
                            )}
                            hidden={false}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ii57A
                                )}
                              >
                                {""}
                              </div>
                            }
                            name={"postal_code"}
                            noLabel={true}
                            rules={[
                              { ruleType: "required", message: "requis" },

                              {
                                ruleType: "min",
                                length: 5,
                                message:
                                  "Le code postal doit contenir au moins 5 chiffres."
                              },

                              {
                                ruleType: "max",
                                length: 5,
                                message:
                                  "Le code postal ne doit pas d\u00e9passer 5 chiffres."
                              }
                            ]}
                          >
                            <TextInput
                              data-plasmic-name={"codePostal2"}
                              data-plasmic-override={overrides.codePostal2}
                              className={classNames(
                                "__wab_instance",
                                sty.codePostal2
                              )}
                              defaultValue={(() => {
                                try {
                                  return $state.currentJobObject.postal_code;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "codePostal2",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Code postal"}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__gRpD6
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0VO1E
                                )}
                              >
                                {"Adresse*"}
                              </div>
                            }
                            name={"location"}
                            noLabel={true}
                            rules={[
                              { ruleType: "required", message: "requis" }
                            ]}
                          >
                            <TextInput
                              data-plasmic-name={"ville2"}
                              data-plasmic-override={overrides.ville2}
                              className={classNames(
                                "__wab_instance",
                                sty.ville2
                              )}
                              defaultValue={(() => {
                                try {
                                  return $state.currentJobObject.location;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "ville2",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Ville"}
                            />
                          </FormItemWrapper>
                        </div>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__h0Oi2
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tQqn5
                              )}
                            >
                              {"Adresse*"}
                            </div>
                          }
                          name={"country"}
                          noLabel={true}
                          rules={[{ ruleType: "required", message: "requis" }]}
                        >
                          <Select
                            data-plasmic-name={"select27"}
                            data-plasmic-override={overrides.select27}
                            className={classNames(
                              "__wab_instance",
                              sty.select27
                            )}
                            initialSelectedValue={(() => {
                              try {
                                return $state.currentJobObject.country;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            items={(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.countries;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <MenuItem
                                  className={classNames(
                                    "__wab_instance",
                                    sty.menuItem___6LDgr
                                  )}
                                  key={currentIndex}
                                  label={(() => {
                                    try {
                                      return currentItem;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  value={(() => {
                                    try {
                                      return currentItem;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />
                              );
                            })}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___14Chd
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select27",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Pays"}
                            showLabel={false}
                          />
                        </FormItemWrapper>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___0VHi3
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ikgYl
                            )}
                          >
                            {"Description du poste*"}
                          </div>
                        }
                        name={"description"}
                        rules={[{ ruleType: "required", message: "requis" }]}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput3"}
                          data-plasmic-override={overrides.textAreaInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput3
                          )}
                          defaultValue={(() => {
                            try {
                              return $state.currentJobObject.description;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput3",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={(() => {
                            try {
                              return "Mission 1\nMission 2\nMission 3\n...";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__r0PWf
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bx9O
                            )}
                          >
                            {"Profil attendu*"}
                          </div>
                        }
                        name={"requirements"}
                        rules={[{ ruleType: "required", message: "requis" }]}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput4"}
                          data-plasmic-override={overrides.textAreaInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput4
                          )}
                          defaultValue={(() => {
                            try {
                              return $state.currentJobObject.requirements;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "Description du profil recherch\u00e9...."
                          }
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hEdOq
                        )}
                      >
                        {(() => {
                          try {
                            return $state.currentJobObject.posted == false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___1OVtk
                            )}
                            color={"white"}
                            end={
                              <GroupIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__lw16F
                                )}
                                role={"img"}
                              />
                            }
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yeF4
                                )}
                              >
                                {"enregistrer les modifications"}
                              </div>
                            }
                            onClick={async event => {
                              const $steps = {};

                              $steps["updatejob"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "48aea369-0123-4982-81fa-bf39a6b7c9d0",
                                        userArgs: {
                                          keys: [$state.currentJobObject.id],

                                          variables: [
                                            $state.formUpdate.value.address,

                                            $state.formUpdate.value
                                              .availability_status,

                                            $state.formUpdate.value.benefits,

                                            $queries.getCompanies.data[0].id,

                                            $state.formUpdate.value
                                              .contract_type,

                                            $state.formUpdate.value.country,

                                            $state.formUpdate.value.description,

                                            $state.formUpdate.value.location,

                                            $state.formUpdate.value.postal_code,

                                            $state.formUpdate.value
                                              .requirements,

                                            $state.formUpdate.value.salary,

                                            $state.formUpdate.value
                                              .sector_activity,

                                            $state.formUpdate.value.title,

                                            $state.formUpdate.value.work_mode,

                                            $state.formUpdate.value
                                              .working_time,

                                            $state.formUpdate.value.end_date,

                                            $state.formUpdate.value.start_date,

                                            $state.lastMinuteToggle2
                                              .switch2IsSelected
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatejob"] != null &&
                                typeof $steps["updatejob"] === "object" &&
                                typeof $steps["updatejob"].then === "function"
                              ) {
                                $steps["updatejob"] = await $steps["updatejob"];
                              }

                              $steps["updateEditOffreIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["editJob", "isOpen"]
                                      },
                                      operation: 4,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateEditOffreIsOpen"] != null &&
                                typeof $steps["updateEditOffreIsOpen"] ===
                                  "object" &&
                                typeof $steps["updateEditOffreIsOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateEditOffreIsOpen"] = await $steps[
                                  "updateEditOffreIsOpen"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return location.reload();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            submitsForm={true}
                            type={"bordered"}
                          />
                        ) : null}
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___1KZbA
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__fbWdo
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hQerT
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.currentJobObject?.posted
                                      ? "Modifier l'offre"
                                      : "Publier l'offre";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Publier l'offre";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["closeModal"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["editJob", "isOpen"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["closeModal"] != null &&
                              typeof $steps["closeModal"] === "object" &&
                              typeof $steps["closeModal"].then === "function"
                            ) {
                              $steps["closeModal"] = await $steps["closeModal"];
                            }

                            $steps["updateJobInfos"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "5eea695a-3fb1-4308-a778-894638e90d68",
                                      userArgs: {
                                        keys: [$state.currentJobObject.id],

                                        variables: [
                                          $state.formUpdate.value.address,

                                          $state.formUpdate.value.benefits,

                                          $state.currentJobObject.company_id,

                                          $state.formUpdate.value.country,

                                          $state.formUpdate.value.description,

                                          $state.formUpdate.value.location,

                                          $state.formUpdate.value.postal_code,

                                          $state.formUpdate.value.requirements,

                                          $state.formUpdate.value.salary,

                                          $state.formUpdate.value.title,

                                          $state.formUpdate.value.end_date,

                                          $state.formUpdate.value.start_date,

                                          $state.formUpdate.value
                                            .availability_status,

                                          $state.formUpdate.value.contract_type,

                                          $state.formUpdate.value
                                            .sector_activity,

                                          $state.formUpdate.value.work_mode,

                                          $state.formUpdate.value.working_time,

                                          $state.lastMinuteToggle2
                                            .switch2IsSelected
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateJobInfos"] != null &&
                              typeof $steps["updateJobInfos"] === "object" &&
                              typeof $steps["updateJobInfos"].then ===
                                "function"
                            ) {
                              $steps["updateJobInfos"] = await $steps[
                                "updateJobInfos"
                              ];
                            }

                            $steps["showNotification"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "success",
                                      "Votre annonce \u00e0 \u00e9t\u00e9 modifi\u00e9e avec succ\u00e8s !"
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["showNotification"] != null &&
                              typeof $steps["showNotification"] === "object" &&
                              typeof $steps["showNotification"].then ===
                                "function"
                            ) {
                              $steps["showNotification"] = await $steps[
                                "showNotification"
                              ];
                            }

                            $steps["runCode"] = false
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        const rechargeLastMinute = Number(
                                          $queries.offreStripeUserInfos.data[0]
                                            .recharge_lastminute
                                        );
                                        if (
                                          $state.currentJobObject
                                            ?.is_last_minute === true &&
                                          rechargeLastMinute <= 0
                                        ) {
                                          $state.insufficientCharges.isOpen =
                                            true;
                                          return false;
                                        }
                                        if (
                                          $state.lastMinuteToggle2
                                            .switch2IsSelected &&
                                          rechargeLastMinute <= 0
                                        ) {
                                          $state.insufficientCharges.isOpen =
                                            true;
                                          return false;
                                        }
                                        return true;
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["debitLastMinuteRecharge"] = false
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "b3ab694d-132d-4e5d-9ada-cb46ac6ddaad",
                                      userArgs: {
                                        conditions: [$ctx.SupabaseUser.user.id],

                                        variables: [
                                          (() => {
                                            const rechargeClassic = Number(
                                              $queries.offreStripeUserInfos
                                                .data[0].recharge_classic
                                            );
                                            const rechargeLastminute = Number(
                                              $queries.offreStripeUserInfos
                                                .data[0].recharge_lastminute
                                            );
                                            const isLastMinuteJob =
                                              $state.lastMinuteToggle2
                                                .switch2IsSelected === true
                                                ? $state.lastMinuteToggle2
                                                    .switch2IsSelected
                                                : $state.currentJobObject
                                                    .is_last_minute;
                                            if (
                                              isLastMinuteJob &&
                                              rechargeLastminute > 0
                                            ) {
                                              return rechargeLastminute - 1;
                                            }
                                            const canUseLastMinute =
                                              isLastMinuteJob ||
                                              (!isLastMinuteJob &&
                                                rechargeClassic <= 0 &&
                                                rechargeLastminute > 0);
                                            if (
                                              canUseLastMinute &&
                                              rechargeLastminute > 0
                                            ) {
                                              return rechargeLastminute - 1;
                                            }
                                            return rechargeLastminute;
                                          })(),

                                          (() => {
                                            const recharge = Number(
                                              $queries.offreStripeUserInfos
                                                .data[0].recharge_classic
                                            );
                                            const isLastMinuteJob =
                                              $state.lastMinuteToggle2
                                                .switch2IsSelected === true
                                                ? $state.lastMinuteToggle2
                                                    .switch2IsSelected
                                                : $state.currentJobObject
                                                    .is_last_minute;
                                            if (isLastMinuteJob) {
                                              return recharge;
                                            }
                                            if (recharge > 0) {
                                              return recharge - 1;
                                            }
                                            return recharge;
                                          })()
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["debitLastMinuteRecharge"] != null &&
                              typeof $steps["debitLastMinuteRecharge"] ===
                                "object" &&
                              typeof $steps["debitLastMinuteRecharge"].then ===
                                "function"
                            ) {
                              $steps["debitLastMinuteRecharge"] = await $steps[
                                "debitLastMinuteRecharge"
                              ];
                            }
                          }}
                          submitsForm={true}
                        />
                      </div>
                    </FormWrapper>
                  );
                })()}
              </div>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zmGj)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateEditOffreIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["editJob", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateEditOffreIsOpen"] != null &&
                      typeof $steps["updateEditOffreIsOpen"] === "object" &&
                      typeof $steps["updateEditOffreIsOpen"].then === "function"
                    ) {
                      $steps["updateEditOffreIsOpen"] = await $steps[
                        "updateEditOffreIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["editJob", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["editJob", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <div className={classNames(projectcss.all, sty.freeBox__nEw1K)} />
            }
          />

          <Modal
            data-plasmic-name={"deleteJob"}
            data-plasmic-override={overrides.deleteJob}
            className={classNames("__wab_instance", sty.deleteJob)}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__oKm51)}>
                <ReshotIconAlert7T6Wum8VleSvgIcon
                  className={classNames(projectcss.all, sty.svg__ipejU)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["postgresUpdateMany"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                              userArgs: {
                                conditions: [$ctx.SupabaseUser.user.id],

                                variables: [null]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateMany"] != null &&
                      typeof $steps["postgresUpdateMany"] === "object" &&
                      typeof $steps["postgresUpdateMany"].then === "function"
                    ) {
                      $steps["postgresUpdateMany"] = await $steps[
                        "postgresUpdateMany"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p___66IFr
                  )}
                >
                  {"Voulez-vous supprimer cette offre ?"}
                </p>
                <p
                  data-plasmic-name={"e2"}
                  data-plasmic-override={overrides.e2}
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.e2
                  )}
                >
                  {
                    "Attention : cette action est irr\u00e9versible. L\u2019offre sera d\u00e9finitivement supprim\u00e9e."
                  }
                </p>
                <div className={classNames(projectcss.all, sty.freeBox__wMuSn)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__tzfc8)}
                    color={"white"}
                    label={
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__i0Mm6
                        )}
                      >
                        {"retour"}
                      </p>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCurrentJobObject"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentJobObject"]
                              },
                              operation: 0,
                              value: {}
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentJobObject"] != null &&
                        typeof $steps["updateCurrentJobObject"] === "object" &&
                        typeof $steps["updateCurrentJobObject"].then ===
                          "function"
                      ) {
                        $steps["updateCurrentJobObject"] = await $steps[
                          "updateCurrentJobObject"
                        ];
                      }

                      $steps["closeDeleteModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteJob", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["closeDeleteModal"] != null &&
                        typeof $steps["closeDeleteModal"] === "object" &&
                        typeof $steps["closeDeleteModal"].then === "function"
                      ) {
                        $steps["closeDeleteModal"] = await $steps[
                          "closeDeleteModal"
                        ];
                      }
                    }}
                    type={"bordered"}
                  />

                  <DeleteAccount
                    className={classNames(
                      "__wab_instance",
                      sty.deleteAccount__ejebM
                    )}
                    label={
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__w07EX
                        )}
                      >
                        {"supprimer"}
                      </p>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["postgresDeleteMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "1e9e9393-342f-4483-bc30-0baa55217642",
                                userArgs: {
                                  keys: [$state.currentJobObject.id]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "316176a9-f0d4-44d7-baa0-a763336a6271"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresDeleteMany"] != null &&
                        typeof $steps["postgresDeleteMany"] === "object" &&
                        typeof $steps["postgresDeleteMany"].then === "function"
                      ) {
                        $steps["postgresDeleteMany"] = await $steps[
                          "postgresDeleteMany"
                        ];
                      }

                      $steps["closeDeleteModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteJob", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["closeDeleteModal"] != null &&
                        typeof $steps["closeDeleteModal"] === "object" &&
                        typeof $steps["closeDeleteModal"].then === "function"
                      ) {
                        $steps["closeDeleteModal"] = await $steps[
                          "closeDeleteModal"
                        ];
                      }
                    }}
                  />
                </div>
              </div>
            }
            footer={null}
            heading={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8XtO
                )}
              >
                {"Enter some text"}
              </div>
            }
            isOpen={generateStateValueProp($state, ["deleteJob", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["deleteJob", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={null}
          />

          <Modal
            data-plasmic-name={"jobDetails"}
            data-plasmic-override={overrides.jobDetails}
            className={classNames("__wab_instance", sty.jobDetails)}
            content={
              <div
                data-plasmic-name={"jobListing"}
                data-plasmic-override={overrides.jobListing}
                className={classNames(projectcss.all, sty.jobListing)}
              >
                <div
                  data-plasmic-name={"frame38"}
                  data-plasmic-override={overrides.frame38}
                  className={classNames(projectcss.all, sty.frame38)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vmaxi
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.currentJobObject.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"jobDetail"}
                  data-plasmic-override={overrides.jobDetail}
                  className={classNames(projectcss.all, sty.jobDetail)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xPesn)}
                  >
                    <div
                      data-plasmic-name={"location"}
                      data-plasmic-override={overrides.location}
                      className={classNames(projectcss.all, sty.location)}
                    >
                      <PhMapPin2Icon
                        className={classNames(projectcss.all, sty.svg___8KqGg)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vZcge
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.currentJobObject.location +
                                " (" +
                                $state.currentJobObject.postal_code.substring(
                                  0,
                                  2
                                ) +
                                ")"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mqVv
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const createdAt = new Date(
                                $state.currentJobObject.created_at
                              );
                              const day = String(createdAt.getDate()).padStart(
                                2,
                                "0"
                              );
                              const month = String(
                                createdAt.getMonth() + 1
                              ).padStart(2, "0");
                              const year = createdAt.getFullYear();
                              return `Publié le ${day}/${month}/${year}`;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame46"}
                    data-plasmic-override={overrides.frame46}
                    className={classNames(projectcss.all, sty.frame46)}
                  >
                    <div
                      data-plasmic-name={"frame47"}
                      data-plasmic-override={overrides.frame47}
                      className={classNames(projectcss.all, sty.frame47)}
                    >
                      <div
                        data-plasmic-name={"frame48"}
                        data-plasmic-override={overrides.frame48}
                        className={classNames(projectcss.all, sty.frame48)}
                      >
                        <PhFileTextIcon
                          className={classNames(projectcss.all, sty.svg__gxpOi)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l8Myi
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.contract_type;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame49"}
                        data-plasmic-override={overrides.frame49}
                        className={classNames(projectcss.all, sty.frame49)}
                      >
                        <PhClockIcon
                          className={classNames(projectcss.all, sty.svg__tUoXi)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__acCb7
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.working_time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame50"}
                        data-plasmic-override={overrides.frame50}
                        className={classNames(projectcss.all, sty.frame50)}
                      >
                        <PhCoinsLightIcon
                          className={classNames(projectcss.all, sty.svg__oSzf6)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0RLb0
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject.salary;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame51"}
                        data-plasmic-override={overrides.frame51}
                        className={classNames(projectcss.all, sty.frame51)}
                      >
                        <PhClockCountdownIcon
                          className={classNames(projectcss.all, sty.svg__onSe)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___60JAl
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.currentJobObject
                                  .availability_status;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__bbkVt
                      )}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__rJaZ)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__laeKe
                          )}
                        >
                          {"modifier"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["closeJobDetailModal"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["jobDetails", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["closeJobDetailModal"] != null &&
                          typeof $steps["closeJobDetailModal"] === "object" &&
                          typeof $steps["closeJobDetailModal"].then ===
                            "function"
                        ) {
                          $steps["closeJobDetailModal"] = await $steps[
                            "closeJobDetailModal"
                          ];
                        }

                        $steps["openEditModal"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editJob", "isOpen"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["openEditModal"] != null &&
                          typeof $steps["openEditModal"] === "object" &&
                          typeof $steps["openEditModal"].then === "function"
                        ) {
                          $steps["openEditModal"] = await $steps[
                            "openEditModal"
                          ];
                        }
                      }}
                    />
                  </div>
                </div>
                <div
                  data-plasmic-name={"jobDescriptionContainer"}
                  data-plasmic-override={overrides.jobDescriptionContainer}
                  className={classNames(
                    projectcss.all,
                    sty.jobDescriptionContainer
                  )}
                >
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__r5Asv
                    )}
                  >
                    {"Description du poste"}
                  </p>
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__mfszR
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.currentJobObject.description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "test";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </p>
                  <div
                    data-plasmic-name={"benefits"}
                    data-plasmic-override={overrides.benefits}
                    className={classNames(projectcss.all, sty.benefits)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.currentJobObject[0].benefits
                            .split(",")
                            .map(benefit => benefit.replace(/[{\"}]/g, ""));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lkeSm
                          )}
                          key={currentIndex}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      );
                    })}
                  </div>
                </div>
                <div
                  data-plasmic-name={"expectedProfileContainer"}
                  data-plasmic-override={overrides.expectedProfileContainer}
                  className={classNames(
                    projectcss.all,
                    sty.expectedProfileContainer
                  )}
                >
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__xIkKg
                    )}
                  >
                    {"Profil attendu"}
                  </p>
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__ufU3
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.currentJobObject.requirements;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "test";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </p>
                </div>
                <div
                  data-plasmic-name={"companyContainer"}
                  data-plasmic-override={overrides.companyContainer}
                  className={classNames(projectcss.all, sty.companyContainer)}
                >
                  <div
                    data-plasmic-name={"logoContainer"}
                    data-plasmic-override={overrides.logoContainer}
                    className={classNames(projectcss.all, sty.logoContainer)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__xplgu
                      )}
                    >
                      {"L\u2019entreprise"}
                    </p>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__yiQzn)}
                      displayHeight={"70px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"70px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $queries.getPp.signedUrl
                            ? $queries.getPp.signedUrl
                            : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mxn6B)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__q9XP
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.getCompanies.data[0].name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "test";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </p>
                    <div
                      data-plasmic-name={"companyDetail"}
                      data-plasmic-override={overrides.companyDetail}
                      className={classNames(projectcss.all, sty.companyDetail)}
                    >
                      <div
                        data-plasmic-name={"sectorActivity"}
                        data-plasmic-override={overrides.sectorActivity}
                        className={classNames(
                          projectcss.all,
                          sty.sectorActivity
                        )}
                      >
                        <IconPhBriefcase2Icon
                          className={classNames(projectcss.all, sty.svg__rcnEy)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"dkTrucksPark5"}
                          data-plasmic-override={overrides.dkTrucksPark5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dkTrucksPark5
                          )}
                        >
                          {""}
                        </div>
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__k1At
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.getCompanies.data[0].sector;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </p>
                      </div>
                      <div
                        data-plasmic-name={"companySize"}
                        data-plasmic-override={overrides.companySize}
                        className={classNames(projectcss.all, sty.companySize)}
                      >
                        <PhUsersThreeIcon
                          className={classNames(projectcss.all, sty.svg__lnQkJ)}
                          role={"img"}
                        />

                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__mJ28C
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.getCompanies.data[0].team_size;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </p>
                      </div>
                      <div
                        data-plasmic-name={"companyLocation"}
                        data-plasmic-override={overrides.companyLocation}
                        className={classNames(
                          projectcss.all,
                          sty.companyLocation
                        )}
                      >
                        <PhMapTrifoldFillIcon
                          className={classNames(projectcss.all, sty.svg__ibh5U)}
                          role={"img"}
                        />

                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p___3Kue
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.getCompanies.data[0].location;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </p>
                      </div>
                    </div>
                  </div>
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p___2LGy9
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getCompanies.data[0].descriptions;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "test";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </p>
                </div>
              </div>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__iy6Ku)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateJobDetailsIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["jobDetails", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateJobDetailsIsOpen"] != null &&
                      typeof $steps["updateJobDetailsIsOpen"] === "object" &&
                      typeof $steps["updateJobDetailsIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateJobDetailsIsOpen"] = await $steps[
                        "updateJobDetailsIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["jobDetails", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["jobDetails", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["updateJobId"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["jobId"]
                        },
                        operation: 1
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateJobId"] != null &&
                  typeof $steps["updateJobId"] === "object" &&
                  typeof $steps["updateJobId"].then === "function"
                ) {
                  $steps["updateJobId"] = await $steps["updateJobId"];
                }
              }).apply(null, eventArgs);
            }}
            showFooter={false}
            showHeader={true}
            trigger={null}
          />

          <Modal
            data-plasmic-name={"companyInfos"}
            data-plasmic-override={overrides.companyInfos}
            className={classNames("__wab_instance", sty.companyInfos)}
            closeOnBackdropClick={false}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__lma1)}>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["clearErrorMsgArray"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["errorMsg"]
                              },
                              operation: 0,
                              value: []
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["clearErrorMsgArray"] != null &&
                        typeof $steps["clearErrorMsgArray"] === "object" &&
                        typeof $steps["clearErrorMsgArray"].then === "function"
                      ) {
                        $steps["clearErrorMsgArray"] = await $steps[
                          "clearErrorMsgArray"
                        ];
                      }

                      $steps["kbis"] = (() => {
                        if ($state.form.value.kbis_file.length > 0) {
                          const maxSize = 2 * 1024 * 1024;
                          const fileSize = $state.form.value.kbis_file[0].size;
                          if (fileSize > maxSize) {
                            $state.errorMsg.push(
                              "Le KBIS ne doit pas dépasser 2 Mo."
                            );
                            return false;
                          } else {
                            return true;
                          }
                        } else {
                          return false;
                        }
                      })()
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                userArgs: {
                                  path: [
                                    $ctx.SupabaseUser.user.id,

                                    $state.form.value.kbis_file[0].name
                                  ],

                                  content: [
                                    $state.form.value.kbis_file[0].contents
                                  ],

                                  contentType: [
                                    $state.form.value.kbis_file[0].type
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["kbis"] != null &&
                        typeof $steps["kbis"] === "object" &&
                        typeof $steps["kbis"].then === "function"
                      ) {
                        $steps["kbis"] = await $steps["kbis"];
                      }

                      $steps["idFile"] = (() => {
                        if ($state.form.value.identity_file.length > 0) {
                          const maxSize = 2 * 1024 * 1024;
                          const fileSize =
                            $state.form.value.identity_file[0].size;
                          if (fileSize > maxSize) {
                            $state.errorMsg.push(
                              "La pièce d'identité ne doit pas dépasser 2 Mo."
                            );
                            return false;
                          } else {
                            return true;
                          }
                        } else {
                          return false;
                        }
                      })()
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                userArgs: {
                                  path: [
                                    $ctx.SupabaseUser.user.id,

                                    $state.form.value.identity_file[0].name
                                  ],

                                  content: [
                                    $state.form.value.identity_file[0].contents
                                  ],

                                  contentType: [
                                    $state.form.value.identity_file[0].type
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["idFile"] != null &&
                        typeof $steps["idFile"] === "object" &&
                        typeof $steps["idFile"].then === "function"
                      ) {
                        $steps["idFile"] = await $steps["idFile"];
                      }

                      $steps["displayErrorToast"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return (() => {
                                      if (
                                        $state.errorMsg &&
                                        $state.errorMsg.length > 0
                                      ) {
                                        return $state.errorMsg
                                          .map(msg => msg)
                                          .join("\n");
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["displayErrorToast"] != null &&
                        typeof $steps["displayErrorToast"] === "object" &&
                        typeof $steps["displayErrorToast"].then === "function"
                      ) {
                        $steps["displayErrorToast"] = await $steps[
                          "displayErrorToast"
                        ];
                      }

                      $steps["createCompany"] =
                        $state.errorMsg.length == 0
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                  opId: "eafd5cf5-874d-4388-bcb9-5af7e356e028",
                                  userArgs: {
                                    variables: [
                                      $state.form.value.address,

                                      $state.form.value.country,

                                      $state.form.value.description,

                                      $state.form.value.identity_file[0].name,

                                      $state.form.value.kbis_file[0].name,

                                      $state.form.value.location,

                                      $state.form.value.name,

                                      $state.form.value.postal_code,

                                      $state.form.value.sector,

                                      $state.form.value.siren,

                                      $state.form.value.team_size,

                                      $state.form.value.website,

                                      $ctx.SupabaseUser.user.id,

                                      $state.form.value.description
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["createCompany"] != null &&
                        typeof $steps["createCompany"] === "object" &&
                        typeof $steps["createCompany"].then === "function"
                      ) {
                        $steps["createCompany"] = await $steps["createCompany"];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    requiredMark: false,
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qnyO
                        )}
                      >
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1__mgyIl
                          )}
                        >
                          {"Votre profile entreprise"}
                        </h1>
                        <UploadWrapper
                          data-plasmic-name={"upload2"}
                          data-plasmic-override={overrides.upload2}
                          accept={""}
                          className={classNames("__wab_instance", sty.upload2)}
                          files={generateStateValueProp($state, [
                            "upload2",
                            "files"
                          ])}
                          maxCount={1}
                          onFilesChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "upload2",
                              "files"
                            ]).apply(null, eventArgs);

                            (async files => {
                              const $steps = {};

                              $steps["supabaseUploadFile"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                        opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                        userArgs: {
                                          path: [
                                            $ctx.SupabaseUser.user.id,

                                            $state.upload2.files[0].name
                                          ],

                                          content: [
                                            $state.upload2.files[0].contents
                                          ],

                                          contentType: [
                                            $state.upload2.files[0].type
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["supabaseUploadFile"] != null &&
                                typeof $steps["supabaseUploadFile"] ===
                                  "object" &&
                                typeof $steps["supabaseUploadFile"].then ===
                                  "function"
                              ) {
                                $steps["supabaseUploadFile"] = await $steps[
                                  "supabaseUploadFile"
                                ];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "ca09c9ab-a670-4b5b-b79f-d87646e4fa13",
                                        userArgs: {
                                          keys: [
                                            $queries.getCompanies.data[0].id
                                          ],

                                          variables: [
                                            $steps.supabaseUploadFile?.path.split(
                                              "/"
                                            )[1]
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          showUploadList={false}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__rrkbG)}
                            displayHeight={"132px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"132px"}
                            loading={"lazy"}
                            src={
                              $queries.getPp.signedUrl
                                ? $queries.getPp.signedUrl
                                : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png"
                            }
                          />

                          <div
                            data-plasmic-name={"editIcon"}
                            data-plasmic-override={overrides.editIcon}
                            className={classNames(projectcss.all, sty.editIcon)}
                          >
                            <div
                              data-plasmic-name={"frame7"}
                              data-plasmic-override={overrides.frame7}
                              className={classNames(projectcss.all, sty.frame7)}
                            />

                            <PhPencilSimpleIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__aT3Wn
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"deleteIcon"}
                            data-plasmic-override={overrides.deleteIcon}
                            className={classNames(
                              projectcss.all,
                              sty.deleteIcon
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateUpload2Files"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["upload2", "files"]
                                      },
                                      operation: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        undefined
                                      );
                                      return undefined;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateUpload2Files"] != null &&
                                typeof $steps["updateUpload2Files"] ===
                                  "object" &&
                                typeof $steps["updateUpload2Files"].then ===
                                  "function"
                              ) {
                                $steps["updateUpload2Files"] = await $steps[
                                  "updateUpload2Files"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return event.stopPropagation();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["postgresUpdateMany"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "9a0d1ef9-145c-44ec-9ee3-8ca38502d114",
                                        userArgs: {
                                          conditions: [
                                            $ctx.SupabaseUser.user.id
                                          ],

                                          variables: [null]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateMany"] != null &&
                                typeof $steps["postgresUpdateMany"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateMany"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateMany"] = await $steps[
                                  "postgresUpdateMany"
                                ];
                              }
                            }}
                          >
                            <div
                              data-plasmic-name={"frame8"}
                              data-plasmic-override={overrides.frame8}
                              className={classNames(projectcss.all, sty.frame8)}
                            />

                            <PhTrashIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kXo8X
                              )}
                              role={"img"}
                            />
                          </div>
                        </UploadWrapper>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__cs1C4
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9Yfzi
                            )}
                          >
                            {"Nom de l'entreprise*"}
                          </div>
                        }
                        name={"name"}
                        rules={[{ ruleType: "required", message: `` }]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Nom de l'entreprise"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__r3GqM
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6DU9Y
                            )}
                          >
                            {"Pr\u00e9sentation courte"}
                          </div>
                        }
                        name={"description"}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput5"}
                          data-plasmic-override={overrides.textAreaInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput5
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "Pr\u00e9sentez votre entreprise en quelques lignes..."
                          }
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__y1Mls
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hgxEe
                            )}
                          >
                            {"Adresse"}
                          </div>
                        }
                        name={"address"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Veuillez renseigner ce champ"
                          }
                        ]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput3"}
                          data-plasmic-override={overrides.textInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput3
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput3",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Rue"}
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vNt5P
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__eRdH4
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xThK
                              )}
                            >
                              {"Code postal"}
                            </div>
                          }
                          name={"postal_code"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Veuillez renseigner ce champ"
                            }
                          ]}
                        >
                          <TextInput
                            data-plasmic-name={"textInput4"}
                            data-plasmic-override={overrides.textInput4}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput4
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput4",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Code postal"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__iP3Jb
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__og1Tj
                              )}
                            >
                              {"Ville"}
                            </div>
                          }
                          name={"location"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Veuillez renseigner ce champ"
                            }
                          ]}
                        >
                          <TextInput
                            data-plasmic-name={"textInput6"}
                            data-plasmic-override={overrides.textInput6}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput6
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput6",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Ville"}
                          />
                        </FormItemWrapper>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__pyKc2
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ivQwc
                            )}
                          >
                            {"Pays"}
                          </div>
                        }
                        name={"country"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Veuillez renseigner ce champ"
                          }
                        ]}
                      >
                        <Select
                          data-plasmic-name={"select5"}
                          data-plasmic-override={overrides.select5}
                          className={classNames("__wab_instance", sty.select5)}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.countries;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={currentItem}
                              />
                            );
                          })}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__y3WRy
                              )}
                            >
                              {"Label"}
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pays"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__bS2FY
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pB2P
                            )}
                          >
                            {"SIREN"}
                          </div>
                        }
                        name={"siren"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Veuillez renseigner ce champ"
                          }
                        ]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput5"}
                          data-plasmic-override={overrides.textInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput5
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Num\u00e9ro de SIREN"}
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wa9Dy
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__edEx5
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cSRe
                              )}
                            >
                              {"Secteur d'activit\u00e9"}
                            </div>
                          }
                          name={"sector"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Veuillez renseigner ce champ"
                            }
                          ]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select3"}
                            data-plasmic-override={overrides.select3}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select3
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              styleTokensClassNames,
                              styleTokensClassNames_antd_5_hostless,
                              styleTokensClassNames_library_tailwind_3_4_number_tokens,
                              styleTokensClassNames_plasmic_rich_components
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select3",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(
                                    item => item.type === "sector_activity"
                                  )
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={""}
                            popupScopeClassName={sty["select3__popup"]}
                            value={generateStateValueProp($state, [
                              "select3",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__iTeUn
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rr4Zj
                              )}
                            >
                              {"Taille de l'entreprise"}
                            </div>
                          }
                          name={"team_size"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Veuillez renseigner ce champ"
                            }
                          ]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select4"}
                            data-plasmic-override={overrides.select4}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select4
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              styleTokensClassNames,
                              styleTokensClassNames_antd_5_hostless,
                              styleTokensClassNames_library_tailwind_3_4_number_tokens,
                              styleTokensClassNames_plasmic_rich_components
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select4",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "company_size")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={""}
                            popupScopeClassName={sty["select4__popup"]}
                            value={generateStateValueProp($state, [
                              "select4",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </div>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__kbJbz
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lgd2P
                            )}
                          >
                            {"Site web"}
                          </div>
                        }
                        name={"website"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput7"}
                          data-plasmic-override={overrides.textInput7}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput7
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput7",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"https://"}
                        />
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vhxjg
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__hy8Vd
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wnA9A
                              )}
                            >
                              {"Kbis"}
                            </div>
                          }
                          name={"kbis_file"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <UploadWrapper
                            data-plasmic-name={"upload"}
                            data-plasmic-override={overrides.upload}
                            accept={"application/pdf"}
                            className={classNames("__wab_instance", sty.upload)}
                            dragAndDropFiles={false}
                            files={generateStateValueProp($state, [
                              "upload",
                              "files"
                            ])}
                            maxCount={1}
                            onFilesChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "upload",
                                "files"
                              ]).apply(null, eventArgs);

                              (async files => {
                                const $steps = {};
                              }).apply(null, eventArgs);
                            }}
                            showUploadList={false}
                          >
                            <div
                              data-plasmic-name={"content"}
                              data-plasmic-override={overrides.content}
                              className={classNames(
                                projectcss.all,
                                sty.content
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__izoVw)}
                                displayHeight={"39px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"39px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                  fullWidth: 39,
                                  fullHeight: 39,
                                  aspectRatio: 1
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__q1G6A
                                )}
                              >
                                {"Importer ou d\u00e9poser un fichier"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cjZlv
                                )}
                              >
                                {"PDF, DOC, DOCX, JPG, PNG \n(max. 2Mo)"}
                              </div>
                            </div>
                          </UploadWrapper>
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__wwcf
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dbR5H
                              )}
                            >
                              {"Pi\u00e8ce d'identit\u00e9"}
                            </div>
                          }
                          name={"identity_file"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <UploadWrapper
                            data-plasmic-name={"upload3"}
                            data-plasmic-override={overrides.upload3}
                            accept={""}
                            className={classNames(
                              "__wab_instance",
                              sty.upload3
                            )}
                            dragAndDropFiles={true}
                            files={generateStateValueProp($state, [
                              "upload3",
                              "files"
                            ])}
                            maxCount={1}
                            onFilesChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "upload3",
                                "files"
                              ]).apply(null, eventArgs);
                            }}
                            showUploadList={true}
                          >
                            <div
                              data-plasmic-name={"content2"}
                              data-plasmic-override={overrides.content2}
                              className={classNames(
                                projectcss.all,
                                sty.content2
                              )}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___6WkVi)}
                                displayHeight={"39px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"39px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                  fullWidth: 39,
                                  fullHeight: 39,
                                  aspectRatio: 1
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___93Tg
                                )}
                              >
                                {"Importer ou d\u00e9poser un fichier"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__byj3T
                                )}
                              >
                                {"PDF, DOC, DOCX, JPG, PNG \n(max. 2Mo)"}
                              </div>
                            </div>
                          </UploadWrapper>
                        </FormItemWrapper>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tbhJl
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__dqaGz
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wsXjG
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bYm6X
                              )}
                            >
                              {"COntinuer"}
                            </div>
                          }
                          submitsForm={true}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__anTEc
                        )}
                      >
                        <ProgressBar
                          className={classNames(
                            "__wab_instance",
                            sty.progressBar__ttlIh
                          )}
                          step1={true}
                        />
                      </div>
                    </FormWrapper>
                  );
                })()}
              </div>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__x1Iim)}>
                <JamButton
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  icon={"none"}
                />
              </div>
            }
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___1AQhm)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStopInscriptionIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["stopInscription", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStopInscriptionIsOpen"] != null &&
                      typeof $steps["updateStopInscriptionIsOpen"] ===
                        "object" &&
                      typeof $steps["updateStopInscriptionIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateStopInscriptionIsOpen"] = await $steps[
                        "updateStopInscriptionIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["companyInfos", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "companyInfos",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <Button
                className={classNames("__wab_instance", sty.button___9VpOd)}
              />
            }
          />

          <Modal
            data-plasmic-name={"profilCreate"}
            data-plasmic-override={overrides.profilCreate}
            className={classNames("__wab_instance", sty.profilCreate)}
            closeOnBackdropClick={false}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__sleDj)}>
                <CheckIcon
                  className={classNames(projectcss.all, sty.svg___8Sbt)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["postgresUpdateMany"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                              userArgs: {
                                conditions: [$ctx.SupabaseUser.user.id],

                                variables: [null]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateMany"] != null &&
                      typeof $steps["postgresUpdateMany"] === "object" &&
                      typeof $steps["postgresUpdateMany"].then === "function"
                    ) {
                      $steps["postgresUpdateMany"] = await $steps[
                        "postgresUpdateMany"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tKoRd
                  )}
                >
                  {"Votre profil a bien \u00e9t\u00e9 cr\u00e9e."}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___44Tcd)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button___0XLhb)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__wkwH5)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3Flyc
                        )}
                      >
                        {'publier une offre d"emploi'}
                      </div>
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rj99A)}>
                  <ProgressBar
                    className={classNames(
                      "__wab_instance",
                      sty.progressBar___8TRfa
                    )}
                    step1={true}
                    step2={true}
                    step3={true}
                  />
                </div>
              </div>
            }
            footer={null}
            heading={null}
            isOpen={generateStateValueProp($state, ["profilCreate", "isOpen"])}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "profilCreate",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={null}
          />

          {(() => {
            try {
              return $state.stopInscription.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Modal
              data-plasmic-name={"stopInscription"}
              data-plasmic-override={overrides.stopInscription}
              className={classNames("__wab_instance", sty.stopInscription)}
              closeOnBackdropClick={false}
              content={
                <div className={classNames(projectcss.all, sty.freeBox__tD7Tv)}>
                  <ReshotIconAlert7T6Wum8VleSvgIcon
                    className={classNames(projectcss.all, sty.svg__mrNsD)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["postgresUpdateMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                                userArgs: {
                                  conditions: [$ctx.SupabaseUser.user.id],

                                  variables: [null]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateMany"] != null &&
                        typeof $steps["postgresUpdateMany"] === "object" &&
                        typeof $steps["postgresUpdateMany"].then === "function"
                      ) {
                        $steps["postgresUpdateMany"] = await $steps[
                          "postgresUpdateMany"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a8G7W
                    )}
                  >
                    {"Voulez-vous abandonner l'inscription ?"}
                  </div>
                  <div
                    data-plasmic-name={"e"}
                    data-plasmic-override={overrides.e}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.e
                    )}
                  >
                    {
                      "Si vous quittez l'inscription votre profil ne sera pas enregistr\u00e9."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uTgPt)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__egbfT
                      )}
                      color={"white"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qhxCv
                          )}
                        >
                          {"retour"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateAbordInscription"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["stopInscription", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAbordInscription"] != null &&
                          typeof $steps["updateAbordInscription"] ===
                            "object" &&
                          typeof $steps["updateAbordInscription"].then ===
                            "function"
                        ) {
                          $steps["updateAbordInscription"] = await $steps[
                            "updateAbordInscription"
                          ];
                        }

                        $steps["updateShowModal"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showModal"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowModal"] != null &&
                          typeof $steps["updateShowModal"] === "object" &&
                          typeof $steps["updateShowModal"].then === "function"
                        ) {
                          $steps["updateShowModal"] = await $steps[
                            "updateShowModal"
                          ];
                        }

                        $steps["updateHiddeModal"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["hiddeModal"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateHiddeModal"] != null &&
                          typeof $steps["updateHiddeModal"] === "object" &&
                          typeof $steps["updateHiddeModal"].then === "function"
                        ) {
                          $steps["updateHiddeModal"] = await $steps[
                            "updateHiddeModal"
                          ];
                        }
                      }}
                      type={"bordered"}
                    />

                    <DeleteAccount
                      className={classNames(
                        "__wab_instance",
                        sty.deleteAccount__st93K
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t8293
                          )}
                        >
                          {"abandonner"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = { args: ["/"] };
                              return $globalActions[
                                "SupabaseUserGlobalContext.logout"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    />
                  </div>
                </div>
              }
              footer={null}
              heading={null}
              isOpen={generateStateValueProp($state, [
                "stopInscription",
                "isOpen"
              ])}
              noTrigger={true}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "stopInscription",
                  "isOpen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showFooter={false}
              showHeader={false}
              trigger={
                <div
                  className={classNames(projectcss.all, sty.freeBox___8Oq0J)}
                />
              }
            />
          ) : null}
          <PageLoader
            data-plasmic-name={"onBoarding"}
            data-plasmic-override={overrides.onBoarding}
            className={classNames("__wab_instance", sty.onBoarding)}
            onMount={async () => {
              const $steps = {};

              $steps["updateShowModal"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["showModal"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShowModal"] != null &&
                typeof $steps["updateShowModal"] === "object" &&
                typeof $steps["updateShowModal"].then === "function"
              ) {
                $steps["updateShowModal"] = await $steps["updateShowModal"];
              }
            }}
            shouldRun={(() => {
              try {
                return $queries.getUser.data[0].onboarding === false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
          />

          {(() => {
            try {
              return $state.showModal;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"modalOnboarding"}
              data-plasmic-override={overrides.modalOnboarding}
              className={classNames(projectcss.all, sty.modalOnboarding)}
            >
              <LoadingBoundary
                data-plasmic-name={"loadingBoundary"}
                data-plasmic-override={overrides.loadingBoundary}
                loadingState={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tlFi9
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      data-plasmic-name={"modal"}
                      data-plasmic-override={overrides.modal}
                      className={classNames(projectcss.all, sty.modal)}
                    >
                      {(() => {
                        try {
                          return (
                            typeof window !== "undefined" &&
                            new window.URL(
                              window.location.href
                            ).searchParams.get("onboarding") !== "success"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"close"}
                          data-plasmic-override={overrides.close}
                          className={classNames(projectcss.all, sty.close)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateShowModal"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["showModal"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateShowModal"] != null &&
                              typeof $steps["updateShowModal"] === "object" &&
                              typeof $steps["updateShowModal"].then ===
                                "function"
                            ) {
                              $steps["updateShowModal"] = await $steps[
                                "updateShowModal"
                              ];
                            }

                            $steps["updateStopInscriptionIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: [
                                        "stopInscription",
                                        "isOpen"
                                      ]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStopInscriptionIsOpen"] != null &&
                              typeof $steps["updateStopInscriptionIsOpen"] ===
                                "object" &&
                              typeof $steps["updateStopInscriptionIsOpen"]
                                .then === "function"
                            ) {
                              $steps["updateStopInscriptionIsOpen"] =
                                await $steps["updateStopInscriptionIsOpen"];
                            }
                          }}
                        >
                          <Icon10Icon
                            data-plasmic-name={"icon"}
                            data-plasmic-override={overrides.icon}
                            className={classNames(projectcss.all, sty.icon)}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            typeof window !== "undefined" &&
                            new window.URL(
                              window.location.href
                            ).searchParams.get("onboarding") === "success"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"closeAfterSuccess"}
                          data-plasmic-override={overrides.closeAfterSuccess}
                          className={classNames(
                            projectcss.all,
                            sty.closeAfterSuccess
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateShowModal"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["showModal"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateShowModal"] != null &&
                              typeof $steps["updateShowModal"] === "object" &&
                              typeof $steps["updateShowModal"].then ===
                                "function"
                            ) {
                              $steps["updateShowModal"] = await $steps[
                                "updateShowModal"
                              ];
                            }

                            $steps["updateOnboardingStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["onboardingStep"]
                                    },
                                    operation: 1,
                                    value: null
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, undefined);
                                    return undefined;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateOnboardingStep"] != null &&
                              typeof $steps["updateOnboardingStep"] ===
                                "object" &&
                              typeof $steps["updateOnboardingStep"].then ===
                                "function"
                            ) {
                              $steps["updateOnboardingStep"] = await $steps[
                                "updateOnboardingStep"
                              ];
                            }

                            $steps["postgresUpdateById"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "3d3078c7-c5b6-4500-97bb-6bdf48641f51",
                                      userArgs: {
                                        conditions: [$ctx.SupabaseUser.user.id]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }

                            $steps["goToOffreEmployeur"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: `/offre-employeur`
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToOffreEmployeur"] != null &&
                              typeof $steps["goToOffreEmployeur"] ===
                                "object" &&
                              typeof $steps["goToOffreEmployeur"].then ===
                                "function"
                            ) {
                              $steps["goToOffreEmployeur"] = await $steps[
                                "goToOffreEmployeur"
                              ];
                            }
                          }}
                        >
                          <Icon10Icon
                            data-plasmic-name={"icon2"}
                            data-plasmic-override={overrides.icon2}
                            className={classNames(projectcss.all, sty.icon2)}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            typeof window !== "undefined" &&
                            $state.onboardingStep === 0 &&
                            window.location.search.includes(
                              "onboarding=success"
                            ) === false
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"step0"}
                          data-plasmic-override={overrides.step0}
                          className={classNames(projectcss.all, sty.step0)}
                        >
                          <div
                            data-plasmic-name={"logo"}
                            data-plasmic-override={overrides.logo}
                            className={classNames(projectcss.all, sty.logo)}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__eADq)}
                              displayHeight={"132px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"132px"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/jam_production_🚀/images/frame7.svg",
                                fullWidth: 132,
                                fullHeight: 132,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.form3
                              ),
                              extendedOnValuesChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["form3", "value"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              formItems: [
                                {
                                  label: "Name",
                                  name: "name",
                                  inputType: "Text"
                                },
                                {
                                  label: "Message",
                                  name: "message",
                                  inputType: "Text Area"
                                }
                              ],
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: "advanced",
                              onIsSubmittingChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["form3", "isSubmitting"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              ref: ref => {
                                $refs["form3"] = ref;
                              },
                              submitSlot: null,
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "form3.value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "form3.isSubmitting"
                                }
                              ],
                              [],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <FormWrapper
                                data-plasmic-name={"form3"}
                                data-plasmic-override={overrides.form3}
                                {...child$Props}
                              >
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__mBwhe
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__j3Xvq
                                      )}
                                    >
                                      {"Nom de l'entreprise*"}
                                    </div>
                                  }
                                  name={"name"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input
                                      ),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input", "value"],
                                          AntdInput_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      value: generateStateValueProp($state, [
                                        "input",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input"}
                                        data-plasmic-override={overrides.input}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__eeVjn
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__aYftn
                                      )}
                                    >
                                      {"Pr\u00e9sentation courte"}
                                    </div>
                                  }
                                  name={"message"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.textArea3
                                      ),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["textArea3", "value"],
                                          AntdTextArea_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      value: generateStateValueProp($state, [
                                        "textArea3",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "textArea3.value"
                                        }
                                      ],
                                      [],
                                      AntdTextArea_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdTextArea
                                        data-plasmic-name={"textArea3"}
                                        data-plasmic-override={
                                          overrides.textArea3
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__yZ4Qj
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__x5WRa
                                      )}
                                    >
                                      {"Adresse"}
                                    </div>
                                  }
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input2
                                      ),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input2", "value"],
                                          AntdInput_Helpers
                                        ).apply(null, eventArgs);
                                      },
                                      value: generateStateValueProp($state, [
                                        "input2",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input2.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input2"}
                                        data-plasmic-override={overrides.input2}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__trrz0
                                  )}
                                  end={
                                    <GroupIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__mvIn5
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  iconEnd={true}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sSdKm
                                      )}
                                    >
                                      {"continuer"}
                                    </div>
                                  }
                                  submitsForm={true}
                                />
                              </FormWrapper>
                            );
                          })()}
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.form4
                              ),
                              extendedOnValuesChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["form4", "value"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              formItems: [
                                {
                                  label: "Name",
                                  name: "name",
                                  inputType: "Text"
                                },
                                {
                                  label: "Message",
                                  name: "message",
                                  inputType: "Text Area"
                                }
                              ],
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: "advanced",
                              onIsSubmittingChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["form4", "isSubmitting"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              ref: ref => {
                                $refs["form4"] = ref;
                              },
                              submitSlot: null,
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "form4.value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "form4.isSubmitting"
                                }
                              ],
                              [],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <FormWrapper
                                data-plasmic-name={"form4"}
                                data-plasmic-override={overrides.form4}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xXMzW
                                  )}
                                >
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__pgNnh
                                    )}
                                  >
                                    {"Votre profile entreprise"}
                                  </h1>
                                  <UploadWrapper
                                    data-plasmic-name={"upload4"}
                                    data-plasmic-override={overrides.upload4}
                                    accept={""}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.upload4
                                    )}
                                    files={generateStateValueProp($state, [
                                      "upload4",
                                      "files"
                                    ])}
                                    maxCount={1}
                                    onFilesChange={async (
                                      ...eventArgs: any
                                    ) => {
                                      generateStateOnChangeProp($state, [
                                        "upload4",
                                        "files"
                                      ]).apply(null, eventArgs);
                                    }}
                                    showUploadList={false}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__g6T)}
                                      displayHeight={"132px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"132px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/jam_production_🚀/images/frame7.svg",
                                        fullWidth: 132,
                                        fullHeight: 132,
                                        aspectRatio: 1
                                      }}
                                    />

                                    <div
                                      data-plasmic-name={"editIcon2"}
                                      data-plasmic-override={
                                        overrides.editIcon2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.editIcon2
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"frame9"}
                                        data-plasmic-override={overrides.frame9}
                                        className={classNames(
                                          projectcss.all,
                                          sty.frame9
                                        )}
                                      />

                                      <PhPencilSimpleIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__jipWl
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                    <div
                                      data-plasmic-name={"deleteIcon2"}
                                      data-plasmic-override={
                                        overrides.deleteIcon2
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.deleteIcon2
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"frame10"}
                                        data-plasmic-override={
                                          overrides.frame10
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.frame10
                                        )}
                                      />

                                      <PhTrashIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__bsGnc
                                        )}
                                        role={"img"}
                                      />
                                    </div>
                                  </UploadWrapper>
                                </div>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__kiqOi
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___5TkqD
                                      )}
                                    >
                                      {"Nom de l'entreprise*"}
                                    </div>
                                  }
                                  name={"name"}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput2"}
                                    data-plasmic-override={overrides.textInput2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput2
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput2",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Nom de l'entreprise"}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField___2ZaZj
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__pzz22
                                      )}
                                    >
                                      {"Pr\u00e9sentation courte"}
                                    </div>
                                  }
                                  name={"description"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__sD83V
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.textArea2
                                        ),
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "value",
                                            ["textArea2", "value"],
                                            AntdTextArea_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        placeholder:
                                          "Pr\u00e9sentez votre entreprise en quelques lignes...",
                                        value: generateStateValueProp($state, [
                                          "textArea2",
                                          "value"
                                        ])
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "value",
                                            plasmicStateName: "textArea2.value"
                                          }
                                        ],
                                        [],
                                        AntdTextArea_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdTextArea
                                          data-plasmic-name={"textArea2"}
                                          data-plasmic-override={
                                            overrides.textArea2
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__edYoZ
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__v1Cqk
                                      )}
                                    >
                                      {"Adresse*"}
                                    </div>
                                  }
                                  name={"address"}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput9"}
                                    data-plasmic-override={overrides.textInput9}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput9
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput9",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Rue"}
                                  />
                                </FormItemWrapper>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hhsmT
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__rmTmY
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__log9I
                                        )}
                                      >
                                        {"Code postal*"}
                                      </div>
                                    }
                                    name={"postal_code"}
                                  >
                                    <TextInput
                                      data-plasmic-name={"textInput10"}
                                      data-plasmic-override={
                                        overrides.textInput10
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textInput10
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "textInput10",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Code postal"}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__vnsim
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__e3Myg
                                        )}
                                      >
                                        {"Ville*"}
                                      </div>
                                    }
                                    name={"city"}
                                  >
                                    <TextInput
                                      data-plasmic-name={"textInput11"}
                                      data-plasmic-override={
                                        overrides.textInput11
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textInput11
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "textInput11",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Ville"}
                                    />
                                  </FormItemWrapper>
                                </div>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__goVsG
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ramfT
                                      )}
                                    >
                                      {"Pays*"}
                                    </div>
                                  }
                                  name={"country"}
                                >
                                  <Select
                                    data-plasmic-name={"select11"}
                                    data-plasmic-override={overrides.select11}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select11
                                    )}
                                    items={(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.countries;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <MenuItem
                                            key={currentIndex}
                                            label={(() => {
                                              try {
                                                return currentItem;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            value={currentItem}
                                          />
                                        );
                                      }
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dj9X
                                        )}
                                      >
                                        {"Label"}
                                      </div>
                                    }
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select11",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Pays"}
                                    showLabel={false}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__p2T0L
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___8OOnZ
                                      )}
                                    >
                                      {"SIREN*"}
                                    </div>
                                  }
                                  name={"siren"}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput12"}
                                    data-plasmic-override={
                                      overrides.textInput12
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput12
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput12",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Num\u00e9ro de SIREN"}
                                  />
                                </FormItemWrapper>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__er5Cd
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__dJbpm
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__airuq
                                        )}
                                      >
                                        {"Secteur d'activit\u00e9*"}
                                      </div>
                                    }
                                    name={"sector"}
                                  >
                                    <AntdSelect
                                      data-plasmic-name={"select15"}
                                      data-plasmic-override={overrides.select15}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select15
                                      )}
                                      defaultStylesClassName={classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        styleTokensClassNames,
                                        styleTokensClassNames_antd_5_hostless,
                                        styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                        styleTokensClassNames_plasmic_rich_components
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select15",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      options={[
                                        {
                                          value: "option1",
                                          label: "Option 1",
                                          type: "option"
                                        },
                                        {
                                          value: "option2",
                                          label: "Option 2",
                                          type: "option"
                                        }
                                      ]}
                                      placeholder={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___87Ldm
                                          )}
                                        >
                                          {""}
                                        </div>
                                      }
                                      popupScopeClassName={
                                        sty["select15__popup"]
                                      }
                                      value={generateStateValueProp($state, [
                                        "select15",
                                        "value"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__aEuay
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rjqHs
                                        )}
                                      >
                                        {"Taille de l'entreprise*"}
                                      </div>
                                    }
                                    name={"team_size"}
                                  >
                                    <AntdSelect
                                      data-plasmic-name={"select16"}
                                      data-plasmic-override={overrides.select16}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select16
                                      )}
                                      defaultStylesClassName={classNames(
                                        projectcss.root_reset,
                                        projectcss.plasmic_default_styles,
                                        projectcss.plasmic_mixins,
                                        styleTokensClassNames,
                                        styleTokensClassNames_antd_5_hostless,
                                        styleTokensClassNames_library_tailwind_3_4_number_tokens,
                                        styleTokensClassNames_plasmic_rich_components
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select16",
                                          "value"
                                        ]).apply(null, eventArgs);
                                      }}
                                      options={[]}
                                      placeholder={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__k2ZkE
                                          )}
                                        >
                                          {""}
                                        </div>
                                      }
                                      popupScopeClassName={
                                        sty["select16__popup"]
                                      }
                                      value={generateStateValueProp($state, [
                                        "select16",
                                        "value"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                </div>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__gehv
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___3B0Fw
                                      )}
                                    >
                                      {"Site web"}
                                    </div>
                                  }
                                  name={"website"}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput13"}
                                    data-plasmic-override={
                                      overrides.textInput13
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput13
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput13",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"https://"}
                                  />
                                </FormItemWrapper>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kkgt
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__maF2X
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___1KjWy
                                        )}
                                      >
                                        {"Kbis"}
                                      </div>
                                    }
                                    name={"kbis_file"}
                                  >
                                    <UploadWrapper
                                      data-plasmic-name={"upload5"}
                                      data-plasmic-override={overrides.upload5}
                                      accept={""}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.upload5
                                      )}
                                      files={generateStateValueProp($state, [
                                        "upload5",
                                        "files"
                                      ])}
                                      maxCount={1}
                                      onFilesChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "upload5",
                                          "files"
                                        ]).apply(null, eventArgs);
                                      }}
                                      showUploadList={false}
                                    >
                                      <div
                                        data-plasmic-name={"content3"}
                                        data-plasmic-override={
                                          overrides.content3
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.content3
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__bliy9)}
                                          displayHeight={"39px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"39px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                            fullWidth: 39,
                                            fullHeight: 39,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__fQZh
                                          )}
                                        >
                                          {
                                            "Importer ou d\u00e9poser un fichier"
                                          }
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__uoFi4
                                          )}
                                        >
                                          {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                        </div>
                                      </div>
                                    </UploadWrapper>
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__ciXlQ
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__igF1W
                                        )}
                                      >
                                        {"Pi\u00e8ce d'identit\u00e9"}
                                      </div>
                                    }
                                    name={"identity_file"}
                                  >
                                    <UploadWrapper
                                      data-plasmic-name={"upload6"}
                                      data-plasmic-override={overrides.upload6}
                                      accept={""}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.upload6
                                      )}
                                      files={generateStateValueProp($state, [
                                        "upload6",
                                        "files"
                                      ])}
                                      maxCount={1}
                                      onFilesChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "upload6",
                                          "files"
                                        ]).apply(null, eventArgs);
                                      }}
                                      showUploadList={false}
                                    >
                                      <div
                                        data-plasmic-name={"content4"}
                                        data-plasmic-override={
                                          overrides.content4
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.content4
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img___6YKy)}
                                          displayHeight={"39px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"39px"}
                                          loading={"lazy"}
                                          src={{
                                            src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                            fullWidth: 39,
                                            fullHeight: 39,
                                            aspectRatio: 1
                                          }}
                                        />

                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___83P6W
                                          )}
                                        >
                                          {
                                            "Importer ou d\u00e9poser un fichier"
                                          }
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__o3PT
                                          )}
                                        >
                                          {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                        </div>
                                      </div>
                                    </UploadWrapper>
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__svWc
                                  )}
                                >
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__wV73V
                                    )}
                                    end={
                                      <GroupIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__l2Tk6
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    iconEnd={true}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jcZPa
                                        )}
                                      >
                                        {"Continuer"}
                                      </div>
                                    }
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateStep"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["onboardingStep"]
                                              },
                                              operation: 0,
                                              value: 1
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateStep"] != null &&
                                        typeof $steps["updateStep"] ===
                                          "object" &&
                                        typeof $steps["updateStep"].then ===
                                          "function"
                                      ) {
                                        $steps["updateStep"] = await $steps[
                                          "updateStep"
                                        ];
                                      }
                                    }}
                                    submitsForm={true}
                                  />
                                </div>
                              </FormWrapper>
                            );
                          })()}
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.form5
                              ),
                              extendedOnValuesChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["form5", "value"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              formItems: [
                                {
                                  label: "Name",
                                  name: "name",
                                  inputType: "Text"
                                },
                                {
                                  label: "Message",
                                  name: "message",
                                  inputType: "Text Area"
                                }
                              ],
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: "advanced",
                              onFinish: async values => {
                                const $steps = {};

                                $steps["updateIsLoading"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["isLoading"]
                                        },
                                        operation: 4
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          !oldValue
                                        );
                                        return !oldValue;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateIsLoading"] != null &&
                                  typeof $steps["updateIsLoading"] ===
                                    "object" &&
                                  typeof $steps["updateIsLoading"].then ===
                                    "function"
                                ) {
                                  $steps["updateIsLoading"] = await $steps[
                                    "updateIsLoading"
                                  ];
                                }

                                $steps["clearErrors"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["errorMsg"]
                                        },
                                        operation: 0,
                                        value: []
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["clearErrors"] != null &&
                                  typeof $steps["clearErrors"] === "object" &&
                                  typeof $steps["clearErrors"].then ===
                                    "function"
                                ) {
                                  $steps["clearErrors"] = await $steps[
                                    "clearErrors"
                                  ];
                                }

                                $steps["kbis"] = (() => {
                                  const files = $state.form5.value.kbis_file;
                                  if (
                                    !Array.isArray(files) ||
                                    files.length === 0
                                  ) {
                                    return false;
                                  }
                                  const file = files[0];
                                  const maxSize = 2 * 1024 * 1024;
                                  const allowedTypes = [
                                    "application/pdf",
                                    "application/msword",
                                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    "image/jpeg",
                                    "image/png"
                                  ];

                                  const allowedExtensions = [
                                    ".pdf",
                                    ".doc",
                                    ".docx",
                                    ".jpg",
                                    ".jpeg",
                                    ".png"
                                  ];

                                  const fileTypeOk = allowedTypes.includes(
                                    file.type
                                  );
                                  const fileName =
                                    file.name?.toLowerCase() || "";
                                  const fileExtensionOk =
                                    allowedExtensions.some(ext =>
                                      fileName.endsWith(ext)
                                    );
                                  if (file.size > maxSize) {
                                    $state.errorMsg.push(
                                      "Le KBIS ne doit pas dépasser 2 Mo."
                                    );
                                    return false;
                                  }
                                  if (!fileTypeOk || !fileExtensionOk) {
                                    $state.errorMsg.push(
                                      "Le format du KBIS n'est pas accepté."
                                    );
                                    return false;
                                  }
                                  return true;
                                })()
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                          opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                          userArgs: {
                                            path: [
                                              $ctx.SupabaseUser.user.id,

                                              (() => {
                                                const file =
                                                  $state.form5.value
                                                    .kbis_file[0];
                                                if (file) {
                                                  const formattedName =
                                                    file.name
                                                      .trim()
                                                      .toLowerCase()
                                                      .replace(
                                                        /[^a-z0-9.\-_]/g,
                                                        "_"
                                                      )
                                                      .replace(/_+/g, "_")
                                                      .replace(/^_+|_+$/g, "");
                                                  return formattedName;
                                                }
                                              })()
                                            ],

                                            content: [
                                              $state.form5.value.kbis_file[0]
                                                .contents
                                            ],

                                            contentType: [
                                              $state.form5.value.kbis_file[0]
                                                .type
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId: null
                                        },
                                        continueOnError: false
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["kbis"] != null &&
                                  typeof $steps["kbis"] === "object" &&
                                  typeof $steps["kbis"].then === "function"
                                ) {
                                  $steps["kbis"] = await $steps["kbis"];
                                }

                                $steps["idFile"] = (() => {
                                  const files =
                                    $state.form5.value.identity_file;
                                  if (
                                    !Array.isArray(files) ||
                                    files.length === 0
                                  ) {
                                    return false;
                                  }
                                  const file = files[0];
                                  const maxSize = 2 * 1024 * 1024;
                                  const allowedTypes = [
                                    "application/pdf",
                                    "application/msword",
                                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    "image/jpeg",
                                    "image/png"
                                  ];

                                  const allowedExtensions = [
                                    ".pdf",
                                    ".doc",
                                    ".docx",
                                    ".jpg",
                                    ".jpeg",
                                    ".png"
                                  ];

                                  const fileTypeOk = allowedTypes.includes(
                                    file.type
                                  );
                                  const fileName =
                                    file.name?.toLowerCase() || "";
                                  const fileExtensionOk =
                                    allowedExtensions.some(ext =>
                                      fileName.endsWith(ext)
                                    );
                                  if (file.size > maxSize) {
                                    $state.errorMsg.push(
                                      "La carte d'identité ne doit pas dépasser 2 Mo."
                                    );
                                    return false;
                                  }
                                  if (!fileTypeOk || !fileExtensionOk) {
                                    $state.errorMsg.push(
                                      "Le format de la carte d'identité n'est pas accepté."
                                    );
                                    return false;
                                  }
                                  return true;
                                })()
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                          opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                          userArgs: {
                                            path: [
                                              $ctx.SupabaseUser.user.id,

                                              (() => {
                                                const file =
                                                  $state.form5.value
                                                    .identity_file[0];
                                                if (file) {
                                                  const formattedName =
                                                    file.name
                                                      .trim()
                                                      .toLowerCase()
                                                      .replace(
                                                        /[^a-z0-9.\-_]/g,
                                                        "_"
                                                      )
                                                      .replace(/_+/g, "_")
                                                      .replace(/^_+|_+$/g, "");
                                                  return formattedName;
                                                }
                                              })()
                                            ],

                                            content: [
                                              $state.form5.value
                                                .identity_file[0].contents
                                            ],

                                            contentType: [
                                              $state.form5.value
                                                .identity_file[0].type
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId: null
                                        },
                                        continueOnError: false
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["idFile"] != null &&
                                  typeof $steps["idFile"] === "object" &&
                                  typeof $steps["idFile"].then === "function"
                                ) {
                                  $steps["idFile"] = await $steps["idFile"];
                                }

                                $steps["showErrors"] =
                                  $state.errorMsg && $state.errorMsg.length > 0
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "error",
                                            (() => {
                                              try {
                                                return $state.errorMsg
                                                  .map(msg => msg)
                                                  .join("\n");
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "plasmic-antd5-config-provider.showNotification"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["showErrors"] != null &&
                                  typeof $steps["showErrors"] === "object" &&
                                  typeof $steps["showErrors"].then ===
                                    "function"
                                ) {
                                  $steps["showErrors"] = await $steps[
                                    "showErrors"
                                  ];
                                }

                                $steps["saveCompanyInfos"] =
                                  $state.errorMsg.length == 0
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                            opId: "eafd5cf5-874d-4388-bcb9-5af7e356e028",
                                            userArgs: {
                                              variables: [
                                                $state.form5.value.address,

                                                $state.form5.value.country,

                                                $state.form5.value.description,

                                                $state.form5.value
                                                  .identity_file[0].name,

                                                $state.form5.value.kbis_file[0]
                                                  .name,

                                                $state.form5.value.location,

                                                $state.form5.value.name,

                                                $state.form5.value.postal_code,

                                                $state.form5.value.sector,

                                                $state.form5.value.siren,

                                                $state.form5.value.team_size,

                                                $state.form5.value.website,

                                                $ctx.SupabaseUser.user.id,

                                                $state.form5.value.descriptions
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [],
                                            roleId: null
                                          },
                                          continueOnError: false
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["saveCompanyInfos"] != null &&
                                  typeof $steps["saveCompanyInfos"] ===
                                    "object" &&
                                  typeof $steps["saveCompanyInfos"].then ===
                                    "function"
                                ) {
                                  $steps["saveCompanyInfos"] = await $steps[
                                    "saveCompanyInfos"
                                  ];
                                }

                                $steps["updateIsLoading2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["isLoading"]
                                        },
                                        operation: 4
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        const oldValue = $stateGet(
                                          objRoot,
                                          variablePath
                                        );
                                        $stateSet(
                                          objRoot,
                                          variablePath,
                                          !oldValue
                                        );
                                        return !oldValue;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateIsLoading2"] != null &&
                                  typeof $steps["updateIsLoading2"] ===
                                    "object" &&
                                  typeof $steps["updateIsLoading2"].then ===
                                    "function"
                                ) {
                                  $steps["updateIsLoading2"] = await $steps[
                                    "updateIsLoading2"
                                  ];
                                }

                                $steps["nextStep"] =
                                  $state.errorMsg.length == 0
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["onboardingStep"]
                                          },
                                          operation: 0,
                                          value: 1
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["nextStep"] != null &&
                                  typeof $steps["nextStep"] === "object" &&
                                  typeof $steps["nextStep"].then === "function"
                                ) {
                                  $steps["nextStep"] = await $steps["nextStep"];
                                }
                              },
                              onIsSubmittingChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["form5", "isSubmitting"],
                                  FormWrapper_Helpers
                                ).apply(null, eventArgs);
                              },
                              ref: ref => {
                                $refs["form5"] = ref;
                              },
                              requiredMark: false,
                              submitSlot: null,
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "form5.value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "form5.isSubmitting"
                                }
                              ],
                              [],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <FormWrapper
                                data-plasmic-name={"form5"}
                                data-plasmic-override={overrides.form5}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kE37B
                                  )}
                                >
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__uupej
                                    )}
                                  >
                                    {"Votre profil entreprise"}
                                  </h1>
                                  <UploadWrapper
                                    data-plasmic-name={"upload7"}
                                    data-plasmic-override={overrides.upload7}
                                    accept={""}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.upload7
                                    )}
                                    files={generateStateValueProp($state, [
                                      "upload7",
                                      "files"
                                    ])}
                                    maxCount={1}
                                    onFilesChange={async (
                                      ...eventArgs: any
                                    ) => {
                                      generateStateOnChangeProp($state, [
                                        "upload7",
                                        "files"
                                      ]).apply(null, eventArgs);

                                      (async files => {
                                        const $steps = {};

                                        $steps["supabaseUploadFile"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "rtEg85U6Vbyi94cRAe93i7",
                                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                                  userArgs: {
                                                    path: [
                                                      $ctx.SupabaseUser.user.id,

                                                      (() => {
                                                        const file =
                                                          $state.upload7
                                                            .files[0];
                                                        if (file) {
                                                          const formattedName =
                                                            file.name
                                                              .trim()
                                                              .toLowerCase()
                                                              .replace(
                                                                /[^a-z0-9.\-_]/g,
                                                                "_"
                                                              )
                                                              .replace(
                                                                /_+/g,
                                                                "_"
                                                              )
                                                              .replace(
                                                                /^_+|_+$/g,
                                                                ""
                                                              );
                                                          return formattedName;
                                                        }
                                                      })()
                                                    ],

                                                    content: [
                                                      $state.upload7.files[0]
                                                        .contents
                                                    ],

                                                    contentType: [
                                                      $state.upload7.files[0]
                                                        .type
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["supabaseUploadFile"] !=
                                            null &&
                                          typeof $steps[
                                            "supabaseUploadFile"
                                          ] === "object" &&
                                          typeof $steps["supabaseUploadFile"]
                                            .then === "function"
                                        ) {
                                          $steps["supabaseUploadFile"] =
                                            await $steps["supabaseUploadFile"];
                                        }

                                        $steps["postgresUpdateById"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "kVSSe8ab4TtzwRPnTeEeUp",
                                                  opId: "ca8056ed-4ec7-4218-bb8b-d4f4da770307",
                                                  userArgs: {
                                                    keys: [
                                                      $ctx.SupabaseUser.user.id
                                                    ],

                                                    variables: [
                                                      $steps.supabaseUploadFile?.path.split(
                                                        "/"
                                                      )[1]
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["postgresUpdateById"] !=
                                            null &&
                                          typeof $steps[
                                            "postgresUpdateById"
                                          ] === "object" &&
                                          typeof $steps["postgresUpdateById"]
                                            .then === "function"
                                        ) {
                                          $steps["postgresUpdateById"] =
                                            await $steps["postgresUpdateById"];
                                        }
                                      }).apply(null, eventArgs);
                                    }}
                                    showUploadList={false}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__c39LQ)}
                                      displayHeight={"132px"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"132px"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $queries.getPp.signedUrl
                                            ? $queries.getPp.signedUrl
                                            : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return {
                                              src: "/plasmic/jam_production_🚀/images/imageWrapper.jpg",
                                              fullWidth: 867,
                                              fullHeight: 1300,
                                              aspectRatio: undefined
                                            };
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />

                                    <div
                                      data-plasmic-name={"icones"}
                                      data-plasmic-override={overrides.icones}
                                      className={classNames(
                                        projectcss.all,
                                        sty.icones
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"editIcon3"}
                                        data-plasmic-override={
                                          overrides.editIcon3
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.editIcon3
                                        )}
                                      >
                                        <div
                                          data-plasmic-name={"frame11"}
                                          data-plasmic-override={
                                            overrides.frame11
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.frame11
                                          )}
                                        />

                                        <PhPencilSimpleIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__mySsa
                                          )}
                                          role={"img"}
                                        />
                                      </div>
                                      <div
                                        data-plasmic-name={"deleteIcon3"}
                                        data-plasmic-override={
                                          overrides.deleteIcon3
                                        }
                                        className={classNames(
                                          projectcss.all,
                                          sty.deleteIcon3
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateUpload2Files"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "upload7",
                                                      "files"
                                                    ]
                                                  },
                                                  operation: 1
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    undefined
                                                  );
                                                  return undefined;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateUpload2Files"] !=
                                              null &&
                                            typeof $steps[
                                              "updateUpload2Files"
                                            ] === "object" &&
                                            typeof $steps["updateUpload2Files"]
                                              .then === "function"
                                          ) {
                                            $steps["updateUpload2Files"] =
                                              await $steps[
                                                "updateUpload2Files"
                                              ];
                                          }

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return event.stopPropagation();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }

                                          $steps["postgresUpdateMany"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "kVSSe8ab4TtzwRPnTeEeUp",
                                                    opId: "480b9e74-9c5c-4bcb-91b0-e654609fe8c1",
                                                    userArgs: {
                                                      conditions: [
                                                        $ctx.SupabaseUser.user
                                                          .id
                                                      ],

                                                      variables: [null]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["postgresUpdateMany"] !=
                                              null &&
                                            typeof $steps[
                                              "postgresUpdateMany"
                                            ] === "object" &&
                                            typeof $steps["postgresUpdateMany"]
                                              .then === "function"
                                          ) {
                                            $steps["postgresUpdateMany"] =
                                              await $steps[
                                                "postgresUpdateMany"
                                              ];
                                          }
                                        }}
                                      >
                                        <div
                                          data-plasmic-name={"frame12"}
                                          data-plasmic-override={
                                            overrides.frame12
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.frame12
                                          )}
                                        />

                                        <PhTrashIcon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__uoEgN
                                          )}
                                          role={"img"}
                                        />
                                      </div>
                                    </div>
                                  </UploadWrapper>
                                </div>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__ryeQo
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2NtT6
                                      )}
                                    >
                                      {"Nom de l'entreprise*"}
                                    </div>
                                  }
                                  name={"name"}
                                  rules={[
                                    {
                                      ruleType: "required",
                                      message: "Veuillez renseigner ce champ"
                                    }
                                  ]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput14"}
                                    data-plasmic-override={
                                      overrides.textInput14
                                    }
                                    autoComplete={["on"]}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput14
                                    )}
                                    defaultValue={(() => {
                                      try {
                                        return $state.textInput14.value;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput14",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Nom de l'entreprise"}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__tA68
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ul0TT
                                      )}
                                    >
                                      {"Pr\u00e9sentation courte"}
                                    </div>
                                  }
                                  name={"descriptions"}
                                >
                                  <TextAreaInput
                                    data-plasmic-name={"textAreaInput6"}
                                    data-plasmic-override={
                                      overrides.textAreaInput6
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textAreaInput6
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textAreaInput6",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={
                                      "Pr\u00e9sentez votre entreprise en quelques lignes..."
                                    }
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__aTyGj
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__wolAt
                                      )}
                                    >
                                      {"Adresse*"}
                                    </div>
                                  }
                                  name={"address"}
                                  rules={[
                                    {
                                      ruleType: "required",
                                      message: "Veuillez renseigner ce champ"
                                    }
                                  ]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput15"}
                                    data-plasmic-override={
                                      overrides.textInput15
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput15
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput15",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Rue"}
                                  />
                                </FormItemWrapper>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kqH6M
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__rr3M0
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__tJav
                                        )}
                                      >
                                        {"Code postal*"}
                                      </div>
                                    }
                                    name={"postal_code"}
                                    rules={[
                                      {
                                        ruleType: "required",
                                        message: "Veuillez renseigner ce champ"
                                      }
                                    ]}
                                  >
                                    <TextInput
                                      data-plasmic-name={"textInput16"}
                                      data-plasmic-override={
                                        overrides.textInput16
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textInput16
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "textInput16",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Code postal"}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__xBqwb
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__fWiqf
                                        )}
                                      >
                                        {"Ville*"}
                                      </div>
                                    }
                                    name={"location"}
                                    rules={[
                                      {
                                        ruleType: "required",
                                        message: "Veuillez renseigner ce champ"
                                      }
                                    ]}
                                  >
                                    <TextInput
                                      data-plasmic-name={"textInput17"}
                                      data-plasmic-override={
                                        overrides.textInput17
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.textInput17
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "textInput17",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Ville"}
                                    />
                                  </FormItemWrapper>
                                </div>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__aziK
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___86Q4N
                                      )}
                                    >
                                      {"Pays*"}
                                    </div>
                                  }
                                  name={"country"}
                                  rules={[
                                    {
                                      ruleType: "required",
                                      message: "Veuillez renseigner ce champ"
                                    }
                                  ]}
                                >
                                  <Select
                                    data-plasmic-name={"select17"}
                                    data-plasmic-override={overrides.select17}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select17
                                    )}
                                    items={(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.countries;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <MenuItem
                                            key={currentIndex}
                                            label={(() => {
                                              try {
                                                return currentItem;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            value={currentItem}
                                          />
                                        );
                                      }
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__wEzfh
                                        )}
                                      >
                                        {"Label"}
                                      </div>
                                    }
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "select17",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Pays"}
                                    showLabel={false}
                                  />
                                </FormItemWrapper>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__uZbdB
                                  )}
                                  initialValue={""}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__fdYbj
                                      )}
                                    >
                                      {"SIREN*"}
                                    </div>
                                  }
                                  name={"siren"}
                                  rules={[
                                    {
                                      ruleType: "required",
                                      message: "Veuillez renseigner ce champ"
                                    }
                                  ]}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput18"}
                                    data-plasmic-override={
                                      overrides.textInput18
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput18
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput18",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"Num\u00e9ro de SIREN"}
                                  />
                                </FormItemWrapper>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___9LbJh
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__i3DT
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___5SKty
                                        )}
                                      >
                                        {"Secteur d'activit\u00e9"}
                                      </div>
                                    }
                                    name={"sector"}
                                    rules={[]}
                                  >
                                    <Select
                                      data-plasmic-name={"select"}
                                      data-plasmic-override={overrides.select}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select
                                      )}
                                      items={(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return $queries.getCriteria.data
                                              .filter(
                                                item =>
                                                  item.type ===
                                                  "sector_activity"
                                              )
                                              .map(item => ({
                                                value: item.name,
                                                label: item.name
                                              }));
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const currentItem = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <MenuItem
                                              key={currentIndex}
                                              label={(() => {
                                                try {
                                                  return currentItem.label;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              value={(() => {
                                                try {
                                                  return currentItem.value;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          );
                                        }
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Secteur d'activit\u00e9"}
                                      showLabel={false}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__grHxo
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pxTyV
                                        )}
                                      >
                                        {"Taille de l'entreprise"}
                                      </div>
                                    }
                                    name={"team_size"}
                                    rules={[]}
                                  >
                                    <Select
                                      data-plasmic-name={"select2"}
                                      data-plasmic-override={overrides.select2}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select2
                                      )}
                                      items={(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return $queries.getCriteria.data
                                              .filter(
                                                item =>
                                                  item.type === "company_size"
                                              )
                                              .map(item => ({
                                                value: item.name,
                                                label: item.name
                                              }));
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_0, __plasmic_idx_0) => {
                                          const currentItem = __plasmic_item_0;
                                          const currentIndex = __plasmic_idx_0;
                                          return (
                                            <MenuItem
                                              key={currentIndex}
                                              label={(() => {
                                                try {
                                                  return currentItem.label;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              value={(() => {
                                                try {
                                                  return currentItem.value;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            />
                                          );
                                        }
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "select2",
                                          "value"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={"Taille de l'entreprise"}
                                      showLabel={false}
                                    />
                                  </FormItemWrapper>
                                </div>
                                <FormItemWrapper
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField__hy3Mh
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__aKty4
                                      )}
                                    >
                                      {"Site web"}
                                    </div>
                                  }
                                  name={"website"}
                                >
                                  <TextInput
                                    data-plasmic-name={"textInput19"}
                                    data-plasmic-override={
                                      overrides.textInput19
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput19
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "textInput19",
                                        "value"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={"https://"}
                                  />
                                </FormItemWrapper>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___6EeJn
                                  )}
                                >
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__kdOwW
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___4WNiv
                                        )}
                                      >
                                        {"Kbis*"}
                                      </div>
                                    }
                                    name={"kbis_file"}
                                    rules={[{ ruleType: "required" }]}
                                  >
                                    {(() => {
                                      try {
                                        return (
                                          $state.form5.value.kbis_file.length ==
                                            0 ||
                                          $state.form5.value.kbis_file[0]
                                            .status == "uploading"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <UploadWrapper
                                        data-plasmic-name={"upload8"}
                                        data-plasmic-override={
                                          overrides.upload8
                                        }
                                        accept={""}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.upload8
                                        )}
                                        dragAndDropFiles={false}
                                        files={generateStateValueProp($state, [
                                          "upload8",
                                          "files"
                                        ])}
                                        listType={"text"}
                                        maxCount={1}
                                        onFilesChange={async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangeProp($state, [
                                            "upload8",
                                            "files"
                                          ]).apply(null, eventArgs);
                                        }}
                                        showUploadList={true}
                                      >
                                        <div
                                          data-plasmic-name={"content5"}
                                          data-plasmic-override={
                                            overrides.content5
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.content5
                                          )}
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img___233AO
                                            )}
                                            displayHeight={"39px"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"100%"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"39px"}
                                            loading={"lazy"}
                                            src={{
                                              src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                              fullWidth: 39,
                                              fullHeight: 39,
                                              aspectRatio: 1
                                            }}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__iWoK
                                            )}
                                          >
                                            <React.Fragment>
                                              <span
                                                className={
                                                  "plasmic_default__all plasmic_default__span"
                                                }
                                                style={{ fontWeight: 600 }}
                                              >
                                                {
                                                  "Importer ou d\u00e9poser un fichier"
                                                }
                                              </span>
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__e59XD
                                            )}
                                          >
                                            <React.Fragment>
                                              <span
                                                className={
                                                  "plasmic_default__all plasmic_default__span"
                                                }
                                                style={{ fontWeight: 400 }}
                                              >
                                                {"PDF, DOC, DOCX, JPG, PNG "}
                                              </span>
                                              <React.Fragment>
                                                {"\n"}
                                              </React.Fragment>
                                              <span
                                                className={
                                                  "plasmic_default__all plasmic_default__span"
                                                }
                                                style={{ fontWeight: 400 }}
                                              >
                                                {"(max. 2Mo)"}
                                              </span>
                                            </React.Fragment>
                                          </div>
                                          {(() => {
                                            try {
                                              return (
                                                $state.form5.value?.kbis_file
                                                  ?.length == 1 &&
                                                $state.form5.value?.kbis_file[0]
                                                  ?.status == "uploading"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___6WpsA
                                              )}
                                            >
                                              {"Chargement..."}
                                            </div>
                                          ) : null}
                                        </div>
                                      </UploadWrapper>
                                    ) : null}
                                    <CvUploaded
                                      data-plasmic-name={"cvUploaded"}
                                      data-plasmic-override={
                                        overrides.cvUploaded
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cvUploaded
                                      )}
                                      fileName={generateStateValueProp($state, [
                                        "cvUploaded",
                                        "fileName"
                                      ])}
                                      onDelete={async event => {
                                        const $steps = {};

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return ($state.form5.value.kbis_file =
                                                    []);
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }}
                                      onFileNameChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "cvUploaded",
                                          "fileName"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      onShowCardChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "cvUploaded",
                                          "showCard"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      showCard={generateStateValueProp($state, [
                                        "cvUploaded",
                                        "showCard"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                  <FormItemWrapper
                                    className={classNames(
                                      "__wab_instance",
                                      sty.formField__ebVjs
                                    )}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__sFtI
                                        )}
                                      >
                                        {"Pi\u00e8ce d'identit\u00e9*"}
                                      </div>
                                    }
                                    name={"identity_file"}
                                    rules={[{ ruleType: "required" }]}
                                  >
                                    {(() => {
                                      try {
                                        return (
                                          $state.form5.value.identity_file
                                            .length == 0 ||
                                          $state.form5.value.identity_file[0]
                                            .status == "uploading"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <UploadWrapper
                                        data-plasmic-name={"upload9"}
                                        data-plasmic-override={
                                          overrides.upload9
                                        }
                                        accept={""}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.upload9
                                        )}
                                        files={generateStateValueProp($state, [
                                          "upload9",
                                          "files"
                                        ])}
                                        listType={"text"}
                                        maxCount={1}
                                        onFilesChange={async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangeProp($state, [
                                            "upload9",
                                            "files"
                                          ]).apply(null, eventArgs);
                                        }}
                                        showUploadList={false}
                                      >
                                        <div
                                          data-plasmic-name={"content6"}
                                          data-plasmic-override={
                                            overrides.content6
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.content6
                                          )}
                                        >
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img__cpf77
                                            )}
                                            displayHeight={"39px"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"100%"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"39px"}
                                            loading={"lazy"}
                                            src={{
                                              src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                              fullWidth: 39,
                                              fullHeight: 39,
                                              aspectRatio: 1
                                            }}
                                          />

                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___65A48
                                            )}
                                          >
                                            <React.Fragment>
                                              <span
                                                className={
                                                  "plasmic_default__all plasmic_default__span"
                                                }
                                                style={{ fontWeight: 600 }}
                                              >
                                                {
                                                  "Importer ou d\u00e9poser un fichier"
                                                }
                                              </span>
                                            </React.Fragment>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___1Nq5M
                                            )}
                                          >
                                            <React.Fragment>
                                              <span
                                                className={
                                                  "plasmic_default__all plasmic_default__span"
                                                }
                                                style={{ fontWeight: 400 }}
                                              >
                                                {"PDF, DOC, DOCX, JPG, PNG "}
                                              </span>
                                              <React.Fragment>
                                                {"\n"}
                                              </React.Fragment>
                                              <span
                                                className={
                                                  "plasmic_default__all plasmic_default__span"
                                                }
                                                style={{ fontWeight: 400 }}
                                              >
                                                {"(max. 2Mo)"}
                                              </span>
                                            </React.Fragment>
                                          </div>
                                          {(() => {
                                            try {
                                              return (
                                                $state.form5.value
                                                  ?.identity_file?.length ==
                                                  1 &&
                                                $state.form5.value
                                                  ?.identity_file[0]?.status ==
                                                  "uploading"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__tsC7K
                                              )}
                                            >
                                              {"Chargement..."}
                                            </div>
                                          ) : null}
                                        </div>
                                      </UploadWrapper>
                                    ) : null}
                                    <CvUploaded
                                      data-plasmic-name={"cvUploaded2"}
                                      data-plasmic-override={
                                        overrides.cvUploaded2
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cvUploaded2
                                      )}
                                      fileName={generateStateValueProp($state, [
                                        "cvUploaded2",
                                        "fileName"
                                      ])}
                                      onDelete={async event => {
                                        const $steps = {};

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return ($state.form5.value.identity_file =
                                                    []);
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }}
                                      onFileNameChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "cvUploaded2",
                                          "fileName"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      onShowCardChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "cvUploaded2",
                                          "showCard"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      showCard={generateStateValueProp($state, [
                                        "cvUploaded2",
                                        "showCard"
                                      ])}
                                    />
                                  </FormItemWrapper>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__o4C5P
                                  )}
                                >
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__qu4Pm
                                    )}
                                    end={
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return !$state.isLoading;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <GroupIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__jdWkk
                                            )}
                                            role={"img"}
                                          />
                                        ) : null}
                                        {(() => {
                                          try {
                                            return $state.isLoading;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <Loader4FillSvgrepoComSvgIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__pmV58,
                                              "spinner"
                                            )}
                                            role={"img"}
                                          />
                                        ) : null}
                                      </React.Fragment>
                                    }
                                    iconEnd={true}
                                    label={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___2FHdp
                                        )}
                                      >
                                        {"COntinuer"}
                                      </div>
                                    }
                                    submitsForm={true}
                                  />
                                </div>
                              </FormWrapper>
                            );
                          })()}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $ctx.query.onboarding !== "success" &&
                            $ctx.query.onboarding !== "done" &&
                            $state.onboardingStep === 1
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"step1"}
                          data-plasmic-override={overrides.step1}
                          className={classNames(projectcss.all, sty.step1)}
                        >
                          <dd
                            data-plasmic-name={"dd"}
                            data-plasmic-override={overrides.dd}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.dd
                            )}
                          >
                            {"Choix d\u2019abonnement"}
                          </dd>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hTgxZ
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.stripeProductsListState;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  data-plasmic-name={"subscription"}
                                  data-plasmic-override={overrides.subscription}
                                  className={classNames(
                                    projectcss.all,
                                    sty.subscription
                                  )}
                                  key={currentIndex}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateProductId"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["productId"]
                                            },
                                            operation: 0,
                                            value: currentItem.id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateProductId"] != null &&
                                      typeof $steps["updateProductId"] ===
                                        "object" &&
                                      typeof $steps["updateProductId"].then ===
                                        "function"
                                    ) {
                                      $steps["updateProductId"] = await $steps[
                                        "updateProductId"
                                      ];
                                    }

                                    $steps["updatePriceId"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["priceId"]
                                            },
                                            operation: 0,
                                            value:
                                              $queries.productPrice.data.response.data.find(
                                                product =>
                                                  product.product ===
                                                  $state.productId
                                              ).id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updatePriceId"] != null &&
                                      typeof $steps["updatePriceId"] ===
                                        "object" &&
                                      typeof $steps["updatePriceId"].then ===
                                        "function"
                                    ) {
                                      $steps["updatePriceId"] = await $steps[
                                        "updatePriceId"
                                      ];
                                    }
                                  }}
                                >
                                  <ProductCard
                                    data-plasmic-name={"productCard"}
                                    data-plasmic-override={
                                      overrides.productCard
                                    }
                                    active={(() => {
                                      try {
                                        return (
                                          $state.productId === currentItem.id
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.productCard
                                    )}
                                    productId={(() => {
                                      try {
                                        return currentItem.id;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              );
                            })}
                          </div>
                          <div
                            data-plasmic-name={"actions"}
                            data-plasmic-override={overrides.actions}
                            className={classNames(projectcss.all, sty.actions)}
                          >
                            <Button
                              data-plasmic-name={"buttonBack"}
                              data-plasmic-override={overrides.buttonBack}
                              className={classNames(
                                "__wab_instance",
                                sty.buttonBack
                              )}
                              end={
                                <GroupIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__acWd
                                  )}
                                  role={"img"}
                                />
                              }
                              label={"retour"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateOnboardingStep"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["onboardingStep"]
                                        },
                                        operation: 0,
                                        value: 0
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateOnboardingStep"] != null &&
                                  typeof $steps["updateOnboardingStep"] ===
                                    "object" &&
                                  typeof $steps["updateOnboardingStep"].then ===
                                    "function"
                                ) {
                                  $steps["updateOnboardingStep"] = await $steps[
                                    "updateOnboardingStep"
                                  ];
                                }
                              }}
                              submitsForm={true}
                              type={"bordered"}
                            />

                            <Button
                              data-plasmic-name={"buttonSubscription"}
                              data-plasmic-override={
                                overrides.buttonSubscription
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.buttonSubscription
                              )}
                              disabled={(() => {
                                try {
                                  return $state.productId === "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              end={
                                <GroupIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__oNSbO
                                  )}
                                  role={"img"}
                                />
                              }
                              iconEnd={true}
                              label={"souscrire"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["stripeCheckoutSession"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "iWyefF3oqfc9knnzuF1Fin",
                                          opId: "4057985d-b5cb-457f-afb0-c8d2c9ec9daf",
                                          userArgs: {
                                            params: [
                                              $queries.stripeProductsList.data.response.data.find(
                                                product =>
                                                  product.id ===
                                                  $state.productId
                                              ).default_price.id,

                                              (() => {
                                                const currentUrl =
                                                  window.location.href;
                                                function extractDomain(url) {
                                                  const domainMatch = url.match(
                                                    /^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i
                                                  );
                                                  return domainMatch
                                                    ? domainMatch[1]
                                                    : null;
                                                }
                                                const domain =
                                                  extractDomain(currentUrl);
                                                return (
                                                  "https://" +
                                                  domain +
                                                  "/offre-employeur?onboarding=success&session_id={CHECKOUT_SESSION_ID}"
                                                );
                                              })(),

                                              (() => {
                                                const currentUrl =
                                                  window.location.href;
                                                function extractDomain(url) {
                                                  const domainMatch = url.match(
                                                    /^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i
                                                  );
                                                  return domainMatch
                                                    ? domainMatch[1]
                                                    : null;
                                                }
                                                const domain =
                                                  extractDomain(currentUrl);
                                                return (
                                                  "https://" +
                                                  domain +
                                                  "/offre-employeur?onboarding=profil&stripe=cancel"
                                                );
                                              })(),

                                              $ctx.SupabaseUser.user.email
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: null,
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["stripeCheckoutSession"] != null &&
                                  typeof $steps["stripeCheckoutSession"] ===
                                    "object" &&
                                  typeof $steps["stripeCheckoutSession"]
                                    .then === "function"
                                ) {
                                  $steps["stripeCheckoutSession"] =
                                    await $steps["stripeCheckoutSession"];
                                }

                                $steps["goToPage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: (() => {
                                          try {
                                            return $steps.stripeCheckoutSession
                                              .data.response.url;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToPage"] != null &&
                                  typeof $steps["goToPage"] === "object" &&
                                  typeof $steps["goToPage"].then === "function"
                                ) {
                                  $steps["goToPage"] = await $steps["goToPage"];
                                }

                                $steps["updateOnboardingStep"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["onboardingStep"]
                                        },
                                        operation: 0,
                                        value: 3
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateOnboardingStep"] != null &&
                                  typeof $steps["updateOnboardingStep"] ===
                                    "object" &&
                                  typeof $steps["updateOnboardingStep"].then ===
                                    "function"
                                ) {
                                  $steps["updateOnboardingStep"] = await $steps[
                                    "updateOnboardingStep"
                                  ];
                                }
                              }}
                              submitsForm={true}
                            />
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            typeof window !== "undefined" &&
                            new window.URL(
                              window.location.href
                            ).searchParams.get("onboarding") === "success"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"step2"}
                          data-plasmic-override={overrides.step2}
                          className={classNames(projectcss.all, sty.step2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lZc79
                            )}
                          >
                            <Icon12Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__nl3P6
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pZQte
                            )}
                          >
                            {"Paiement effectu\u00e9"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yRdnn
                            )}
                          >
                            {"Votre profil a bien \u00e9t\u00e9 cr\u00e9e."}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bB8JL
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__ipKgB
                              )}
                              end={
                                <GroupIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__u95To
                                  )}
                                  role={"img"}
                                />
                              }
                              iconEnd={true}
                              label={'publier une offre d"emploi'}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateDb"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                          opId: "0a947b58-037a-44de-8578-da5e90048dcc",
                                          userArgs: {
                                            keys: [$ctx.SupabaseUser.user.id]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDb"] != null &&
                                  typeof $steps["updateDb"] === "object" &&
                                  typeof $steps["updateDb"].then === "function"
                                ) {
                                  $steps["updateDb"] = await $steps["updateDb"];
                                }

                                $steps["sendEmailToEmployer"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "5T6gSzGCrEfYgV9rAkCoaD",
                                          opId: "ac3aeb59-a5a8-4309-9807-433a1356e04e",
                                          userArgs: {
                                            body: [
                                              (() => {
                                                const product =
                                                  $state.stripeProductsListState.find(
                                                    item =>
                                                      item.id ===
                                                      $state.productId
                                                  );
                                                let benefits = [];
                                                if (product) {
                                                  if (
                                                    product.name === "Basic"
                                                  ) {
                                                    benefits = [
                                                      "Essai gratuit pendant 30 jours",
                                                      "3 annonces par mois",
                                                      "1 annonce last minute par mois",
                                                      ""
                                                    ];
                                                  } else if (
                                                    product.name === "Premium"
                                                  ) {
                                                    benefits = [
                                                      "Essai gratuit pendant 30 jours",
                                                      "8 annonces classiques par mois",
                                                      "4 annonce last minute par mois",
                                                      "2 annonces boostées par mois"
                                                    ];
                                                  }
                                                }
                                                const emailPayload = {
                                                  to: $queries.getUser?.data[0]
                                                    ?.email,
                                                  template:
                                                    "employerSubscription",
                                                  subject:
                                                    "Bienvenue dans ton nouvel abonnement \uD83C\uDF89",
                                                  params: {
                                                    name:
                                                      $queries.getUser?.data[0]
                                                        ?.first_name +
                                                      " " +
                                                      $queries.getUser?.data[0]
                                                        ?.last_name,
                                                    subscriptionName: product
                                                      ? product.name
                                                      : "Abonnement",
                                                    benefit1: benefits[0] || "",
                                                    benefit2: benefits[1] || "",
                                                    benefit3: benefits[2] || "",
                                                    manageUrl:
                                                      "https://job-around-me.com/parametres-abonnement"
                                                  }
                                                };
                                                return emailPayload;
                                              })()
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["sendEmailToEmployer"] != null &&
                                  typeof $steps["sendEmailToEmployer"] ===
                                    "object" &&
                                  typeof $steps["sendEmailToEmployer"].then ===
                                    "function"
                                ) {
                                  $steps["sendEmailToEmployer"] = await $steps[
                                    "sendEmailToEmployer"
                                  ];
                                }

                                $steps["closeModal"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["showModal"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["closeModal"] != null &&
                                  typeof $steps["closeModal"] === "object" &&
                                  typeof $steps["closeModal"].then ===
                                    "function"
                                ) {
                                  $steps["closeModal"] = await $steps[
                                    "closeModal"
                                  ];
                                }
                              }}
                            />
                          </div>
                        </div>
                      ) : null}
                      <ProgressBar
                        className={classNames(
                          "__wab_instance",
                          sty.progressBar__wD880
                        )}
                        step1={(() => {
                          try {
                            return $state.onboardingStep >= 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        step2={(() => {
                          try {
                            return $state.onboardingStep >= 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        step3={(() => {
                          try {
                            return (
                              $ctx.query.onboarding === "success" ||
                              $ctx.query.onboarding === "done"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                  )}
                </DataCtxReader__>
              </LoadingBoundary>
              <PageLoader
                data-plasmic-name={"stripeCancel"}
                data-plasmic-override={overrides.stripeCancel}
                className={classNames("__wab_instance", sty.stripeCancel)}
                onMount={async () => {
                  const $steps = {};

                  $steps["updateOnboardingStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["onboardingStep"]
                          },
                          operation: 0,
                          value: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateOnboardingStep"] != null &&
                    typeof $steps["updateOnboardingStep"] === "object" &&
                    typeof $steps["updateOnboardingStep"].then === "function"
                  ) {
                    $steps["updateOnboardingStep"] = await $steps[
                      "updateOnboardingStep"
                    ];
                  }
                }}
                shouldRun={(() => {
                  try {
                    return $ctx.query.stripe === "cancel";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()}
              />

              <SmartLoader
                data-plasmic-name={"stripeCheckout"}
                data-plasmic-override={overrides.stripeCheckout}
                action1={async () => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["onboardingStep"]
                          },
                          operation: 0,
                          value: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
                action2={async () => {
                  const $steps = {};

                  $steps["checkStripeUserExists"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                            opId: "d6ef9cec-3efc-48a9-a282-e4387e1c0996",
                            userArgs: {
                              filters: [$ctx.SupabaseUser.user?.id]
                            },
                            cacheKey: null,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          continueOnError: true
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["checkStripeUserExists"] != null &&
                    typeof $steps["checkStripeUserExists"] === "object" &&
                    typeof $steps["checkStripeUserExists"].then === "function"
                  ) {
                    $steps["checkStripeUserExists"] = await $steps[
                      "checkStripeUserExists"
                    ];
                  }

                  $steps["updateStripeSessionId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeSessionId"]
                          },
                          operation: 0,
                          value: $ctx.query.session_id
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeSessionId"] != null &&
                    typeof $steps["updateStripeSessionId"] === "object" &&
                    typeof $steps["updateStripeSessionId"].then === "function"
                  ) {
                    $steps["updateStripeSessionId"] = await $steps[
                      "updateStripeSessionId"
                    ];
                  }

                  $steps["getStripeSessionInfos"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "iWyefF3oqfc9knnzuF1Fin",
                            opId: "33df8ef7-dd9b-4373-9d6d-d0221abda1b8",
                            userArgs: {
                              path: [
                                "v1/checkout/sessions/" + $state.stripeSessionId
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: null,
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["getStripeSessionInfos"] != null &&
                    typeof $steps["getStripeSessionInfos"] === "object" &&
                    typeof $steps["getStripeSessionInfos"].then === "function"
                  ) {
                    $steps["getStripeSessionInfos"] = await $steps[
                      "getStripeSessionInfos"
                    ];
                  }

                  $steps["httpGet"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "iWyefF3oqfc9knnzuF1Fin",
                            opId: "33df8ef7-dd9b-4373-9d6d-d0221abda1b8",
                            userArgs: {
                              path: [
                                "v1/invoices/" +
                                  $steps.getStripeSessionInfos.data.response
                                    .invoice +
                                  "/lines"
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: null,
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["httpGet"] != null &&
                    typeof $steps["httpGet"] === "object" &&
                    typeof $steps["httpGet"].then === "function"
                  ) {
                    $steps["httpGet"] = await $steps["httpGet"];
                  }

                  $steps["updateProductId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["productId"]
                          },
                          operation: 0,
                          value:
                            $steps.httpGet.data.response.data[0].pricing
                              .price_details.product
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProductId"] != null &&
                    typeof $steps["updateProductId"] === "object" &&
                    typeof $steps["updateProductId"].then === "function"
                  ) {
                    $steps["updateProductId"] = await $steps["updateProductId"];
                  }

                  $steps["updatePriceId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["priceId"]
                          },
                          operation: 0,
                          value: $queries.productPrice.data.response.data.find(
                            product => product.product === $state.productId
                          ).id
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePriceId"] != null &&
                    typeof $steps["updatePriceId"] === "object" &&
                    typeof $steps["updatePriceId"].then === "function"
                  ) {
                    $steps["updatePriceId"] = await $steps["updatePriceId"];
                  }

                  $steps["updateCustomerId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeCustomerId"]
                          },
                          operation: 0,
                          value:
                            $steps.getStripeSessionInfos.data.response.customer
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCustomerId"] != null &&
                    typeof $steps["updateCustomerId"] === "object" &&
                    typeof $steps["updateCustomerId"].then === "function"
                  ) {
                    $steps["updateCustomerId"] = await $steps[
                      "updateCustomerId"
                    ];
                  }

                  $steps["updateStripeStatus"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeStatus"]
                          },
                          operation: 0,
                          value:
                            $steps.getStripeSessionInfos.data.response.status
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeStatus"] != null &&
                    typeof $steps["updateStripeStatus"] === "object" &&
                    typeof $steps["updateStripeStatus"].then === "function"
                  ) {
                    $steps["updateStripeStatus"] = await $steps[
                      "updateStripeStatus"
                    ];
                  }

                  $steps["updateStripeSubscriptionId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeSubscriptionId"]
                          },
                          operation: 0,
                          value:
                            $steps.getStripeSessionInfos.data.response
                              .subscription
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeSubscriptionId"] != null &&
                    typeof $steps["updateStripeSubscriptionId"] === "object" &&
                    typeof $steps["updateStripeSubscriptionId"].then ===
                      "function"
                  ) {
                    $steps["updateStripeSubscriptionId"] = await $steps[
                      "updateStripeSubscriptionId"
                    ];
                  }

                  $steps["updateStripeCreateAccount"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeCreateAccount"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeCreateAccount"] != null &&
                    typeof $steps["updateStripeCreateAccount"] === "object" &&
                    typeof $steps["updateStripeCreateAccount"].then ===
                      "function"
                  ) {
                    $steps["updateStripeCreateAccount"] = await $steps[
                      "updateStripeCreateAccount"
                    ];
                  }
                }}
                action3={async () => {
                  const $steps = {};

                  $steps["createUserStripeInfos"] =
                    $state.stripeCreateAccount === true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "4be8fea2-429c-451c-b7e8-516e9773bdb3",
                              userArgs: {
                                variables: [
                                  $state.stripeCustomerId,

                                  $state.priceId,

                                  $state.productId,

                                  $state.productId ===
                                  $queries.getStripeRefs.data[0].product_id
                                    ? 0
                                    : 2,

                                  $state.productId ===
                                  $queries.getStripeRefs.data[0].product_id
                                    ? 3
                                    : 8,

                                  $state.productId ===
                                  $queries.getStripeRefs.data[0].product_id
                                    ? 1
                                    : 4,

                                  $state.stripeSessionId,

                                  $state.stripeStatus,

                                  $state.stripeSubscriptionId,

                                  $ctx.SupabaseUser.user.id
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            },
                            continueOnError: false
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["createUserStripeInfos"] != null &&
                    typeof $steps["createUserStripeInfos"] === "object" &&
                    typeof $steps["createUserStripeInfos"].then === "function"
                  ) {
                    $steps["createUserStripeInfos"] = await $steps[
                      "createUserStripeInfos"
                    ];
                  }

                  $steps["updateOnboardingTrue"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                            opId: "0a947b58-037a-44de-8578-da5e90048dcc",
                            userArgs: {
                              keys: [$ctx.SupabaseUser.user.id]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateOnboardingTrue"] != null &&
                    typeof $steps["updateOnboardingTrue"] === "object" &&
                    typeof $steps["updateOnboardingTrue"].then === "function"
                  ) {
                    $steps["updateOnboardingTrue"] = await $steps[
                      "updateOnboardingTrue"
                    ];
                  }

                  $steps["updateStripeCreateAccount"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeCreateAccount"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeCreateAccount"] != null &&
                    typeof $steps["updateStripeCreateAccount"] === "object" &&
                    typeof $steps["updateStripeCreateAccount"].then ===
                      "function"
                  ) {
                    $steps["updateStripeCreateAccount"] = await $steps[
                      "updateStripeCreateAccount"
                    ];
                  }

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                className={classNames("__wab_instance", sty.stripeCheckout)}
                condition1={true}
                condition2={(() => {
                  try {
                    return $state.stripeCreateAccount === false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                condition3={(() => {
                  try {
                    return $state.stripeCreateAccount === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                condition4={false}
                condition5={false}
                shouldRun={(() => {
                  try {
                    return $ctx.query.onboarding === "success";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          ) : null}
          <MobileNavbarBottomCompany
            data-plasmic-name={"mobileNavbarBottomCompany"}
            data-plasmic-override={overrides.mobileNavbarBottomCompany}
            className={classNames(
              "__wab_instance",
              sty.mobileNavbarBottomCompany
            )}
          />

          <Modal
            data-plasmic-name={"insufficientCharges"}
            data-plasmic-override={overrides.insufficientCharges}
            className={classNames("__wab_instance", sty.insufficientCharges)}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__kESxO)}>
                <ReshotIconAlert7T6Wum8VleSvgIcon
                  className={classNames(projectcss.all, sty.svg__e8YWs)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["postgresUpdateMany"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                              userArgs: {
                                conditions: [$ctx.SupabaseUser.user.id],

                                variables: [null]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateMany"] != null &&
                      typeof $steps["postgresUpdateMany"] === "object" &&
                      typeof $steps["postgresUpdateMany"].then === "function"
                    ) {
                      $steps["postgresUpdateMany"] = await $steps[
                        "postgresUpdateMany"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ykrHu
                  )}
                >
                  {"Cr\u00e9dits insuffisants"}
                </div>
                <div
                  data-plasmic-name={"e3"}
                  data-plasmic-override={overrides.e3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.e3
                  )}
                >
                  {
                    "Vous avez utilis\u00e9 tous vos cr\u00e9dits. Pour publier votre offre, \nveuillez racheter des cr\u00e9dits, ou attendre le \nrenouvellement de votre abonnement."
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jcj)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__b3IpS)}
                    color={"white"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mxRZj
                        )}
                      >
                        {"annuler"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateInsufficientChargesIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["insufficientCharges", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateInsufficientChargesIsOpen"] != null &&
                        typeof $steps["updateInsufficientChargesIsOpen"] ===
                          "object" &&
                        typeof $steps["updateInsufficientChargesIsOpen"]
                          .then === "function"
                      ) {
                        $steps["updateInsufficientChargesIsOpen"] =
                          await $steps["updateInsufficientChargesIsOpen"];
                      }
                    }}
                    type={"bordered"}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__f6YnN)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__aweXs)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hQ2Z9
                        )}
                      >
                        {"racheter des cr\u00e9dits"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateRechargeLastMinuteIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["rechargeLastMinute", "isOpen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRechargeLastMinuteIsOpen"] != null &&
                        typeof $steps["updateRechargeLastMinuteIsOpen"] ===
                          "object" &&
                        typeof $steps["updateRechargeLastMinuteIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateRechargeLastMinuteIsOpen"] = await $steps[
                          "updateRechargeLastMinuteIsOpen"
                        ];
                      }
                    }}
                  />
                </div>
              </div>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__qhoGm)} />
            }
            heading={
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__moDhy
                )}
              >
                {"Heading"}
              </h3>
            }
            isOpen={generateStateValueProp($state, [
              "insufficientCharges",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "insufficientCharges",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <JamButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                icon={"none"}
              />
            }
          />

          <Modal
            data-plasmic-name={"rechargeLastMinute"}
            data-plasmic-override={overrides.rechargeLastMinute}
            className={classNames("__wab_instance", sty.rechargeLastMinute)}
            content={
              <div
                data-plasmic-name={"recharges"}
                data-plasmic-override={overrides.recharges}
                className={classNames(projectcss.all, sty.recharges)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7Rroc
                  )}
                >
                  {"Recharges"}
                </div>
                <div
                  data-plasmic-name={"rechargesList"}
                  data-plasmic-override={overrides.rechargesList}
                  className={classNames(projectcss.all, sty.rechargesList)}
                >
                  <div
                    data-plasmic-name={"classic"}
                    data-plasmic-override={overrides.classic}
                    className={classNames(projectcss.all, sty.classic)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hd9Ao)}
                    >
                      <IconPhBriefcaseIcon
                        className={classNames(projectcss.all, sty.svg__febB)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dW4GU
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre classique"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4YFyh
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nYiwn
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[2].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect"}
                        data-plasmic-override={overrides.inputComboSelect}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect
                        )}
                        dropDirection={"down"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c9Nzg
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ($state.inputComboSelect.value *
                                  $queries.stripeProductsList.data.response
                                    .data[2].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"lastminust"}
                    data-plasmic-override={overrides.lastminust}
                    className={classNames(projectcss.all, sty.lastminust)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oTUo)}
                    >
                      <PhClockCountdownFillIcon
                        className={classNames(projectcss.all, sty.svg__mwcTl)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Nvt0
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre Last Minute"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fUf79)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__htW0
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[1].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect2"}
                        data-plasmic-override={overrides.inputComboSelect2}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect2
                        )}
                        dropDirection={"down"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect2",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect2",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dgq1B
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ($state.inputComboSelect2.value *
                                  $queries.stripeProductsList.data.response
                                    .data[1].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"boost"}
                    data-plasmic-override={overrides.boost}
                    className={classNames(projectcss.all, sty.boost)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___52VLa
                      )}
                    >
                      <Icon15Icon
                        className={classNames(projectcss.all, sty.svg__pi1Ft)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qeu99
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre Boost\u00e9es"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dy4Em)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xty0I
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[0].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect3"}
                        data-plasmic-override={overrides.inputComboSelect3}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect3
                        )}
                        dropDirection={"down"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect3",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect3",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hwJwh
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ($state.inputComboSelect3.value *
                                  $queries.stripeProductsList.data.response
                                    .data[0].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__aAXgJ)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6MwKh
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {"Code promotionnel"}
                      </span>
                    </React.Fragment>
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput21"}
                    data-plasmic-override={overrides.textInput21}
                    className={classNames("__wab_instance", sty.textInput21)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput21",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"CODEPROMO"}
                  />
                </div>
                <div
                  data-plasmic-name={"totalAmount"}
                  data-plasmic-override={overrides.totalAmount}
                  className={classNames(projectcss.all, sty.totalAmount)}
                >
                  <div
                    data-plasmic-name={"total"}
                    data-plasmic-override={overrides.total}
                    className={classNames(projectcss.all, sty.total)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mcAEc
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 500 }}
                        >
                          {"Total"}
                        </span>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"amount"}
                    data-plasmic-override={overrides.amount}
                    className={classNames(projectcss.all, sty.amount)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b7G3E
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              ($state.inputComboSelect.value *
                                $queries.stripeProductsList.data.response
                                  .data[2].default_price.unit_amount) /
                                100 +
                              ($state.inputComboSelect2.value *
                                $queries.stripeProductsList.data.response
                                  .data[1].default_price.unit_amount) /
                                100 +
                              ($state.inputComboSelect3.value *
                                $queries.stripeProductsList.data.response
                                  .data[0].default_price.unit_amount) /
                                100 +
                              "\u20AC HT"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__sgS1B)}>
                  <StripeCheckoutButton
                    data-plasmic-name={"stripeCheckoutButton"}
                    data-plasmic-override={overrides.stripeCheckoutButton}
                    cancelUrl={(() => {
                      try {
                        return "offre-employeur?credit=cancel";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.stripeCheckoutButton
                    )}
                    clientReferenceId={(() => {
                      try {
                        return $queries.offreStripeUserInfos.data[0]
                          .customer_id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    customerEmail={(() => {
                      try {
                        return $ctx.SupabaseUser.user?.email;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    items={(() => {
                      try {
                        return [
                          {
                            price:
                              $queries.stripeProductsList.data.response.data[2]
                                .default_price.id,
                            quantity: $state.inputComboSelect.value
                          },
                          {
                            price:
                              $queries.stripeProductsList.data.response.data[1]
                                .default_price.id,
                            quantity: $state.inputComboSelect2.value
                          },
                          {
                            price:
                              $queries.stripeProductsList.data.response.data[0]
                                .default_price.id,
                            quantity: $state.inputComboSelect3.value
                          }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    successUrl={(() => {
                      try {
                        return "offre-employeur?credit=success&session_id={CHECKOUT_SESSION_ID}";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <Button
                      className={classNames("__wab_instance", sty.button___6Ee)}
                      end={
                        <GroupIcon
                          className={classNames(projectcss.all, sty.svg__gNbSa)}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h3PS
                          )}
                        >
                          {"acheter les cr\u00e9dits"}
                        </div>
                      }
                    />
                  </StripeCheckoutButton>
                </div>
              </div>
            }
            heading={
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__nDkSv
                )}
              >
                {"Heading"}
              </h3>
            }
            isOpen={generateStateValueProp($state, [
              "rechargeLastMinute",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "rechargeLastMinute",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <JamButton
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames("__wab_instance", sty.button3)}
                icon={"none"}
              />
            }
          />

          <PageLoader
            data-plasmic-name={"actionCreditSuccess"}
            data-plasmic-override={overrides.actionCreditSuccess}
            className={classNames("__wab_instance", sty.actionCreditSuccess)}
            onMount={async () => {
              const $steps = {};

              $steps["updatePaiementValidated"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["paiementValidated"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updatePaiementValidated"] != null &&
                typeof $steps["updatePaiementValidated"] === "object" &&
                typeof $steps["updatePaiementValidated"].then === "function"
              ) {
                $steps["updatePaiementValidated"] = await $steps[
                  "updatePaiementValidated"
                ];
              }

              $steps["updateStripeSessionId"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["stripeSessionId"]
                      },
                      operation: 0,
                      value: $ctx.query.session_id
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateStripeSessionId"] != null &&
                typeof $steps["updateStripeSessionId"] === "object" &&
                typeof $steps["updateStripeSessionId"].then === "function"
              ) {
                $steps["updateStripeSessionId"] = await $steps[
                  "updateStripeSessionId"
                ];
              }

              $steps["getSessionInfos"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "9Q77QfSZHRES57WTLJmYrY",
                        opId: "5db431b2-902f-44b6-a6b7-6e0b3f6d881b",
                        userArgs: {
                          path: ["get-session"],

                          params: [$state.stripeSessionId]
                        },
                        cacheKey: null,
                        invalidatedKeys: null,
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getSessionInfos"] != null &&
                typeof $steps["getSessionInfos"] === "object" &&
                typeof $steps["getSessionInfos"].then === "function"
              ) {
                $steps["getSessionInfos"] = await $steps["getSessionInfos"];
              }

              $steps["getPaymentIntent"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "9Q77QfSZHRES57WTLJmYrY",
                        opId: "13d12d4b-5a53-4196-a4bf-852be730ee37",
                        userArgs: {
                          params: [$state.stripeSessionId]
                        },
                        cacheKey: null,
                        invalidatedKeys: null,
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getPaymentIntent"] != null &&
                typeof $steps["getPaymentIntent"] === "object" &&
                typeof $steps["getPaymentIntent"].then === "function"
              ) {
                $steps["getPaymentIntent"] = await $steps["getPaymentIntent"];
              }

              $steps["savePurchase"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "9Q77QfSZHRES57WTLJmYrY",
                        opId: "49ff326d-e4bb-40a2-9a67-e1dc1e1aeb80",
                        userArgs: {
                          body: [
                            {
                              sessionId: $state.stripeSessionId,
                              customerId:
                                $steps.getSessionInfos.data.response.session
                                  .client_reference_id,
                              customerEmail:
                                $steps.getSessionInfos.data.response.session
                                  .customer_details.email,
                              receiptUrl:
                                $steps.getPaymentIntent.data.response
                                  .receiptUrl,
                              receiptTitle:
                                $steps.getPaymentIntent.data.response
                                  .receiptTitle,
                              amount:
                                $steps.getPaymentIntent.data.response.amount,
                              products:
                                $steps.getSessionInfos.data.response.session.line_items.data.map(
                                  item => ({
                                    product_id: item.price.product,
                                    quantity: item.quantity
                                  })
                                )
                            }
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["savePurchase"] != null &&
                typeof $steps["savePurchase"] === "object" &&
                typeof $steps["savePurchase"].then === "function"
              ) {
                $steps["savePurchase"] = await $steps["savePurchase"];
              }

              $steps["refreshData"] = true
                ? (() => {
                    const actionArgs = {
                      queryInvalidation: [
                        "9258b35e-6135-4ba7-8ce4-fe23b60361d6"
                      ]
                    };
                    return (async ({ queryInvalidation }) => {
                      if (!queryInvalidation) {
                        return;
                      }
                      await plasmicInvalidate(queryInvalidation);
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["refreshData"] != null &&
                typeof $steps["refreshData"] === "object" &&
                typeof $steps["refreshData"].then === "function"
              ) {
                $steps["refreshData"] = await $steps["refreshData"];
              }

              $steps["openModalCreditAlert"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["companyInfos", "isOpen"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["openModalCreditAlert"] != null &&
                typeof $steps["openModalCreditAlert"] === "object" &&
                typeof $steps["openModalCreditAlert"].then === "function"
              ) {
                $steps["openModalCreditAlert"] = await $steps[
                  "openModalCreditAlert"
                ];
              }

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return "/offre-employeur?paiement=ok";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
            shouldRun={(() => {
              try {
                return (
                  $ctx.query.credit === "success" && !$state.paiementValidated
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.modalCreditsAlerts),
              content: (
                <div
                  className={classNames(projectcss.all, sty.freeBox___3NSlF)}
                >
                  <div
                    data-plasmic-name={"iconSuccess"}
                    data-plasmic-override={overrides.iconSuccess}
                    className={classNames(projectcss.all, sty.iconSuccess)}
                  >
                    <Icon17Icon
                      className={classNames(projectcss.all, sty.svg__ctXis)}
                      role={"img"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"messageText"}
                    data-plasmic-override={overrides.messageText}
                    className={classNames(projectcss.all, sty.messageText)}
                  >
                    {(() => {
                      try {
                        return $ctx.query.paiement === "ok";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__clGxo
                        )}
                      >
                        {"Paiement re\u00e7u !"}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $ctx.query.paiement !== "ok";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mYeNy
                        )}
                      >
                        {"Nous terminons d'enregistrer votre paiement..."}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $ctx.query.paiement === "ok";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gG1Qj
                        )}
                      >
                        {
                          "Votre paiement a bien abouti et vos cr\u00e9dits sont pr\u00eats \u00e0 \u00eatre utilis\u00e9s !"
                        }
                      </div>
                    ) : null}
                  </div>
                </div>
              ),
              footer: (() => {
                try {
                  return $ctx.query.paiement === "ok";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"actionButton"}
                  data-plasmic-override={overrides.actionButton}
                  className={classNames(projectcss.all, sty.actionButton)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__eBwm)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg___8P8N)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sTjyk
                        )}
                      >
                        {"publier une offre d'emploi"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToOffreEmployeur"] = false
                        ? (() => {
                            const actionArgs = {
                              destination: `/offre-employeur`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToOffreEmployeur"] != null &&
                        typeof $steps["goToOffreEmployeur"] === "object" &&
                        typeof $steps["goToOffreEmployeur"].then === "function"
                      ) {
                        $steps["goToOffreEmployeur"] = await $steps[
                          "goToOffreEmployeur"
                        ];
                      }

                      $steps["verifyRechargesStock"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const rechargeClassic = Number(
                                    $queries.offreStripeUserInfos.data[0]
                                      ?.recharge_classic
                                  );
                                  const rechargeLastminute = Number(
                                    $queries.offreStripeUserInfos.data[0]
                                      ?.recharge_lastminute
                                  );
                                  const isNaN = Number.isNaN;
                                  const isClassicValid =
                                    !isNaN(rechargeClassic) &&
                                    rechargeClassic > 0;
                                  const isLastminuteValid =
                                    !isNaN(rechargeLastminute) &&
                                    rechargeLastminute > 0;
                                  if (isLastminuteValid) {
                                    $state.insufficientCharges.isOpen = false;
                                    return true;
                                  } else if (isClassicValid) {
                                    $state.insufficientCharges.isOpen = false;
                                    return true;
                                  } else {
                                    $state.insufficientCharges.isOpen = true;
                                    return false;
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["verifyRechargesStock"] != null &&
                        typeof $steps["verifyRechargesStock"] === "object" &&
                        typeof $steps["verifyRechargesStock"].then ===
                          "function"
                      ) {
                        $steps["verifyRechargesStock"] = await $steps[
                          "verifyRechargesStock"
                        ];
                      }

                      $steps["updateCreateJobIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["createJob", "isOpen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCreateJobIsOpen"] != null &&
                        typeof $steps["updateCreateJobIsOpen"] === "object" &&
                        typeof $steps["updateCreateJobIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateCreateJobIsOpen"] = await $steps[
                          "updateCreateJobIsOpen"
                        ];
                      }
                    }}
                  />
                </div>
              ) : null,
              heading: (
                <div
                  data-plasmic-name={"closeButton"}
                  data-plasmic-override={overrides.closeButton}
                  className={classNames(projectcss.all, sty.closeButton)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__o4QW)}
                    displayHeight={"17px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateIsModalCreditOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["isModalCreditOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateIsModalCreditOpen"] != null &&
                        typeof $steps["updateIsModalCreditOpen"] === "object" &&
                        typeof $steps["updateIsModalCreditOpen"].then ===
                          "function"
                      ) {
                        $steps["updateIsModalCreditOpen"] = await $steps[
                          "updateIsModalCreditOpen"
                        ];
                      }

                      $steps["updateModalCreditsAlertsIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modalCreditsAlerts", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalCreditsAlertsIsOpen"] != null &&
                        typeof $steps["updateModalCreditsAlertsIsOpen"] ===
                          "object" &&
                        typeof $steps["updateModalCreditsAlertsIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateModalCreditsAlertsIsOpen"] = await $steps[
                          "updateModalCreditsAlertsIsOpen"
                        ];
                      }
                    }}
                    src={{
                      src: "/plasmic/jam_production_🚀/images/close.svg",
                      fullWidth: 17,
                      fullHeight: 17,
                      aspectRatio: 1
                    }}
                  />
                </div>
              ),
              isOpen: generateStateValueProp($state, [
                "modalCreditsAlerts",
                "isOpen"
              ]),
              noTrigger: true,
              onOpenChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "modalCreditsAlerts",
                  "isOpen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }
            };

            initializePlasmicStates(
              $state,
              [
                {
                  name: "modalCreditsAlerts.isOpen",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return (
                          ($ctx.query.credit === "success" &&
                            $ctx.query.sessionId !== "") ||
                          ($ctx.query.subscription === "success" &&
                            $ctx.query.sessionId !== "") ||
                          $ctx.query.paiement === "ok"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                }
              ],
              []
            );
            return (
              <Modal
                data-plasmic-name={"modalCreditsAlerts"}
                data-plasmic-override={overrides.modalCreditsAlerts}
                {...child$Props}
              />
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  espaceEmployeur: [
    "espaceEmployeur",
    "mobileNavbarTop",
    "sidebar",
    "main",
    "heading2",
    "annonces3",
    "jobCard",
    "noAnnonce2",
    "featuredIcon3",
    "textAndSupportingText3",
    "text7",
    "supportingText3",
    "createJob",
    "form2",
    "textInput8",
    "select28",
    "select29",
    "select30",
    "select31",
    "timePicker3",
    "timePicker4",
    "select32",
    "lastMinuteToggle",
    "select33",
    "select13",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select10",
    "textAreaInput",
    "textAreaInput2",
    "editJob",
    "formUpdate",
    "textInput20",
    "select34",
    "select35",
    "select36",
    "select37",
    "timePicker",
    "timePicker2",
    "select38",
    "lastMinuteToggle2",
    "select39",
    "select26",
    "address",
    "rue2",
    "codePosteVille2",
    "codePostal2",
    "ville2",
    "select27",
    "textAreaInput3",
    "textAreaInput4",
    "deleteJob",
    "e2",
    "jobDetails",
    "jobListing",
    "frame38",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation",
    "companyInfos",
    "form",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "textInput",
    "textAreaInput5",
    "textInput3",
    "textInput4",
    "textInput6",
    "select5",
    "textInput5",
    "select3",
    "select4",
    "textInput7",
    "upload",
    "content",
    "upload3",
    "content2",
    "button2",
    "profilCreate",
    "stopInscription",
    "e",
    "onBoarding",
    "modalOnboarding",
    "loadingBoundary",
    "modal",
    "close",
    "icon",
    "closeAfterSuccess",
    "icon2",
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textAreaInput6",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select",
    "select2",
    "textInput19",
    "upload8",
    "content5",
    "cvUploaded",
    "upload9",
    "content6",
    "cvUploaded2",
    "step1",
    "dd",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription",
    "step2",
    "stripeCancel",
    "stripeCheckout",
    "mobileNavbarBottomCompany",
    "insufficientCharges",
    "button",
    "e3",
    "rechargeLastMinute",
    "button3",
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput21",
    "totalAmount",
    "total",
    "amount",
    "stripeCheckoutButton",
    "actionCreditSuccess",
    "modalCreditsAlerts",
    "closeButton",
    "iconSuccess",
    "messageText",
    "actionButton"
  ],
  mobileNavbarTop: ["mobileNavbarTop"],
  sidebar: ["sidebar"],
  main: [
    "main",
    "heading2",
    "annonces3",
    "jobCard",
    "noAnnonce2",
    "featuredIcon3",
    "textAndSupportingText3",
    "text7",
    "supportingText3"
  ],
  heading2: ["heading2"],
  annonces3: ["annonces3", "jobCard"],
  jobCard: ["jobCard"],
  noAnnonce2: [
    "noAnnonce2",
    "featuredIcon3",
    "textAndSupportingText3",
    "text7",
    "supportingText3"
  ],
  featuredIcon3: ["featuredIcon3"],
  textAndSupportingText3: [
    "textAndSupportingText3",
    "text7",
    "supportingText3"
  ],
  text7: ["text7"],
  supportingText3: ["supportingText3"],
  createJob: [
    "createJob",
    "form2",
    "textInput8",
    "select28",
    "select29",
    "select30",
    "select31",
    "timePicker3",
    "timePicker4",
    "select32",
    "lastMinuteToggle",
    "select33",
    "select13",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select10",
    "textAreaInput",
    "textAreaInput2"
  ],
  form2: [
    "form2",
    "textInput8",
    "select28",
    "select29",
    "select30",
    "select31",
    "timePicker3",
    "timePicker4",
    "select32",
    "lastMinuteToggle",
    "select33",
    "select13",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select10",
    "textAreaInput",
    "textAreaInput2"
  ],
  textInput8: ["textInput8"],
  select28: ["select28"],
  select29: ["select29"],
  select30: ["select30"],
  select31: ["select31"],
  timePicker3: ["timePicker3"],
  timePicker4: ["timePicker4"],
  select32: ["select32"],
  lastMinuteToggle: ["lastMinuteToggle"],
  select33: ["select33"],
  select13: ["select13"],
  rue: ["rue"],
  codePosteVille: ["codePosteVille", "codePostal", "ville"],
  codePostal: ["codePostal"],
  ville: ["ville"],
  select10: ["select10"],
  textAreaInput: ["textAreaInput"],
  textAreaInput2: ["textAreaInput2"],
  editJob: [
    "editJob",
    "formUpdate",
    "textInput20",
    "select34",
    "select35",
    "select36",
    "select37",
    "timePicker",
    "timePicker2",
    "select38",
    "lastMinuteToggle2",
    "select39",
    "select26",
    "address",
    "rue2",
    "codePosteVille2",
    "codePostal2",
    "ville2",
    "select27",
    "textAreaInput3",
    "textAreaInput4"
  ],
  formUpdate: [
    "formUpdate",
    "textInput20",
    "select34",
    "select35",
    "select36",
    "select37",
    "timePicker",
    "timePicker2",
    "select38",
    "lastMinuteToggle2",
    "select39",
    "select26",
    "address",
    "rue2",
    "codePosteVille2",
    "codePostal2",
    "ville2",
    "select27",
    "textAreaInput3",
    "textAreaInput4"
  ],
  textInput20: ["textInput20"],
  select34: ["select34"],
  select35: ["select35"],
  select36: ["select36"],
  select37: ["select37"],
  timePicker: ["timePicker"],
  timePicker2: ["timePicker2"],
  select38: ["select38"],
  lastMinuteToggle2: ["lastMinuteToggle2"],
  select39: ["select39"],
  select26: ["select26"],
  address: [
    "address",
    "rue2",
    "codePosteVille2",
    "codePostal2",
    "ville2",
    "select27"
  ],
  rue2: ["rue2"],
  codePosteVille2: ["codePosteVille2", "codePostal2", "ville2"],
  codePostal2: ["codePostal2"],
  ville2: ["ville2"],
  select27: ["select27"],
  textAreaInput3: ["textAreaInput3"],
  textAreaInput4: ["textAreaInput4"],
  deleteJob: ["deleteJob", "e2"],
  e2: ["e2"],
  jobDetails: [
    "jobDetails",
    "jobListing",
    "frame38",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation"
  ],
  jobListing: [
    "jobListing",
    "frame38",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation"
  ],
  frame38: ["frame38"],
  jobDetail: [
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51"
  ],
  location: ["location"],
  frame46: ["frame46", "frame47", "frame48", "frame49", "frame50", "frame51"],
  frame47: ["frame47", "frame48", "frame49", "frame50", "frame51"],
  frame48: ["frame48"],
  frame49: ["frame49"],
  frame50: ["frame50"],
  frame51: ["frame51"],
  jobDescriptionContainer: ["jobDescriptionContainer", "benefits"],
  benefits: ["benefits"],
  expectedProfileContainer: ["expectedProfileContainer"],
  companyContainer: [
    "companyContainer",
    "logoContainer",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation"
  ],
  logoContainer: ["logoContainer"],
  companyDetail: [
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation"
  ],
  sectorActivity: ["sectorActivity", "dkTrucksPark5"],
  dkTrucksPark5: ["dkTrucksPark5"],
  companySize: ["companySize"],
  companyLocation: ["companyLocation"],
  companyInfos: [
    "companyInfos",
    "form",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "textInput",
    "textAreaInput5",
    "textInput3",
    "textInput4",
    "textInput6",
    "select5",
    "textInput5",
    "select3",
    "select4",
    "textInput7",
    "upload",
    "content",
    "upload3",
    "content2",
    "button2"
  ],
  form: [
    "form",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "textInput",
    "textAreaInput5",
    "textInput3",
    "textInput4",
    "textInput6",
    "select5",
    "textInput5",
    "select3",
    "select4",
    "textInput7",
    "upload",
    "content",
    "upload3",
    "content2"
  ],
  upload2: ["upload2", "editIcon", "frame7", "deleteIcon", "frame8"],
  editIcon: ["editIcon", "frame7"],
  frame7: ["frame7"],
  deleteIcon: ["deleteIcon", "frame8"],
  frame8: ["frame8"],
  textInput: ["textInput"],
  textAreaInput5: ["textAreaInput5"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  textInput6: ["textInput6"],
  select5: ["select5"],
  textInput5: ["textInput5"],
  select3: ["select3"],
  select4: ["select4"],
  textInput7: ["textInput7"],
  upload: ["upload", "content"],
  content: ["content"],
  upload3: ["upload3", "content2"],
  content2: ["content2"],
  button2: ["button2"],
  profilCreate: ["profilCreate"],
  stopInscription: ["stopInscription", "e"],
  e: ["e"],
  onBoarding: ["onBoarding"],
  modalOnboarding: [
    "modalOnboarding",
    "loadingBoundary",
    "modal",
    "close",
    "icon",
    "closeAfterSuccess",
    "icon2",
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textAreaInput6",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select",
    "select2",
    "textInput19",
    "upload8",
    "content5",
    "cvUploaded",
    "upload9",
    "content6",
    "cvUploaded2",
    "step1",
    "dd",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription",
    "step2",
    "stripeCancel",
    "stripeCheckout"
  ],
  loadingBoundary: [
    "loadingBoundary",
    "modal",
    "close",
    "icon",
    "closeAfterSuccess",
    "icon2",
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textAreaInput6",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select",
    "select2",
    "textInput19",
    "upload8",
    "content5",
    "cvUploaded",
    "upload9",
    "content6",
    "cvUploaded2",
    "step1",
    "dd",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription",
    "step2"
  ],
  modal: [
    "modal",
    "close",
    "icon",
    "closeAfterSuccess",
    "icon2",
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textAreaInput6",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select",
    "select2",
    "textInput19",
    "upload8",
    "content5",
    "cvUploaded",
    "upload9",
    "content6",
    "cvUploaded2",
    "step1",
    "dd",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription",
    "step2"
  ],
  close: ["close", "icon"],
  icon: ["icon"],
  closeAfterSuccess: ["closeAfterSuccess", "icon2"],
  icon2: ["icon2"],
  step0: [
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textAreaInput6",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select",
    "select2",
    "textInput19",
    "upload8",
    "content5",
    "cvUploaded",
    "upload9",
    "content6",
    "cvUploaded2"
  ],
  logo: ["logo"],
  form3: ["form3", "input", "textArea3", "input2"],
  input: ["input"],
  textArea3: ["textArea3"],
  input2: ["input2"],
  form4: [
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4"
  ],
  upload4: ["upload4", "editIcon2", "frame9", "deleteIcon2", "frame10"],
  editIcon2: ["editIcon2", "frame9"],
  frame9: ["frame9"],
  deleteIcon2: ["deleteIcon2", "frame10"],
  frame10: ["frame10"],
  textInput2: ["textInput2"],
  textArea2: ["textArea2"],
  textInput9: ["textInput9"],
  textInput10: ["textInput10"],
  textInput11: ["textInput11"],
  select11: ["select11"],
  textInput12: ["textInput12"],
  select15: ["select15"],
  select16: ["select16"],
  textInput13: ["textInput13"],
  upload5: ["upload5", "content3"],
  content3: ["content3"],
  upload6: ["upload6", "content4"],
  content4: ["content4"],
  form5: [
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textAreaInput6",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select",
    "select2",
    "textInput19",
    "upload8",
    "content5",
    "cvUploaded",
    "upload9",
    "content6",
    "cvUploaded2"
  ],
  upload7: [
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12"
  ],
  icones: ["icones", "editIcon3", "frame11", "deleteIcon3", "frame12"],
  editIcon3: ["editIcon3", "frame11"],
  frame11: ["frame11"],
  deleteIcon3: ["deleteIcon3", "frame12"],
  frame12: ["frame12"],
  textInput14: ["textInput14"],
  textAreaInput6: ["textAreaInput6"],
  textInput15: ["textInput15"],
  textInput16: ["textInput16"],
  textInput17: ["textInput17"],
  select17: ["select17"],
  textInput18: ["textInput18"],
  select: ["select"],
  select2: ["select2"],
  textInput19: ["textInput19"],
  upload8: ["upload8", "content5"],
  content5: ["content5"],
  cvUploaded: ["cvUploaded"],
  upload9: ["upload9", "content6"],
  content6: ["content6"],
  cvUploaded2: ["cvUploaded2"],
  step1: [
    "step1",
    "dd",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription"
  ],
  dd: ["dd"],
  subscription: ["subscription", "productCard"],
  productCard: ["productCard"],
  actions: ["actions", "buttonBack", "buttonSubscription"],
  buttonBack: ["buttonBack"],
  buttonSubscription: ["buttonSubscription"],
  step2: ["step2"],
  stripeCancel: ["stripeCancel"],
  stripeCheckout: ["stripeCheckout"],
  mobileNavbarBottomCompany: ["mobileNavbarBottomCompany"],
  insufficientCharges: ["insufficientCharges", "button", "e3"],
  button: ["button"],
  e3: ["e3"],
  rechargeLastMinute: [
    "rechargeLastMinute",
    "button3",
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput21",
    "totalAmount",
    "total",
    "amount",
    "stripeCheckoutButton"
  ],
  button3: ["button3"],
  recharges: [
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput21",
    "totalAmount",
    "total",
    "amount",
    "stripeCheckoutButton"
  ],
  rechargesList: [
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3"
  ],
  classic: ["classic", "inputComboSelect"],
  inputComboSelect: ["inputComboSelect"],
  lastminust: ["lastminust", "inputComboSelect2"],
  inputComboSelect2: ["inputComboSelect2"],
  boost: ["boost", "inputComboSelect3"],
  inputComboSelect3: ["inputComboSelect3"],
  textInput21: ["textInput21"],
  totalAmount: ["totalAmount", "total", "amount"],
  total: ["total"],
  amount: ["amount"],
  stripeCheckoutButton: ["stripeCheckoutButton"],
  actionCreditSuccess: ["actionCreditSuccess"],
  modalCreditsAlerts: [
    "modalCreditsAlerts",
    "closeButton",
    "iconSuccess",
    "messageText",
    "actionButton"
  ],
  closeButton: ["closeButton"],
  iconSuccess: ["iconSuccess"],
  messageText: ["messageText"],
  actionButton: ["actionButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  espaceEmployeur: "div";
  mobileNavbarTop: typeof MobileNavbarTop;
  sidebar: typeof Sidebar;
  main: "main";
  heading2: "h1";
  annonces3: "div";
  jobCard: typeof JobCard;
  noAnnonce2: "div";
  featuredIcon3: "div";
  textAndSupportingText3: "div";
  text7: "div";
  supportingText3: "div";
  createJob: typeof Modal;
  form2: typeof FormWrapper;
  textInput8: typeof TextInput;
  select28: typeof Select;
  select29: typeof Select;
  select30: typeof Select;
  select31: typeof Select;
  timePicker3: typeof AntdDatePicker;
  timePicker4: typeof AntdDatePicker;
  select32: typeof Select;
  lastMinuteToggle: typeof LastMinuteToggle;
  select33: typeof Select;
  select13: typeof AntdSelect;
  rue: typeof TextInput;
  codePosteVille: "div";
  codePostal: typeof TextInput;
  ville: typeof TextInput;
  select10: typeof Select;
  textAreaInput: typeof TextAreaInput;
  textAreaInput2: typeof TextAreaInput;
  editJob: typeof Modal;
  formUpdate: typeof FormWrapper;
  textInput20: typeof TextInput;
  select34: typeof Select;
  select35: typeof Select;
  select36: typeof Select;
  select37: typeof Select;
  timePicker: typeof AntdDatePicker;
  timePicker2: typeof AntdDatePicker;
  select38: typeof Select;
  lastMinuteToggle2: typeof LastMinuteToggle;
  select39: typeof Select;
  select26: typeof AntdSelect;
  address: "div";
  rue2: typeof TextInput;
  codePosteVille2: "div";
  codePostal2: typeof TextInput;
  ville2: typeof TextInput;
  select27: typeof Select;
  textAreaInput3: typeof TextAreaInput;
  textAreaInput4: typeof TextAreaInput;
  deleteJob: typeof Modal;
  e2: "p";
  jobDetails: typeof Modal;
  jobListing: "div";
  frame38: "div";
  jobDetail: "div";
  location: "div";
  frame46: "div";
  frame47: "div";
  frame48: "div";
  frame49: "div";
  frame50: "div";
  frame51: "div";
  jobDescriptionContainer: "div";
  benefits: "div";
  expectedProfileContainer: "div";
  companyContainer: "div";
  logoContainer: "div";
  companyDetail: "div";
  sectorActivity: "div";
  dkTrucksPark5: "div";
  companySize: "div";
  companyLocation: "div";
  companyInfos: typeof Modal;
  form: typeof FormWrapper;
  upload2: typeof UploadWrapper;
  editIcon: "div";
  frame7: "div";
  deleteIcon: "div";
  frame8: "div";
  textInput: typeof TextInput;
  textAreaInput5: typeof TextAreaInput;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  textInput6: typeof TextInput;
  select5: typeof Select;
  textInput5: typeof TextInput;
  select3: typeof AntdSelect;
  select4: typeof AntdSelect;
  textInput7: typeof TextInput;
  upload: typeof UploadWrapper;
  content: "div";
  upload3: typeof UploadWrapper;
  content2: "div";
  button2: typeof JamButton;
  profilCreate: typeof Modal;
  stopInscription: typeof Modal;
  e: "div";
  onBoarding: typeof PageLoader;
  modalOnboarding: "div";
  loadingBoundary: typeof LoadingBoundary;
  modal: "div";
  close: "div";
  icon: "svg";
  closeAfterSuccess: "div";
  icon2: "svg";
  step0: "div";
  logo: "div";
  form3: typeof FormWrapper;
  input: typeof AntdInput;
  textArea3: typeof AntdTextArea;
  input2: typeof AntdInput;
  form4: typeof FormWrapper;
  upload4: typeof UploadWrapper;
  editIcon2: "div";
  frame9: "div";
  deleteIcon2: "div";
  frame10: "div";
  textInput2: typeof TextInput;
  textArea2: typeof AntdTextArea;
  textInput9: typeof TextInput;
  textInput10: typeof TextInput;
  textInput11: typeof TextInput;
  select11: typeof Select;
  textInput12: typeof TextInput;
  select15: typeof AntdSelect;
  select16: typeof AntdSelect;
  textInput13: typeof TextInput;
  upload5: typeof UploadWrapper;
  content3: "div";
  upload6: typeof UploadWrapper;
  content4: "div";
  form5: typeof FormWrapper;
  upload7: typeof UploadWrapper;
  icones: "div";
  editIcon3: "div";
  frame11: "div";
  deleteIcon3: "div";
  frame12: "div";
  textInput14: typeof TextInput;
  textAreaInput6: typeof TextAreaInput;
  textInput15: typeof TextInput;
  textInput16: typeof TextInput;
  textInput17: typeof TextInput;
  select17: typeof Select;
  textInput18: typeof TextInput;
  select: typeof Select;
  select2: typeof Select;
  textInput19: typeof TextInput;
  upload8: typeof UploadWrapper;
  content5: "div";
  cvUploaded: typeof CvUploaded;
  upload9: typeof UploadWrapper;
  content6: "div";
  cvUploaded2: typeof CvUploaded;
  step1: "div";
  dd: "dd";
  subscription: "div";
  productCard: typeof ProductCard;
  actions: "div";
  buttonBack: typeof Button;
  buttonSubscription: typeof Button;
  step2: "div";
  stripeCancel: typeof PageLoader;
  stripeCheckout: typeof SmartLoader;
  mobileNavbarBottomCompany: typeof MobileNavbarBottomCompany;
  insufficientCharges: typeof Modal;
  button: typeof JamButton;
  e3: "div";
  rechargeLastMinute: typeof Modal;
  button3: typeof JamButton;
  recharges: "div";
  rechargesList: "div";
  classic: "div";
  inputComboSelect: typeof InputComboSelect;
  lastminust: "div";
  inputComboSelect2: typeof InputComboSelect;
  boost: "div";
  inputComboSelect3: typeof InputComboSelect;
  textInput21: typeof TextInput;
  totalAmount: "div";
  total: "div";
  amount: "div";
  stripeCheckoutButton: typeof StripeCheckoutButton;
  actionCreditSuccess: typeof PageLoader;
  modalCreditsAlerts: typeof Modal;
  closeButton: "div";
  iconSuccess: "div";
  messageText: "div";
  actionButton: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOffreEmployeur__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOffreEmployeur__VariantsArgs;
    args?: PlasmicOffreEmployeur__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOffreEmployeur__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOffreEmployeur__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOffreEmployeur__ArgProps,
          internalVariantPropNames: PlasmicOffreEmployeur__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOffreEmployeur__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "espaceEmployeur") {
    func.displayName = "PlasmicOffreEmployeur";
  } else {
    func.displayName = `PlasmicOffreEmployeur.${nodeName}`;
  }
  return func;
}

export const PlasmicOffreEmployeur = Object.assign(
  // Top-level PlasmicOffreEmployeur renders the root element
  makeNodeComponent("espaceEmployeur"),
  {
    // Helper components rendering sub-elements
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    sidebar: makeNodeComponent("sidebar"),
    main: makeNodeComponent("main"),
    heading2: makeNodeComponent("heading2"),
    annonces3: makeNodeComponent("annonces3"),
    jobCard: makeNodeComponent("jobCard"),
    noAnnonce2: makeNodeComponent("noAnnonce2"),
    featuredIcon3: makeNodeComponent("featuredIcon3"),
    textAndSupportingText3: makeNodeComponent("textAndSupportingText3"),
    text7: makeNodeComponent("text7"),
    supportingText3: makeNodeComponent("supportingText3"),
    createJob: makeNodeComponent("createJob"),
    form2: makeNodeComponent("form2"),
    textInput8: makeNodeComponent("textInput8"),
    select28: makeNodeComponent("select28"),
    select29: makeNodeComponent("select29"),
    select30: makeNodeComponent("select30"),
    select31: makeNodeComponent("select31"),
    timePicker3: makeNodeComponent("timePicker3"),
    timePicker4: makeNodeComponent("timePicker4"),
    select32: makeNodeComponent("select32"),
    lastMinuteToggle: makeNodeComponent("lastMinuteToggle"),
    select33: makeNodeComponent("select33"),
    select13: makeNodeComponent("select13"),
    rue: makeNodeComponent("rue"),
    codePosteVille: makeNodeComponent("codePosteVille"),
    codePostal: makeNodeComponent("codePostal"),
    ville: makeNodeComponent("ville"),
    select10: makeNodeComponent("select10"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    textAreaInput2: makeNodeComponent("textAreaInput2"),
    editJob: makeNodeComponent("editJob"),
    formUpdate: makeNodeComponent("formUpdate"),
    textInput20: makeNodeComponent("textInput20"),
    select34: makeNodeComponent("select34"),
    select35: makeNodeComponent("select35"),
    select36: makeNodeComponent("select36"),
    select37: makeNodeComponent("select37"),
    timePicker: makeNodeComponent("timePicker"),
    timePicker2: makeNodeComponent("timePicker2"),
    select38: makeNodeComponent("select38"),
    lastMinuteToggle2: makeNodeComponent("lastMinuteToggle2"),
    select39: makeNodeComponent("select39"),
    select26: makeNodeComponent("select26"),
    address: makeNodeComponent("address"),
    rue2: makeNodeComponent("rue2"),
    codePosteVille2: makeNodeComponent("codePosteVille2"),
    codePostal2: makeNodeComponent("codePostal2"),
    ville2: makeNodeComponent("ville2"),
    select27: makeNodeComponent("select27"),
    textAreaInput3: makeNodeComponent("textAreaInput3"),
    textAreaInput4: makeNodeComponent("textAreaInput4"),
    deleteJob: makeNodeComponent("deleteJob"),
    e2: makeNodeComponent("e2"),
    jobDetails: makeNodeComponent("jobDetails"),
    jobListing: makeNodeComponent("jobListing"),
    frame38: makeNodeComponent("frame38"),
    jobDetail: makeNodeComponent("jobDetail"),
    location: makeNodeComponent("location"),
    frame46: makeNodeComponent("frame46"),
    frame47: makeNodeComponent("frame47"),
    frame48: makeNodeComponent("frame48"),
    frame49: makeNodeComponent("frame49"),
    frame50: makeNodeComponent("frame50"),
    frame51: makeNodeComponent("frame51"),
    jobDescriptionContainer: makeNodeComponent("jobDescriptionContainer"),
    benefits: makeNodeComponent("benefits"),
    expectedProfileContainer: makeNodeComponent("expectedProfileContainer"),
    companyContainer: makeNodeComponent("companyContainer"),
    logoContainer: makeNodeComponent("logoContainer"),
    companyDetail: makeNodeComponent("companyDetail"),
    sectorActivity: makeNodeComponent("sectorActivity"),
    dkTrucksPark5: makeNodeComponent("dkTrucksPark5"),
    companySize: makeNodeComponent("companySize"),
    companyLocation: makeNodeComponent("companyLocation"),
    companyInfos: makeNodeComponent("companyInfos"),
    form: makeNodeComponent("form"),
    upload2: makeNodeComponent("upload2"),
    editIcon: makeNodeComponent("editIcon"),
    frame7: makeNodeComponent("frame7"),
    deleteIcon: makeNodeComponent("deleteIcon"),
    frame8: makeNodeComponent("frame8"),
    textInput: makeNodeComponent("textInput"),
    textAreaInput5: makeNodeComponent("textAreaInput5"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    textInput6: makeNodeComponent("textInput6"),
    select5: makeNodeComponent("select5"),
    textInput5: makeNodeComponent("textInput5"),
    select3: makeNodeComponent("select3"),
    select4: makeNodeComponent("select4"),
    textInput7: makeNodeComponent("textInput7"),
    upload: makeNodeComponent("upload"),
    content: makeNodeComponent("content"),
    upload3: makeNodeComponent("upload3"),
    content2: makeNodeComponent("content2"),
    button2: makeNodeComponent("button2"),
    profilCreate: makeNodeComponent("profilCreate"),
    stopInscription: makeNodeComponent("stopInscription"),
    e: makeNodeComponent("e"),
    onBoarding: makeNodeComponent("onBoarding"),
    modalOnboarding: makeNodeComponent("modalOnboarding"),
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    modal: makeNodeComponent("modal"),
    close: makeNodeComponent("close"),
    icon: makeNodeComponent("icon"),
    closeAfterSuccess: makeNodeComponent("closeAfterSuccess"),
    icon2: makeNodeComponent("icon2"),
    step0: makeNodeComponent("step0"),
    logo: makeNodeComponent("logo"),
    form3: makeNodeComponent("form3"),
    input: makeNodeComponent("input"),
    textArea3: makeNodeComponent("textArea3"),
    input2: makeNodeComponent("input2"),
    form4: makeNodeComponent("form4"),
    upload4: makeNodeComponent("upload4"),
    editIcon2: makeNodeComponent("editIcon2"),
    frame9: makeNodeComponent("frame9"),
    deleteIcon2: makeNodeComponent("deleteIcon2"),
    frame10: makeNodeComponent("frame10"),
    textInput2: makeNodeComponent("textInput2"),
    textArea2: makeNodeComponent("textArea2"),
    textInput9: makeNodeComponent("textInput9"),
    textInput10: makeNodeComponent("textInput10"),
    textInput11: makeNodeComponent("textInput11"),
    select11: makeNodeComponent("select11"),
    textInput12: makeNodeComponent("textInput12"),
    select15: makeNodeComponent("select15"),
    select16: makeNodeComponent("select16"),
    textInput13: makeNodeComponent("textInput13"),
    upload5: makeNodeComponent("upload5"),
    content3: makeNodeComponent("content3"),
    upload6: makeNodeComponent("upload6"),
    content4: makeNodeComponent("content4"),
    form5: makeNodeComponent("form5"),
    upload7: makeNodeComponent("upload7"),
    icones: makeNodeComponent("icones"),
    editIcon3: makeNodeComponent("editIcon3"),
    frame11: makeNodeComponent("frame11"),
    deleteIcon3: makeNodeComponent("deleteIcon3"),
    frame12: makeNodeComponent("frame12"),
    textInput14: makeNodeComponent("textInput14"),
    textAreaInput6: makeNodeComponent("textAreaInput6"),
    textInput15: makeNodeComponent("textInput15"),
    textInput16: makeNodeComponent("textInput16"),
    textInput17: makeNodeComponent("textInput17"),
    select17: makeNodeComponent("select17"),
    textInput18: makeNodeComponent("textInput18"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    textInput19: makeNodeComponent("textInput19"),
    upload8: makeNodeComponent("upload8"),
    content5: makeNodeComponent("content5"),
    cvUploaded: makeNodeComponent("cvUploaded"),
    upload9: makeNodeComponent("upload9"),
    content6: makeNodeComponent("content6"),
    cvUploaded2: makeNodeComponent("cvUploaded2"),
    step1: makeNodeComponent("step1"),
    dd: makeNodeComponent("dd"),
    subscription: makeNodeComponent("subscription"),
    productCard: makeNodeComponent("productCard"),
    actions: makeNodeComponent("actions"),
    buttonBack: makeNodeComponent("buttonBack"),
    buttonSubscription: makeNodeComponent("buttonSubscription"),
    step2: makeNodeComponent("step2"),
    stripeCancel: makeNodeComponent("stripeCancel"),
    stripeCheckout: makeNodeComponent("stripeCheckout"),
    mobileNavbarBottomCompany: makeNodeComponent("mobileNavbarBottomCompany"),
    insufficientCharges: makeNodeComponent("insufficientCharges"),
    button: makeNodeComponent("button"),
    e3: makeNodeComponent("e3"),
    rechargeLastMinute: makeNodeComponent("rechargeLastMinute"),
    button3: makeNodeComponent("button3"),
    recharges: makeNodeComponent("recharges"),
    rechargesList: makeNodeComponent("rechargesList"),
    classic: makeNodeComponent("classic"),
    inputComboSelect: makeNodeComponent("inputComboSelect"),
    lastminust: makeNodeComponent("lastminust"),
    inputComboSelect2: makeNodeComponent("inputComboSelect2"),
    boost: makeNodeComponent("boost"),
    inputComboSelect3: makeNodeComponent("inputComboSelect3"),
    textInput21: makeNodeComponent("textInput21"),
    totalAmount: makeNodeComponent("totalAmount"),
    total: makeNodeComponent("total"),
    amount: makeNodeComponent("amount"),
    stripeCheckoutButton: makeNodeComponent("stripeCheckoutButton"),
    actionCreditSuccess: makeNodeComponent("actionCreditSuccess"),
    modalCreditsAlerts: makeNodeComponent("modalCreditsAlerts"),
    closeButton: makeNodeComponent("closeButton"),
    iconSuccess: makeNodeComponent("iconSuccess"),
    messageText: makeNodeComponent("messageText"),
    actionButton: makeNodeComponent("actionButton"),

    // Metadata about props expected for PlasmicOffreEmployeur
    internalVariantProps: PlasmicOffreEmployeur__VariantProps,
    internalArgProps: PlasmicOffreEmployeur__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Espace employeur",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOffreEmployeur;
/* prettier-ignore-end */
