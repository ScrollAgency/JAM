/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: f7DE9y7qp46fyCw5nuY8f9
// Component: pWEFDraHCJcf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import MobileNavbarTop from "../../MobileNavbarTop"; // plasmic-import: mAg8Ml3XUEhy/component
import Modal from "../../Modal"; // plasmic-import: fsC3QwUZz9uz/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextInput from "../../TextInput"; // plasmic-import: pZ7Ql6sUFRw9/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import Switch from "../../Switch"; // plasmic-import: 5AuMkYqOTdqa/component
import Select from "../../Select"; // plasmic-import: ZMB-SB-xJDyQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: plmAgyhhAdMc/component
import TextAreaInput from "../../TextAreaInput"; // plasmic-import: nVAUbPc6gpoz/component
import Button from "../../Button"; // plasmic-import: 9ixtKbGKv7x-/component
import DeleteAccount from "../../DeleteAccount"; // plasmic-import: KdtWnTG_vDHe/component
import { PageLoader } from "../../others/PageLoader/PageLoader"; // plasmic-import: FHDrnDhA4DZe/codeComponent
import Sidebar2 from "../../Sidebar2"; // plasmic-import: RXqL3kdDrXwo/component
import { JobOffersCard } from "../../cards/JobOffersCard/JobOffersCard"; // plasmic-import: gsOcF6TJNbSL/codeComponent
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import ProgressBar from "../../ProgressBar"; // plasmic-import: o2sDSKJQp4UX/component
import { JamButton } from "../../forms/JamButton/JamButton"; // plasmic-import: UiI0wt2mxfuf/codeComponent
import { SmartLoader } from "../../others/SmartLoader/SmartLoader"; // plasmic-import: YAp2GWWLB3S2/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import ProductCard from "../../ProductCard"; // plasmic-import: XNMQC2V0FBMZ/component
import MobileNavbarBottom2 from "../../MobileNavbarBottom2"; // plasmic-import: gAnwjyfMiBe9/component
import { InputComboSelect } from "../../forms/InputComboSelect/InputComboSelect"; // plasmic-import: KwvhXarw-EVS/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantshm8Nko4B5BDd } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HM8Nko4B5BDd/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: f7DE9y7qp46fyCw5nuY8f9/projectcss
import sty from "./PlasmicOffreEmployeur.module.css"; // plasmic-import: pWEFDraHCJcf/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: yud1FH0Ox1FR/icon
import IconPhClockCountdownIcon from "./icons/PlasmicIcon__IconPhClockCountdown"; // plasmic-import: ZcpjJL-rRIkk/icon
import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: I5WL24ilJ3LK/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: je95h6YoQ2jE/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: yIYn4o5HgDaM/icon
import PhMapPin2Icon from "./icons/PlasmicIcon__PhMapPin2"; // plasmic-import: hGRa__J54hta/icon
import PhFileTextIcon from "./icons/PlasmicIcon__PhFileText"; // plasmic-import: kuV0Q3xSw_jm/icon
import PhClockIcon from "./icons/PlasmicIcon__PhClock"; // plasmic-import: r6dP5yPLK2Mb/icon
import PhCoinsLightIcon from "./icons/PlasmicIcon__PhCoinsLight"; // plasmic-import: 4H-jk36Nk9q0/icon
import PhClockCountdownIcon from "./icons/PlasmicIcon__PhClockCountdown"; // plasmic-import: EKdA7LX61Arw/icon
import IconPhBriefcase2Icon from "./icons/PlasmicIcon__IconPhBriefcase2"; // plasmic-import: QT5tozis-7ZJ/icon
import PhUsersThreeIcon from "./icons/PlasmicIcon__PhUsersThree"; // plasmic-import: 5hJF42npUKid/icon
import PhMapTrifoldFillIcon from "./icons/PlasmicIcon__PhMapTrifoldFill"; // plasmic-import: uZBfKa3cidgz/icon
import ReshotIconAlert7T6Wum8VleSvgIcon from "./icons/PlasmicIcon__ReshotIconAlert7T6Wum8VleSvg"; // plasmic-import: I2J7nwYmWkrC/icon
import PictogramIcon from "./icons/PlasmicIcon__Pictogram"; // plasmic-import: KlZQiGxQTluF/icon
import PlusCircle1425SvgrepoComSvgIcon from "./icons/PlasmicIcon__PlusCircle1425SvgrepoComSvg"; // plasmic-import: Lk_5fNk17U9z/icon
import ZapIcon from "./icons/PlasmicIcon__Zap"; // plasmic-import: c9TD4NnDdoCa/icon
import IconPhMapPinIcon from "./icons/PlasmicIcon__IconPhMapPin"; // plasmic-import: CAcfAl_W7CL5/icon
import PhTrashIcon from "./icons/PlasmicIcon__PhTrash"; // plasmic-import: juO39VElEpcx/icon
import PhPencilSimpleIcon from "./icons/PlasmicIcon__PhPencilSimple"; // plasmic-import: 7xHLZEkolpKE/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon
import IconIcon2 from "./icons/PlasmicIcon__Icon"; // plasmic-import: noS7WwFUEgg-/icon
import NotificationBellSvgrepoComSvgIcon from "./icons/PlasmicIcon__NotificationBellSvgrepoComSvg"; // plasmic-import: dIeWzMIIc5ij/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: wV32h4GpW1qw/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 0QBsBx5rQ6RM/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: QOMO9U8NfL6f/icon
import IconPhBriefcaseIcon from "./icons/PlasmicIcon__IconPhBriefcase"; // plasmic-import: E-c3RGwvaig6/icon
import PhClockCountdownFillIcon from "./icons/PlasmicIcon__PhClockCountdownFill"; // plasmic-import: GhtgoozaYTSb/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: p0L_wgJiyVXj/icon

createPlasmicElementProxy;

export type PlasmicOffreEmployeur__VariantMembers = {};
export type PlasmicOffreEmployeur__VariantsArgs = {};
type VariantPropType = keyof PlasmicOffreEmployeur__VariantsArgs;
export const PlasmicOffreEmployeur__VariantProps = new Array<VariantPropType>();

export type PlasmicOffreEmployeur__ArgsType = {};
type ArgPropType = keyof PlasmicOffreEmployeur__ArgsType;
export const PlasmicOffreEmployeur__ArgProps = new Array<ArgPropType>();

export type PlasmicOffreEmployeur__OverridesType = {
  espaceEmployeur?: Flex__<"div">;
  mobileNavbarTop?: Flex__<typeof MobileNavbarTop>;
  editOffre?: Flex__<typeof Modal>;
  form6?: Flex__<typeof FormWrapper>;
  textInput20?: Flex__<typeof TextInput>;
  select20?: Flex__<typeof AntdSelect>;
  select21?: Flex__<typeof AntdSelect>;
  select22?: Flex__<typeof AntdSelect>;
  select23?: Flex__<typeof AntdSelect>;
  timePicker?: Flex__<typeof AntdDatePicker>;
  timePicker2?: Flex__<typeof AntdDatePicker>;
  select24?: Flex__<typeof AntdSelect>;
  switch2?: Flex__<typeof Switch>;
  select25?: Flex__<typeof AntdSelect>;
  select26?: Flex__<typeof AntdSelect>;
  rue2?: Flex__<typeof TextInput>;
  codePosteVille2?: Flex__<"div">;
  codePostal2?: Flex__<typeof TextInput>;
  ville2?: Flex__<typeof TextInput>;
  select27?: Flex__<typeof Select>;
  textAreaInput3?: Flex__<typeof TextAreaInput>;
  textAreaInput4?: Flex__<typeof TextAreaInput>;
  jobDetails?: Flex__<typeof Modal>;
  jobListing?: Flex__<"div">;
  frame38?: Flex__<"div">;
  jobDetail?: Flex__<"div">;
  location?: Flex__<"div">;
  frame46?: Flex__<"div">;
  frame47?: Flex__<"div">;
  frame48?: Flex__<"div">;
  frame49?: Flex__<"div">;
  frame50?: Flex__<"div">;
  frame51?: Flex__<"div">;
  jobDescriptionContainer?: Flex__<"div">;
  benefits?: Flex__<"div">;
  expectedProfileContainer?: Flex__<"div">;
  companyContainer?: Flex__<"div">;
  logoContainer?: Flex__<"div">;
  companyDetail?: Flex__<"div">;
  sectorActivity?: Flex__<"div">;
  dkTrucksPark5?: Flex__<"div">;
  companySize?: Flex__<"div">;
  companyLocation?: Flex__<"div">;
  deleteOffre?: Flex__<typeof Modal>;
  e2?: Flex__<"div">;
  onBoarding?: Flex__<typeof PageLoader>;
  sidebar2?: Flex__<typeof Sidebar2>;
  main?: Flex__<"main">;
  heading2?: Flex__<"h1">;
  annonces3?: Flex__<"div">;
  jobOffersCard?: Flex__<typeof JobOffersCard>;
  switch3?: Flex__<typeof Switch>;
  noAnnonce2?: Flex__<"div">;
  featuredIcon3?: Flex__<"div">;
  textAndSupportingText3?: Flex__<"div">;
  text7?: Flex__<"div">;
  supportingText3?: Flex__<"div">;
  infoEntreprise?: Flex__<typeof Modal>;
  form?: Flex__<typeof FormWrapper>;
  upload2?: Flex__<typeof UploadWrapper>;
  editIcon?: Flex__<"div">;
  frame7?: Flex__<"div">;
  deleteIcon?: Flex__<"div">;
  frame8?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  textInput6?: Flex__<typeof TextInput>;
  select5?: Flex__<typeof Select>;
  textInput5?: Flex__<typeof TextInput>;
  select3?: Flex__<typeof AntdSelect>;
  select4?: Flex__<typeof AntdSelect>;
  textInput7?: Flex__<typeof TextInput>;
  upload?: Flex__<typeof UploadWrapper>;
  content?: Flex__<"div">;
  upload3?: Flex__<typeof UploadWrapper>;
  content2?: Flex__<"div">;
  button2?: Flex__<typeof JamButton>;
  profilCreate?: Flex__<typeof Modal>;
  createOffre?: Flex__<typeof Modal>;
  form2?: Flex__<typeof FormWrapper>;
  textInput8?: Flex__<typeof TextInput>;
  select6?: Flex__<typeof AntdSelect>;
  select7?: Flex__<typeof AntdSelect>;
  select8?: Flex__<typeof AntdSelect>;
  select9?: Flex__<typeof AntdSelect>;
  timePicker3?: Flex__<typeof AntdDatePicker>;
  timePicker4?: Flex__<typeof AntdDatePicker>;
  select12?: Flex__<typeof AntdSelect>;
  _switch?: Flex__<typeof Switch>;
  select14?: Flex__<typeof AntdSelect>;
  select13?: Flex__<typeof AntdSelect>;
  rue?: Flex__<typeof TextInput>;
  codePosteVille?: Flex__<"div">;
  codePostal?: Flex__<typeof TextInput>;
  ville?: Flex__<typeof TextInput>;
  select10?: Flex__<typeof Select>;
  textAreaInput?: Flex__<typeof TextAreaInput>;
  textAreaInput2?: Flex__<typeof TextAreaInput>;
  stopInscription?: Flex__<typeof Modal>;
  e?: Flex__<"div">;
  modalOnboarding?: Flex__<"div">;
  stripeCancel?: Flex__<typeof PageLoader>;
  stripeCheckout?: Flex__<typeof SmartLoader>;
  modal?: Flex__<"div">;
  close?: Flex__<"div">;
  icon?: Flex__<"svg">;
  closeAfterSuccess?: Flex__<"div">;
  icon2?: Flex__<"svg">;
  step0?: Flex__<"div">;
  logo?: Flex__<"div">;
  form3?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea3?: Flex__<typeof AntdTextArea>;
  input2?: Flex__<typeof AntdInput>;
  form4?: Flex__<typeof FormWrapper>;
  upload4?: Flex__<typeof UploadWrapper>;
  editIcon2?: Flex__<"div">;
  frame9?: Flex__<"div">;
  deleteIcon2?: Flex__<"div">;
  frame10?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  textArea2?: Flex__<typeof AntdTextArea>;
  textInput9?: Flex__<typeof TextInput>;
  textInput10?: Flex__<typeof TextInput>;
  textInput11?: Flex__<typeof TextInput>;
  select11?: Flex__<typeof Select>;
  textInput12?: Flex__<typeof TextInput>;
  select15?: Flex__<typeof AntdSelect>;
  select16?: Flex__<typeof AntdSelect>;
  textInput13?: Flex__<typeof TextInput>;
  upload5?: Flex__<typeof UploadWrapper>;
  content3?: Flex__<"div">;
  upload6?: Flex__<typeof UploadWrapper>;
  content4?: Flex__<"div">;
  form5?: Flex__<typeof FormWrapper>;
  upload7?: Flex__<typeof UploadWrapper>;
  icones?: Flex__<"div">;
  editIcon3?: Flex__<"div">;
  frame11?: Flex__<"div">;
  deleteIcon3?: Flex__<"div">;
  frame12?: Flex__<"div">;
  textInput14?: Flex__<typeof TextInput>;
  textArea4?: Flex__<typeof AntdTextArea>;
  textInput15?: Flex__<typeof TextInput>;
  textInput16?: Flex__<typeof TextInput>;
  textInput17?: Flex__<typeof TextInput>;
  select17?: Flex__<typeof Select>;
  textInput18?: Flex__<typeof TextInput>;
  select18?: Flex__<typeof AntdSelect>;
  select19?: Flex__<typeof AntdSelect>;
  textInput19?: Flex__<typeof TextInput>;
  upload8?: Flex__<typeof UploadWrapper>;
  content5?: Flex__<"div">;
  upload9?: Flex__<typeof UploadWrapper>;
  content6?: Flex__<"div">;
  step1?: Flex__<"div">;
  subscription?: Flex__<"div">;
  productCard?: Flex__<typeof ProductCard>;
  actions?: Flex__<"div">;
  buttonBack?: Flex__<typeof Button>;
  buttonSubscription?: Flex__<typeof Button>;
  step2?: Flex__<"div">;
  mobileNavbarBottom2?: Flex__<typeof MobileNavbarBottom2>;
  insufficientCharges?: Flex__<typeof Modal>;
  button?: Flex__<typeof JamButton>;
  e3?: Flex__<"div">;
  rechargeLastMinute?: Flex__<typeof Modal>;
  button3?: Flex__<typeof JamButton>;
  recharges?: Flex__<"div">;
  rechargesList?: Flex__<"div">;
  classic?: Flex__<"div">;
  inputComboSelect?: Flex__<typeof InputComboSelect>;
  lastminust?: Flex__<"div">;
  inputComboSelect2?: Flex__<typeof InputComboSelect>;
  boost?: Flex__<"div">;
  inputComboSelect3?: Flex__<typeof InputComboSelect>;
  textInput21?: Flex__<typeof TextInput>;
  totalAmount?: Flex__<"div">;
  total?: Flex__<"div">;
  amount?: Flex__<"div">;
};

export interface DefaultOffreEmployeurProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOffreEmployeur__RenderFunc(props: {
  variants: PlasmicOffreEmployeur__VariantsArgs;
  args: PlasmicOffreEmployeur__ArgsType;
  overrides: PlasmicOffreEmployeur__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "infoEntreprise.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "upload2.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stopInscription.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "profilCreate.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload3.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createOffre.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rue.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "form4.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form4",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form4.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form4",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload4.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload5.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload6.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "onboardingStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "productId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "priceId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stripeSessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "cs_test_a1Q4FXac6cZ06BXVzzjACwsWCtIJ1tTyZDlipYgH72UvqQeuMjCPSkoyUX"
      },
      {
        path: "stripeCustomerId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stripeStatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stripeSubscriptionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "stripeCreateAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modalOnboarding2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "showModal",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hiddeModal",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "form5.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form5",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form5.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form5",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload7.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "textInput14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "textInput15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload8.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "upload9.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "deleteOffre.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editOffre.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form6.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form6",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form6.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form6",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select20.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select23.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select25.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rue2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "codePostal2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "ville2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select27.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "jobId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "_switch.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "jobDetails.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return !$state.jobObject ?? [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "switch2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.currentJobOffers.data[0].is_last_minute;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "insufficientCharges.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rechargeLastMinute.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputComboSelect.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "inputComboSelect2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "inputComboSelect3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "textInput21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "timePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "timePicker3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "timePicker4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "switch3[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "coordinates",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "jobObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.currentJobOffers.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "fullAddress",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCountries: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "55fe18eb-11a3-411e-bf08-f786d3cb4a98",
        userArgs: {},
        cacheKey: `plasmic.$.55fe18eb-11a3-411e-bf08-f786d3cb4a98.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCriteria: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "3c8bdc4e-677f-4634-aaef-8a13e1973a95",
        userArgs: {},
        cacheKey: `plasmic.$.3c8bdc4e-677f-4634-aaef-8a13e1973a95.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getCompanies: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "e13b458c-532d-419c-bc09-41e0eb79063a",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.e13b458c-532d-419c-bc09-41e0eb79063a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getPp: usePlasmicDataOp(() => {
      return {
        sourceId: "rtEg85U6Vbyi94cRAe93i7",
        opId: "8be05618-e3eb-4b37-889a-c18c2902bc93",
        userArgs: {
          path: [
            $queries.getUser.data[0].id +
              "/" +
              $queries.getUser.data[0].profile_photo
          ]
        },
        cacheKey: `plasmic.$.8be05618-e3eb-4b37-889a-c18c2902bc93.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getUser: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "824e3311-006f-47c1-8e57-3abea78d9f18",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.824e3311-006f-47c1-8e57-3abea78d9f18.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    jobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "04260277-5a3a-48fb-ade9-42cf7668458b",
        userArgs: {
          filters: [$queries.getCompanies.data[0].id]
        },
        cacheKey: `plasmic.$.04260277-5a3a-48fb-ade9-42cf7668458b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    paramEmpCardJobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "86a865c1-0261-4284-930f-6ef2f6f1060b",
        userArgs: {
          query: [$queries.getCompanies.data[0].id]
        },
        cacheKey: `plasmic.$.86a865c1-0261-4284-930f-6ef2f6f1060b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    stripeProductsList: usePlasmicDataOp(() => {
      return {
        sourceId: "iWyefF3oqfc9knnzuF1Fin",
        opId: "65adb9fe-1686-4fa3-8519-62b6b082d238",
        userArgs: {},
        cacheKey: `plasmic.$.65adb9fe-1686-4fa3-8519-62b6b082d238.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    productPrice: usePlasmicDataOp(() => {
      return {
        sourceId: "iWyefF3oqfc9knnzuF1Fin",
        opId: "8d37026a-02c8-45b5-9876-1e7b6252d3fe",
        userArgs: {},
        cacheKey: `plasmic.$.8d37026a-02c8-45b5-9876-1e7b6252d3fe.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    offreStripeUserInfos: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "1284f981-03a5-4aae-9f90-4a9eb18e1c6b",
        userArgs: {
          filters: [$ctx.SupabaseUser.user.id]
        },
        cacheKey: `plasmic.$.1284f981-03a5-4aae-9f90-4a9eb18e1c6b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJobById: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "25a00478-4e30-4965-8940-e968e2ffc8ce",
        userArgs: {
          keys: [$state.jobId]
        },
        cacheKey: `plasmic.$.25a00478-4e30-4965-8940-e968e2ffc8ce.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentJobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "b5053c79-3d9f-4806-8ac7-7c69da74426b",
        userArgs: {
          query: [$queries.getCompanies.data[0].id, $state.jobId]
        },
        cacheKey: `plasmic.$.b5053c79-3d9f-4806-8ac7-7c69da74426b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getJobapplicationsByJobOffers: usePlasmicDataOp(() => {
      return {
        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
        opId: "1e3dda04-b7b2-4657-a520-9d22389e3e32",
        userArgs: {
          query: [$ctx.params.job_id]
        },
        cacheKey: `plasmic.$.1e3dda04-b7b2-4657-a520-9d22389e3e32.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getLocationData: usePlasmicDataOp(() => {
      return {
        sourceId: "3fRequBPthJKGmQ2njgcZi",
        opId: "d9718bfb-9971-4493-8975-8d5cf762aaec",
        userArgs: {
          params: [
            $state.form2.value.address,
            $state.form2.value.location,
            $state.form2.value.postal_code,
            $state.form2.value.country
          ]
        },
        cacheKey: `plasmic.$.d9718bfb-9971-4493-8975-8d5cf762aaec.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshm8Nko4B5BDd()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicOffreEmployeur.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicOffreEmployeur.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicOffreEmployeur.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"espaceEmployeur"}
          data-plasmic-override={overrides.espaceEmployeur}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.espaceEmployeur
          )}
        >
          <MobileNavbarTop
            data-plasmic-name={"mobileNavbarTop"}
            data-plasmic-override={overrides.mobileNavbarTop}
            className={classNames("__wab_instance", sty.mobileNavbarTop)}
          />

          <Modal
            data-plasmic-name={"editOffre"}
            data-plasmic-override={overrides.editOffre}
            className={classNames("__wab_instance", sty.editOffre)}
            closeOnBackdropClick={false}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3GNlx)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__kXp1H
                  )}
                >
                  {"Modifier l'offre d'emploi"}
                </h3>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form6),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form6", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: (() => {
                      try {
                        return $queries.getJobById.data[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form6", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form6"] = ref;
                    },
                    requiredMark: false,
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form6.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form6.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form6"}
                      data-plasmic-override={overrides.form6}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__gecyg
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jF8Pp
                            )}
                          >
                            {"Intitul\u00e9 du poste"}
                          </div>
                        }
                        name={"title"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput20"}
                          data-plasmic-override={overrides.textInput20}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput20
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.currentJobOffers.data[0].title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput20",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Intitul\u00e9 du poste"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__av5TW
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___8Ir2D
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.getJobById.data[0]
                                .contract_type_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kQPo
                              )}
                            >
                              {"Type de contrat"}
                            </div>
                          }
                          name={"contract_type"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select20"}
                            data-plasmic-override={overrides.select20}
                            bordered={true}
                            className={classNames(
                              "__wab_instance",
                              sty.select20
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select20",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "contract_type")
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gSb5P
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Type de contrat"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select20__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__qQcw6
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select20",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___5CL33
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.getJobById.data[0]
                                .working_time_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fy1Uk
                              )}
                            >
                              {"Temps de travail"}
                            </div>
                          }
                          name={"working_time"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select21"}
                            data-plasmic-override={overrides.select21}
                            className={classNames(
                              "__wab_instance",
                              sty.select21
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select21",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "working_time")
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bXt
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Temps de travail"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select21__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8Qdeq
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select21",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oOiW7
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__paE0O
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.getJobById.data[0].salary_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__t2OXw
                              )}
                            >
                              {"Salaire"}
                            </div>
                          }
                          name={"salary"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select22"}
                            data-plasmic-override={overrides.select22}
                            className={classNames(
                              "__wab_instance",
                              sty.select22
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select22",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "salary")
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ilrJv
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Salaire envisag\u00e9"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select22__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hpIyg
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select22",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__uj2KD
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.getJobById.data[0]
                                .sector_activity_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__r3LJu
                              )}
                            >
                              {"Secteur de travail"}
                            </div>
                          }
                          name={"sector_activity"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select23"}
                            data-plasmic-override={overrides.select23}
                            className={classNames(
                              "__wab_instance",
                              sty.select23
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select23",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(
                                    item => item.type === "sector_activity"
                                  )
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kLwgb
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Secteur de travail"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select23__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1QwiF
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select23",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ubwCf
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__cguLw
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ktigd
                              )}
                            >
                              {"Date de d\u00e9butdu contrat"}
                            </div>
                          }
                          name={"start_date"}
                          rules={[{ ruleType: "required" }]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.timePicker
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["timePicker", "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              popupScopeClassName:
                                sty["timePicker__datePickerPopup"],
                              value: generateStateValueProp($state, [
                                "timePicker",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "timePicker.value"
                                }
                              ],
                              [],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdDatePicker
                                data-plasmic-name={"timePicker"}
                                data-plasmic-override={overrides.timePicker}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__m9Hef
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pCAfH
                              )}
                            >
                              {"Date de fin du contrat"}
                            </div>
                          }
                          name={"end_date"}
                          noLabel={false}
                          rules={[
                            {
                              ruleType: "advanced",
                              custom: (rule, value) => {
                                return (
                                  $state.form6.value.end_date == undefined ||
                                  $state.form6.value.end_date == null ||
                                  $state.form6.value.start_date <
                                    $state.form6.value.end_date
                                );
                              }
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.timePicker2
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["timePicker2", "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              popupScopeClassName:
                                sty["timePicker2__datePickerPopup"],
                              value: generateStateValueProp($state, [
                                "timePicker2",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "timePicker2.value"
                                }
                              ],
                              [],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdDatePicker
                                data-plasmic-name={"timePicker2"}
                                data-plasmic-override={overrides.timePicker2}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dzWrt
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__oJncC
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.getJobById.data[0].work_mode_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rKwOo
                              )}
                            >
                              {"Mode de travail"}
                            </div>
                          }
                          name={"work_mode"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select24"}
                            data-plasmic-override={overrides.select24}
                            className={classNames(
                              "__wab_instance",
                              sty.select24
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select24",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "work_mode")
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__w5ApY
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Mode de travail"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select24__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1AUgj
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select24",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__vn2Hd
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.getJobById.data[0]
                                .availability_status_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__q7Lqj
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0H76
                                )}
                              >
                                {"Disponibilit\u00e9"}
                              </div>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sjrQa
                                )}
                              >
                                <IconPhClockCountdownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__dEzs2
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qj5H
                                  )}
                                >
                                  {"LAST MINUTE"}
                                </div>
                                <Switch
                                  data-plasmic-name={"switch2"}
                                  data-plasmic-override={overrides.switch2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.switch2
                                  )}
                                  disabled={(() => {
                                    try {
                                      return $queries.currentJobOffers.data[0]
                                        .posted;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  isSelected={generateStateValueProp($state, [
                                    "switch2",
                                    "isSelected"
                                  ])}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "switch2",
                                      "isSelected"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  showDescription={false}
                                  showLabel={false}
                                />
                              </Stack__>
                            </Stack__>
                          }
                          name={"availability_status"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select25"}
                            data-plasmic-override={overrides.select25}
                            className={classNames(
                              "__wab_instance",
                              sty.select25
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select25",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(
                                    item => item.type === "availability_status"
                                  )
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hxz8Q
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Disponibilit\u00e9"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select25__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rErt1
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select25",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__uwEXo
                        )}
                        initialValue={(() => {
                          try {
                            return $state.form6.value.benefits.split(",");
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jrjKy
                            )}
                          >
                            {"Avantages"}
                          </div>
                        }
                        name={(() => {
                          try {
                            return $state.form6.value.benefits;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        rules={[{ ruleType: "required" }]}
                      >
                        <AntdSelect
                          data-plasmic-name={"select26"}
                          data-plasmic-override={overrides.select26}
                          className={classNames("__wab_instance", sty.select26)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          mode={"multiple"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select26",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          options={(() => {
                            try {
                              return $queries.getCriteria.data
                                .filter(item => item.type === "benefits_type")
                                .map(item => ({
                                  value: item.name,
                                  label: item.name
                                }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ftRXb
                              )}
                            >
                              <PlusIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__h6WlZ
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sm4ZU
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Ajouter"}
                                  </span>
                                </React.Fragment>
                              </div>
                            </Stack__>
                          }
                          popupScopeClassName={sty["select26__popup"]}
                          size={"large"}
                          suffixIcon={
                            <ChevronDownIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__t0Wf3
                              )}
                              role={"img"}
                            />
                          }
                          value={generateStateValueProp($state, [
                            "select26",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__rHuJt
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pbKmk
                            )}
                          >
                            {"Adresse"}
                          </div>
                        }
                        name={"address"}
                      >
                        <TextInput
                          data-plasmic-name={"rue2"}
                          data-plasmic-override={overrides.rue2}
                          className={classNames("__wab_instance", sty.rue2)}
                          defaultValue={(() => {
                            try {
                              return $queries.currentJobOffers.data[0].address;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "rue2",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Rue"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"codePosteVille2"}
                        data-plasmic-override={overrides.codePosteVille2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.codePosteVille2
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__vTpC1
                          )}
                          hidden={false}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__n8Wg
                              )}
                            >
                              {""}
                            </div>
                          }
                          name={"postal_code"}
                          noLabel={true}
                        >
                          <TextInput
                            data-plasmic-name={"codePostal2"}
                            data-plasmic-override={overrides.codePostal2}
                            className={classNames(
                              "__wab_instance",
                              sty.codePostal2
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.currentJobOffers.data[0]
                                  .postal_code;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "codePostal2",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Code postal"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___8TMyt
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3WxMj
                              )}
                            >
                              {"Adresse*"}
                            </div>
                          }
                          name={"location"}
                          noLabel={true}
                          rules={[{ ruleType: "required" }]}
                        >
                          <TextInput
                            data-plasmic-name={"ville2"}
                            data-plasmic-override={overrides.ville2}
                            className={classNames("__wab_instance", sty.ville2)}
                            defaultValue={(() => {
                              try {
                                return $queries.currentJobOffers.data[0]
                                  .location;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "ville2",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Ville"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__lJUpI
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a39L7
                            )}
                          >
                            {"Adresse*"}
                          </div>
                        }
                        name={"country"}
                        noLabel={true}
                      >
                        <Select
                          data-plasmic-name={"select27"}
                          data-plasmic-override={overrides.select27}
                          className={classNames("__wab_instance", sty.select27)}
                          initialSelectedValue={(() => {
                            try {
                              return $queries.currentJobOffers.data[0].country;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getCountries.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.menuItem__oQg2L
                                )}
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dXux8
                              )}
                            >
                              {"Label"}
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select27",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pays"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__a2OXn
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4Bq8O
                            )}
                          >
                            {"Description du poste"}
                          </div>
                        }
                        name={"description"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput3"}
                          data-plasmic-override={overrides.textAreaInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput3
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.currentJobOffers.data[0]
                                .description;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput3",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={(() => {
                            try {
                              return "Mission 1\nMission 2\nMission 3\n...";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__dEYv
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kVbxJ
                            )}
                          >
                            {"Profil attendu"}
                          </div>
                        }
                        name={"requirements"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput4"}
                          data-plasmic-override={overrides.textAreaInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput4
                          )}
                          defaultValue={(() => {
                            try {
                              return $queries.currentJobOffers.data[0]
                                .requirements;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput4",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "Description du profil recherch\u00e9...."
                          }
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iZbYo
                        )}
                      >
                        {(() => {
                          try {
                            return !$queries.currentJobOffers.data[0].posted;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__yJyNz
                            )}
                            color={"white"}
                            end={
                              <GroupIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0EOS
                                )}
                                role={"img"}
                              />
                            }
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qC4Oj
                                )}
                              >
                                {"enregistrer les modifications"}
                              </div>
                            }
                            onClick={async event => {
                              const $steps = {};

                              $steps["postgresCreateMany"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "ef8c0ce7-72b3-44e0-b0d2-2793f75dab5b",
                                        userArgs: {
                                          keys: [$state.jobId],
                                          variables: [
                                            $state.form6.value.address,
                                            $state.form6.value
                                              .availability_status,
                                            $state.form6.value.benefits,
                                            $queries.getCompanies.data[0].id,
                                            $state.form6.value.contract_type,
                                            $state.form6.value.country,
                                            $state.form6.value.description,
                                            $state.form6.value.location,
                                            $state.form6.value.postal_code,
                                            $state.form6.value.requirements,
                                            $state.form6.value.salary,
                                            $state.form6.value.sector_activity,
                                            $state.form6.value.title,
                                            $state.form6.value.work_mode,
                                            $state.form6.value.working_time,
                                            $state.switch2.isSelected,
                                            $state.form6.value.end_date,
                                            $state.form6.value.start_date
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresCreateMany"] != null &&
                                typeof $steps["postgresCreateMany"] ===
                                  "object" &&
                                typeof $steps["postgresCreateMany"].then ===
                                  "function"
                              ) {
                                $steps["postgresCreateMany"] = await $steps[
                                  "postgresCreateMany"
                                ];
                              }

                              $steps["updateEditOffreIsOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["editOffre", "isOpen"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateEditOffreIsOpen"] != null &&
                                typeof $steps["updateEditOffreIsOpen"] ===
                                  "object" &&
                                typeof $steps["updateEditOffreIsOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateEditOffreIsOpen"] = await $steps[
                                  "updateEditOffreIsOpen"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"bordered"}
                          />
                        ) : null}
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___4RMaU
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zxStU
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fcIx
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $queries.currentJobOffers.data[0]
                                      .posted
                                      ? "Modifier l'offre"
                                      : "Publier l'offre";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Publier l'offre";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["postgresCreateMany"] =
                              $queries.currentJobOffers.data[0].posted === false
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "cd59497f-5588-42bc-90c4-780c28c9a5c5",
                                        userArgs: {
                                          keys: [$state.jobId]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["postgresCreateMany"] != null &&
                              typeof $steps["postgresCreateMany"] ===
                                "object" &&
                              typeof $steps["postgresCreateMany"].then ===
                                "function"
                            ) {
                              $steps["postgresCreateMany"] = await $steps[
                                "postgresCreateMany"
                              ];
                            }

                            $steps["postgresUpdateById"] =
                              $queries.currentJobOffers.data[0].posted === true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "d2b53205-a8e0-4f79-b53c-e36b4dc0db23",
                                        userArgs: {
                                          keys: [$state.jobId],
                                          variables: [
                                            $state.form6.value.address,
                                            $state.form6.value.benefits,
                                            $queries.getCompanies.data[0].id,
                                            $state.form6.value.country,
                                            $state.form6.value.description,
                                            $state.form6.value.location,
                                            $state.form6.value.postal_code,
                                            $state.form6.value.requirements,
                                            $state.form6.value.salary,
                                            $state.form6.value.title,
                                            $state.form6.value.end_date,
                                            $state.form6.value.start_date,
                                            $state.form6.value
                                              .availability_status,
                                            $state.form6.value.contract_type,
                                            $state.form6.value.sector_activity,
                                            $state.form6.value.work_mode,
                                            $state.form6.value.working_time
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["postgresUpdateById"] != null &&
                              typeof $steps["postgresUpdateById"] ===
                                "object" &&
                              typeof $steps["postgresUpdateById"].then ===
                                "function"
                            ) {
                              $steps["postgresUpdateById"] = await $steps[
                                "postgresUpdateById"
                              ];
                            }

                            $steps["updateEditOffreIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["editOffre", "isOpen"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEditOffreIsOpen"] != null &&
                              typeof $steps["updateEditOffreIsOpen"] ===
                                "object" &&
                              typeof $steps["updateEditOffreIsOpen"].then ===
                                "function"
                            ) {
                              $steps["updateEditOffreIsOpen"] = await $steps[
                                "updateEditOffreIsOpen"
                              ];
                            }
                          }}
                          submitsForm={true}
                        />
                      </Stack__>
                    </FormWrapper>
                  );
                })()}
              </Stack__>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__hv1Gz)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateEditOffreIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["editOffre", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateEditOffreIsOpen"] != null &&
                      typeof $steps["updateEditOffreIsOpen"] === "object" &&
                      typeof $steps["updateEditOffreIsOpen"].then === "function"
                    ) {
                      $steps["updateEditOffreIsOpen"] = await $steps[
                        "updateEditOffreIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["editOffre", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["editOffre", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <div className={classNames(projectcss.all, sty.freeBox__tfAAv)} />
            }
          />

          <Modal
            data-plasmic-name={"jobDetails"}
            data-plasmic-override={overrides.jobDetails}
            className={classNames("__wab_instance", sty.jobDetails)}
            content={
              <Stack__
                as={"div"}
                data-plasmic-name={"jobListing"}
                data-plasmic-override={overrides.jobListing}
                hasGap={true}
                className={classNames(projectcss.all, sty.jobListing)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame38"}
                  data-plasmic-override={overrides.frame38}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame38)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dzu9L
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.jobObject[0].title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"jobDetail"}
                  data-plasmic-override={overrides.jobDetail}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.jobDetail)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wrJh3)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"location"}
                      data-plasmic-override={overrides.location}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.location)}
                    >
                      <PhMapPin2Icon
                        className={classNames(projectcss.all, sty.svg__p9C1Y)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tEf
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.jobObject[0].location +
                                " (" +
                                $state.jobObject[0].postal_code.substring(
                                  0,
                                  2
                                ) +
                                ")"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qGEm
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const createdAt = new Date(
                                $state.jobObject[0].created_at
                              );
                              const day = String(createdAt.getDate()).padStart(
                                2,
                                "0"
                              );
                              const month = String(
                                createdAt.getMonth() + 1
                              ).padStart(2, "0");
                              const year = createdAt.getFullYear();
                              return `Publié le ${day}/${month}/${year}`;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame46"}
                    data-plasmic-override={overrides.frame46}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame46)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame47"}
                      data-plasmic-override={overrides.frame47}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame47)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame48"}
                        data-plasmic-override={overrides.frame48}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame48)}
                      >
                        <PhFileTextIcon
                          className={classNames(projectcss.all, sty.svg__r6Qoi)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ep2R3
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject[0].contract_type;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame49"}
                        data-plasmic-override={overrides.frame49}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame49)}
                      >
                        <PhClockIcon
                          className={classNames(projectcss.all, sty.svg__x8M1Q)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4RoG
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject[0].working_time;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame50"}
                        data-plasmic-override={overrides.frame50}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame50)}
                      >
                        <PhCoinsLightIcon
                          className={classNames(projectcss.all, sty.svg__yxIw)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xQtv
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject[0].salary;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"frame51"}
                        data-plasmic-override={overrides.frame51}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame51)}
                      >
                        <PhClockCountdownIcon
                          className={classNames(projectcss.all, sty.svg__vVtDs)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l1IYq
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.jobObject[0].availability_status;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__vaZpe
                      )}
                      end={
                        <GroupIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2Resh
                          )}
                          role={"img"}
                        />
                      }
                      iconEnd={true}
                      label={"modifier"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateEditOffreIsOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editOffre", "isOpen"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEditOffreIsOpen"] != null &&
                          typeof $steps["updateEditOffreIsOpen"] === "object" &&
                          typeof $steps["updateEditOffreIsOpen"].then ===
                            "function"
                        ) {
                          $steps["updateEditOffreIsOpen"] = await $steps[
                            "updateEditOffreIsOpen"
                          ];
                        }
                      }}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"jobDescriptionContainer"}
                  data-plasmic-override={overrides.jobDescriptionContainer}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.jobDescriptionContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ycpZv
                    )}
                  >
                    {"Description du poste"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wkKtJ
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.jobObject[0].description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "test";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"benefits"}
                    data-plasmic-override={overrides.benefits}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.benefits)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.jobObject[0].benefits
                            .split(",")
                            .map(benefit => benefit.replace(/[{\"}]/g, ""));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9H0Oa
                          )}
                          key={currentIndex}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      );
                    })}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"expectedProfileContainer"}
                  data-plasmic-override={overrides.expectedProfileContainer}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.expectedProfileContainer
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bHzy
                    )}
                  >
                    {"Profil attendu"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g1Yfh
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.jobObject[0].requirements;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "test";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"companyContainer"}
                  data-plasmic-override={overrides.companyContainer}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.companyContainer)}
                >
                  <div
                    data-plasmic-name={"logoContainer"}
                    data-plasmic-override={overrides.logoContainer}
                    className={classNames(projectcss.all, sty.logoContainer)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Mu55
                      )}
                    >
                      {"L\u2019entreprise"}
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__hSjlg)}
                      displayHeight={"70px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"70px"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $queries.getPp.signedUrl
                            ? $queries.getPp.signedUrl
                            : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xJuMr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a0I7W
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.getCompanies.data[0].name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "test";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"companyDetail"}
                      data-plasmic-override={overrides.companyDetail}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.companyDetail)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"sectorActivity"}
                        data-plasmic-override={overrides.sectorActivity}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.sectorActivity
                        )}
                      >
                        <IconPhBriefcase2Icon
                          className={classNames(projectcss.all, sty.svg__pfW3X)}
                          role={"img"}
                        />

                        <div
                          data-plasmic-name={"dkTrucksPark5"}
                          data-plasmic-override={overrides.dkTrucksPark5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.dkTrucksPark5
                          )}
                        >
                          {""}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tKv4
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.getCompanies.data[0].sector;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"companySize"}
                        data-plasmic-override={overrides.companySize}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.companySize)}
                      >
                        <PhUsersThreeIcon
                          className={classNames(projectcss.all, sty.svg__vLdeM)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2H4Cl
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.getCompanies.data[0].team_size;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"companyLocation"}
                        data-plasmic-override={overrides.companyLocation}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.companyLocation
                        )}
                      >
                        <PhMapTrifoldFillIcon
                          className={classNames(projectcss.all, sty.svg__gqs95)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mmjkL
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $queries.getCompanies.data[0].location;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "test";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__snSpr
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getCompanies.data[0].descriptions;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "test";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              </Stack__>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___7EASo)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateJobDetailsIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["jobDetails", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateJobDetailsIsOpen"] != null &&
                      typeof $steps["updateJobDetailsIsOpen"] === "object" &&
                      typeof $steps["updateJobDetailsIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateJobDetailsIsOpen"] = await $steps[
                        "updateJobDetailsIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["jobDetails", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["jobDetails", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["updateJobId"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["jobId"]
                        },
                        operation: 1
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateJobId"] != null &&
                  typeof $steps["updateJobId"] === "object" &&
                  typeof $steps["updateJobId"].then === "function"
                ) {
                  $steps["updateJobId"] = await $steps["updateJobId"];
                }
              }).apply(null, eventArgs);
            }}
            showFooter={false}
            showHeader={true}
            trigger={null}
          />

          <Modal
            data-plasmic-name={"deleteOffre"}
            data-plasmic-override={overrides.deleteOffre}
            className={classNames("__wab_instance", sty.deleteOffre)}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tKZaF)}
              >
                <ReshotIconAlert7T6Wum8VleSvgIcon
                  className={classNames(projectcss.all, sty.svg__c2AS)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["postgresUpdateMany"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                              userArgs: {
                                conditions: [$ctx.SupabaseUser.user.id],
                                variables: [null]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateMany"] != null &&
                      typeof $steps["postgresUpdateMany"] === "object" &&
                      typeof $steps["postgresUpdateMany"].then === "function"
                    ) {
                      $steps["postgresUpdateMany"] = await $steps[
                        "postgresUpdateMany"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Nhco
                  )}
                >
                  {"Voulez-vous supprimer cette offre ?"}
                </div>
                <div
                  data-plasmic-name={"e2"}
                  data-plasmic-override={overrides.e2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.e2
                  )}
                >
                  {
                    "Attention : cette action est irr\u00e9versible. L\u2019offre sera d\u00e9finitivement supprim\u00e9e."
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pvg0T)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__nHbY)}
                    color={"white"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g27Dv
                        )}
                      >
                        {"retour"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDeleteOffreIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteOffre", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDeleteOffreIsOpen"] != null &&
                        typeof $steps["updateDeleteOffreIsOpen"] === "object" &&
                        typeof $steps["updateDeleteOffreIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateDeleteOffreIsOpen"] = await $steps[
                          "updateDeleteOffreIsOpen"
                        ];
                      }
                    }}
                    type={"bordered"}
                  />

                  <DeleteAccount
                    className={classNames(
                      "__wab_instance",
                      sty.deleteAccount__ivN31
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oxw9J
                        )}
                      >
                        {"supprimer"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["postgresDeleteMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "43b71da2-844c-4a29-9719-bd71260cfdbe",
                                userArgs: {
                                  conditions: [$state.jobId]
                                },
                                cacheKey: null,
                                invalidatedKeys: [
                                  "86a865c1-0261-4284-930f-6ef2f6f1060b"
                                ],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresDeleteMany"] != null &&
                        typeof $steps["postgresDeleteMany"] === "object" &&
                        typeof $steps["postgresDeleteMany"].then === "function"
                      ) {
                        $steps["postgresDeleteMany"] = await $steps[
                          "postgresDeleteMany"
                        ];
                      }

                      $steps["updateDeleteOffreIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["deleteOffre", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDeleteOffreIsOpen"] != null &&
                        typeof $steps["updateDeleteOffreIsOpen"] === "object" &&
                        typeof $steps["updateDeleteOffreIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateDeleteOffreIsOpen"] = await $steps[
                          "updateDeleteOffreIsOpen"
                        ];
                      }
                    }}
                  />
                </div>
              </Stack__>
            }
            footer={null}
            heading={null}
            isOpen={generateStateValueProp($state, ["deleteOffre", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "deleteOffre",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={null}
          />

          <PageLoader
            data-plasmic-name={"onBoarding"}
            data-plasmic-override={overrides.onBoarding}
            className={classNames("__wab_instance", sty.onBoarding)}
            onMount={async () => {
              const $steps = {};

              $steps["updateShowModal"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["showModal"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShowModal"] != null &&
                typeof $steps["updateShowModal"] === "object" &&
                typeof $steps["updateShowModal"].then === "function"
              ) {
                $steps["updateShowModal"] = await $steps["updateShowModal"];
              }

              $steps["updateHiddeModal"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["hiddeModal"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateHiddeModal"] != null &&
                typeof $steps["updateHiddeModal"] === "object" &&
                typeof $steps["updateHiddeModal"].then === "function"
              ) {
                $steps["updateHiddeModal"] = await $steps["updateHiddeModal"];
              }
            }}
            shouldRun={(() => {
              try {
                return !$queries.getUser.data[0].onboarding;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
          />

          <Sidebar2
            data-plasmic-name={"sidebar2"}
            data-plasmic-override={overrides.sidebar2}
            className={classNames("__wab_instance", sty.sidebar2)}
          />

          <Stack__
            as={"main"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__nVzsW)}>
              <h1
                data-plasmic-name={"heading2"}
                data-plasmic-override={overrides.heading2}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.heading2
                )}
              >
                {"Mes offres d'emploi"}
              </h1>
              <Button
                className={classNames("__wab_instance", sty.button__dbeMj)}
                end={
                  <PlusCircle1425SvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__jpCs)}
                    role={"img"}
                  />
                }
                iconEnd={true}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kgL0Z
                    )}
                  >
                    {"cr\u00e9er une offre d'emploi"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateCreateOffreIsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["createOffre", "isOpen"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCreateOffreIsOpen"] != null &&
                    typeof $steps["updateCreateOffreIsOpen"] === "object" &&
                    typeof $steps["updateCreateOffreIsOpen"].then === "function"
                  ) {
                    $steps["updateCreateOffreIsOpen"] = await $steps[
                      "updateCreateOffreIsOpen"
                    ];
                  }
                }}
              />
            </div>
            {(() => {
              try {
                return $queries.jobOffers.data.length > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"annonces3"}
                data-plasmic-override={overrides.annonces3}
                hasGap={true}
                className={classNames(projectcss.all, sty.annonces3)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.paramEmpCardJobOffers.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xXjUr)}
                      key={currentIndex}
                    >
                      <JobOffersCard
                        data-plasmic-name={"jobOffersCard"}
                        data-plasmic-override={overrides.jobOffersCard}
                        className={classNames(
                          "__wab_instance",
                          sty.jobOffersCard
                        )}
                        contentSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aBiSs
                            )}
                          />
                        }
                        contractDuration={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/317422994ee40e8e3801225ee1942b34.svg";
                          __composite["text"] = currentItem.sector_activity;
                          return __composite;
                        })()}
                        contractType={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/8c7917b8895bfc981624579d17930e0b.svg";
                          __composite["text"] = currentItem.contract_type;
                          return __composite;
                        })()}
                        customIcons={{}}
                        footerSlot={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___2Xs3I
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button___0GpB8
                              )}
                              color={"white"}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gprR
                                  )}
                                >
                                  {"Voir le d\u00e9tail"}
                                </div>
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateJobId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["jobId"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateJobId"] != null &&
                                  typeof $steps["updateJobId"] === "object" &&
                                  typeof $steps["updateJobId"].then ===
                                    "function"
                                ) {
                                  $steps["updateJobId"] = await $steps[
                                    "updateJobId"
                                  ];
                                }

                                $steps["updateJobDetailsIsOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        operation: 0,
                                        value: true,
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["jobDetails", "isOpen"]
                                        }
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateJobDetailsIsOpen"] != null &&
                                  typeof $steps["updateJobDetailsIsOpen"] ===
                                    "object" &&
                                  typeof $steps["updateJobDetailsIsOpen"]
                                    .then === "function"
                                ) {
                                  $steps["updateJobDetailsIsOpen"] =
                                    await $steps["updateJobDetailsIsOpen"];
                                }
                              }}
                              type={"bordered"}
                            />

                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__bnBwF
                              )}
                              end={
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ge3Oe
                                  )}
                                  role={"img"}
                                />
                              }
                              iconEnd={true}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9Rr6X
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.posted
                                          ? currentItem.num_job_applications ===
                                            1
                                            ? "Voir la candidature"
                                            : currentItem.num_job_applications >
                                              1
                                            ? `Voir les ${currentItem.num_job_applications} candidatures`
                                            : "Voir les candidatures"
                                          : "Poster l'annonce";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "voir les candidatures";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["goToCandidaturesEmployeur"] =
                                  currentItem.posted === true
                                    ? (() => {
                                        const actionArgs = {
                                          destination: `/candidatures-employeur/${(() => {
                                            try {
                                              return currentItem.id;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}`
                                        };
                                        return (({ destination }) => {
                                          if (
                                            typeof destination === "string" &&
                                            destination.startsWith("#")
                                          ) {
                                            document
                                              .getElementById(
                                                destination.substr(1)
                                              )
                                              .scrollIntoView({
                                                behavior: "smooth"
                                              });
                                          } else {
                                            __nextRouter?.push(destination);
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["goToCandidaturesEmployeur"] != null &&
                                  typeof $steps["goToCandidaturesEmployeur"] ===
                                    "object" &&
                                  typeof $steps["goToCandidaturesEmployeur"]
                                    .then === "function"
                                ) {
                                  $steps["goToCandidaturesEmployeur"] =
                                    await $steps["goToCandidaturesEmployeur"];
                                }

                                $steps["postgresUpdateById2"] =
                                  currentItem.posted === false
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                            opId: "b3ab694d-132d-4e5d-9ada-cb46ac6ddaad",
                                            userArgs: {
                                              conditions: [
                                                $ctx.SupabaseUser.user.id
                                              ],
                                              variables: [
                                                $state._switch.isSelected
                                                  ? Number(
                                                      $queries
                                                        .offreStripeUserInfos
                                                        .data[0]
                                                        .recharge_lastminute
                                                    ) - 1
                                                  : Number(
                                                      $queries
                                                        .offreStripeUserInfos
                                                        .data[0]
                                                        .recharge_lastminute
                                                    ),
                                                $queries.offreStripeUserInfos
                                                  .data[0].recharge_classic - 1
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "1284f981-03a5-4aae-9f90-4a9eb18e1c6b"
                                            ],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["postgresUpdateById2"] != null &&
                                  typeof $steps["postgresUpdateById2"] ===
                                    "object" &&
                                  typeof $steps["postgresUpdateById2"].then ===
                                    "function"
                                ) {
                                  $steps["postgresUpdateById2"] = await $steps[
                                    "postgresUpdateById2"
                                  ];
                                }

                                $steps["postgresUpdateById"] =
                                  currentItem.posted === false
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                            opId: "cd59497f-5588-42bc-90c4-780c28c9a5c5",
                                            userArgs: {
                                              keys: [currentItem.id]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["postgresUpdateById"] != null &&
                                  typeof $steps["postgresUpdateById"] ===
                                    "object" &&
                                  typeof $steps["postgresUpdateById"].then ===
                                    "function"
                                ) {
                                  $steps["postgresUpdateById"] = await $steps[
                                    "postgresUpdateById"
                                  ];
                                }
                              }}
                            />
                          </Stack__>
                        }
                        formAction={"#"}
                        formMethod={"post"}
                        headerSlot={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__usZm4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___3Rc1F
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__r44V8
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bu2Dl
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      backgroundColor: currentItem.posted
                                        ? "#bbef6859"
                                        : "#53535326"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vw3Dy
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.posted
                                          ? "En ligne"
                                          : "Brouillon";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sf9Ef
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__c87Zi
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["invokeGlobalAction"] =
                                      Number(
                                        $queries.offreStripeUserInfos.data[0]
                                          .recharge_boost
                                      ) == 0
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "warning",
                                                "Plus de cr\u00e9dits boost disponibles",
                                                "Vous avez d\u00e9j\u00e0 utilis\u00e9 vos 2 boosts ce mois-ci. Vous pouvez acheter des cr\u00e9dits suppl\u00e9mentaires ou attendre le mois prochain.",
                                                10
                                              ]
                                            };
                                            return $globalActions[
                                              "plasmic-antd5-config-provider.showNotification"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }
                                  }}
                                >
                                  <ZapIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__jntWv
                                    )}
                                    role={"img"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sbK
                                    )}
                                  >
                                    {"BOOST"}
                                  </div>
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.switch3
                                      ),
                                      disabled: (() => {
                                        try {
                                          return (() => {
                                            if (
                                              $queries.offreStripeUserInfos
                                                .data[0].product_id ==
                                                "prod_S81L3WBaA1HwM0" &&
                                              $queries.offreStripeUserInfos
                                                .data[0].recharge_boost > 0
                                            ) {
                                              return false;
                                            } else if (
                                              $queries.offreStripeUserInfos
                                                .data[0].recharge_boost == 0
                                            ) {
                                              return true;
                                            } else {
                                              return false;
                                            }
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      isSelected: generateStateValueProp(
                                        $state,
                                        [
                                          "switch3",
                                          __plasmic_idx_0,
                                          "isSelected"
                                        ]
                                      ),
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "switch3",
                                          __plasmic_idx_0,
                                          "isSelected"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }

                                        (async val => {
                                          const $steps = {};

                                          $steps["postgresUpdateMany"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "kVSSe8ab4TtzwRPnTeEeUp",
                                                    opId: "d5ac40b0-0d4d-4dc6-9737-2d220b297a64",
                                                    userArgs: {
                                                      conditions: [
                                                        $ctx.SupabaseUser.user
                                                          .id
                                                      ],
                                                      variables: [
                                                        Math.max(
                                                          0,
                                                          $state.switch3[
                                                            currentIndex
                                                          ].isSelected
                                                            ? Number(
                                                                $queries
                                                                  .offreStripeUserInfos
                                                                  .data[0]
                                                                  .recharge_boost -
                                                                  1
                                                              )
                                                            : Number(
                                                                $queries
                                                                  .offreStripeUserInfos
                                                                  .data[0]
                                                                  .recharge_boost
                                                              )
                                                        )
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["postgresUpdateMany"] !=
                                              null &&
                                            typeof $steps[
                                              "postgresUpdateMany"
                                            ] === "object" &&
                                            typeof $steps["postgresUpdateMany"]
                                              .then === "function"
                                          ) {
                                            $steps["postgresUpdateMany"] =
                                              await $steps[
                                                "postgresUpdateMany"
                                              ];
                                          }

                                          $steps["postgresUpdateById"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "kVSSe8ab4TtzwRPnTeEeUp",
                                                    opId: "cee5cfc5-4de5-43af-9616-bc311b5bafc8",
                                                    userArgs: {
                                                      keys: [currentItem.id],
                                                      variables: [
                                                        $state.switch3[
                                                          currentIndex
                                                        ].isSelected
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [
                                                      "plasmic_refresh_all"
                                                    ],
                                                    roleId: null
                                                  }
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["postgresUpdateById"] !=
                                              null &&
                                            typeof $steps[
                                              "postgresUpdateById"
                                            ] === "object" &&
                                            typeof $steps["postgresUpdateById"]
                                              .then === "function"
                                          ) {
                                            $steps["postgresUpdateById"] =
                                              await $steps[
                                                "postgresUpdateById"
                                              ];
                                          }
                                        }).apply(null, eventArgs);
                                      },
                                      showLabel: false
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "switch3[].isSelected",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return currentItem.is_boosted;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <Switch
                                        data-plasmic-name={"switch3"}
                                        data-plasmic-override={
                                          overrides.switch3
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </div>
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__yAyFt)}
                                  displayHeight={"16px"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"16px"}
                                  loading={"lazy"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "info",
                                              "Cr\u00e9dits Boost",
                                              "Vos cr\u00e9dits Boost ne seront pas recr\u00e9dit\u00e9s si vous d\u00e9sactivez, et votre annonce ne sera plus mise en avant dans les r\u00e9sultats de recherche.",
                                              10
                                            ]
                                          };
                                          return $globalActions[
                                            "plasmic-antd5-config-provider.showNotification"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }
                                  }}
                                  src={{
                                    src: "/plasmic/jam_production_🚀/images/icons8InfoSvg.svg",
                                    fullWidth: 50,
                                    fullHeight: 50,
                                    aspectRatio: 1
                                  }}
                                />
                              </Stack__>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lbSl
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uFtOm
                                )}
                              >
                                <IconPhMapPinIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__lJtsV
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kHeKg
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.location;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nq2Rh
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `Publié le ${new Date(
                                          currentItem.created_at
                                        ).toLocaleDateString("fr-FR")}`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qnqqa
                                )}
                              >
                                <PhTrashIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fFtRk
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateJobId"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["jobId"]
                                            },
                                            operation: 0,
                                            value: currentItem.id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateJobId"] != null &&
                                      typeof $steps["updateJobId"] ===
                                        "object" &&
                                      typeof $steps["updateJobId"].then ===
                                        "function"
                                    ) {
                                      $steps["updateJobId"] = await $steps[
                                        "updateJobId"
                                      ];
                                    }

                                    $steps["updateDeleteOffreIsOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "deleteOffre",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDeleteOffreIsOpen"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDeleteOffreIsOpen"
                                      ] === "object" &&
                                      typeof $steps["updateDeleteOffreIsOpen"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDeleteOffreIsOpen"] =
                                        await $steps["updateDeleteOffreIsOpen"];
                                    }
                                  }}
                                  role={"img"}
                                />

                                <PhPencilSimpleIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__sSfbf
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateJobId"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["jobId"]
                                            },
                                            operation: 0,
                                            value: currentItem.id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateJobId"] != null &&
                                      typeof $steps["updateJobId"] ===
                                        "object" &&
                                      typeof $steps["updateJobId"].then ===
                                        "function"
                                    ) {
                                      $steps["updateJobId"] = await $steps[
                                        "updateJobId"
                                      ];
                                    }

                                    $steps["updateEditOffreIsOpen"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "editOffre",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateEditOffreIsOpen"] != null &&
                                      typeof $steps["updateEditOffreIsOpen"] ===
                                        "object" &&
                                      typeof $steps["updateEditOffreIsOpen"]
                                        .then === "function"
                                    ) {
                                      $steps["updateEditOffreIsOpen"] =
                                        await $steps["updateEditOffreIsOpen"];
                                    }
                                  }}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          </div>
                        }
                        immediateStart={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/09559aac36fd99f7328c58c54917e963.svg";
                          __composite["text"] = currentItem.availability_status;
                          return __composite;
                        })()}
                        remotePercentage={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/92e9db20fdf9f58b3bae28aab13c9784.svg";
                          __composite["text"] = currentItem.work_mode;
                          return __composite;
                        })()}
                        salary={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/f452255eec148d4879254c4826702c60.svg";
                          __composite["text"] = currentItem.salary;
                          return __composite;
                        })()}
                        status={"default"}
                        workingHours={(() => {
                          const __composite = { icon: null, text: null };
                          __composite["icon"] =
                            "https://site-assets.plasmic.app/09559aac36fd99f7328c58c54917e963.svg";
                          __composite["text"] = currentItem.working_time;
                          return __composite;
                        })()}
                      />
                    </Stack__>
                  );
                })}
              </Stack__>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $queries.jobOffers.data.length === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $queries.jobOffers.data.length === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"noAnnonce2"}
                data-plasmic-override={overrides.noAnnonce2}
                hasGap={true}
                className={classNames(projectcss.all, sty.noAnnonce2)}
              >
                <div
                  data-plasmic-name={"featuredIcon3"}
                  data-plasmic-override={overrides.featuredIcon3}
                  className={classNames(projectcss.all, sty.featuredIcon3)}
                >
                  <PlasmicIcon__
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? NotificationBellSvgrepoComSvgIcon
                        : IconIcon2
                    }
                    className={classNames(projectcss.all, sty.svg__wYCpv)}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"textAndSupportingText3"}
                  data-plasmic-override={overrides.textAndSupportingText3}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.textAndSupportingText3
                  )}
                >
                  <div
                    data-plasmic-name={"text7"}
                    data-plasmic-override={overrides.text7}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text7
                    )}
                  >
                    {"Vous n'avez pas encore cr\u00e9\u00e9 d'offre d'emploi"}
                  </div>
                  <div
                    data-plasmic-name={"supportingText3"}
                    data-plasmic-override={overrides.supportingText3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.supportingText3
                    )}
                  >
                    {
                      "Cr\u00e9ez des offres d'emploi et trouvez un collaborateur qui correspond \u00e0 vos attentes."
                    }
                  </div>
                </Stack__>
                <Button
                  className={classNames("__wab_instance", sty.button__cIye4)}
                  end={
                    <PlusCircle1425SvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___57Pl)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rAnu9
                      )}
                    >
                      {"cr\u00e9er une offre d'emploi "}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCreateOffreIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["createOffre", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCreateOffreIsOpen"] != null &&
                      typeof $steps["updateCreateOffreIsOpen"] === "object" &&
                      typeof $steps["updateCreateOffreIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateCreateOffreIsOpen"] = await $steps[
                        "updateCreateOffreIsOpen"
                      ];
                    }
                  }}
                />
              </Stack__>
            ) : null}
          </Stack__>
          <Modal
            data-plasmic-name={"infoEntreprise"}
            data-plasmic-override={overrides.infoEntreprise}
            className={classNames("__wab_instance", sty.infoEntreprise)}
            closeOnBackdropClick={false}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__vCAi)}>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["kbis"] =
                        $state.upload.files.length > 0
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                  userArgs: {
                                    path: [
                                      $ctx.SupabaseUser.user.id,
                                      $state.form.value.kbis_file[0].name
                                    ],
                                    content: [
                                      $state.form.value.kbis_file[0].contents
                                    ],
                                    contentType: [
                                      $state.form.value.kbis_file[0].type
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["kbis"] != null &&
                        typeof $steps["kbis"] === "object" &&
                        typeof $steps["kbis"].then === "function"
                      ) {
                        $steps["kbis"] = await $steps["kbis"];
                      }

                      $steps["idFile"] =
                        $state.upload3.files.length > 0
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                  opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                  userArgs: {
                                    path: [
                                      $ctx.SupabaseUser.user.id,
                                      $state.form.value.identity_file[0].name
                                    ],
                                    content: [
                                      $state.form.value.identity_file[0]
                                        .contents
                                    ],
                                    contentType: [
                                      $state.form.value.identity_file[0].type
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["idFile"] != null &&
                        typeof $steps["idFile"] === "object" &&
                        typeof $steps["idFile"].then === "function"
                      ) {
                        $steps["idFile"] = await $steps["idFile"];
                      }

                      $steps["postgresCreate"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "5d3d916b-6359-49e5-b268-651a672f29e1",
                                userArgs: {
                                  variables: [
                                    $state.form.value.address,
                                    $state.form.value.country,
                                    $state.form.value.description,
                                    $state.form.value.identity_file[0].name,
                                    $state.form.value.kbis_file[0].name,
                                    $state.form.value.location,
                                    $state.form.value.name,
                                    $state.form.value.postal_code,
                                    $state.form.value.sector,
                                    $state.form.value.siren,
                                    $state.form.value.team_size,
                                    $state.form.value.website,
                                    $ctx.SupabaseUser.user.id
                                  ]
                                },
                                cacheKey: null,
                                invalidatedKeys: [],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresCreate"] != null &&
                        typeof $steps["postgresCreate"] === "object" &&
                        typeof $steps["postgresCreate"].then === "function"
                      ) {
                        $steps["postgresCreate"] = await $steps[
                          "postgresCreate"
                        ];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v9K4S
                        )}
                      >
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1___3GVob
                          )}
                        >
                          {"Votre profile entreprise"}
                        </h1>
                        <UploadWrapper
                          data-plasmic-name={"upload2"}
                          data-plasmic-override={overrides.upload2}
                          accept={""}
                          className={classNames("__wab_instance", sty.upload2)}
                          files={generateStateValueProp($state, [
                            "upload2",
                            "files"
                          ])}
                          maxCount={1}
                          onFilesChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "upload2",
                              "files"
                            ]).apply(null, eventArgs);

                            (async files => {
                              const $steps = {};

                              $steps["supabaseUploadFile"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                        opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                        userArgs: {
                                          path: [
                                            $ctx.SupabaseUser.user.id,
                                            $state.upload2.files[0].name
                                          ],
                                          content: [
                                            $state.upload2.files[0].contents
                                          ],
                                          contentType: [
                                            $state.upload2.files[0].type
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["supabaseUploadFile"] != null &&
                                typeof $steps["supabaseUploadFile"] ===
                                  "object" &&
                                typeof $steps["supabaseUploadFile"].then ===
                                  "function"
                              ) {
                                $steps["supabaseUploadFile"] = await $steps[
                                  "supabaseUploadFile"
                                ];
                              }

                              $steps["postgresUpdateById"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "ca09c9ab-a670-4b5b-b79f-d87646e4fa13",
                                        userArgs: {
                                          keys: [
                                            $queries.getCompanies.data[0].id
                                          ],
                                          variables: [
                                            $steps.supabaseUploadFile?.path.split(
                                              "/"
                                            )[1]
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateById"] != null &&
                                typeof $steps["postgresUpdateById"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateById"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateById"] = await $steps[
                                  "postgresUpdateById"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          showUploadList={false}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__bNOhw)}
                            displayHeight={"132px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"132px"}
                            loading={"lazy"}
                            src={
                              $queries.getPp.signedUrl
                                ? $queries.getPp.signedUrl
                                : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png"
                            }
                          />

                          <div
                            data-plasmic-name={"editIcon"}
                            data-plasmic-override={overrides.editIcon}
                            className={classNames(projectcss.all, sty.editIcon)}
                          >
                            <div
                              data-plasmic-name={"frame7"}
                              data-plasmic-override={overrides.frame7}
                              className={classNames(projectcss.all, sty.frame7)}
                            />

                            <PhPencilSimpleIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dw4Ya
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            data-plasmic-name={"deleteIcon"}
                            data-plasmic-override={overrides.deleteIcon}
                            className={classNames(
                              projectcss.all,
                              sty.deleteIcon
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateUpload2Files"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["upload2", "files"]
                                      },
                                      operation: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        undefined
                                      );
                                      return undefined;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateUpload2Files"] != null &&
                                typeof $steps["updateUpload2Files"] ===
                                  "object" &&
                                typeof $steps["updateUpload2Files"].then ===
                                  "function"
                              ) {
                                $steps["updateUpload2Files"] = await $steps[
                                  "updateUpload2Files"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return event.stopPropagation();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["postgresUpdateMany"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                        opId: "9a0d1ef9-145c-44ec-9ee3-8ca38502d114",
                                        userArgs: {
                                          conditions: [
                                            $ctx.SupabaseUser.user.id
                                          ],
                                          variables: [null]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["postgresUpdateMany"] != null &&
                                typeof $steps["postgresUpdateMany"] ===
                                  "object" &&
                                typeof $steps["postgresUpdateMany"].then ===
                                  "function"
                              ) {
                                $steps["postgresUpdateMany"] = await $steps[
                                  "postgresUpdateMany"
                                ];
                              }
                            }}
                          >
                            <div
                              data-plasmic-name={"frame8"}
                              data-plasmic-override={overrides.frame8}
                              className={classNames(projectcss.all, sty.frame8)}
                            />

                            <PhTrashIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__a2QIt
                              )}
                              role={"img"}
                            />
                          </div>
                        </UploadWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__eIb6H
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mj07N
                            )}
                          >
                            {"Nom de l'entreprise"}
                          </div>
                        }
                        name={"name"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Veuillez renseigner ce champ"
                          }
                        ]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Nom de l'entreprise"}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__gC4W
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8YYeo
                            )}
                          >
                            {"Pr\u00e9sentation courte"}
                          </div>
                        }
                        name={"description"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__f6WxE
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.textArea
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["textArea", "value"],
                                  AntdTextArea_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "Pr\u00e9sentez votre entreprise en quelques lignes...",
                              value: generateStateValueProp($state, [
                                "textArea",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "textArea.value"
                                }
                              ],
                              [],
                              AntdTextArea_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdTextArea
                                data-plasmic-name={"textArea"}
                                data-plasmic-override={overrides.textArea}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__l578
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7J4th
                            )}
                          >
                            {"Adresse"}
                          </div>
                        }
                        name={"address"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Veuillez renseigner ce champ"
                          }
                        ]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput3"}
                          data-plasmic-override={overrides.textInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput3
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput3",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Rue"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__c7Bnf
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___2R4Cu
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vXbCo
                              )}
                            >
                              {"Code postal"}
                            </div>
                          }
                          name={"postal_code"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Veuillez renseigner ce champ"
                            }
                          ]}
                        >
                          <TextInput
                            data-plasmic-name={"textInput4"}
                            data-plasmic-override={overrides.textInput4}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput4
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput4",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Code postal"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__hWuZz
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fcCyn
                              )}
                            >
                              {"Ville"}
                            </div>
                          }
                          name={"location"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Veuillez renseigner ce champ"
                            }
                          ]}
                        >
                          <TextInput
                            data-plasmic-name={"textInput6"}
                            data-plasmic-override={overrides.textInput6}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput6
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "textInput6",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Ville"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__cZfuc
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hTi0K
                            )}
                          >
                            {"Pays"}
                          </div>
                        }
                        name={"country"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Veuillez renseigner ce champ"
                          }
                        ]}
                      >
                        <Select
                          data-plasmic-name={"select5"}
                          data-plasmic-override={overrides.select5}
                          className={classNames("__wab_instance", sty.select5)}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getCountries.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={currentItem.Name}
                              />
                            );
                          })}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cFi1X
                              )}
                            >
                              {"Label"}
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pays"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__jHtJf
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nneJx
                            )}
                          >
                            {"SIREN"}
                          </div>
                        }
                        name={"siren"}
                        rules={[
                          {
                            ruleType: "required",
                            message: "Veuillez renseigner ce champ"
                          }
                        ]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput5"}
                          data-plasmic-override={overrides.textInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput5
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput5",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Num\u00e9ro de SIREN"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__a0AQ5
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__gdzq5
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rAmzk
                              )}
                            >
                              {"Secteur d'activit\u00e9"}
                            </div>
                          }
                          name={"sector"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Veuillez renseigner ce champ"
                            }
                          ]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select3"}
                            data-plasmic-override={overrides.select3}
                            className={classNames(
                              "__wab_instance",
                              sty.select3
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select3",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(
                                    item => item.type === "sector_activity"
                                  )
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={""}
                            popupScopeClassName={sty["select3__popup"]}
                            value={generateStateValueProp($state, [
                              "select3",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__fMtf
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pumU
                              )}
                            >
                              {"Taille de l'entreprise"}
                            </div>
                          }
                          name={"team_size"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Veuillez renseigner ce champ"
                            }
                          ]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select4"}
                            data-plasmic-override={overrides.select4}
                            className={classNames(
                              "__wab_instance",
                              sty.select4
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select4",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "company_size")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={""}
                            popupScopeClassName={sty["select4__popup"]}
                            value={generateStateValueProp($state, [
                              "select4",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__mf86
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c2ApV
                            )}
                          >
                            {"Site web"}
                          </div>
                        }
                        name={"website"}
                      >
                        <TextInput
                          data-plasmic-name={"textInput7"}
                          data-plasmic-override={overrides.textInput7}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput7
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput7",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"https://"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___60MFh
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__fOkl3
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__m6FbN
                              )}
                            >
                              {"Kbis"}
                            </div>
                          }
                          name={"kbis_file"}
                        >
                          <UploadWrapper
                            data-plasmic-name={"upload"}
                            data-plasmic-override={overrides.upload}
                            accept={""}
                            className={classNames("__wab_instance", sty.upload)}
                            files={generateStateValueProp($state, [
                              "upload",
                              "files"
                            ])}
                            maxCount={1}
                            onFilesChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "upload",
                                "files"
                              ]).apply(null, eventArgs);
                            }}
                            showUploadList={true}
                          >
                            <div
                              data-plasmic-name={"content"}
                              data-plasmic-override={overrides.content}
                              className={classNames(
                                projectcss.all,
                                sty.content
                              )}
                            >
                              <Stack__
                                as={PlasmicImg__}
                                hasGap={true}
                                alt={""}
                                className={classNames(sty.img___3If9U)}
                                displayHeight={"39px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"39px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                  fullWidth: 39,
                                  fullHeight: 39,
                                  aspectRatio: 1
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tm0Rq
                                )}
                              >
                                {"Importer ou d\u00e9poser un fichier"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3X3Sr
                                )}
                              >
                                {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                              </div>
                            </div>
                          </UploadWrapper>
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__moGfV
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__odPTe
                              )}
                            >
                              {"Pi\u00e8ce d'identit\u00e9"}
                            </div>
                          }
                          name={"identity_file"}
                        >
                          <UploadWrapper
                            data-plasmic-name={"upload3"}
                            data-plasmic-override={overrides.upload3}
                            accept={""}
                            className={classNames(
                              "__wab_instance",
                              sty.upload3
                            )}
                            files={generateStateValueProp($state, [
                              "upload3",
                              "files"
                            ])}
                            maxCount={1}
                            onFilesChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "upload3",
                                "files"
                              ]).apply(null, eventArgs);
                            }}
                            showUploadList={true}
                          >
                            <div
                              data-plasmic-name={"content2"}
                              data-plasmic-override={overrides.content2}
                              className={classNames(
                                projectcss.all,
                                sty.content2
                              )}
                            >
                              <Stack__
                                as={PlasmicImg__}
                                hasGap={true}
                                alt={""}
                                className={classNames(sty.img__xmJh4)}
                                displayHeight={"39px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"39px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                  fullWidth: 39,
                                  fullHeight: 39,
                                  aspectRatio: 1
                                }}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__crcKq
                                )}
                              >
                                {"Importer ou d\u00e9poser un fichier"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aq12G
                                )}
                              >
                                {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                              </div>
                            </div>
                          </UploadWrapper>
                        </FormItemWrapper>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3O8Zz
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__nyU62
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__t9Htp
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oAw
                              )}
                            >
                              {"COntinuer"}
                            </div>
                          }
                          submitsForm={true}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lSdFt
                        )}
                      >
                        <ProgressBar
                          className={classNames(
                            "__wab_instance",
                            sty.progressBar___5Vt4J
                          )}
                          step1={true}
                        />
                      </div>
                    </FormWrapper>
                  );
                })()}
              </div>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__e408D)}>
                <JamButton
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  icon={"none"}
                />
              </div>
            }
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__jIuLs)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStopInscriptionIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["stopInscription", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStopInscriptionIsOpen"] != null &&
                      typeof $steps["updateStopInscriptionIsOpen"] ===
                        "object" &&
                      typeof $steps["updateStopInscriptionIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateStopInscriptionIsOpen"] = await $steps[
                        "updateStopInscriptionIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, [
              "infoEntreprise",
              "isOpen"
            ])}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "infoEntreprise",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <Button
                className={classNames("__wab_instance", sty.button__awNWi)}
              />
            }
          />

          <Modal
            data-plasmic-name={"profilCreate"}
            data-plasmic-override={overrides.profilCreate}
            className={classNames("__wab_instance", sty.profilCreate)}
            closeOnBackdropClick={false}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zkf8O)}
              >
                <CheckIcon
                  className={classNames(projectcss.all, sty.svg__rb9S5)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["postgresUpdateMany"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                              userArgs: {
                                conditions: [$ctx.SupabaseUser.user.id],
                                variables: [null]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateMany"] != null &&
                      typeof $steps["postgresUpdateMany"] === "object" &&
                      typeof $steps["postgresUpdateMany"].then === "function"
                    ) {
                      $steps["postgresUpdateMany"] = await $steps[
                        "postgresUpdateMany"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__skICf
                  )}
                >
                  {"Votre profil a bien \u00e9t\u00e9 cr\u00e9e."}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Q1Gq)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button___9MdZv)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__yiSu3)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lfezZ
                        )}
                      >
                        {'publier une offre d"emploi'}
                      </div>
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__oIxm5)}>
                  <ProgressBar
                    className={classNames(
                      "__wab_instance",
                      sty.progressBar__hbNxk
                    )}
                    step1={true}
                    step2={true}
                    step3={true}
                  />
                </div>
              </Stack__>
            }
            footer={null}
            heading={null}
            isOpen={generateStateValueProp($state, ["profilCreate", "isOpen"])}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "profilCreate",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={null}
          />

          <Modal
            data-plasmic-name={"createOffre"}
            data-plasmic-override={overrides.createOffre}
            className={classNames("__wab_instance", sty.createOffre)}
            closeOnBackdropClick={false}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6L6T6)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__sf90Z
                  )}
                >
                  {"Cr\u00e9er une offre d'emploi"}
                </h3>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form2),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form2", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    initialValues: (() => {
                      try {
                        return $queries.getCompanies.data[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form2", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["form2"] = ref;
                    },
                    requiredMark: false,
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form2.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"form2"}
                      data-plasmic-override={overrides.form2}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__m1Ci4
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qk6Vu
                            )}
                          >
                            {"Intitul\u00e9 du poste"}
                          </div>
                        }
                        name={"title"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextInput
                          data-plasmic-name={"textInput8"}
                          data-plasmic-override={overrides.textInput8}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput8
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textInput8",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Intitul\u00e9 du poste"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__a9Nj9
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__fJuyg
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__myK
                              )}
                            >
                              {"Type de contrat"}
                            </div>
                          }
                          name={"contract_type"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select6"}
                            data-plasmic-override={overrides.select6}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select6
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select6",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "contract_type")
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qqyp
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Type de contrat"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select6__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__kINx
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select6",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___75N2H
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qfJj4
                              )}
                            >
                              {"Temps de travail"}
                            </div>
                          }
                          name={"working_time"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select7"}
                            data-plasmic-override={overrides.select7}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select7
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select7",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "working_time")
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mxgK5
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Temps de travail"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select7__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1Fgr4
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select7",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aBfi
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__rwbeV
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uylHf
                              )}
                            >
                              {"Salaire"}
                            </div>
                          }
                          name={"salary"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select8"}
                            data-plasmic-override={overrides.select8}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select8
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select8",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "salary")
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3JBeV
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Salaire envisag\u00e9"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select8__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0FyI5
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select8",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__kiF7M
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hmPzs
                              )}
                            >
                              {"Secteur de travail"}
                            </div>
                          }
                          name={"sector_activity"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select9"}
                            data-plasmic-override={overrides.select9}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select9
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select9",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(
                                    item => item.type === "sector_activity"
                                  )
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__huszy
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Secteur de travail"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select9__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__r7EkV
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select9",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fZqHs
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__hDcm3
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__j0SAq
                              )}
                            >
                              {"Date de d\u00e9but du contrat"}
                            </div>
                          }
                          name={"start_date"}
                          rules={[{ ruleType: "required" }]}
                        >
                          {(() => {
                            const child$Props = {
                              bordered: true,
                              className: classNames(
                                "__wab_instance",
                                sty.timePicker3
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["timePicker3", "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              popupBodyClassName: classNames({
                                [sty["pcls_nc0s9UtBTVD8"]]: true
                              }),
                              popupClassName: classNames({
                                [sty["pcls_JP3w8ocxnHC8"]]: true
                              }),
                              popupHeaderClassName: classNames({
                                [sty["pcls_8rXqvIB_dkWs"]]: true
                              }),
                              popupScopeClassName:
                                sty["timePicker3__datePickerPopup"],
                              value: generateStateValueProp($state, [
                                "timePicker3",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "timePicker3.value"
                                }
                              ],
                              [],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdDatePicker
                                data-plasmic-name={"timePicker3"}
                                data-plasmic-override={overrides.timePicker3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__s0I0I
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__thIp
                              )}
                            >
                              {"Date de fin du contrat"}
                            </div>
                          }
                          name={"end_date"}
                          rules={[
                            {
                              ruleType: "advanced",
                              custom: (rule, value) => {
                                return (
                                  $state.form2.value.end_date == undefined ||
                                  $state.form2.value.end_date == null ||
                                  $state.form2.value.start_date <
                                    $state.form2.value.end_date
                                );
                              },
                              message: ``
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.timePicker4
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["timePicker4", "value"],
                                  AntdDatePicker_Helpers
                                ).apply(null, eventArgs);
                              },
                              popupScopeClassName:
                                sty["timePicker4__datePickerPopup"],
                              value: generateStateValueProp($state, [
                                "timePicker4",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "timePicker4.value"
                                }
                              ],
                              [],
                              AntdDatePicker_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdDatePicker
                                data-plasmic-name={"timePicker4"}
                                data-plasmic-override={overrides.timePicker4}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dt1Rs
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__rp1MF
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fmWF
                              )}
                            >
                              {"Mode de travail"}
                            </div>
                          }
                          name={"work_mode"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select12"}
                            data-plasmic-override={overrides.select12}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select12
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select12",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "work_mode")
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__r8JyH
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Mode de travail"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select12__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yp73G
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select12",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__uRkqz
                          )}
                          label={
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mpLrP
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___53FaU
                                )}
                              >
                                {"Disponibilit\u00e9"}
                              </div>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iMum1
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateInsufficientChargesIsOpen"] =
                                    $queries.offreStripeUserInfos.data[0]
                                      ?.recharge_lastminute === "0"
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "insufficientCharges",
                                                "isOpen"
                                              ]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateInsufficientChargesIsOpen"] !=
                                      null &&
                                    typeof $steps[
                                      "updateInsufficientChargesIsOpen"
                                    ] === "object" &&
                                    typeof $steps[
                                      "updateInsufficientChargesIsOpen"
                                    ].then === "function"
                                  ) {
                                    $steps["updateInsufficientChargesIsOpen"] =
                                      await $steps[
                                        "updateInsufficientChargesIsOpen"
                                      ];
                                  }
                                }}
                              >
                                <IconPhClockCountdownIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___6TapK
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nHcH
                                  )}
                                >
                                  {"LAST MINUTE"}
                                </div>
                                <Switch
                                  data-plasmic-name={"_switch"}
                                  data-plasmic-override={overrides._switch}
                                  className={classNames(
                                    "__wab_instance",
                                    sty._switch
                                  )}
                                  disabled={(() => {
                                    try {
                                      return (
                                        $queries.offreStripeUserInfos.data[0]
                                          .recharge_lastminute === "0"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  isSelected={generateStateValueProp($state, [
                                    "_switch",
                                    "isSelected"
                                  ])}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "_switch",
                                      "isSelected"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                  showDescription={false}
                                  showLabel={false}
                                />
                              </Stack__>
                            </Stack__>
                          }
                          name={"availability_status"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select14"}
                            data-plasmic-override={overrides.select14}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select14
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select14",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(
                                    item => item.type === "availability_status"
                                  )
                                  .map(item => ({
                                    value: item.id,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__c6Van
                                )}
                              >
                                <React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{
                                      color: "var(--token-3qu294j6Zo_Y)"
                                    }}
                                  >
                                    {"Disponibilit\u00e9"}
                                  </span>
                                </React.Fragment>
                              </div>
                            }
                            popupScopeClassName={sty["select14__popup"]}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__y2WjJ
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select14",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dmHah
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField___9QSjf
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eoYhI
                              )}
                            >
                              {"Avantages"}
                            </div>
                          }
                          name={"benefits"}
                          rules={[{ ruleType: "required" }]}
                        >
                          <AntdSelect
                            data-plasmic-name={"select13"}
                            data-plasmic-override={overrides.select13}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select13
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            mode={"multiple"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "select13",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              try {
                                return $queries.getCriteria.data
                                  .filter(item => item.type === "benefits_type")
                                  .map(item => ({
                                    value: item.name,
                                    label: item.name
                                  }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            placeholder={
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dpr1C
                                )}
                              >
                                <PlusIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ifTnp
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yc146
                                  )}
                                >
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-3qu294j6Zo_Y)"
                                      }}
                                    >
                                      {"Ajouter"}
                                    </span>
                                  </React.Fragment>
                                </div>
                              </Stack__>
                            }
                            popupScopeClassName={sty["select13__popup"]}
                            size={"large"}
                            suffixIcon={
                              <ChevronDownIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__eM5Oq
                                )}
                                role={"img"}
                              />
                            }
                            value={generateStateValueProp($state, [
                              "select13",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___5Isyq
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f5E8S
                            )}
                          >
                            {"Adresse"}
                          </div>
                        }
                        name={"address"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextInput
                          data-plasmic-name={"rue"}
                          data-plasmic-override={overrides.rue}
                          className={classNames("__wab_instance", sty.rue)}
                          defaultValue={(() => {
                            try {
                              return $queries.getCompanies.data[0].address;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "rue",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Rue"}
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"codePosteVille"}
                        data-plasmic-override={overrides.codePosteVille}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.codePosteVille
                        )}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__a3XI4
                          )}
                          hidden={false}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oySa
                              )}
                            >
                              {""}
                            </div>
                          }
                          name={"postal_code"}
                          noLabel={true}
                          rules={[{ ruleType: "required" }]}
                        >
                          <TextInput
                            data-plasmic-name={"codePostal"}
                            data-plasmic-override={overrides.codePostal}
                            className={classNames(
                              "__wab_instance",
                              sty.codePostal
                            )}
                            defaultValue={(() => {
                              try {
                                return $queries.getCompanies.data[0]
                                  .postal_code;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "codePostal",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Code postal"}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__rMkvg
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jkyFf
                              )}
                            >
                              {"Adresse*"}
                            </div>
                          }
                          name={"location"}
                          noLabel={true}
                          rules={[{ ruleType: "required" }]}
                        >
                          <TextInput
                            data-plasmic-name={"ville"}
                            data-plasmic-override={overrides.ville}
                            className={classNames("__wab_instance", sty.ville)}
                            defaultValue={(() => {
                              try {
                                return $queries.getCompanies.data[0].location;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "ville",
                                "value"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            placeholder={"Ville"}
                          />
                        </FormItemWrapper>
                      </Stack__>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__rIceP
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oSnnv
                            )}
                          >
                            {"Adresse*"}
                          </div>
                        }
                        name={"country"}
                        noLabel={true}
                        rules={[{ ruleType: "required" }]}
                      >
                        <Select
                          data-plasmic-name={"select10"}
                          data-plasmic-override={overrides.select10}
                          className={classNames("__wab_instance", sty.select10)}
                          initialSelectedValue={(() => {
                            try {
                              return $queries.getCompanies.data[0].country;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          items={(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.getCountries.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <MenuItem
                                className={classNames(
                                  "__wab_instance",
                                  sty.menuItem__v1Mym
                                )}
                                key={currentIndex}
                                label={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                value={(() => {
                                  try {
                                    return currentItem.Name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            );
                          })}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dI3N4
                              )}
                            >
                              {"Label"}
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "select10",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Pays"}
                          showLabel={false}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__xKAy
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yDJn
                            )}
                          >
                            {"Description du poste"}
                          </div>
                        }
                        name={"description"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput"}
                          data-plasmic-override={overrides.textAreaInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={(() => {
                            try {
                              return "Mission 1\nMission 2\nMission 3\n...";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__yt3Xb
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cWrdz
                            )}
                          >
                            {"Profil attendu"}
                          </div>
                        }
                        name={"requirements"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <TextAreaInput
                          data-plasmic-name={"textAreaInput2"}
                          data-plasmic-override={overrides.textAreaInput2}
                          className={classNames(
                            "__wab_instance",
                            sty.textAreaInput2
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textAreaInput2",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "Description du profil recherch\u00e9...."
                          }
                        />
                      </FormItemWrapper>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__brNtc
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__sgHBa
                          )}
                          color={"white"}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0Zxpp
                              )}
                              role={"img"}
                            />
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iAbEp
                              )}
                            >
                              {"enregistrer comme brouillon"}
                            </div>
                          }
                          onClick={async event => {
                            const $steps = {};

                            $steps["createDraftJob"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "02a4b7b4-f704-4f71-8a8a-c293a4f37f46",
                                      userArgs: {
                                        variables: [
                                          $state.form2.value.address,
                                          $state.form2.value
                                            .availability_status,
                                          $queries.getCompanies.data[0].id,
                                          $state.form2.value.contract_type,
                                          $state.form2.value.country,
                                          $state.form2.value.description,
                                          $state.form2.value.location,
                                          $state.form2.value.postal_code,
                                          $state.form2.value.requirements,
                                          $state.form2.value.salary,
                                          $state.form2.value.sector_activity,
                                          $state.form2.value.title,
                                          $state.form2.value.work_mode,
                                          $state.form2.value.working_time,
                                          $state.form2.value.benefits
                                            .map(
                                              benefit =>
                                                benefit
                                                  .charAt(0)
                                                  .toUpperCase() +
                                                benefit.slice(1)
                                            )
                                            .join(", "),
                                          $state._switch.isSelected,
                                          $state.form2.value.end_date,
                                          $state.form2.value.start_date,
                                          $queries.getLocationData.data.response
                                            .features[0].geometry
                                            .coordinates[1],
                                          $queries.getLocationData.data.response
                                            .features[0].geometry.coordinates[0]
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "86a865c1-0261-4284-930f-6ef2f6f1060b"
                                      ],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["createDraftJob"] != null &&
                              typeof $steps["createDraftJob"] === "object" &&
                              typeof $steps["createDraftJob"].then ===
                                "function"
                            ) {
                              $steps["createDraftJob"] = await $steps[
                                "createDraftJob"
                              ];
                            }

                            $steps["updateCreateOffreIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["createOffre", "isOpen"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCreateOffreIsOpen"] != null &&
                              typeof $steps["updateCreateOffreIsOpen"] ===
                                "object" &&
                              typeof $steps["updateCreateOffreIsOpen"].then ===
                                "function"
                            ) {
                              $steps["updateCreateOffreIsOpen"] = await $steps[
                                "updateCreateOffreIsOpen"
                              ];
                            }
                          }}
                          submitsForm={true}
                          type={"bordered"}
                        />

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__zvbXv
                          )}
                          end={
                            <GroupIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jsYoN
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={"cr\u00e9er l'offre"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["createOffer"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "5d31e8d8-cff8-4509-9e73-34a7e4b58ca3",
                                      userArgs: {
                                        variables: [
                                          $state.form2.value.address,
                                          $state.form2.value
                                            .availability_status,
                                          $queries.getCompanies.data[0].id,
                                          $state.form2.value.contract_type,
                                          $state.form2.value.country,
                                          $state.form2.value.description,
                                          $state.form2.value.location,
                                          $state.form2.value.postal_code,
                                          $state.form2.value.requirements,
                                          $state.form2.value.salary,
                                          $state.form2.value.sector_activity,
                                          $state.form2.value.title,
                                          $state.form2.value.work_mode,
                                          $state.form2.value.working_time,
                                          $state.form2.value.benefits,
                                          $state._switch.isSelected,
                                          $state.form2.value.end_date,
                                          $state.form2.value.start_date,
                                          $queries.getLocationData.data.response
                                            .features[0].geometry
                                            .coordinates[1],
                                          $queries.getLocationData.data.response
                                            .features[0].geometry
                                            .coordinates[0],
                                          $state.form2.value.team_size
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "86a865c1-0261-4284-930f-6ef2f6f1060b",
                                        "d0186466-dcbb-4702-a724-88cda73c66bb",
                                        "e38cc2f4-cfb6-40a3-bc90-0b9ce2786a30",
                                        "1284f981-03a5-4aae-9f90-4a9eb18e1c6b",
                                        "1284f981-03a5-4aae-9f90-4a9eb18e1c6b",
                                        "44279b1d-8867-4128-97b8-520ffe67ab32",
                                        "9258b35e-6135-4ba7-8ce4-fe23b60361d6",
                                        "c91b3dad-0831-48c9-8dd7-50555a9ed2f8",
                                        "d6d251ec-30d5-4bb4-8ded-c4c02dacf020"
                                      ],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["createOffer"] != null &&
                              typeof $steps["createOffer"] === "object" &&
                              typeof $steps["createOffer"].then === "function"
                            ) {
                              $steps["createOffer"] = await $steps[
                                "createOffer"
                              ];
                            }

                            $steps["updateStripe"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                      opId: "b3ab694d-132d-4e5d-9ada-cb46ac6ddaad",
                                      userArgs: {
                                        variables: [
                                          $state._switch.isSelected
                                            ? Number(
                                                $queries.offreStripeUserInfos
                                                  .data[0].recharge_lastminute
                                              ) - 1
                                            : Number(
                                                $queries.offreStripeUserInfos
                                                  .data[0].recharge_lastminute
                                              ),
                                          !$state._switch.isSelected
                                            ? $queries.offreStripeUserInfos
                                                .data[0].recharge_classic - 1
                                            : undefined
                                        ],
                                        conditions: [$ctx.SupabaseUser.user.id]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "1284f981-03a5-4aae-9f90-4a9eb18e1c6b"
                                      ],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStripe"] != null &&
                              typeof $steps["updateStripe"] === "object" &&
                              typeof $steps["updateStripe"].then === "function"
                            ) {
                              $steps["updateStripe"] = await $steps[
                                "updateStripe"
                              ];
                            }

                            $steps["updateCreateOffreIsOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["createOffre", "isOpen"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCreateOffreIsOpen"] != null &&
                              typeof $steps["updateCreateOffreIsOpen"] ===
                                "object" &&
                              typeof $steps["updateCreateOffreIsOpen"].then ===
                                "function"
                            ) {
                              $steps["updateCreateOffreIsOpen"] = await $steps[
                                "updateCreateOffreIsOpen"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "success",
                                      "Votre offre est publi\u00e9e et visible des candidats"
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          submitsForm={true}
                        />
                      </Stack__>
                    </FormWrapper>
                  );
                })()}
              </Stack__>
            }
            footer={null}
            heading={
              (
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mWofX)}
                  displayHeight={"17px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"17px"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCreateOffreIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["createOffre", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCreateOffreIsOpen"] != null &&
                      typeof $steps["updateCreateOffreIsOpen"] === "object" &&
                      typeof $steps["updateCreateOffreIsOpen"].then ===
                        "function"
                    ) {
                      $steps["updateCreateOffreIsOpen"] = await $steps[
                        "updateCreateOffreIsOpen"
                      ];
                    }
                  }}
                  src={{
                    src: "/plasmic/jam_production_🚀/images/close3.svg",
                    fullWidth: 17,
                    fullHeight: 17,
                    aspectRatio: 1
                  }}
                />
              ) : null
            }
            isOpen={generateStateValueProp($state, ["createOffre", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "createOffre",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <div className={classNames(projectcss.all, sty.freeBox__vFuJ)} />
            }
          />

          {(() => {
            try {
              return $state.stopInscription.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Modal
              data-plasmic-name={"stopInscription"}
              data-plasmic-override={overrides.stopInscription}
              className={classNames("__wab_instance", sty.stopInscription)}
              closeOnBackdropClick={false}
              content={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jombb)}
                >
                  <ReshotIconAlert7T6Wum8VleSvgIcon
                    className={classNames(projectcss.all, sty.svg__ujQcB)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["postgresUpdateMany"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                                userArgs: {
                                  conditions: [$ctx.SupabaseUser.user.id],
                                  variables: [null]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateMany"] != null &&
                        typeof $steps["postgresUpdateMany"] === "object" &&
                        typeof $steps["postgresUpdateMany"].then === "function"
                      ) {
                        $steps["postgresUpdateMany"] = await $steps[
                          "postgresUpdateMany"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qC9Bk
                    )}
                  >
                    {"Voulez-vous abandonner l'inscription ?"}
                  </div>
                  <div
                    data-plasmic-name={"e"}
                    data-plasmic-override={overrides.e}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.e
                    )}
                  >
                    {
                      "Si vous quittez l'inscription votre profil ne sera pas enregistr\u00e9."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a7ChP)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__wclXj
                      )}
                      color={"white"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__drZi7
                          )}
                        >
                          {"retour"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateAbordInscription"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["stopInscription", "isOpen"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAbordInscription"] != null &&
                          typeof $steps["updateAbordInscription"] ===
                            "object" &&
                          typeof $steps["updateAbordInscription"].then ===
                            "function"
                        ) {
                          $steps["updateAbordInscription"] = await $steps[
                            "updateAbordInscription"
                          ];
                        }

                        $steps["updateShowModal"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["showModal"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateShowModal"] != null &&
                          typeof $steps["updateShowModal"] === "object" &&
                          typeof $steps["updateShowModal"].then === "function"
                        ) {
                          $steps["updateShowModal"] = await $steps[
                            "updateShowModal"
                          ];
                        }

                        $steps["updateHiddeModal"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["hiddeModal"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateHiddeModal"] != null &&
                          typeof $steps["updateHiddeModal"] === "object" &&
                          typeof $steps["updateHiddeModal"].then === "function"
                        ) {
                          $steps["updateHiddeModal"] = await $steps[
                            "updateHiddeModal"
                          ];
                        }
                      }}
                      type={"bordered"}
                    />

                    <DeleteAccount
                      className={classNames(
                        "__wab_instance",
                        sty.deleteAccount__mqTY
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pyCl
                          )}
                        >
                          {"abandonner"}
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = { args: ["/"] };
                              return $globalActions[
                                "SupabaseUserGlobalContext.logout"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    />
                  </div>
                </Stack__>
              }
              footer={null}
              heading={null}
              isOpen={generateStateValueProp($state, [
                "stopInscription",
                "isOpen"
              ])}
              noTrigger={true}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "stopInscription",
                  "isOpen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showFooter={false}
              showHeader={false}
              trigger={
                <div
                  className={classNames(projectcss.all, sty.freeBox__c0MlE)}
                />
              }
            />
          ) : null}
          {(() => {
            try {
              return $state.showModal === true && $state.hiddeModal === false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"modalOnboarding"}
              data-plasmic-override={overrides.modalOnboarding}
              className={classNames(projectcss.all, sty.modalOnboarding)}
            >
              <PageLoader
                data-plasmic-name={"stripeCancel"}
                data-plasmic-override={overrides.stripeCancel}
                className={classNames("__wab_instance", sty.stripeCancel)}
                onMount={async () => {
                  const $steps = {};

                  $steps["updateOnboardingStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["onboardingStep"]
                          },
                          operation: 0,
                          value: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateOnboardingStep"] != null &&
                    typeof $steps["updateOnboardingStep"] === "object" &&
                    typeof $steps["updateOnboardingStep"].then === "function"
                  ) {
                    $steps["updateOnboardingStep"] = await $steps[
                      "updateOnboardingStep"
                    ];
                  }
                }}
                shouldRun={(() => {
                  try {
                    return $ctx.query.stripe === "cancel";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()}
              />

              <SmartLoader
                data-plasmic-name={"stripeCheckout"}
                data-plasmic-override={overrides.stripeCheckout}
                action1={async () => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["onboardingStep"]
                          },
                          operation: 0,
                          value: 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
                action2={async () => {
                  const $steps = {};

                  $steps["checkStripeUserExists"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                            opId: "44279b1d-8867-4128-97b8-520ffe67ab32",
                            userArgs: {
                              filters: [$ctx.SupabaseUser.user.id]
                            },
                            cacheKey: null,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          continueOnError: true
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["checkStripeUserExists"] != null &&
                    typeof $steps["checkStripeUserExists"] === "object" &&
                    typeof $steps["checkStripeUserExists"].then === "function"
                  ) {
                    $steps["checkStripeUserExists"] = await $steps[
                      "checkStripeUserExists"
                    ];
                  }

                  $steps["updateStripeSessionId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeSessionId"]
                          },
                          operation: 0,
                          value: $ctx.query.session_id
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeSessionId"] != null &&
                    typeof $steps["updateStripeSessionId"] === "object" &&
                    typeof $steps["updateStripeSessionId"].then === "function"
                  ) {
                    $steps["updateStripeSessionId"] = await $steps[
                      "updateStripeSessionId"
                    ];
                  }

                  $steps["getStripeSessionInfos"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "iWyefF3oqfc9knnzuF1Fin",
                            opId: "ff777f02-09eb-450c-8314-de92f4c472c4",
                            userArgs: {
                              path: [
                                "v1/checkout/sessions/" + $state.stripeSessionId
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: null,
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["getStripeSessionInfos"] != null &&
                    typeof $steps["getStripeSessionInfos"] === "object" &&
                    typeof $steps["getStripeSessionInfos"].then === "function"
                  ) {
                    $steps["getStripeSessionInfos"] = await $steps[
                      "getStripeSessionInfos"
                    ];
                  }

                  $steps["httpGet"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "iWyefF3oqfc9knnzuF1Fin",
                            opId: "ff777f02-09eb-450c-8314-de92f4c472c4",
                            userArgs: {
                              path: [
                                "v1/invoices/" +
                                  $steps.getStripeSessionInfos.data.response
                                    .invoice +
                                  "/lines"
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: null,
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["httpGet"] != null &&
                    typeof $steps["httpGet"] === "object" &&
                    typeof $steps["httpGet"].then === "function"
                  ) {
                    $steps["httpGet"] = await $steps["httpGet"];
                  }

                  $steps["updateProductId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["productId"]
                          },
                          operation: 0,
                          value:
                            $steps.httpGet.data.response.data[0].pricing
                              .price_details.product
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProductId"] != null &&
                    typeof $steps["updateProductId"] === "object" &&
                    typeof $steps["updateProductId"].then === "function"
                  ) {
                    $steps["updateProductId"] = await $steps["updateProductId"];
                  }

                  $steps["updatePriceId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["priceId"]
                          },
                          operation: 0,
                          value: $queries.productPrice.data.response.data.find(
                            product => product.product === $state.productId
                          ).id
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePriceId"] != null &&
                    typeof $steps["updatePriceId"] === "object" &&
                    typeof $steps["updatePriceId"].then === "function"
                  ) {
                    $steps["updatePriceId"] = await $steps["updatePriceId"];
                  }

                  $steps["updateCustomerId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeCustomerId"]
                          },
                          operation: 0,
                          value:
                            $steps.getStripeSessionInfos.data.response.customer
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCustomerId"] != null &&
                    typeof $steps["updateCustomerId"] === "object" &&
                    typeof $steps["updateCustomerId"].then === "function"
                  ) {
                    $steps["updateCustomerId"] = await $steps[
                      "updateCustomerId"
                    ];
                  }

                  $steps["updateStripeStatus"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeStatus"]
                          },
                          operation: 0,
                          value:
                            $steps.getStripeSessionInfos.data.response.status
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeStatus"] != null &&
                    typeof $steps["updateStripeStatus"] === "object" &&
                    typeof $steps["updateStripeStatus"].then === "function"
                  ) {
                    $steps["updateStripeStatus"] = await $steps[
                      "updateStripeStatus"
                    ];
                  }

                  $steps["updateStripeSubscriptionId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeSubscriptionId"]
                          },
                          operation: 0,
                          value:
                            $steps.getStripeSessionInfos.data.response
                              .subscription
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeSubscriptionId"] != null &&
                    typeof $steps["updateStripeSubscriptionId"] === "object" &&
                    typeof $steps["updateStripeSubscriptionId"].then ===
                      "function"
                  ) {
                    $steps["updateStripeSubscriptionId"] = await $steps[
                      "updateStripeSubscriptionId"
                    ];
                  }

                  $steps["updateStripeCreateAccount"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeCreateAccount"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeCreateAccount"] != null &&
                    typeof $steps["updateStripeCreateAccount"] === "object" &&
                    typeof $steps["updateStripeCreateAccount"].then ===
                      "function"
                  ) {
                    $steps["updateStripeCreateAccount"] = await $steps[
                      "updateStripeCreateAccount"
                    ];
                  }
                }}
                action3={async () => {
                  const $steps = {};

                  $steps["createUserStripeInfos"] =
                    $state.stripeCreateAccount === true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "4be8fea2-429c-451c-b7e8-516e9773bdb3",
                              userArgs: {
                                variables: [
                                  $state.stripeCustomerId,
                                  $state.priceId,
                                  $state.productId,
                                  $state.productId === "prod_S81KBWHPyJa53z"
                                    ? 0
                                    : 2,
                                  $state.productId === "prod_S81KBWHPyJa53z"
                                    ? 3
                                    : 8,
                                  $state.productId === "prod_S81KBWHPyJa53z"
                                    ? 1
                                    : 4,
                                  $state.stripeSessionId,
                                  $state.stripeStatus,
                                  $state.stripeSubscriptionId,
                                  $ctx.SupabaseUser.user.id
                                ]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            },
                            continueOnError: false
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["createUserStripeInfos"] != null &&
                    typeof $steps["createUserStripeInfos"] === "object" &&
                    typeof $steps["createUserStripeInfos"].then === "function"
                  ) {
                    $steps["createUserStripeInfos"] = await $steps[
                      "createUserStripeInfos"
                    ];
                  }

                  $steps["updateOnboardingTrue"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                            opId: "0a947b58-037a-44de-8578-da5e90048dcc",
                            userArgs: {
                              keys: [$ctx.SupabaseUser.user.id]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateOnboardingTrue"] != null &&
                    typeof $steps["updateOnboardingTrue"] === "object" &&
                    typeof $steps["updateOnboardingTrue"].then === "function"
                  ) {
                    $steps["updateOnboardingTrue"] = await $steps[
                      "updateOnboardingTrue"
                    ];
                  }

                  $steps["updateStripeCreateAccount"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["stripeCreateAccount"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStripeCreateAccount"] != null &&
                    typeof $steps["updateStripeCreateAccount"] === "object" &&
                    typeof $steps["updateStripeCreateAccount"].then ===
                      "function"
                  ) {
                    $steps["updateStripeCreateAccount"] = await $steps[
                      "updateStripeCreateAccount"
                    ];
                  }

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return $ctx.pagePath + "?onboarding=done";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                className={classNames("__wab_instance", sty.stripeCheckout)}
                condition1={true}
                condition2={(() => {
                  try {
                    return $state.stripeCreateAccount === false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                condition3={(() => {
                  try {
                    return $state.stripeCreateAccount === true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                condition4={false}
                condition5={false}
                shouldRun={(() => {
                  try {
                    return $ctx.query.onboarding === "success";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                hasGap={true}
                className={classNames(projectcss.all, sty.modal)}
              >
                {(() => {
                  try {
                    return $ctx.query.onboarding !== "done";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"close"}
                    data-plasmic-override={overrides.close}
                    className={classNames(projectcss.all, sty.close)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateHiddeModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["hiddeModal"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateHiddeModal"] != null &&
                        typeof $steps["updateHiddeModal"] === "object" &&
                        typeof $steps["updateHiddeModal"].then === "function"
                      ) {
                        $steps["updateHiddeModal"] = await $steps[
                          "updateHiddeModal"
                        ];
                      }

                      $steps["updateShowModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["showModal"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShowModal"] != null &&
                        typeof $steps["updateShowModal"] === "object" &&
                        typeof $steps["updateShowModal"].then === "function"
                      ) {
                        $steps["updateShowModal"] = await $steps[
                          "updateShowModal"
                        ];
                      }

                      $steps["updateStopInscriptionIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["stopInscription", "isOpen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStopInscriptionIsOpen"] != null &&
                        typeof $steps["updateStopInscriptionIsOpen"] ===
                          "object" &&
                        typeof $steps["updateStopInscriptionIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateStopInscriptionIsOpen"] = await $steps[
                          "updateStopInscriptionIsOpen"
                        ];
                      }
                    }}
                  >
                    <Icon10Icon
                      data-plasmic-name={"icon"}
                      data-plasmic-override={overrides.icon}
                      className={classNames(projectcss.all, sty.icon)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $ctx.query.onboarding === "done";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"closeAfterSuccess"}
                    data-plasmic-override={overrides.closeAfterSuccess}
                    className={classNames(
                      projectcss.all,
                      sty.closeAfterSuccess
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateHiddeModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["hiddeModal"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateHiddeModal"] != null &&
                        typeof $steps["updateHiddeModal"] === "object" &&
                        typeof $steps["updateHiddeModal"].then === "function"
                      ) {
                        $steps["updateHiddeModal"] = await $steps[
                          "updateHiddeModal"
                        ];
                      }

                      $steps["updateShowModal"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["showModal"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShowModal"] != null &&
                        typeof $steps["updateShowModal"] === "object" &&
                        typeof $steps["updateShowModal"].then === "function"
                      ) {
                        $steps["updateShowModal"] = await $steps[
                          "updateShowModal"
                        ];
                      }

                      $steps["goToOffreEmployeur"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/offre-employeur`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToOffreEmployeur"] != null &&
                        typeof $steps["goToOffreEmployeur"] === "object" &&
                        typeof $steps["goToOffreEmployeur"].then === "function"
                      ) {
                        $steps["goToOffreEmployeur"] = await $steps[
                          "goToOffreEmployeur"
                        ];
                      }
                    }}
                  >
                    <Icon10Icon
                      data-plasmic-name={"icon2"}
                      data-plasmic-override={overrides.icon2}
                      className={classNames(projectcss.all, sty.icon2)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.onboardingStep === 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"step0"}
                    data-plasmic-override={overrides.step0}
                    className={classNames(projectcss.all, sty.step0)}
                  >
                    <div
                      data-plasmic-name={"logo"}
                      data-plasmic-override={overrides.logo}
                      className={classNames(projectcss.all, sty.logo)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___1XE7E)}
                        displayHeight={"132px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"132px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/jam_production_🚀/images/frame7.svg",
                          fullWidth: 132,
                          fullHeight: 132,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form3),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form3", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form3", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form3"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form3.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form3.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form3"}
                          data-plasmic-override={overrides.form3}
                          {...child$Props}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__uq9S8
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2T7BQ
                                )}
                              >
                                {"Nom de l'entreprise*"}
                              </div>
                            }
                            name={"name"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                value: generateStateValueProp($state, [
                                  "input",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input"}
                                  data-plasmic-override={overrides.input}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___07GAo
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zOEL
                                )}
                              >
                                {"Pr\u00e9sentation courte"}
                              </div>
                            }
                            name={"message"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.textArea3
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["textArea3", "value"],
                                    AntdTextArea_Helpers
                                  ).apply(null, eventArgs);
                                },
                                value: generateStateValueProp($state, [
                                  "textArea3",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "textArea3.value"
                                  }
                                ],
                                [],
                                AntdTextArea_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdTextArea
                                  data-plasmic-name={"textArea3"}
                                  data-plasmic-override={overrides.textArea3}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__egfeE
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gvpx
                                )}
                              >
                                {"Adresse"}
                              </div>
                            }
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input2
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input2", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                value: generateStateValueProp($state, [
                                  "input2",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input2.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input2"}
                                  data-plasmic-override={overrides.input2}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__vnzH
                            )}
                            end={
                              <GroupIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hSm7Y
                                )}
                                role={"img"}
                              />
                            }
                            iconEnd={true}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ov7PH
                                )}
                              >
                                {"continuer"}
                              </div>
                            }
                            submitsForm={true}
                          />
                        </FormWrapper>
                      );
                    })()}
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form4),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form4", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form4", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form4"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form4.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form4.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form4"}
                          data-plasmic-override={overrides.form4}
                          {...child$Props}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__b5Bgd
                            )}
                          >
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__p8TfA
                              )}
                            >
                              {"Votre profile entreprise"}
                            </h1>
                            <UploadWrapper
                              data-plasmic-name={"upload4"}
                              data-plasmic-override={overrides.upload4}
                              accept={""}
                              className={classNames(
                                "__wab_instance",
                                sty.upload4
                              )}
                              files={generateStateValueProp($state, [
                                "upload4",
                                "files"
                              ])}
                              maxCount={1}
                              onFilesChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "upload4",
                                  "files"
                                ]).apply(null, eventArgs);
                              }}
                              showUploadList={false}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__jcCwR)}
                                displayHeight={"132px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"132px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/jam_production_🚀/images/frame7.svg",
                                  fullWidth: 132,
                                  fullHeight: 132,
                                  aspectRatio: 1
                                }}
                              />

                              <div
                                data-plasmic-name={"editIcon2"}
                                data-plasmic-override={overrides.editIcon2}
                                className={classNames(
                                  projectcss.all,
                                  sty.editIcon2
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame9"}
                                  data-plasmic-override={overrides.frame9}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame9
                                  )}
                                />

                                <PhPencilSimpleIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__thqvT
                                  )}
                                  role={"img"}
                                />
                              </div>
                              <div
                                data-plasmic-name={"deleteIcon2"}
                                data-plasmic-override={overrides.deleteIcon2}
                                className={classNames(
                                  projectcss.all,
                                  sty.deleteIcon2
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame10"}
                                  data-plasmic-override={overrides.frame10}
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame10
                                  )}
                                />

                                <PhTrashIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__bbJnp
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </UploadWrapper>
                          </Stack__>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__ncwx0
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2E8Oq
                                )}
                              >
                                {"Nom de l'entreprise*"}
                              </div>
                            }
                            name={"name"}
                          >
                            <TextInput
                              data-plasmic-name={"textInput2"}
                              data-plasmic-override={overrides.textInput2}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput2
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput2",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Nom de l'entreprise"}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__yjAa7
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rObQx
                                )}
                              >
                                {"Pr\u00e9sentation courte"}
                              </div>
                            }
                            name={"description"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eDnu6
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.textArea2
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["textArea2", "value"],
                                      AntdTextArea_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  placeholder:
                                    "Pr\u00e9sentez votre entreprise en quelques lignes...",
                                  value: generateStateValueProp($state, [
                                    "textArea2",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "textArea2.value"
                                    }
                                  ],
                                  [],
                                  AntdTextArea_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdTextArea
                                    data-plasmic-name={"textArea2"}
                                    data-plasmic-override={overrides.textArea2}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___8MbkF
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__p0GOd
                                )}
                              >
                                {"Adresse*"}
                              </div>
                            }
                            name={"address"}
                          >
                            <TextInput
                              data-plasmic-name={"textInput9"}
                              data-plasmic-override={overrides.textInput9}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput9
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput9",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Rue"}
                            />
                          </FormItemWrapper>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v7DaP
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___9QxYr
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8VmH
                                  )}
                                >
                                  {"Code postal*"}
                                </div>
                              }
                              name={"postal_code"}
                            >
                              <TextInput
                                data-plasmic-name={"textInput10"}
                                data-plasmic-override={overrides.textInput10}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput10
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput10",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={"Code postal"}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__qfOFg
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8Mz6M
                                  )}
                                >
                                  {"Ville*"}
                                </div>
                              }
                              name={"city"}
                            >
                              <TextInput
                                data-plasmic-name={"textInput11"}
                                data-plasmic-override={overrides.textInput11}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput11
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput11",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={"Ville"}
                              />
                            </FormItemWrapper>
                          </Stack__>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___3SgjN
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fBrf4
                                )}
                              >
                                {"Pays*"}
                              </div>
                            }
                            name={"country"}
                          >
                            <Select
                              data-plasmic-name={"select11"}
                              data-plasmic-override={overrides.select11}
                              className={classNames(
                                "__wab_instance",
                                sty.select11
                              )}
                              items={(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.getCountries.data;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <MenuItem
                                    key={currentIndex}
                                    label={(() => {
                                      try {
                                        return currentItem.Name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    value={currentItem.Name}
                                  />
                                );
                              })}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dEiaM
                                  )}
                                >
                                  {"Label"}
                                </div>
                              }
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "select11",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Pays"}
                              showLabel={false}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__ouFhk
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mfr0B
                                )}
                              >
                                {"SIREN*"}
                              </div>
                            }
                            name={"siren"}
                          >
                            <TextInput
                              data-plasmic-name={"textInput12"}
                              data-plasmic-override={overrides.textInput12}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput12
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput12",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Num\u00e9ro de SIREN"}
                            />
                          </FormItemWrapper>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jYvAa
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__syl6D
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__arYal
                                  )}
                                >
                                  {"Secteur d'activit\u00e9*"}
                                </div>
                              }
                              name={"sector"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select15"}
                                data-plasmic-override={overrides.select15}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select15
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select15",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={[
                                  {
                                    value: "option1",
                                    label: "Option 1",
                                    type: "option"
                                  },
                                  {
                                    value: "option2",
                                    label: "Option 2",
                                    type: "option"
                                  }
                                ]}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__oAJt
                                    )}
                                  >
                                    {""}
                                  </div>
                                }
                                popupScopeClassName={sty["select15__popup"]}
                                value={generateStateValueProp($state, [
                                  "select15",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__t6UxZ
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__k1Jfp
                                  )}
                                >
                                  {"Taille de l'entreprise*"}
                                </div>
                              }
                              name={"team_size"}
                            >
                              <AntdSelect
                                data-plasmic-name={"select16"}
                                data-plasmic-override={overrides.select16}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select16
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select16",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={[]}
                                placeholder={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mYAbC
                                    )}
                                  >
                                    {""}
                                  </div>
                                }
                                popupScopeClassName={sty["select16__popup"]}
                                value={generateStateValueProp($state, [
                                  "select16",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                          </Stack__>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__iZzR
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gNmee
                                )}
                              >
                                {"Site web"}
                              </div>
                            }
                            name={"website"}
                          >
                            <TextInput
                              data-plasmic-name={"textInput13"}
                              data-plasmic-override={overrides.textInput13}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput13
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput13",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"https://"}
                            />
                          </FormItemWrapper>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wbRba
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___2Bn9Y
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zce65
                                  )}
                                >
                                  {"Kbis"}
                                </div>
                              }
                              name={"kbis_file"}
                            >
                              <UploadWrapper
                                data-plasmic-name={"upload5"}
                                data-plasmic-override={overrides.upload5}
                                accept={""}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload5
                                )}
                                files={generateStateValueProp($state, [
                                  "upload5",
                                  "files"
                                ])}
                                maxCount={1}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload5",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={false}
                              >
                                <div
                                  data-plasmic-name={"content3"}
                                  data-plasmic-override={overrides.content3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.content3
                                  )}
                                >
                                  <Stack__
                                    as={PlasmicImg__}
                                    hasGap={true}
                                    alt={""}
                                    className={classNames(sty.img___77WpQ)}
                                    displayHeight={"39px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"39px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                      fullWidth: 39,
                                      fullHeight: 39,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gwh6Y
                                    )}
                                  >
                                    {"Importer ou d\u00e9poser un fichier"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__l59R0
                                    )}
                                  >
                                    {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                  </div>
                                </div>
                              </UploadWrapper>
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___2Ywc1
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uX3E8
                                  )}
                                >
                                  {"Pi\u00e8ce d'identit\u00e9"}
                                </div>
                              }
                              name={"identity_file"}
                            >
                              <UploadWrapper
                                data-plasmic-name={"upload6"}
                                data-plasmic-override={overrides.upload6}
                                accept={""}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload6
                                )}
                                files={generateStateValueProp($state, [
                                  "upload6",
                                  "files"
                                ])}
                                maxCount={1}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload6",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={false}
                              >
                                <div
                                  data-plasmic-name={"content4"}
                                  data-plasmic-override={overrides.content4}
                                  className={classNames(
                                    projectcss.all,
                                    sty.content4
                                  )}
                                >
                                  <Stack__
                                    as={PlasmicImg__}
                                    hasGap={true}
                                    alt={""}
                                    className={classNames(sty.img__jOPf2)}
                                    displayHeight={"39px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"39px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                      fullWidth: 39,
                                      fullHeight: 39,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uiIbR
                                    )}
                                  >
                                    {"Importer ou d\u00e9poser un fichier"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__supo
                                    )}
                                  >
                                    {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                  </div>
                                </div>
                              </UploadWrapper>
                            </FormItemWrapper>
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1NFcs
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__pjbz8
                              )}
                              end={
                                <GroupIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__wjhF8
                                  )}
                                  role={"img"}
                                />
                              }
                              iconEnd={true}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1QQ2
                                  )}
                                >
                                  {"Continuer"}
                                </div>
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateStep"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["onboardingStep"]
                                        },
                                        operation: 0,
                                        value: 1
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateStep"] != null &&
                                  typeof $steps["updateStep"] === "object" &&
                                  typeof $steps["updateStep"].then ===
                                    "function"
                                ) {
                                  $steps["updateStep"] = await $steps[
                                    "updateStep"
                                  ];
                                }
                              }}
                              submitsForm={true}
                            />
                          </div>
                        </FormWrapper>
                      );
                    })()}
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form5),
                        extendedOnValuesChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form5", "value"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["kbis"] =
                            $state.upload8.files.length > 0
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                      opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                      userArgs: {
                                        path: [
                                          $ctx.SupabaseUser.user.id,
                                          $state.form5.value.kbis_file[0].name
                                        ],
                                        content: [
                                          $state.form5.value.kbis_file[0]
                                            .contents
                                        ],
                                        contentType: [
                                          $state.form5.value.kbis_file[0].type
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    },
                                    continueOnError: true
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["kbis"] != null &&
                            typeof $steps["kbis"] === "object" &&
                            typeof $steps["kbis"].then === "function"
                          ) {
                            $steps["kbis"] = await $steps["kbis"];
                          }

                          $steps["idFile"] =
                            $state.upload9.files.length > 0
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                      opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                      userArgs: {
                                        path: [
                                          $ctx.SupabaseUser.user.id,
                                          $state.form5.value.identity_file[0]
                                            .name
                                        ],
                                        content: [
                                          $state.form5.value.identity_file[0]
                                            .contents
                                        ],
                                        contentType: [
                                          $state.form5.value.identity_file[0]
                                            .type
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    },
                                    continueOnError: true
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["idFile"] != null &&
                            typeof $steps["idFile"] === "object" &&
                            typeof $steps["idFile"].then === "function"
                          ) {
                            $steps["idFile"] = await $steps["idFile"];
                          }

                          $steps["postgresCreate"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                    opId: "eafd5cf5-874d-4388-bcb9-5af7e356e028",
                                    userArgs: {
                                      variables: [
                                        $state.form5.value.address,
                                        $state.form5.value.country,
                                        $state.form5.value.description,
                                        $steps.idFile?.path.split("/")[1],
                                        $steps.kbis?.path.split("/")[1],
                                        $state.form5.value.location,
                                        $state.form5.value.name,
                                        $state.form5.value.postal_code,
                                        $state.form5.value.sector,
                                        $state.form5.value.siren,
                                        $state.form5.value.team_size,
                                        $state.form5.value.website,
                                        $ctx.SupabaseUser.user.id,
                                        $state.form5.value.descriptions
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [],
                                    roleId: null
                                  },
                                  continueOnError: false
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresCreate"] != null &&
                            typeof $steps["postgresCreate"] === "object" &&
                            typeof $steps["postgresCreate"].then === "function"
                          ) {
                            $steps["postgresCreate"] = await $steps[
                              "postgresCreate"
                            ];
                          }

                          $steps["updateOnboardingStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["onboardingStep"]
                                  },
                                  operation: 0,
                                  value: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateOnboardingStep"] != null &&
                            typeof $steps["updateOnboardingStep"] ===
                              "object" &&
                            typeof $steps["updateOnboardingStep"].then ===
                              "function"
                          ) {
                            $steps["updateOnboardingStep"] = await $steps[
                              "updateOnboardingStep"
                            ];
                          }
                        },
                        onIsSubmittingChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form5", "isSubmitting"],
                            FormWrapper_Helpers
                          ).apply(null, eventArgs);
                        },
                        ref: ref => {
                          $refs["form5"] = ref;
                        },
                        submitSlot: null,
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form5.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form5.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form5"}
                          data-plasmic-override={overrides.form5}
                          {...child$Props}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3S3V3
                            )}
                          >
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__knVuH
                              )}
                            >
                              {"Votre profil entreprise"}
                            </h1>
                            <UploadWrapper
                              data-plasmic-name={"upload7"}
                              data-plasmic-override={overrides.upload7}
                              accept={""}
                              className={classNames(
                                "__wab_instance",
                                sty.upload7
                              )}
                              files={generateStateValueProp($state, [
                                "upload7",
                                "files"
                              ])}
                              maxCount={1}
                              onFilesChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "upload7",
                                  "files"
                                ]).apply(null, eventArgs);

                                (async files => {
                                  const $steps = {};

                                  $steps["supabaseUploadFile"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "rtEg85U6Vbyi94cRAe93i7",
                                            opId: "84c0bb0b-0e3b-43a7-ae52-d0cf288eb28f",
                                            userArgs: {
                                              path: [
                                                $ctx.SupabaseUser.user.id,
                                                $state.upload7.files[0].name
                                              ],
                                              content: [
                                                $state.upload7.files[0].contents
                                              ],
                                              contentType: [
                                                $state.upload7.files[0].type
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["supabaseUploadFile"] != null &&
                                    typeof $steps["supabaseUploadFile"] ===
                                      "object" &&
                                    typeof $steps["supabaseUploadFile"].then ===
                                      "function"
                                  ) {
                                    $steps["supabaseUploadFile"] = await $steps[
                                      "supabaseUploadFile"
                                    ];
                                  }

                                  $steps["postgresUpdateById"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          dataOp: {
                                            sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                                            opId: "ca8056ed-4ec7-4218-bb8b-d4f4da770307",
                                            userArgs: {
                                              keys: [$ctx.SupabaseUser.user.id],
                                              variables: [
                                                $steps.supabaseUploadFile?.path.split(
                                                  "/"
                                                )[1]
                                              ]
                                            },
                                            cacheKey: null,
                                            invalidatedKeys: [
                                              "plasmic_refresh_all"
                                            ],
                                            roleId: null
                                          }
                                        };
                                        return (async ({
                                          dataOp,
                                          continueOnError
                                        }) => {
                                          try {
                                            const response =
                                              await executePlasmicDataOp(
                                                dataOp,
                                                {
                                                  userAuthToken:
                                                    dataSourcesCtx?.userAuthToken,
                                                  user: dataSourcesCtx?.user
                                                }
                                              );
                                            await plasmicInvalidate(
                                              dataOp.invalidatedKeys
                                            );
                                            return response;
                                          } catch (e) {
                                            if (!continueOnError) {
                                              throw e;
                                            }
                                            return e;
                                          }
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["postgresUpdateById"] != null &&
                                    typeof $steps["postgresUpdateById"] ===
                                      "object" &&
                                    typeof $steps["postgresUpdateById"].then ===
                                      "function"
                                  ) {
                                    $steps["postgresUpdateById"] = await $steps[
                                      "postgresUpdateById"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              }}
                              showUploadList={false}
                            >
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__ljTz9)}
                                displayHeight={"132px"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"132px"}
                                loading={"lazy"}
                                src={(() => {
                                  try {
                                    return $queries.getPp.signedUrl
                                      ? $queries.getPp.signedUrl
                                      : "https://images.icon-icons.com/1769/PNG/512/4092564-about-mobile-ui-profile-ui-user-website_114033.png";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return {
                                        src: "/plasmic/jam_production_🚀/images/imageWrapper.jpg",
                                        fullWidth: 867,
                                        fullHeight: 1300,
                                        aspectRatio: undefined
                                      };
                                    }
                                    throw e;
                                  }
                                })()}
                              />

                              <div
                                data-plasmic-name={"icones"}
                                data-plasmic-override={overrides.icones}
                                className={classNames(
                                  projectcss.all,
                                  sty.icones
                                )}
                              >
                                <div
                                  data-plasmic-name={"editIcon3"}
                                  data-plasmic-override={overrides.editIcon3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.editIcon3
                                  )}
                                >
                                  <div
                                    data-plasmic-name={"frame11"}
                                    data-plasmic-override={overrides.frame11}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame11
                                    )}
                                  />

                                  <PhPencilSimpleIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___1Z3Qg
                                    )}
                                    role={"img"}
                                  />
                                </div>
                                <div
                                  data-plasmic-name={"deleteIcon3"}
                                  data-plasmic-override={overrides.deleteIcon3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.deleteIcon3
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateUpload2Files"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["upload7", "files"]
                                            },
                                            operation: 1
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              undefined
                                            );
                                            return undefined;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateUpload2Files"] != null &&
                                      typeof $steps["updateUpload2Files"] ===
                                        "object" &&
                                      typeof $steps["updateUpload2Files"]
                                        .then === "function"
                                    ) {
                                      $steps["updateUpload2Files"] =
                                        await $steps["updateUpload2Files"];
                                    }

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return event.stopPropagation();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }

                                    $steps["postgresUpdateMany"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "kVSSe8ab4TtzwRPnTeEeUp",
                                              opId: "480b9e74-9c5c-4bcb-91b0-e654609fe8c1",
                                              userArgs: {
                                                conditions: [
                                                  $ctx.SupabaseUser.user.id
                                                ],
                                                variables: [null]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "plasmic_refresh_all"
                                              ],
                                              roleId: null
                                            }
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["postgresUpdateMany"] != null &&
                                      typeof $steps["postgresUpdateMany"] ===
                                        "object" &&
                                      typeof $steps["postgresUpdateMany"]
                                        .then === "function"
                                    ) {
                                      $steps["postgresUpdateMany"] =
                                        await $steps["postgresUpdateMany"];
                                    }
                                  }}
                                >
                                  <div
                                    data-plasmic-name={"frame12"}
                                    data-plasmic-override={overrides.frame12}
                                    className={classNames(
                                      projectcss.all,
                                      sty.frame12
                                    )}
                                  />

                                  <PhTrashIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__l0EZx
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            </UploadWrapper>
                          </Stack__>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___6Tz0E
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__m1Y2
                                )}
                              >
                                {"Nom de l'entreprise"}
                              </div>
                            }
                            name={"name"}
                            rules={[
                              {
                                ruleType: "required",
                                message: "Veuillez renseigner ce champ"
                              }
                            ]}
                          >
                            <TextInput
                              data-plasmic-name={"textInput14"}
                              data-plasmic-override={overrides.textInput14}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput14
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput14",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Nom de l'entreprise"}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___9QHgg
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__etOtJ
                                )}
                              >
                                {"Pr\u00e9sentation courte"}
                              </div>
                            }
                            name={"descriptions"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vRgkl
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.textArea4
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["textArea4", "value"],
                                      AntdTextArea_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  placeholder:
                                    "Pr\u00e9sentez votre entreprise en quelques lignes...",
                                  value: generateStateValueProp($state, [
                                    "textArea4",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "textArea4.value"
                                    }
                                  ],
                                  [],
                                  AntdTextArea_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdTextArea
                                    data-plasmic-name={"textArea4"}
                                    data-plasmic-override={overrides.textArea4}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___3LfCn
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ifIs3
                                )}
                              >
                                {"Adresse"}
                              </div>
                            }
                            name={"address"}
                            rules={[
                              {
                                ruleType: "required",
                                message: "Veuillez renseigner ce champ"
                              }
                            ]}
                          >
                            <TextInput
                              data-plasmic-name={"textInput15"}
                              data-plasmic-override={overrides.textInput15}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput15
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput15",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Rue"}
                            />
                          </FormItemWrapper>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__y1Huc
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__fURlU
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bZaXu
                                  )}
                                >
                                  {"Code postal"}
                                </div>
                              }
                              name={"postal_code"}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "Veuillez renseigner ce champ"
                                }
                              ]}
                            >
                              <TextInput
                                data-plasmic-name={"textInput16"}
                                data-plasmic-override={overrides.textInput16}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput16
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput16",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={"Code postal"}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__nkWcZ
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__paTMl
                                  )}
                                >
                                  {"Ville"}
                                </div>
                              }
                              name={"location"}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "Veuillez renseigner ce champ"
                                }
                              ]}
                            >
                              <TextInput
                                data-plasmic-name={"textInput17"}
                                data-plasmic-override={overrides.textInput17}
                                className={classNames(
                                  "__wab_instance",
                                  sty.textInput17
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput17",
                                    "value"
                                  ]).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={"Ville"}
                              />
                            </FormItemWrapper>
                          </Stack__>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__fohoD
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9XAli
                                )}
                              >
                                {"Pays"}
                              </div>
                            }
                            name={"country"}
                            rules={[
                              {
                                ruleType: "required",
                                message: "Veuillez renseigner ce champ"
                              }
                            ]}
                          >
                            <Select
                              data-plasmic-name={"select17"}
                              data-plasmic-override={overrides.select17}
                              className={classNames(
                                "__wab_instance",
                                sty.select17
                              )}
                              items={(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.getCountries.data;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <MenuItem
                                    key={currentIndex}
                                    label={(() => {
                                      try {
                                        return currentItem.Name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    value={currentItem.Name}
                                  />
                                );
                              })}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__r8Wbo
                                  )}
                                >
                                  {"Label"}
                                </div>
                              }
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "select17",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Pays"}
                              showLabel={false}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__hWehB
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ev8Hy
                                )}
                              >
                                {"SIREN"}
                              </div>
                            }
                            name={"siren"}
                            rules={[
                              {
                                ruleType: "required",
                                message: "Veuillez renseigner ce champ"
                              }
                            ]}
                          >
                            <TextInput
                              data-plasmic-name={"textInput18"}
                              data-plasmic-override={overrides.textInput18}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput18
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput18",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"Num\u00e9ro de SIREN"}
                            />
                          </FormItemWrapper>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tChE6
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__hpyIm
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bUpn
                                  )}
                                >
                                  {"Secteur d'activit\u00e9"}
                                </div>
                              }
                              name={"sector"}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "Veuillez renseigner ce champ"
                                }
                              ]}
                            >
                              <AntdSelect
                                data-plasmic-name={"select18"}
                                data-plasmic-override={overrides.select18}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select18
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select18",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(
                                        item => item.type === "sector_activity"
                                      )
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={""}
                                popupScopeClassName={sty["select18__popup"]}
                                value={generateStateValueProp($state, [
                                  "select18",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__aWq0C
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qkVRm
                                  )}
                                >
                                  {"Taille de l'entreprise"}
                                </div>
                              }
                              name={"team_size"}
                              rules={[
                                {
                                  ruleType: "required",
                                  message: "Veuillez renseigner ce champ"
                                }
                              ]}
                            >
                              <AntdSelect
                                data-plasmic-name={"select19"}
                                data-plasmic-override={overrides.select19}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select19
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "select19",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                options={(() => {
                                  try {
                                    return $queries.getCriteria.data
                                      .filter(
                                        item => item.type === "company_size"
                                      )
                                      .map(item => ({
                                        value: item.name,
                                        label: item.name
                                      }));
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                placeholder={""}
                                popupScopeClassName={sty["select19__popup"]}
                                value={generateStateValueProp($state, [
                                  "select19",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                          </Stack__>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__gvCNr
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bhDxP
                                )}
                              >
                                {"Site web"}
                              </div>
                            }
                            name={"website"}
                          >
                            <TextInput
                              data-plasmic-name={"textInput19"}
                              data-plasmic-override={overrides.textInput19}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput19
                              )}
                              onChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "textInput19",
                                  "value"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={"https://"}
                            />
                          </FormItemWrapper>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fOMkY
                            )}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___8MPx
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tdXx
                                  )}
                                >
                                  {"Kbis"}
                                </div>
                              }
                              name={"kbis_file"}
                            >
                              <UploadWrapper
                                data-plasmic-name={"upload8"}
                                data-plasmic-override={overrides.upload8}
                                accept={""}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload8
                                )}
                                files={generateStateValueProp($state, [
                                  "upload8",
                                  "files"
                                ])}
                                maxCount={1}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload8",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={true}
                              >
                                <div
                                  data-plasmic-name={"content5"}
                                  data-plasmic-override={overrides.content5}
                                  className={classNames(
                                    projectcss.all,
                                    sty.content5
                                  )}
                                >
                                  <Stack__
                                    as={PlasmicImg__}
                                    hasGap={true}
                                    alt={""}
                                    className={classNames(sty.img__s0UJ)}
                                    displayHeight={"39px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"39px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                      fullWidth: 39,
                                      fullHeight: 39,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___1N7B1
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ fontWeight: 600 }}
                                      >
                                        {"Importer ou d\u00e9poser un fichier"}
                                      </span>
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___4LDxk
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ fontWeight: 400 }}
                                      >
                                        {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                      </span>
                                    </React.Fragment>
                                  </div>
                                </div>
                              </UploadWrapper>
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__ozGuz
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2Gdd
                                  )}
                                >
                                  {"Pi\u00e8ce d'identit\u00e9"}
                                </div>
                              }
                              name={"identity_file"}
                            >
                              <UploadWrapper
                                data-plasmic-name={"upload9"}
                                data-plasmic-override={overrides.upload9}
                                accept={""}
                                className={classNames(
                                  "__wab_instance",
                                  sty.upload9
                                )}
                                files={generateStateValueProp($state, [
                                  "upload9",
                                  "files"
                                ])}
                                maxCount={1}
                                onFilesChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "upload9",
                                    "files"
                                  ]).apply(null, eventArgs);
                                }}
                                showUploadList={true}
                              >
                                <div
                                  data-plasmic-name={"content6"}
                                  data-plasmic-override={overrides.content6}
                                  className={classNames(
                                    projectcss.all,
                                    sty.content6
                                  )}
                                >
                                  <Stack__
                                    as={PlasmicImg__}
                                    hasGap={true}
                                    alt={""}
                                    className={classNames(sty.img__qj4QN)}
                                    displayHeight={"39px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"39px"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/jam_production_🚀/images/frame1437254220.svg",
                                      fullWidth: 39,
                                      fullHeight: 39,
                                      aspectRatio: 1
                                    }}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lxRn
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ fontWeight: 600 }}
                                      >
                                        {"Importer ou d\u00e9poser un fichier"}
                                      </span>
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__i8Jwt
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ fontWeight: 400 }}
                                      >
                                        {"PDF, DOC, DOCX, JPG (max. 2Mo)"}
                                      </span>
                                    </React.Fragment>
                                  </div>
                                </div>
                              </UploadWrapper>
                            </FormItemWrapper>
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aUEed
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__nYjVc
                              )}
                              end={
                                <GroupIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fp5Q2
                                  )}
                                  role={"img"}
                                />
                              }
                              iconEnd={true}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__txtYk
                                  )}
                                >
                                  {"COntinuer"}
                                </div>
                              }
                              submitsForm={true}
                            />
                          </div>
                        </FormWrapper>
                      );
                    })()}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return (
                      $ctx.query.onboarding !== "success" &&
                      $ctx.query.onboarding !== "done" &&
                      $state.onboardingStep === 1
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"step1"}
                    data-plasmic-override={overrides.step1}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.step1)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lxHr5)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.stripeProductsList.data.response.data
                              .filter(
                                recuring =>
                                  recuring.default_price.recurring !== null
                              )
                              .sort((a, b) => a.name.localeCompare(b.name));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            data-plasmic-name={"subscription"}
                            data-plasmic-override={overrides.subscription}
                            className={classNames(
                              projectcss.all,
                              sty.subscription
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateProductId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["productId"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateProductId"] != null &&
                                typeof $steps["updateProductId"] === "object" &&
                                typeof $steps["updateProductId"].then ===
                                  "function"
                              ) {
                                $steps["updateProductId"] = await $steps[
                                  "updateProductId"
                                ];
                              }

                              $steps["updatePriceId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["priceId"]
                                      },
                                      operation: 0,
                                      value:
                                        $queries.productPrice.data.response.data.find(
                                          product =>
                                            product.product === $state.productId
                                        ).id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePriceId"] != null &&
                                typeof $steps["updatePriceId"] === "object" &&
                                typeof $steps["updatePriceId"].then ===
                                  "function"
                              ) {
                                $steps["updatePriceId"] = await $steps[
                                  "updatePriceId"
                                ];
                              }
                            }}
                          >
                            <ProductCard
                              data-plasmic-name={"productCard"}
                              data-plasmic-override={overrides.productCard}
                              active={(() => {
                                try {
                                  return $state.productId === currentItem.id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "active";
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.productCard
                              )}
                              productId={(() => {
                                try {
                                  return currentItem.id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        );
                      })}
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"actions"}
                      data-plasmic-override={overrides.actions}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.actions)}
                    >
                      <Button
                        data-plasmic-name={"buttonBack"}
                        data-plasmic-override={overrides.buttonBack}
                        className={classNames("__wab_instance", sty.buttonBack)}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___5Kjgo
                            )}
                            role={"img"}
                          />
                        }
                        label={"retour"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateOnboardingStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["onboardingStep"]
                                  },
                                  operation: 0,
                                  value: 0
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateOnboardingStep"] != null &&
                            typeof $steps["updateOnboardingStep"] ===
                              "object" &&
                            typeof $steps["updateOnboardingStep"].then ===
                              "function"
                          ) {
                            $steps["updateOnboardingStep"] = await $steps[
                              "updateOnboardingStep"
                            ];
                          }
                        }}
                        submitsForm={true}
                        type={"bordered"}
                      />

                      <Button
                        data-plasmic-name={"buttonSubscription"}
                        data-plasmic-override={overrides.buttonSubscription}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonSubscription
                        )}
                        disabled={(() => {
                          try {
                            return $state.productId === "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___5X6Lx
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={"souscrire"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["stripeCheckoutSession"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "iWyefF3oqfc9knnzuF1Fin",
                                    opId: "edac38f5-7e6a-4471-abc9-1fae839a1f82",
                                    userArgs: {
                                      params: [
                                        $queries.stripeProductsList.data.response.data.find(
                                          product =>
                                            product.id === $state.productId
                                        ).default_price.id,
                                        (() => {
                                          const currentUrl =
                                            window.location.href;
                                          function extractDomain(url) {
                                            const domainMatch = url.match(
                                              /^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i
                                            );
                                            return domainMatch
                                              ? domainMatch[1]
                                              : null;
                                          }
                                          const domain =
                                            extractDomain(currentUrl);
                                          return (
                                            "https://" +
                                            domain +
                                            "/offre-employeur?onboarding=success&session_id={CHECKOUT_SESSION_ID}"
                                          );
                                        })(),
                                        (() => {
                                          const currentUrl =
                                            window.location.href;
                                          function extractDomain(url) {
                                            const domainMatch = url.match(
                                              /^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i
                                            );
                                            return domainMatch
                                              ? domainMatch[1]
                                              : null;
                                          }
                                          const domain =
                                            extractDomain(currentUrl);
                                          return (
                                            "https://" +
                                            domain +
                                            "/offre-employeur?onboarding=profil&stripe=cancel"
                                          );
                                        })(),
                                        $ctx.SupabaseUser.user.email
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: null,
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["stripeCheckoutSession"] != null &&
                            typeof $steps["stripeCheckoutSession"] ===
                              "object" &&
                            typeof $steps["stripeCheckoutSession"].then ===
                              "function"
                          ) {
                            $steps["stripeCheckoutSession"] = await $steps[
                              "stripeCheckoutSession"
                            ];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return $steps.stripeCheckoutSession.data
                                        .response.url;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        submitsForm={true}
                      />
                    </Stack__>
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return (
                      $ctx.query.onboarding === "success" ||
                      $ctx.query.onboarding === "done"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"step2"}
                    data-plasmic-override={overrides.step2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.step2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__napWg)}
                    >
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__e2RWs)}
                        role={"img"}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u3OT
                      )}
                    >
                      {"Paiement effectu\u00e9"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ionSb
                      )}
                    >
                      {"Votre profil a bien \u00e9t\u00e9 cr\u00e9e."}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___39BKf
                      )}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ogkgk
                        )}
                        end={
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__u52P4
                            )}
                            role={"img"}
                          />
                        }
                        iconEnd={true}
                        label={'publier une offre d"emploi'}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateShowModal"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["showModal"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateShowModal"] != null &&
                            typeof $steps["updateShowModal"] === "object" &&
                            typeof $steps["updateShowModal"].then === "function"
                          ) {
                            $steps["updateShowModal"] = await $steps[
                              "updateShowModal"
                            ];
                          }

                          $steps["updateHiddeModal"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["hiddeModal"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateHiddeModal"] != null &&
                            typeof $steps["updateHiddeModal"] === "object" &&
                            typeof $steps["updateHiddeModal"].then ===
                              "function"
                          ) {
                            $steps["updateHiddeModal"] = await $steps[
                              "updateHiddeModal"
                            ];
                          }
                        }}
                      />
                    </div>
                  </Stack__>
                ) : null}
                <ProgressBar
                  className={classNames(
                    "__wab_instance",
                    sty.progressBar__eB6Jf
                  )}
                  step1={(() => {
                    try {
                      return $state.onboardingStep >= 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  step2={(() => {
                    try {
                      return $state.onboardingStep >= 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  step3={(() => {
                    try {
                      return (
                        $ctx.query.onboarding === "success" ||
                        $ctx.query.onboarding === "done"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                />
              </Stack__>
            </div>
          ) : null}
          <MobileNavbarBottom2
            data-plasmic-name={"mobileNavbarBottom2"}
            data-plasmic-override={overrides.mobileNavbarBottom2}
            className={classNames("__wab_instance", sty.mobileNavbarBottom2)}
          />

          <Modal
            data-plasmic-name={"insufficientCharges"}
            data-plasmic-override={overrides.insufficientCharges}
            className={classNames("__wab_instance", sty.insufficientCharges)}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wuVFt)}
              >
                <ReshotIconAlert7T6Wum8VleSvgIcon
                  className={classNames(projectcss.all, sty.svg__dpQld)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["postgresUpdateMany"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "kVSSe8ab4TtzwRPnTeEeUp",
                              opId: "e205d484-80c7-4de7-b5c0-7d0135a1a283",
                              userArgs: {
                                conditions: [$ctx.SupabaseUser.user.id],
                                variables: [null]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateMany"] != null &&
                      typeof $steps["postgresUpdateMany"] === "object" &&
                      typeof $steps["postgresUpdateMany"].then === "function"
                    ) {
                      $steps["postgresUpdateMany"] = await $steps[
                        "postgresUpdateMany"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l4Z6T
                  )}
                >
                  {"Cr\u00e9dits insuffisants"}
                </div>
                <div
                  data-plasmic-name={"e3"}
                  data-plasmic-override={overrides.e3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.e3
                  )}
                >
                  {
                    "Vous avez utilis\u00e9 tous vos cr\u00e9dits. Pour publier votre offre, \nveuillez racheter des cr\u00e9dits, ou attendre le \nrenouvellement de votre abonnement."
                  }
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lxWj2)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__gGh7)}
                    color={"white"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ij2R7
                        )}
                      >
                        {"annuler"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateInsufficientChargesIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["insufficientCharges", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateInsufficientChargesIsOpen"] != null &&
                        typeof $steps["updateInsufficientChargesIsOpen"] ===
                          "object" &&
                        typeof $steps["updateInsufficientChargesIsOpen"]
                          .then === "function"
                      ) {
                        $steps["updateInsufficientChargesIsOpen"] =
                          await $steps["updateInsufficientChargesIsOpen"];
                      }
                    }}
                    type={"bordered"}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__yB3H)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg___4Dhfv)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tDnZl
                        )}
                      >
                        {"racheter des cr\u00e9dits"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateRechargeLastMinuteIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["rechargeLastMinute", "isOpen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRechargeLastMinuteIsOpen"] != null &&
                        typeof $steps["updateRechargeLastMinuteIsOpen"] ===
                          "object" &&
                        typeof $steps["updateRechargeLastMinuteIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateRechargeLastMinuteIsOpen"] = await $steps[
                          "updateRechargeLastMinuteIsOpen"
                        ];
                      }
                    }}
                  />
                </Stack__>
              </Stack__>
            }
            footer={
              <div className={classNames(projectcss.all, sty.freeBox__xtJo)} />
            }
            heading={
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__qIf6
                )}
              >
                {"Heading"}
              </h3>
            }
            isOpen={generateStateValueProp($state, [
              "insufficientCharges",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "insufficientCharges",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <JamButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                icon={"none"}
              />
            }
          />

          <Modal
            data-plasmic-name={"rechargeLastMinute"}
            data-plasmic-override={overrides.rechargeLastMinute}
            className={classNames("__wab_instance", sty.rechargeLastMinute)}
            content={
              <Stack__
                as={"div"}
                data-plasmic-name={"recharges"}
                data-plasmic-override={overrides.recharges}
                hasGap={true}
                className={classNames(projectcss.all, sty.recharges)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8D4L
                  )}
                >
                  {"Recharges"}
                </div>
                <div
                  data-plasmic-name={"rechargesList"}
                  data-plasmic-override={overrides.rechargesList}
                  className={classNames(projectcss.all, sty.rechargesList)}
                >
                  <div
                    data-plasmic-name={"classic"}
                    data-plasmic-override={overrides.classic}
                    className={classNames(projectcss.all, sty.classic)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2FGl5
                      )}
                    >
                      <IconPhBriefcaseIcon
                        className={classNames(projectcss.all, sty.svg__pz6Gd)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3Vakd
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre classique"}
                          </span>
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ofaUh)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fTkC8
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[2].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect"}
                        data-plasmic-override={overrides.inputComboSelect}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__syiRi
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ($state.inputComboSelect.value *
                                  $queries.stripeProductsList.data.response
                                    .data[2].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </div>
                  <div
                    data-plasmic-name={"lastminust"}
                    data-plasmic-override={overrides.lastminust}
                    className={classNames(projectcss.all, sty.lastminust)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ytYeB)}
                    >
                      <PhClockCountdownFillIcon
                        className={classNames(projectcss.all, sty.svg__lijV1)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Ef1T
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre Last Minute"}
                          </span>
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fLwdU)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oy1Da
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[1].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect2"}
                        data-plasmic-override={overrides.inputComboSelect2}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect2
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect2",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect2",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0KHr2
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ($state.inputComboSelect2.value *
                                  $queries.stripeProductsList.data.response
                                    .data[1].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </div>
                  <div
                    data-plasmic-name={"boost"}
                    data-plasmic-override={overrides.boost}
                    className={classNames(projectcss.all, sty.boost)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__t8KdP)}
                    >
                      <Icon15Icon
                        className={classNames(projectcss.all, sty.svg__s8Qb)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__maFhi
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 400 }}
                          >
                            {"Offre Boost\u00e9es"}
                          </span>
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wml6Z)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xQuh0
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $queries.stripeProductsList.data.response
                                  .data[0].default_price.unit_amount /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <InputComboSelect
                        data-plasmic-name={"inputComboSelect3"}
                        data-plasmic-override={overrides.inputComboSelect3}
                        className={classNames(
                          "__wab_instance",
                          sty.inputComboSelect3
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "inputComboSelect3",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        value={generateStateValueProp($state, [
                          "inputComboSelect3",
                          "value"
                        ])}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___26Ja4
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ($state.inputComboSelect3.value *
                                  $queries.stripeProductsList.data.response
                                    .data[0].default_price.unit_amount) /
                                  100 +
                                "\u20AC"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "9\u20ac";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dumov)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wK3Sk
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {"Code promotionnel"}
                      </span>
                    </React.Fragment>
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput21"}
                    data-plasmic-override={overrides.textInput21}
                    className={classNames("__wab_instance", sty.textInput21)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textInput21",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"CODEPROMO"}
                  />
                </Stack__>
                <div
                  data-plasmic-name={"totalAmount"}
                  data-plasmic-override={overrides.totalAmount}
                  className={classNames(projectcss.all, sty.totalAmount)}
                >
                  <div
                    data-plasmic-name={"total"}
                    data-plasmic-override={overrides.total}
                    className={classNames(projectcss.all, sty.total)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8DmYn
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 500 }}
                        >
                          {"Total"}
                        </span>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"amount"}
                    data-plasmic-override={overrides.amount}
                    className={classNames(projectcss.all, sty.amount)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zs1XZ
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              ($state.inputComboSelect.value *
                                $queries.stripeProductsList.data.response
                                  .data[2].default_price.unit_amount) /
                                100 +
                              ($state.inputComboSelect2.value *
                                $queries.stripeProductsList.data.response
                                  .data[1].default_price.unit_amount) /
                                100 +
                              ($state.inputComboSelect3.value *
                                $queries.stripeProductsList.data.response
                                  .data[0].default_price.unit_amount) /
                                100 +
                              "\u20AC HT"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ynRe)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__gCaf9)}
                    end={
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__bDsEv)}
                        role={"img"}
                      />
                    }
                    iconEnd={true}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__coNg
                        )}
                      >
                        {"acheter les cr\u00e9dits"}
                      </div>
                    }
                  />
                </div>
              </Stack__>
            }
            heading={
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__nkehn
                )}
              >
                {"Heading"}
              </h3>
            }
            isOpen={generateStateValueProp($state, [
              "rechargeLastMinute",
              "isOpen"
            ])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "rechargeLastMinute",
                "isOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <JamButton
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames("__wab_instance", sty.button3)}
                icon={"none"}
              />
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  espaceEmployeur: [
    "espaceEmployeur",
    "mobileNavbarTop",
    "editOffre",
    "form6",
    "textInput20",
    "select20",
    "select21",
    "select22",
    "select23",
    "timePicker",
    "timePicker2",
    "select24",
    "switch2",
    "select25",
    "select26",
    "rue2",
    "codePosteVille2",
    "codePostal2",
    "ville2",
    "select27",
    "textAreaInput3",
    "textAreaInput4",
    "jobDetails",
    "jobListing",
    "frame38",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation",
    "deleteOffre",
    "e2",
    "onBoarding",
    "sidebar2",
    "main",
    "heading2",
    "annonces3",
    "jobOffersCard",
    "switch3",
    "noAnnonce2",
    "featuredIcon3",
    "textAndSupportingText3",
    "text7",
    "supportingText3",
    "infoEntreprise",
    "form",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "textInput",
    "textArea",
    "textInput3",
    "textInput4",
    "textInput6",
    "select5",
    "textInput5",
    "select3",
    "select4",
    "textInput7",
    "upload",
    "content",
    "upload3",
    "content2",
    "button2",
    "profilCreate",
    "createOffre",
    "form2",
    "textInput8",
    "select6",
    "select7",
    "select8",
    "select9",
    "timePicker3",
    "timePicker4",
    "select12",
    "_switch",
    "select14",
    "select13",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select10",
    "textAreaInput",
    "textAreaInput2",
    "stopInscription",
    "e",
    "modalOnboarding",
    "stripeCancel",
    "stripeCheckout",
    "modal",
    "close",
    "icon",
    "closeAfterSuccess",
    "icon2",
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textArea4",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select18",
    "select19",
    "textInput19",
    "upload8",
    "content5",
    "upload9",
    "content6",
    "step1",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription",
    "step2",
    "mobileNavbarBottom2",
    "insufficientCharges",
    "button",
    "e3",
    "rechargeLastMinute",
    "button3",
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput21",
    "totalAmount",
    "total",
    "amount"
  ],
  mobileNavbarTop: ["mobileNavbarTop"],
  editOffre: [
    "editOffre",
    "form6",
    "textInput20",
    "select20",
    "select21",
    "select22",
    "select23",
    "timePicker",
    "timePicker2",
    "select24",
    "switch2",
    "select25",
    "select26",
    "rue2",
    "codePosteVille2",
    "codePostal2",
    "ville2",
    "select27",
    "textAreaInput3",
    "textAreaInput4"
  ],
  form6: [
    "form6",
    "textInput20",
    "select20",
    "select21",
    "select22",
    "select23",
    "timePicker",
    "timePicker2",
    "select24",
    "switch2",
    "select25",
    "select26",
    "rue2",
    "codePosteVille2",
    "codePostal2",
    "ville2",
    "select27",
    "textAreaInput3",
    "textAreaInput4"
  ],
  textInput20: ["textInput20"],
  select20: ["select20"],
  select21: ["select21"],
  select22: ["select22"],
  select23: ["select23"],
  timePicker: ["timePicker"],
  timePicker2: ["timePicker2"],
  select24: ["select24"],
  switch2: ["switch2"],
  select25: ["select25"],
  select26: ["select26"],
  rue2: ["rue2"],
  codePosteVille2: ["codePosteVille2", "codePostal2", "ville2"],
  codePostal2: ["codePostal2"],
  ville2: ["ville2"],
  select27: ["select27"],
  textAreaInput3: ["textAreaInput3"],
  textAreaInput4: ["textAreaInput4"],
  jobDetails: [
    "jobDetails",
    "jobListing",
    "frame38",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation"
  ],
  jobListing: [
    "jobListing",
    "frame38",
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51",
    "jobDescriptionContainer",
    "benefits",
    "expectedProfileContainer",
    "companyContainer",
    "logoContainer",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation"
  ],
  frame38: ["frame38"],
  jobDetail: [
    "jobDetail",
    "location",
    "frame46",
    "frame47",
    "frame48",
    "frame49",
    "frame50",
    "frame51"
  ],
  location: ["location"],
  frame46: ["frame46", "frame47", "frame48", "frame49", "frame50", "frame51"],
  frame47: ["frame47", "frame48", "frame49", "frame50", "frame51"],
  frame48: ["frame48"],
  frame49: ["frame49"],
  frame50: ["frame50"],
  frame51: ["frame51"],
  jobDescriptionContainer: ["jobDescriptionContainer", "benefits"],
  benefits: ["benefits"],
  expectedProfileContainer: ["expectedProfileContainer"],
  companyContainer: [
    "companyContainer",
    "logoContainer",
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation"
  ],
  logoContainer: ["logoContainer"],
  companyDetail: [
    "companyDetail",
    "sectorActivity",
    "dkTrucksPark5",
    "companySize",
    "companyLocation"
  ],
  sectorActivity: ["sectorActivity", "dkTrucksPark5"],
  dkTrucksPark5: ["dkTrucksPark5"],
  companySize: ["companySize"],
  companyLocation: ["companyLocation"],
  deleteOffre: ["deleteOffre", "e2"],
  e2: ["e2"],
  onBoarding: ["onBoarding"],
  sidebar2: ["sidebar2"],
  main: [
    "main",
    "heading2",
    "annonces3",
    "jobOffersCard",
    "switch3",
    "noAnnonce2",
    "featuredIcon3",
    "textAndSupportingText3",
    "text7",
    "supportingText3"
  ],
  heading2: ["heading2"],
  annonces3: ["annonces3", "jobOffersCard", "switch3"],
  jobOffersCard: ["jobOffersCard", "switch3"],
  switch3: ["switch3"],
  noAnnonce2: [
    "noAnnonce2",
    "featuredIcon3",
    "textAndSupportingText3",
    "text7",
    "supportingText3"
  ],
  featuredIcon3: ["featuredIcon3"],
  textAndSupportingText3: [
    "textAndSupportingText3",
    "text7",
    "supportingText3"
  ],
  text7: ["text7"],
  supportingText3: ["supportingText3"],
  infoEntreprise: [
    "infoEntreprise",
    "form",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "textInput",
    "textArea",
    "textInput3",
    "textInput4",
    "textInput6",
    "select5",
    "textInput5",
    "select3",
    "select4",
    "textInput7",
    "upload",
    "content",
    "upload3",
    "content2",
    "button2"
  ],
  form: [
    "form",
    "upload2",
    "editIcon",
    "frame7",
    "deleteIcon",
    "frame8",
    "textInput",
    "textArea",
    "textInput3",
    "textInput4",
    "textInput6",
    "select5",
    "textInput5",
    "select3",
    "select4",
    "textInput7",
    "upload",
    "content",
    "upload3",
    "content2"
  ],
  upload2: ["upload2", "editIcon", "frame7", "deleteIcon", "frame8"],
  editIcon: ["editIcon", "frame7"],
  frame7: ["frame7"],
  deleteIcon: ["deleteIcon", "frame8"],
  frame8: ["frame8"],
  textInput: ["textInput"],
  textArea: ["textArea"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  textInput6: ["textInput6"],
  select5: ["select5"],
  textInput5: ["textInput5"],
  select3: ["select3"],
  select4: ["select4"],
  textInput7: ["textInput7"],
  upload: ["upload", "content"],
  content: ["content"],
  upload3: ["upload3", "content2"],
  content2: ["content2"],
  button2: ["button2"],
  profilCreate: ["profilCreate"],
  createOffre: [
    "createOffre",
    "form2",
    "textInput8",
    "select6",
    "select7",
    "select8",
    "select9",
    "timePicker3",
    "timePicker4",
    "select12",
    "_switch",
    "select14",
    "select13",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select10",
    "textAreaInput",
    "textAreaInput2"
  ],
  form2: [
    "form2",
    "textInput8",
    "select6",
    "select7",
    "select8",
    "select9",
    "timePicker3",
    "timePicker4",
    "select12",
    "_switch",
    "select14",
    "select13",
    "rue",
    "codePosteVille",
    "codePostal",
    "ville",
    "select10",
    "textAreaInput",
    "textAreaInput2"
  ],
  textInput8: ["textInput8"],
  select6: ["select6"],
  select7: ["select7"],
  select8: ["select8"],
  select9: ["select9"],
  timePicker3: ["timePicker3"],
  timePicker4: ["timePicker4"],
  select12: ["select12"],
  _switch: ["_switch"],
  select14: ["select14"],
  select13: ["select13"],
  rue: ["rue"],
  codePosteVille: ["codePosteVille", "codePostal", "ville"],
  codePostal: ["codePostal"],
  ville: ["ville"],
  select10: ["select10"],
  textAreaInput: ["textAreaInput"],
  textAreaInput2: ["textAreaInput2"],
  stopInscription: ["stopInscription", "e"],
  e: ["e"],
  modalOnboarding: [
    "modalOnboarding",
    "stripeCancel",
    "stripeCheckout",
    "modal",
    "close",
    "icon",
    "closeAfterSuccess",
    "icon2",
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textArea4",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select18",
    "select19",
    "textInput19",
    "upload8",
    "content5",
    "upload9",
    "content6",
    "step1",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription",
    "step2"
  ],
  stripeCancel: ["stripeCancel"],
  stripeCheckout: ["stripeCheckout"],
  modal: [
    "modal",
    "close",
    "icon",
    "closeAfterSuccess",
    "icon2",
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textArea4",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select18",
    "select19",
    "textInput19",
    "upload8",
    "content5",
    "upload9",
    "content6",
    "step1",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription",
    "step2"
  ],
  close: ["close", "icon"],
  icon: ["icon"],
  closeAfterSuccess: ["closeAfterSuccess", "icon2"],
  icon2: ["icon2"],
  step0: [
    "step0",
    "logo",
    "form3",
    "input",
    "textArea3",
    "input2",
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4",
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textArea4",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select18",
    "select19",
    "textInput19",
    "upload8",
    "content5",
    "upload9",
    "content6"
  ],
  logo: ["logo"],
  form3: ["form3", "input", "textArea3", "input2"],
  input: ["input"],
  textArea3: ["textArea3"],
  input2: ["input2"],
  form4: [
    "form4",
    "upload4",
    "editIcon2",
    "frame9",
    "deleteIcon2",
    "frame10",
    "textInput2",
    "textArea2",
    "textInput9",
    "textInput10",
    "textInput11",
    "select11",
    "textInput12",
    "select15",
    "select16",
    "textInput13",
    "upload5",
    "content3",
    "upload6",
    "content4"
  ],
  upload4: ["upload4", "editIcon2", "frame9", "deleteIcon2", "frame10"],
  editIcon2: ["editIcon2", "frame9"],
  frame9: ["frame9"],
  deleteIcon2: ["deleteIcon2", "frame10"],
  frame10: ["frame10"],
  textInput2: ["textInput2"],
  textArea2: ["textArea2"],
  textInput9: ["textInput9"],
  textInput10: ["textInput10"],
  textInput11: ["textInput11"],
  select11: ["select11"],
  textInput12: ["textInput12"],
  select15: ["select15"],
  select16: ["select16"],
  textInput13: ["textInput13"],
  upload5: ["upload5", "content3"],
  content3: ["content3"],
  upload6: ["upload6", "content4"],
  content4: ["content4"],
  form5: [
    "form5",
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12",
    "textInput14",
    "textArea4",
    "textInput15",
    "textInput16",
    "textInput17",
    "select17",
    "textInput18",
    "select18",
    "select19",
    "textInput19",
    "upload8",
    "content5",
    "upload9",
    "content6"
  ],
  upload7: [
    "upload7",
    "icones",
    "editIcon3",
    "frame11",
    "deleteIcon3",
    "frame12"
  ],
  icones: ["icones", "editIcon3", "frame11", "deleteIcon3", "frame12"],
  editIcon3: ["editIcon3", "frame11"],
  frame11: ["frame11"],
  deleteIcon3: ["deleteIcon3", "frame12"],
  frame12: ["frame12"],
  textInput14: ["textInput14"],
  textArea4: ["textArea4"],
  textInput15: ["textInput15"],
  textInput16: ["textInput16"],
  textInput17: ["textInput17"],
  select17: ["select17"],
  textInput18: ["textInput18"],
  select18: ["select18"],
  select19: ["select19"],
  textInput19: ["textInput19"],
  upload8: ["upload8", "content5"],
  content5: ["content5"],
  upload9: ["upload9", "content6"],
  content6: ["content6"],
  step1: [
    "step1",
    "subscription",
    "productCard",
    "actions",
    "buttonBack",
    "buttonSubscription"
  ],
  subscription: ["subscription", "productCard"],
  productCard: ["productCard"],
  actions: ["actions", "buttonBack", "buttonSubscription"],
  buttonBack: ["buttonBack"],
  buttonSubscription: ["buttonSubscription"],
  step2: ["step2"],
  mobileNavbarBottom2: ["mobileNavbarBottom2"],
  insufficientCharges: ["insufficientCharges", "button", "e3"],
  button: ["button"],
  e3: ["e3"],
  rechargeLastMinute: [
    "rechargeLastMinute",
    "button3",
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput21",
    "totalAmount",
    "total",
    "amount"
  ],
  button3: ["button3"],
  recharges: [
    "recharges",
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3",
    "textInput21",
    "totalAmount",
    "total",
    "amount"
  ],
  rechargesList: [
    "rechargesList",
    "classic",
    "inputComboSelect",
    "lastminust",
    "inputComboSelect2",
    "boost",
    "inputComboSelect3"
  ],
  classic: ["classic", "inputComboSelect"],
  inputComboSelect: ["inputComboSelect"],
  lastminust: ["lastminust", "inputComboSelect2"],
  inputComboSelect2: ["inputComboSelect2"],
  boost: ["boost", "inputComboSelect3"],
  inputComboSelect3: ["inputComboSelect3"],
  textInput21: ["textInput21"],
  totalAmount: ["totalAmount", "total", "amount"],
  total: ["total"],
  amount: ["amount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  espaceEmployeur: "div";
  mobileNavbarTop: typeof MobileNavbarTop;
  editOffre: typeof Modal;
  form6: typeof FormWrapper;
  textInput20: typeof TextInput;
  select20: typeof AntdSelect;
  select21: typeof AntdSelect;
  select22: typeof AntdSelect;
  select23: typeof AntdSelect;
  timePicker: typeof AntdDatePicker;
  timePicker2: typeof AntdDatePicker;
  select24: typeof AntdSelect;
  switch2: typeof Switch;
  select25: typeof AntdSelect;
  select26: typeof AntdSelect;
  rue2: typeof TextInput;
  codePosteVille2: "div";
  codePostal2: typeof TextInput;
  ville2: typeof TextInput;
  select27: typeof Select;
  textAreaInput3: typeof TextAreaInput;
  textAreaInput4: typeof TextAreaInput;
  jobDetails: typeof Modal;
  jobListing: "div";
  frame38: "div";
  jobDetail: "div";
  location: "div";
  frame46: "div";
  frame47: "div";
  frame48: "div";
  frame49: "div";
  frame50: "div";
  frame51: "div";
  jobDescriptionContainer: "div";
  benefits: "div";
  expectedProfileContainer: "div";
  companyContainer: "div";
  logoContainer: "div";
  companyDetail: "div";
  sectorActivity: "div";
  dkTrucksPark5: "div";
  companySize: "div";
  companyLocation: "div";
  deleteOffre: typeof Modal;
  e2: "div";
  onBoarding: typeof PageLoader;
  sidebar2: typeof Sidebar2;
  main: "main";
  heading2: "h1";
  annonces3: "div";
  jobOffersCard: typeof JobOffersCard;
  switch3: typeof Switch;
  noAnnonce2: "div";
  featuredIcon3: "div";
  textAndSupportingText3: "div";
  text7: "div";
  supportingText3: "div";
  infoEntreprise: typeof Modal;
  form: typeof FormWrapper;
  upload2: typeof UploadWrapper;
  editIcon: "div";
  frame7: "div";
  deleteIcon: "div";
  frame8: "div";
  textInput: typeof TextInput;
  textArea: typeof AntdTextArea;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  textInput6: typeof TextInput;
  select5: typeof Select;
  textInput5: typeof TextInput;
  select3: typeof AntdSelect;
  select4: typeof AntdSelect;
  textInput7: typeof TextInput;
  upload: typeof UploadWrapper;
  content: "div";
  upload3: typeof UploadWrapper;
  content2: "div";
  button2: typeof JamButton;
  profilCreate: typeof Modal;
  createOffre: typeof Modal;
  form2: typeof FormWrapper;
  textInput8: typeof TextInput;
  select6: typeof AntdSelect;
  select7: typeof AntdSelect;
  select8: typeof AntdSelect;
  select9: typeof AntdSelect;
  timePicker3: typeof AntdDatePicker;
  timePicker4: typeof AntdDatePicker;
  select12: typeof AntdSelect;
  _switch: typeof Switch;
  select14: typeof AntdSelect;
  select13: typeof AntdSelect;
  rue: typeof TextInput;
  codePosteVille: "div";
  codePostal: typeof TextInput;
  ville: typeof TextInput;
  select10: typeof Select;
  textAreaInput: typeof TextAreaInput;
  textAreaInput2: typeof TextAreaInput;
  stopInscription: typeof Modal;
  e: "div";
  modalOnboarding: "div";
  stripeCancel: typeof PageLoader;
  stripeCheckout: typeof SmartLoader;
  modal: "div";
  close: "div";
  icon: "svg";
  closeAfterSuccess: "div";
  icon2: "svg";
  step0: "div";
  logo: "div";
  form3: typeof FormWrapper;
  input: typeof AntdInput;
  textArea3: typeof AntdTextArea;
  input2: typeof AntdInput;
  form4: typeof FormWrapper;
  upload4: typeof UploadWrapper;
  editIcon2: "div";
  frame9: "div";
  deleteIcon2: "div";
  frame10: "div";
  textInput2: typeof TextInput;
  textArea2: typeof AntdTextArea;
  textInput9: typeof TextInput;
  textInput10: typeof TextInput;
  textInput11: typeof TextInput;
  select11: typeof Select;
  textInput12: typeof TextInput;
  select15: typeof AntdSelect;
  select16: typeof AntdSelect;
  textInput13: typeof TextInput;
  upload5: typeof UploadWrapper;
  content3: "div";
  upload6: typeof UploadWrapper;
  content4: "div";
  form5: typeof FormWrapper;
  upload7: typeof UploadWrapper;
  icones: "div";
  editIcon3: "div";
  frame11: "div";
  deleteIcon3: "div";
  frame12: "div";
  textInput14: typeof TextInput;
  textArea4: typeof AntdTextArea;
  textInput15: typeof TextInput;
  textInput16: typeof TextInput;
  textInput17: typeof TextInput;
  select17: typeof Select;
  textInput18: typeof TextInput;
  select18: typeof AntdSelect;
  select19: typeof AntdSelect;
  textInput19: typeof TextInput;
  upload8: typeof UploadWrapper;
  content5: "div";
  upload9: typeof UploadWrapper;
  content6: "div";
  step1: "div";
  subscription: "div";
  productCard: typeof ProductCard;
  actions: "div";
  buttonBack: typeof Button;
  buttonSubscription: typeof Button;
  step2: "div";
  mobileNavbarBottom2: typeof MobileNavbarBottom2;
  insufficientCharges: typeof Modal;
  button: typeof JamButton;
  e3: "div";
  rechargeLastMinute: typeof Modal;
  button3: typeof JamButton;
  recharges: "div";
  rechargesList: "div";
  classic: "div";
  inputComboSelect: typeof InputComboSelect;
  lastminust: "div";
  inputComboSelect2: typeof InputComboSelect;
  boost: "div";
  inputComboSelect3: typeof InputComboSelect;
  textInput21: typeof TextInput;
  totalAmount: "div";
  total: "div";
  amount: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOffreEmployeur__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOffreEmployeur__VariantsArgs;
    args?: PlasmicOffreEmployeur__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOffreEmployeur__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOffreEmployeur__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOffreEmployeur__ArgProps,
          internalVariantPropNames: PlasmicOffreEmployeur__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOffreEmployeur__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "espaceEmployeur") {
    func.displayName = "PlasmicOffreEmployeur";
  } else {
    func.displayName = `PlasmicOffreEmployeur.${nodeName}`;
  }
  return func;
}

export const PlasmicOffreEmployeur = Object.assign(
  // Top-level PlasmicOffreEmployeur renders the root element
  makeNodeComponent("espaceEmployeur"),
  {
    // Helper components rendering sub-elements
    mobileNavbarTop: makeNodeComponent("mobileNavbarTop"),
    editOffre: makeNodeComponent("editOffre"),
    form6: makeNodeComponent("form6"),
    textInput20: makeNodeComponent("textInput20"),
    select20: makeNodeComponent("select20"),
    select21: makeNodeComponent("select21"),
    select22: makeNodeComponent("select22"),
    select23: makeNodeComponent("select23"),
    timePicker: makeNodeComponent("timePicker"),
    timePicker2: makeNodeComponent("timePicker2"),
    select24: makeNodeComponent("select24"),
    switch2: makeNodeComponent("switch2"),
    select25: makeNodeComponent("select25"),
    select26: makeNodeComponent("select26"),
    rue2: makeNodeComponent("rue2"),
    codePosteVille2: makeNodeComponent("codePosteVille2"),
    codePostal2: makeNodeComponent("codePostal2"),
    ville2: makeNodeComponent("ville2"),
    select27: makeNodeComponent("select27"),
    textAreaInput3: makeNodeComponent("textAreaInput3"),
    textAreaInput4: makeNodeComponent("textAreaInput4"),
    jobDetails: makeNodeComponent("jobDetails"),
    jobListing: makeNodeComponent("jobListing"),
    frame38: makeNodeComponent("frame38"),
    jobDetail: makeNodeComponent("jobDetail"),
    location: makeNodeComponent("location"),
    frame46: makeNodeComponent("frame46"),
    frame47: makeNodeComponent("frame47"),
    frame48: makeNodeComponent("frame48"),
    frame49: makeNodeComponent("frame49"),
    frame50: makeNodeComponent("frame50"),
    frame51: makeNodeComponent("frame51"),
    jobDescriptionContainer: makeNodeComponent("jobDescriptionContainer"),
    benefits: makeNodeComponent("benefits"),
    expectedProfileContainer: makeNodeComponent("expectedProfileContainer"),
    companyContainer: makeNodeComponent("companyContainer"),
    logoContainer: makeNodeComponent("logoContainer"),
    companyDetail: makeNodeComponent("companyDetail"),
    sectorActivity: makeNodeComponent("sectorActivity"),
    dkTrucksPark5: makeNodeComponent("dkTrucksPark5"),
    companySize: makeNodeComponent("companySize"),
    companyLocation: makeNodeComponent("companyLocation"),
    deleteOffre: makeNodeComponent("deleteOffre"),
    e2: makeNodeComponent("e2"),
    onBoarding: makeNodeComponent("onBoarding"),
    sidebar2: makeNodeComponent("sidebar2"),
    main: makeNodeComponent("main"),
    heading2: makeNodeComponent("heading2"),
    annonces3: makeNodeComponent("annonces3"),
    jobOffersCard: makeNodeComponent("jobOffersCard"),
    switch3: makeNodeComponent("switch3"),
    noAnnonce2: makeNodeComponent("noAnnonce2"),
    featuredIcon3: makeNodeComponent("featuredIcon3"),
    textAndSupportingText3: makeNodeComponent("textAndSupportingText3"),
    text7: makeNodeComponent("text7"),
    supportingText3: makeNodeComponent("supportingText3"),
    infoEntreprise: makeNodeComponent("infoEntreprise"),
    form: makeNodeComponent("form"),
    upload2: makeNodeComponent("upload2"),
    editIcon: makeNodeComponent("editIcon"),
    frame7: makeNodeComponent("frame7"),
    deleteIcon: makeNodeComponent("deleteIcon"),
    frame8: makeNodeComponent("frame8"),
    textInput: makeNodeComponent("textInput"),
    textArea: makeNodeComponent("textArea"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    textInput6: makeNodeComponent("textInput6"),
    select5: makeNodeComponent("select5"),
    textInput5: makeNodeComponent("textInput5"),
    select3: makeNodeComponent("select3"),
    select4: makeNodeComponent("select4"),
    textInput7: makeNodeComponent("textInput7"),
    upload: makeNodeComponent("upload"),
    content: makeNodeComponent("content"),
    upload3: makeNodeComponent("upload3"),
    content2: makeNodeComponent("content2"),
    button2: makeNodeComponent("button2"),
    profilCreate: makeNodeComponent("profilCreate"),
    createOffre: makeNodeComponent("createOffre"),
    form2: makeNodeComponent("form2"),
    textInput8: makeNodeComponent("textInput8"),
    select6: makeNodeComponent("select6"),
    select7: makeNodeComponent("select7"),
    select8: makeNodeComponent("select8"),
    select9: makeNodeComponent("select9"),
    timePicker3: makeNodeComponent("timePicker3"),
    timePicker4: makeNodeComponent("timePicker4"),
    select12: makeNodeComponent("select12"),
    _switch: makeNodeComponent("_switch"),
    select14: makeNodeComponent("select14"),
    select13: makeNodeComponent("select13"),
    rue: makeNodeComponent("rue"),
    codePosteVille: makeNodeComponent("codePosteVille"),
    codePostal: makeNodeComponent("codePostal"),
    ville: makeNodeComponent("ville"),
    select10: makeNodeComponent("select10"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    textAreaInput2: makeNodeComponent("textAreaInput2"),
    stopInscription: makeNodeComponent("stopInscription"),
    e: makeNodeComponent("e"),
    modalOnboarding: makeNodeComponent("modalOnboarding"),
    stripeCancel: makeNodeComponent("stripeCancel"),
    stripeCheckout: makeNodeComponent("stripeCheckout"),
    modal: makeNodeComponent("modal"),
    close: makeNodeComponent("close"),
    icon: makeNodeComponent("icon"),
    closeAfterSuccess: makeNodeComponent("closeAfterSuccess"),
    icon2: makeNodeComponent("icon2"),
    step0: makeNodeComponent("step0"),
    logo: makeNodeComponent("logo"),
    form3: makeNodeComponent("form3"),
    input: makeNodeComponent("input"),
    textArea3: makeNodeComponent("textArea3"),
    input2: makeNodeComponent("input2"),
    form4: makeNodeComponent("form4"),
    upload4: makeNodeComponent("upload4"),
    editIcon2: makeNodeComponent("editIcon2"),
    frame9: makeNodeComponent("frame9"),
    deleteIcon2: makeNodeComponent("deleteIcon2"),
    frame10: makeNodeComponent("frame10"),
    textInput2: makeNodeComponent("textInput2"),
    textArea2: makeNodeComponent("textArea2"),
    textInput9: makeNodeComponent("textInput9"),
    textInput10: makeNodeComponent("textInput10"),
    textInput11: makeNodeComponent("textInput11"),
    select11: makeNodeComponent("select11"),
    textInput12: makeNodeComponent("textInput12"),
    select15: makeNodeComponent("select15"),
    select16: makeNodeComponent("select16"),
    textInput13: makeNodeComponent("textInput13"),
    upload5: makeNodeComponent("upload5"),
    content3: makeNodeComponent("content3"),
    upload6: makeNodeComponent("upload6"),
    content4: makeNodeComponent("content4"),
    form5: makeNodeComponent("form5"),
    upload7: makeNodeComponent("upload7"),
    icones: makeNodeComponent("icones"),
    editIcon3: makeNodeComponent("editIcon3"),
    frame11: makeNodeComponent("frame11"),
    deleteIcon3: makeNodeComponent("deleteIcon3"),
    frame12: makeNodeComponent("frame12"),
    textInput14: makeNodeComponent("textInput14"),
    textArea4: makeNodeComponent("textArea4"),
    textInput15: makeNodeComponent("textInput15"),
    textInput16: makeNodeComponent("textInput16"),
    textInput17: makeNodeComponent("textInput17"),
    select17: makeNodeComponent("select17"),
    textInput18: makeNodeComponent("textInput18"),
    select18: makeNodeComponent("select18"),
    select19: makeNodeComponent("select19"),
    textInput19: makeNodeComponent("textInput19"),
    upload8: makeNodeComponent("upload8"),
    content5: makeNodeComponent("content5"),
    upload9: makeNodeComponent("upload9"),
    content6: makeNodeComponent("content6"),
    step1: makeNodeComponent("step1"),
    subscription: makeNodeComponent("subscription"),
    productCard: makeNodeComponent("productCard"),
    actions: makeNodeComponent("actions"),
    buttonBack: makeNodeComponent("buttonBack"),
    buttonSubscription: makeNodeComponent("buttonSubscription"),
    step2: makeNodeComponent("step2"),
    mobileNavbarBottom2: makeNodeComponent("mobileNavbarBottom2"),
    insufficientCharges: makeNodeComponent("insufficientCharges"),
    button: makeNodeComponent("button"),
    e3: makeNodeComponent("e3"),
    rechargeLastMinute: makeNodeComponent("rechargeLastMinute"),
    button3: makeNodeComponent("button3"),
    recharges: makeNodeComponent("recharges"),
    rechargesList: makeNodeComponent("rechargesList"),
    classic: makeNodeComponent("classic"),
    inputComboSelect: makeNodeComponent("inputComboSelect"),
    lastminust: makeNodeComponent("lastminust"),
    inputComboSelect2: makeNodeComponent("inputComboSelect2"),
    boost: makeNodeComponent("boost"),
    inputComboSelect3: makeNodeComponent("inputComboSelect3"),
    textInput21: makeNodeComponent("textInput21"),
    totalAmount: makeNodeComponent("totalAmount"),
    total: makeNodeComponent("total"),
    amount: makeNodeComponent("amount"),

    // Metadata about props expected for PlasmicOffreEmployeur
    internalVariantProps: PlasmicOffreEmployeur__VariantProps,
    internalArgProps: PlasmicOffreEmployeur__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Espace employeur",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOffreEmployeur;
/* prettier-ignore-end */
